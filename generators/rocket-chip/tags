!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
0	src/main/resources/vsrc/SimJTAG.v	/^   wire         #0.1 __jtag_TDO = jtag_TDO_driven ? $/;"	n
A	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object A extends OMExtensionType$/;"	c
A1_PC	src/main/scala/rocket/Consts.scala	/^  def A1_PC   = UInt(2, 2)$/;"	m
A1_RS1	src/main/scala/rocket/Consts.scala	/^  def A1_RS1  = UInt(1, 2)$/;"	m
A1_X	src/main/scala/rocket/Consts.scala	/^  def A1_X    = BitPat("b??")$/;"	m
A1_ZERO	src/main/scala/rocket/Consts.scala	/^  def A1_ZERO = UInt(0, 2)$/;"	m
A2_IMM	src/main/scala/rocket/Consts.scala	/^  def A2_IMM  = UInt(3, 2)$/;"	m
A2_RS2	src/main/scala/rocket/Consts.scala	/^  def A2_RS2  = UInt(2, 2)$/;"	m
A2_SIZE	src/main/scala/rocket/Consts.scala	/^  def A2_SIZE = UInt(1, 2)$/;"	m
A2_X	src/main/scala/rocket/Consts.scala	/^  def A2_X    = BitPat("b??")$/;"	m
A2_ZERO	src/main/scala/rocket/Consts.scala	/^  def A2_ZERO = UInt(0, 2)$/;"	m
A64Decode	src/main/scala/rocket/IDecode.scala	/^class A64Decode(implicit val p: Parameters) extends DecodeConstants$/;"	c
ABSTRACT	src/main/scala/devices/debug/Debug.scala	/^  def ABSTRACT(cfg:DebugModuleParams) = PROGBUF(cfg) - (cfg.nAbstractInstructions * 4)$/;"	m
ABSTRACTAUTOFields	src/main/scala/devices/debug/dm_registers.scala	/^class ABSTRACTAUTOFields extends Bundle {$/;"	c
ABSTRACTAUTORdData	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTAUTORdData    = WireInit(ABSTRACTAUTOReg)$/;"	l
ABSTRACTAUTORdEn	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTAUTORdEn = WireInit(false.B)$/;"	l
ABSTRACTAUTOReg	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTAUTOReg       = Reg(new ABSTRACTAUTOFields())$/;"	l
ABSTRACTAUTOReset	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTAUTOReset     = WireInit(0.U.asTypeOf(new ABSTRACTAUTOFields()))$/;"	l
ABSTRACTAUTOWrData	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTAUTOWrData    = WireInit(0.U.asTypeOf(new ABSTRACTAUTOFields()))$/;"	l
ABSTRACTAUTOWrEnLegal	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTAUTOWrEnLegal = WireInit(false.B)$/;"	l
ABSTRACTCSFields	src/main/scala/devices/debug/dm_registers.scala	/^class ABSTRACTCSFields extends Bundle {$/;"	c
ABSTRACTCSRdData	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTCSRdData    = WireInit(ABSTRACTCSReg)$/;"	l
ABSTRACTCSRdEn	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTCSRdEn = WireInit(false.B)$/;"	l
ABSTRACTCSReg	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTCSReg       = Reg(new ABSTRACTCSFields())$/;"	l
ABSTRACTCSReset	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTCSReset = WireInit(0.U.asTypeOf(new ABSTRACTCSFields()))$/;"	l
ABSTRACTCSWrData	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTCSWrData    = WireInit(0.U.asTypeOf(new ABSTRACTCSFields()))$/;"	l
ABSTRACTCSWrEn	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTCSWrEn      = ABSTRACTCSWrEnMaybe && ABSTRACTCSWrEnLegal$/;"	l
ABSTRACTCSWrEnLegal	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTCSWrEnLegal = WireInit(false.B)$/;"	l
ABSTRACTCSWrEnMaybe	src/main/scala/devices/debug/Debug.scala	/^    val ABSTRACTCSWrEnMaybe = WireInit(false.B)$/;"	l
ABi	src/main/scala/tilelink/Isolation.scala	/^    def ABi[T <: Data](x: AsyncBundle[T], y: AsyncBundle[T]): Unit = {$/;"	m
ABo	src/main/scala/tilelink/Isolation.scala	/^    def ABo[T <: Data](x: AsyncBundle[T], y: AsyncBundle[T]): Unit = {$/;"	m
ABz	src/main/scala/tilelink/Isolation.scala	/^    def ABz[T <: Data](x: AsyncBundle[T], y: AsyncBundle[T]): Unit = {$/;"	m
ACCESS_REGISTERFields	src/main/scala/devices/debug/abstract_commands.scala	/^class ACCESS_REGISTERFields extends Bundle {$/;"	c
ACK	src/main/scala/tilelink/AtomicAutomata.scala	/^      val ACK  = UInt(1) \/\/ Put sent down A          waiting for PutAck from D$/;"	l
ACQ_RE	scripts/check_comparator_trace.py	/^ACQ_RE = re.compile(r"\\[acq\\s*(\\d+)\\]: (.*)")$/;"	v
AC_RegAddrs	src/main/scala/devices/debug/abstract_commands.scala	/^object AC_RegAddrs {$/;"	c
ADD	src/main/scala/rocket/Instructions.scala	/^  def ADD                = BitPat("b0000000??????????000?????0110011")$/;"	m
ADD	src/main/scala/tilelink/Bundles.scala	/^  def ADD  = UInt(4, width)$/;"	m
ADDI	src/main/scala/rocket/Instructions.scala	/^  def ADDI               = BitPat("b?????????????????000?????0010011")$/;"	m
ADDIW	src/main/scala/rocket/Instructions.scala	/^  def ADDIW              = BitPat("b?????????????????000?????0011011")$/;"	m
ADDIWU	src/main/scala/rocket/Instructions.scala	/^  def ADDIWU             = BitPat("b?????????????????100?????0011011")$/;"	m
ADDRSZ	src/main/scala/rocket/CSR.scala	/^  val ADDRSZ = 12$/;"	l
ADDU_W	src/main/scala/rocket/Instructions.scala	/^  def ADDU_W             = BitPat("b0000100??????????000?????0111011")$/;"	m
ADDW	src/main/scala/rocket/Instructions.scala	/^  def ADDW               = BitPat("b0000000??????????000?????0111011")$/;"	m
ADDWU	src/main/scala/rocket/Instructions.scala	/^  def ADDWU              = BitPat("b0000101??????????000?????0111011")$/;"	m
ADecode	src/main/scala/rocket/IDecode.scala	/^class ADecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
AHB	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class AHB($/;"	c
AHBArbiter	src/main/scala/amba/ahb/Xbar.scala	/^class AHBArbiter()(implicit p: Parameters) extends LazyModule {$/;"	c
AHBArbiterNode	src/main/scala/amba/ahb/Nodes.scala	/^case class AHBArbiterNode($/;"	c
AHBBridgeTest	src/main/scala/amba/ahb/Test.scala	/^class AHBBridgeTest(aFlow: Boolean, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
AHBBundleParameters	src/main/scala/amba/ahb/Parameters.scala	/^case class AHBBundleParameters($/;"	c
AHBBundleParameters	src/main/scala/amba/ahb/Parameters.scala	/^object AHBBundleParameters$/;"	c
AHBControlBundle	src/main/scala/tilelink/ToAHB.scala	/^class AHBControlBundle(params: TLEdge) extends GenericParameterizedBundle(params)$/;"	c
AHBEdgeParameters	src/main/scala/amba/ahb/Parameters.scala	/^case class AHBEdgeParameters($/;"	c
AHBExampleDevice	src/main/scala/examples/ExampleDevice.scala	/^class AHBExampleDevice(params: ExampleDeviceParams)(implicit p: Parameters)$/;"	c
AHBFanout	src/main/scala/amba/ahb/Xbar.scala	/^class AHBFanout()(implicit p: Parameters) extends LazyModule {$/;"	c
AHBFanoutNode	src/main/scala/amba/ahb/Nodes.scala	/^case class AHBFanoutNode($/;"	c
AHBFullSubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object AHBFullSubProtocol extends AHBSubProtocol$/;"	c
AHBFuzzBridge	src/main/scala/amba/ahb/Test.scala	/^class AHBFuzzBridge(aFlow: Boolean, txns: Int)(implicit p: Parameters) extends LazyModule$/;"	c
AHBFuzzMaster	src/main/scala/amba/ahb/Test.scala	/^class AHBFuzzMaster(aFlow: Boolean, txns: Int)(implicit p: Parameters) extends LazyModule with HasFuzzTarget$/;"	c
AHBFuzzNative	src/main/scala/amba/ahb/Test.scala	/^class AHBFuzzNative(aFlow: Boolean, txns: Int)(implicit p: Parameters) extends LazyModule$/;"	c
AHBFuzzSlave	src/main/scala/amba/ahb/Test.scala	/^class AHBFuzzSlave()(implicit p: Parameters) extends SimpleLazyModule with HasFuzzTarget$/;"	c
AHBImpMaster	src/main/scala/amba/ahb/Nodes.scala	/^object AHBImpMaster extends SimpleNodeImp[AHBMasterPortParameters, AHBSlavePortParameters, AHBEdgeParameters, AHBMasterBundle]$/;"	c
AHBImpSlave	src/main/scala/amba/ahb/Nodes.scala	/^object AHBImpSlave extends SimpleNodeImp[AHBMasterPortParameters, AHBSlavePortParameters, AHBEdgeParameters, AHBSlaveBundle]$/;"	c
AHBLite	src/main/scala/amba/ahb/AHBLite.scala	/^class AHBLite()(implicit p: Parameters) extends LazyModule {$/;"	c
AHBLite	src/main/scala/amba/ahb/AHBLite.scala	/^object AHBLite {$/;"	c
AHBLiteSubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object AHBLiteSubProtocol extends AHBSubProtocol$/;"	c
AHBMasterAdapterNode	src/main/scala/amba/ahb/Nodes.scala	/^case class AHBMasterAdapterNode($/;"	c
AHBMasterBundle	src/main/scala/amba/ahb/Bundles.scala	/^class AHBMasterBundle(val params: AHBBundleParameters) extends Bundle$/;"	c
AHBMasterBundle	src/main/scala/amba/ahb/Bundles.scala	/^object AHBMasterBundle$/;"	c
AHBMasterIdentityNode	src/main/scala/amba/ahb/Nodes.scala	/^case class AHBMasterIdentityNode()(implicit valName: ValName) extends IdentityNode(AHBImpMaster)()$/;"	c
AHBMasterInwardNode	src/main/scala/amba/ahb/package.scala	/^  type AHBMasterInwardNode = InwardNodeHandle[AHBMasterPortParameters, AHBSlavePortParameters, AHBEdgeParameters, AHBMasterBundle]$/;"	T
AHBMasterMonitorArgs	src/main/scala/amba/ahb/Monitor.scala	/^case class AHBMasterMonitorArgs(edge: AHBEdgeParameters)$/;"	c
AHBMasterMonitorBase	src/main/scala/amba/ahb/Monitor.scala	/^abstract class AHBMasterMonitorBase(args: AHBMasterMonitorArgs) extends Module$/;"	c
AHBMasterMonitorBuilder	src/main/scala/amba/ahb/Nodes.scala	/^case object AHBMasterMonitorBuilder extends Field[AHBMasterMonitorArgs => AHBMasterMonitorBase]$/;"	c
AHBMasterNode	src/main/scala/amba/ahb/package.scala	/^  type AHBMasterNode = SimpleNodeHandle[AHBMasterPortParameters, AHBSlavePortParameters, AHBEdgeParameters, AHBMasterBundle]$/;"	T
AHBMasterOutwardNode	src/main/scala/amba/ahb/package.scala	/^  type AHBMasterOutwardNode = OutwardNodeHandle[AHBMasterPortParameters, AHBSlavePortParameters, AHBEdgeParameters, AHBMasterBundle]$/;"	T
AHBMasterParameters	src/main/scala/amba/ahb/Parameters.scala	/^case class AHBMasterParameters($/;"	c
AHBMasterPortParameters	src/main/scala/amba/ahb/Parameters.scala	/^case class AHBMasterPortParameters($/;"	c
AHBMasterSinkNode	src/main/scala/amba/ahb/Nodes.scala	/^case class AHBMasterSinkNode(portParams: Seq[AHBSlavePortParameters])(implicit valName: ValName) extends SinkNode(AHBImpMaster)(portParams)$/;"	c
AHBMasterSourceNode	src/main/scala/amba/ahb/Nodes.scala	/^case class AHBMasterSourceNode(portParams: Seq[AHBMasterPortParameters])(implicit valName: ValName) extends SourceNode(AHBImpMaster)(portParams)$/;"	c
AHBNativeTest	src/main/scala/amba/ahb/Test.scala	/^class AHBNativeTest(aFlow: Boolean, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
AHBParameters	src/main/scala/amba/ahb/Protocol.scala	/^object AHBParameters$/;"	c
AHBProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object AHBProtocol extends ProtocolType$/;"	c
AHBRAM	src/main/scala/amba/ahb/SRAM.scala	/^class AHBRAM($/;"	c
AHBRRTest0	src/main/scala/amba/ahb/Test.scala	/^class AHBRRTest0(address: BigInt)(implicit p: Parameters)$/;"	c
AHBRRTest1	src/main/scala/amba/ahb/Test.scala	/^class AHBRRTest1(address: BigInt)(implicit p: Parameters) $/;"	c
AHBRegBundle	src/main/scala/amba/ahb/RegisterRouter.scala	/^class AHBRegBundle[P](val params: P, arg: AHBRegBundleArg) extends AHBRegBundleBase(arg)$/;"	c
AHBRegBundleArg	src/main/scala/amba/ahb/RegisterRouter.scala	/^case class AHBRegBundleArg()(implicit val p: Parameters)$/;"	c
AHBRegBundleBase	src/main/scala/amba/ahb/RegisterRouter.scala	/^class AHBRegBundleBase(arg: AHBRegBundleArg) extends Bundle$/;"	c
AHBRegModule	src/main/scala/amba/ahb/RegisterRouter.scala	/^class AHBRegModule[P, B <: AHBRegBundleBase](val params: P, bundleBuilder: => B, router: AHBRegisterRouterBase)$/;"	c
AHBRegisterNode	src/main/scala/amba/ahb/RegisterRouter.scala	/^case class AHBRegisterNode(address: AddressSet, concurrency: Int = 0, beatBytes: Int = 4, undefZero: Boolean = true, executable: Boolean = false)(implicit valName: ValName)$/;"	c
AHBRegisterRouter	src/main/scala/amba/ahb/RegisterRouter.scala	/^class AHBRegisterRouter[B <: AHBRegBundleBase, M <: LazyModuleImp]$/;"	c
AHBRegisterRouterBase	src/main/scala/amba/ahb/RegisterRouter.scala	/^abstract class AHBRegisterRouterBase(address: AddressSet, interrupts: Int, concurrency: Int, beatBytes: Int, undefZero: Boolean, executable: Boolean)(implicit p: Parameters) extends LazyModule$/;"	c
AHBSlaveAdapterNode	src/main/scala/amba/ahb/Nodes.scala	/^case class AHBSlaveAdapterNode($/;"	c
AHBSlaveBundle	src/main/scala/amba/ahb/Bundles.scala	/^class AHBSlaveBundle(val params: AHBBundleParameters) extends Bundle$/;"	c
AHBSlaveBundle	src/main/scala/amba/ahb/Bundles.scala	/^object AHBSlaveBundle$/;"	c
AHBSlaveIdentityNode	src/main/scala/amba/ahb/Nodes.scala	/^case class AHBSlaveIdentityNode()(implicit valName: ValName) extends IdentityNode(AHBImpSlave)()$/;"	c
AHBSlaveInwardNode	src/main/scala/amba/ahb/package.scala	/^  type AHBSlaveInwardNode = InwardNodeHandle[AHBMasterPortParameters, AHBSlavePortParameters, AHBEdgeParameters, AHBSlaveBundle]$/;"	T
AHBSlaveMonitorArgs	src/main/scala/amba/ahb/Monitor.scala	/^case class AHBSlaveMonitorArgs(edge: AHBEdgeParameters)$/;"	c
AHBSlaveMonitorBase	src/main/scala/amba/ahb/Monitor.scala	/^abstract class AHBSlaveMonitorBase(args: AHBSlaveMonitorArgs) extends Module$/;"	c
AHBSlaveMonitorBuilder	src/main/scala/amba/ahb/Nodes.scala	/^case object AHBSlaveMonitorBuilder extends Field[AHBSlaveMonitorArgs => AHBSlaveMonitorBase]$/;"	c
AHBSlaveNode	src/main/scala/amba/ahb/package.scala	/^  type AHBSlaveNode = SimpleNodeHandle[AHBMasterPortParameters, AHBSlavePortParameters, AHBEdgeParameters, AHBSlaveBundle]$/;"	T
AHBSlaveOutwardNode	src/main/scala/amba/ahb/package.scala	/^  type AHBSlaveOutwardNode = OutwardNodeHandle[AHBMasterPortParameters, AHBSlavePortParameters, AHBEdgeParameters, AHBSlaveBundle]$/;"	T
AHBSlaveParameters	src/main/scala/amba/ahb/Parameters.scala	/^case class AHBSlaveParameters($/;"	c
AHBSlavePortParameters	src/main/scala/amba/ahb/Parameters.scala	/^case class AHBSlavePortParameters($/;"	c
AHBSlaveSinkNode	src/main/scala/amba/ahb/Nodes.scala	/^case class AHBSlaveSinkNode(portParams: Seq[AHBSlavePortParameters])(implicit valName: ValName) extends SinkNode(AHBImpSlave)(portParams)$/;"	c
AHBSlaveSourceNode	src/main/scala/amba/ahb/Nodes.scala	/^case class AHBSlaveSourceNode(portParams: Seq[AHBMasterPortParameters])(implicit valName: ValName) extends SourceNode(AHBImpSlave)(portParams)$/;"	c
AHBSubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^trait AHBSubProtocol extends SubProtocolType$/;"	t
AHBToTL	src/main/scala/amba/ahb/ToTL.scala	/^class AHBToTL()(implicit p: Parameters) extends LazyModule$/;"	c
AHBToTL	src/main/scala/amba/ahb/ToTL.scala	/^object AHBToTL$/;"	c
AHBToTLNode	src/main/scala/amba/ahb/ToTL.scala	/^case class AHBToTLNode()(implicit valName: ValName) extends MixedAdapterNode(AHBImpSlave, TLImp)($/;"	c
AHB_Lite	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class AHB_Lite($/;"	c
ALU	src/main/scala/rocket/ALU.scala	/^class ALU(implicit p: Parameters) extends CoreModule()(p) {$/;"	c
ALU	src/main/scala/rocket/ALU.scala	/^object ALU$/;"	c
AMBA	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^trait AMBA extends OMProtocol$/;"	t
AMBACorrupt	src/main/scala/amba/package.scala	/^  case object AMBACorrupt extends DataKey[Bool]("corrupt")$/;"	c
AMBACorruptField	src/main/scala/amba/package.scala	/^  case class AMBACorruptField() extends BundleField(AMBACorrupt) {$/;"	c
AMBAProt	src/main/scala/amba/package.scala	/^  case object AMBAProt extends ControlKey[AMBAProtBundle]("amba_prot")$/;"	c
AMBAProtBundle	src/main/scala/amba/package.scala	/^  class AMBAProtBundle extends Bundle {$/;"	c
AMBAProtField	src/main/scala/amba/package.scala	/^  case class AMBAProtField() extends BundleField(AMBAProt) {$/;"	c
AMBAUnitTestConfig	src/main/scala/unittest/Configs.scala	/^class AMBAUnitTestConfig extends Config(new WithAMBAUnitTests ++ new WithTestDuration(10) ++ new BaseSubsystemConfig)$/;"	c
AMO	src/main/scala/tilelink/AtomicAutomata.scala	/^      val AMO  = UInt(2) \/\/ AccessDataAck sent up D  waiting for A availability$/;"	l
AMOADD_D	src/main/scala/rocket/Instructions.scala	/^  def AMOADD_D           = BitPat("b00000????????????011?????0101111")$/;"	m
AMOADD_W	src/main/scala/rocket/Instructions.scala	/^  def AMOADD_W           = BitPat("b00000????????????010?????0101111")$/;"	m
AMOALU	src/main/scala/rocket/AMOALU.scala	/^class AMOALU(operandBits: Int)(implicit p: Parameters) extends Module {$/;"	c
AMOAND_D	src/main/scala/rocket/Instructions.scala	/^  def AMOAND_D           = BitPat("b01100????????????011?????0101111")$/;"	m
AMOAND_W	src/main/scala/rocket/Instructions.scala	/^  def AMOAND_W           = BitPat("b01100????????????010?????0101111")$/;"	m
AMOMAXU_D	src/main/scala/rocket/Instructions.scala	/^  def AMOMAXU_D          = BitPat("b11100????????????011?????0101111")$/;"	m
AMOMAXU_W	src/main/scala/rocket/Instructions.scala	/^  def AMOMAXU_W          = BitPat("b11100????????????010?????0101111")$/;"	m
AMOMAX_D	src/main/scala/rocket/Instructions.scala	/^  def AMOMAX_D           = BitPat("b10100????????????011?????0101111")$/;"	m
AMOMAX_W	src/main/scala/rocket/Instructions.scala	/^  def AMOMAX_W           = BitPat("b10100????????????010?????0101111")$/;"	m
AMOMINU_D	src/main/scala/rocket/Instructions.scala	/^  def AMOMINU_D          = BitPat("b11000????????????011?????0101111")$/;"	m
AMOMINU_W	src/main/scala/rocket/Instructions.scala	/^  def AMOMINU_W          = BitPat("b11000????????????010?????0101111")$/;"	m
AMOMIN_D	src/main/scala/rocket/Instructions.scala	/^  def AMOMIN_D           = BitPat("b10000????????????011?????0101111")$/;"	m
AMOMIN_W	src/main/scala/rocket/Instructions.scala	/^  def AMOMIN_W           = BitPat("b10000????????????010?????0101111")$/;"	m
AMOOR_D	src/main/scala/rocket/Instructions.scala	/^  def AMOOR_D            = BitPat("b01000????????????011?????0101111")$/;"	m
AMOOR_W	src/main/scala/rocket/Instructions.scala	/^  def AMOOR_W            = BitPat("b01000????????????010?????0101111")$/;"	m
AMOSWAP_D	src/main/scala/rocket/Instructions.scala	/^  def AMOSWAP_D          = BitPat("b00001????????????011?????0101111")$/;"	m
AMOSWAP_W	src/main/scala/rocket/Instructions.scala	/^  def AMOSWAP_W          = BitPat("b00001????????????010?????0101111")$/;"	m
AMOXOR_D	src/main/scala/rocket/Instructions.scala	/^  def AMOXOR_D           = BitPat("b00100????????????011?????0101111")$/;"	m
AMOXOR_W	src/main/scala/rocket/Instructions.scala	/^  def AMOXOR_W           = BitPat("b00100????????????010?????0101111")$/;"	m
AND	src/main/scala/rocket/Instructions.scala	/^  def AND                = BitPat("b0000000??????????111?????0110011")$/;"	m
AND	src/main/scala/tilelink/Bundles.scala	/^  def AND  = UInt(2, width)$/;"	m
ANDI	src/main/scala/rocket/Instructions.scala	/^  def ANDI               = BitPat("b?????????????????111?????0010011")$/;"	m
ANDN	src/main/scala/rocket/Instructions.scala	/^  def ANDN               = BitPat("b0100000??????????111?????0110011")$/;"	m
APB	src/main/scala/devices/debug/Periphery.scala	/^case object APB extends DebugExportProtocol$/;"	c
APB	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class APB($/;"	c
APBBridgeTest	src/main/scala/amba/apb/Test.scala	/^class APBBridgeTest(aFlow: Boolean, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
APBBundle	src/main/scala/amba/apb/Bundles.scala	/^class APBBundle(val params: APBBundleParameters) extends Bundle$/;"	c
APBBundle	src/main/scala/amba/apb/Bundles.scala	/^object APBBundle$/;"	c
APBBundleParameters	src/main/scala/amba/apb/Parameters.scala	/^case class APBBundleParameters($/;"	c
APBBundleParameters	src/main/scala/amba/apb/Parameters.scala	/^object APBBundleParameters$/;"	c
APBDebugConsts	src/main/scala/devices/debug/APB.scala	/^object APBDebugConsts {$/;"	c
APBDebugRegisters	src/main/scala/devices/debug/APB.scala	/^class APBDebugRegisters()(implicit p: Parameters) extends LazyModule {$/;"	c
APBDebugRegistersKey	src/main/scala/devices/debug/APB.scala	/^case object APBDebugRegistersKey extends Field[Map[Int, Seq[RegField]]](Map())$/;"	c
APBEdgeParameters	src/main/scala/amba/apb/Parameters.scala	/^case class APBEdgeParameters($/;"	c
APBFanout	src/main/scala/amba/apb/Xbar.scala	/^class APBFanout()(implicit p: Parameters) extends LazyModule {$/;"	c
APBFuzzBridge	src/main/scala/amba/apb/Test.scala	/^class APBFuzzBridge(aFlow: Boolean, txns: Int)(implicit p: Parameters) extends LazyModule$/;"	c
APBIdentityNode	src/main/scala/amba/apb/Nodes.scala	/^case class APBIdentityNode()(implicit valName: ValName) extends IdentityNode(APBImp)()$/;"	c
APBImp	src/main/scala/amba/apb/Nodes.scala	/^object APBImp extends SimpleNodeImp[APBMasterPortParameters, APBSlavePortParameters, APBEdgeParameters, APBBundle]$/;"	c
APBInwardNode	src/main/scala/amba/apb/package.scala	/^  type APBInwardNode = InwardNodeHandle[APBMasterPortParameters, APBSlavePortParameters, APBEdgeParameters, APBBundle]$/;"	T
APBMasterNode	src/main/scala/amba/apb/Nodes.scala	/^case class APBMasterNode(portParams: Seq[APBMasterPortParameters])(implicit valName: ValName) extends SourceNode(APBImp)(portParams)$/;"	c
APBMasterParameters	src/main/scala/amba/apb/Parameters.scala	/^case class APBMasterParameters($/;"	c
APBMasterPortParameters	src/main/scala/amba/apb/Parameters.scala	/^case class APBMasterPortParameters($/;"	c
APBMonitorArgs	src/main/scala/amba/apb/Monitor.scala	/^case class APBMonitorArgs(edge: APBEdgeParameters)$/;"	c
APBMonitorBase	src/main/scala/amba/apb/Monitor.scala	/^abstract class APBMonitorBase(args: APBMonitorArgs) extends Module$/;"	c
APBMonitorBuilder	src/main/scala/amba/apb/Nodes.scala	/^case object APBMonitorBuilder extends Field[APBMonitorArgs => APBMonitorBase]$/;"	c
APBNexusNode	src/main/scala/amba/apb/Nodes.scala	/^case class APBNexusNode($/;"	c
APBNode	src/main/scala/amba/apb/package.scala	/^  type APBNode = SimpleNodeHandle[APBMasterPortParameters, APBSlavePortParameters, APBEdgeParameters, APBBundle]$/;"	T
APBOutwardNode	src/main/scala/amba/apb/package.scala	/^  type APBOutwardNode = OutwardNodeHandle[APBMasterPortParameters, APBSlavePortParameters, APBEdgeParameters, APBBundle]$/;"	T
APBParameters	src/main/scala/amba/apb/Protocol.scala	/^object APBParameters$/;"	c
APBProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object APBProtocol extends ProtocolType$/;"	c
APBRAM	src/main/scala/amba/apb/SRAM.scala	/^class APBRAM($/;"	c
APBRRTest0	src/main/scala/amba/apb/Test.scala	/^class APBRRTest0(address: BigInt)(implicit p: Parameters) $/;"	c
APBRRTest1	src/main/scala/amba/apb/Test.scala	/^class APBRRTest1(address: BigInt)(implicit p: Parameters)$/;"	c
APBRegBundle	src/main/scala/amba/apb/RegisterRouter.scala	/^class APBRegBundle[P](val params: P, arg: APBRegBundleArg) extends APBRegBundleBase(arg)$/;"	c
APBRegBundleArg	src/main/scala/amba/apb/RegisterRouter.scala	/^case class APBRegBundleArg()(implicit val p: Parameters)$/;"	c
APBRegBundleBase	src/main/scala/amba/apb/RegisterRouter.scala	/^class APBRegBundleBase(arg: APBRegBundleArg) extends Bundle$/;"	c
APBRegModule	src/main/scala/amba/apb/RegisterRouter.scala	/^class APBRegModule[P, B <: APBRegBundleBase](val params: P, bundleBuilder: => B, router: APBRegisterRouterBase)$/;"	c
APBRegisterNode	src/main/scala/amba/apb/RegisterRouter.scala	/^case class APBRegisterNode(address: AddressSet, concurrency: Int = 0, beatBytes: Int = 4, undefZero: Boolean = true, executable: Boolean = false)(implicit valName: ValName)$/;"	c
APBRegisterRouter	src/main/scala/amba/apb/RegisterRouter.scala	/^class APBRegisterRouter[B <: APBRegBundleBase, M <: LazyModuleImp]$/;"	c
APBRegisterRouterBase	src/main/scala/amba/apb/RegisterRouter.scala	/^abstract class APBRegisterRouterBase(address: AddressSet, interrupts: Int, concurrency: Int, beatBytes: Int, undefZero: Boolean, executable: Boolean)(implicit p: Parameters) extends LazyModule$/;"	c
APBSlaveNode	src/main/scala/amba/apb/Nodes.scala	/^case class APBSlaveNode(portParams: Seq[APBSlavePortParameters])(implicit valName: ValName) extends SinkNode(APBImp)(portParams)$/;"	c
APBSlaveParameters	src/main/scala/amba/apb/Parameters.scala	/^case class APBSlaveParameters($/;"	c
APBSlavePortParameters	src/main/scala/amba/apb/Parameters.scala	/^case class APBSlavePortParameters($/;"	c
APBSubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object APBSubProtocol extends APBSubProtocol$/;"	c
APBSubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^trait APBSubProtocol extends SubProtocolType$/;"	t
APBToTL	src/main/scala/amba/apb/ToTL.scala	/^class APBToTL()(implicit p: Parameters) extends LazyModule$/;"	c
APBToTL	src/main/scala/amba/apb/ToTL.scala	/^object APBToTL$/;"	c
APBToTLNode	src/main/scala/amba/apb/ToTL.scala	/^case class APBToTLNode()(implicit valName: ValName) extends MixedAdapterNode(APBImp, TLImp)($/;"	c
ASIdBits	src/main/scala/rocket/TLB.scala	/^case object ASIdBits extends Field[Int](0)$/;"	c
AUIPC	src/main/scala/rocket/Instructions.scala	/^  def AUIPC              = BitPat("b?????????????????????????0010111")$/;"	m
AUTHDATAFields	src/main/scala/devices/debug/dm_registers.scala	/^class AUTHDATAFields extends Bundle {$/;"	c
AXI4	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class AXI4($/;"	c
AXI4AdapterNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4AdapterNode($/;"	c
AXI4Arbiter	src/main/scala/amba/axi4/Xbar.scala	/^object AXI4Arbiter$/;"	c
AXI4AsyncBundle	src/main/scala/amba/axi4/Bundles.scala	/^class AXI4AsyncBundle(params: AXI4AsyncBundleParameters) extends AXI4AsyncBundleBase(params)$/;"	c
AXI4AsyncBundleBase	src/main/scala/amba/axi4/Bundles.scala	/^class AXI4AsyncBundleBase(params: AXI4AsyncBundleParameters) extends GenericParameterizedBundle(params)$/;"	c
AXI4AsyncBundleParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4AsyncBundleParameters(async: AsyncQueueParams, base: AXI4BundleParameters)$/;"	c
AXI4AsyncCrossing	src/main/scala/amba/axi4/AsyncCrossing.scala	/^class AXI4AsyncCrossing(params: AsyncQueueParams = AsyncQueueParams())(implicit p: Parameters) extends LazyModule$/;"	c
AXI4AsyncCrossingSink	src/main/scala/amba/axi4/AsyncCrossing.scala	/^class AXI4AsyncCrossingSink(params: AsyncQueueParams = AsyncQueueParams())(implicit p: Parameters) extends LazyModule$/;"	c
AXI4AsyncCrossingSink	src/main/scala/amba/axi4/AsyncCrossing.scala	/^object AXI4AsyncCrossingSink$/;"	c
AXI4AsyncCrossingSource	src/main/scala/amba/axi4/AsyncCrossing.scala	/^class AXI4AsyncCrossingSource(sync: Option[Int])(implicit p: Parameters) extends LazyModule$/;"	c
AXI4AsyncCrossingSource	src/main/scala/amba/axi4/AsyncCrossing.scala	/^object AXI4AsyncCrossingSource$/;"	c
AXI4AsyncEdgeParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4AsyncEdgeParameters(master: AXI4AsyncMasterPortParameters, slave: AXI4AsyncSlavePortParameters, params: Parameters, sourceInfo: SourceInfo)$/;"	c
AXI4AsyncIdentityNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4AsyncIdentityNode()(implicit valName: ValName) extends IdentityNode(AXI4AsyncImp)()$/;"	c
AXI4AsyncImp	src/main/scala/amba/axi4/Nodes.scala	/^object AXI4AsyncImp extends SimpleNodeImp[AXI4AsyncMasterPortParameters, AXI4AsyncSlavePortParameters, AXI4AsyncEdgeParameters, AXI4AsyncBundle]$/;"	c
AXI4AsyncMasterPortParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4AsyncMasterPortParameters(base: AXI4MasterPortParameters)$/;"	c
AXI4AsyncNameNode	src/main/scala/amba/axi4/Nodes.scala	/^object AXI4AsyncNameNode {$/;"	c
AXI4AsyncSinkNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4AsyncSinkNode(async: AsyncQueueParams)(implicit valName: ValName)$/;"	c
AXI4AsyncSlavePortParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4AsyncSlavePortParameters(async: AsyncQueueParams, base: AXI4SlavePortParameters)$/;"	c
AXI4AsyncSourceNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4AsyncSourceNode(sync: Option[Int])(implicit valName: ValName)$/;"	c
AXI4BridgeTest	src/main/scala/amba/axi4/Test.scala	/^class AXI4BridgeTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
AXI4Buffer	src/main/scala/amba/axi4/Buffer.scala	/^class AXI4Buffer($/;"	c
AXI4Buffer	src/main/scala/amba/axi4/Buffer.scala	/^object AXI4Buffer$/;"	c
AXI4BufferParams	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4BufferParams($/;"	c
AXI4Bundle	src/main/scala/amba/axi4/Bundles.scala	/^class AXI4Bundle(params: AXI4BundleParameters) extends AXI4BundleBase(params)$/;"	c
AXI4Bundle	src/main/scala/amba/axi4/Bundles.scala	/^object AXI4Bundle$/;"	c
AXI4BundleA	src/main/scala/amba/axi4/Bundles.scala	/^abstract class AXI4BundleA(params: AXI4BundleParameters) extends AXI4BundleBase(params)$/;"	c
AXI4BundleAR	src/main/scala/amba/axi4/Bundles.scala	/^class AXI4BundleAR(params: AXI4BundleParameters) extends AXI4BundleA(params)$/;"	c
AXI4BundleARW	src/main/scala/amba/axi4/Bundles.scala	/^class AXI4BundleARW(params: AXI4BundleParameters) extends AXI4BundleA(params)$/;"	c
AXI4BundleAW	src/main/scala/amba/axi4/Bundles.scala	/^class AXI4BundleAW(params: AXI4BundleParameters) extends AXI4BundleA(params)$/;"	c
AXI4BundleB	src/main/scala/amba/axi4/Bundles.scala	/^class AXI4BundleB(params: AXI4BundleParameters) extends AXI4BundleBase(params)$/;"	c
AXI4BundleBase	src/main/scala/amba/axi4/Bundles.scala	/^abstract class AXI4BundleBase(params: AXI4BundleParameters) extends GenericParameterizedBundle(params)$/;"	c
AXI4BundleParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4BundleParameters($/;"	c
AXI4BundleParameters	src/main/scala/amba/axi4/Parameters.scala	/^object AXI4BundleParameters$/;"	c
AXI4BundleR	src/main/scala/amba/axi4/Bundles.scala	/^class AXI4BundleR(params: AXI4BundleParameters) extends AXI4BundleBase(params)$/;"	c
AXI4BundleRError	src/main/scala/amba/axi4/ToTL.scala	/^class AXI4BundleRError(params: AXI4BundleParameters) extends AXI4BundleBase(params)$/;"	c
AXI4BundleW	src/main/scala/amba/axi4/Bundles.scala	/^class AXI4BundleW(params: AXI4BundleParameters) extends AXI4BundleBase(params)$/;"	c
AXI4ClockDomainCrossing	src/main/scala/amba/axi4/package.scala	/^  implicit class AXI4ClockDomainCrossing(private val x: HasClockDomainCrossing) extends AnyVal {$/;"	c
AXI4CreditedAdapterNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4CreditedAdapterNode($/;"	c
AXI4CreditedBuffer	src/main/scala/amba/axi4/Credited.scala	/^class AXI4CreditedBuffer(delay: AXI4CreditedDelay)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4CreditedBuffer	src/main/scala/amba/axi4/Credited.scala	/^object AXI4CreditedBuffer {$/;"	c
AXI4CreditedBundle	src/main/scala/amba/axi4/Bundles.scala	/^class AXI4CreditedBundle(params: AXI4BundleParameters) extends AXI4BundleBase(params)$/;"	c
AXI4CreditedDelay	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4CreditedDelay($/;"	c
AXI4CreditedDelay	src/main/scala/amba/axi4/Parameters.scala	/^object AXI4CreditedDelay {$/;"	c
AXI4CreditedEdgeParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4CreditedEdgeParameters(master: AXI4CreditedMasterPortParameters, slave: AXI4CreditedSlavePortParameters, params: Parameters, sourceInfo: SourceInfo)$/;"	c
AXI4CreditedIdentityNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4CreditedIdentityNode()(implicit valName: ValName) extends IdentityNode(AXI4CreditedImp)()$/;"	c
AXI4CreditedImp	src/main/scala/amba/axi4/Nodes.scala	/^object AXI4CreditedImp extends SimpleNodeImp[AXI4CreditedMasterPortParameters, AXI4CreditedSlavePortParameters, AXI4CreditedEdgeParameters, AXI4CreditedBundle]$/;"	c
AXI4CreditedMasterPortParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4CreditedMasterPortParameters(delay: AXI4CreditedDelay, base: AXI4MasterPortParameters)$/;"	c
AXI4CreditedNameNode	src/main/scala/amba/axi4/Nodes.scala	/^object AXI4CreditedNameNode {$/;"	c
AXI4CreditedSink	src/main/scala/amba/axi4/Credited.scala	/^class AXI4CreditedSink(delay: AXI4CreditedDelay)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4CreditedSink	src/main/scala/amba/axi4/Credited.scala	/^object AXI4CreditedSink {$/;"	c
AXI4CreditedSinkNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4CreditedSinkNode(delay: AXI4CreditedDelay)(implicit valName: ValName)$/;"	c
AXI4CreditedSlavePortParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4CreditedSlavePortParameters(delay: AXI4CreditedDelay, base: AXI4SlavePortParameters)$/;"	c
AXI4CreditedSource	src/main/scala/amba/axi4/Credited.scala	/^class AXI4CreditedSource(delay: AXI4CreditedDelay)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4CreditedSource	src/main/scala/amba/axi4/Credited.scala	/^object AXI4CreditedSource {$/;"	c
AXI4CreditedSourceNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4CreditedSourceNode(delay: AXI4CreditedDelay)(implicit valName: ValName)$/;"	c
AXI4Deinterleaver	src/main/scala/amba/axi4/Deinterleaver.scala	/^class AXI4Deinterleaver(maxReadBytes: Int, buffer: BufferParams = BufferParams.default)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4Deinterleaver	src/main/scala/amba/axi4/Deinterleaver.scala	/^object AXI4Deinterleaver$/;"	c
AXI4Delayer	src/main/scala/amba/axi4/Delayer.scala	/^class AXI4Delayer(q: Double)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4Delayer	src/main/scala/amba/axi4/Delayer.scala	/^object AXI4Delayer$/;"	c
AXI4EdgeParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4EdgeParameters($/;"	c
AXI4ExampleDevice	src/main/scala/examples/ExampleDevice.scala	/^class AXI4ExampleDevice(params: ExampleDeviceParams)(implicit p: Parameters)$/;"	c
AXI4ExtraId	src/main/scala/amba/axi4/IdIndexer.scala	/^case object AXI4ExtraId extends ControlKey[UInt]("extra_id")$/;"	c
AXI4ExtraIdField	src/main/scala/amba/axi4/IdIndexer.scala	/^case class AXI4ExtraIdField(width: Int) extends SimpleBundleField(AXI4ExtraId)(UInt(OUTPUT, width = width), UInt(0))$/;"	c
AXI4Filter	src/main/scala/amba/axi4/Filter.scala	/^class AXI4Filter($/;"	c
AXI4Filter	src/main/scala/amba/axi4/Filter.scala	/^object AXI4Filter$/;"	c
AXI4FragLast	src/main/scala/amba/axi4/Fragmenter.scala	/^case object AXI4FragLast extends ControlKey[Bool]("real_last")$/;"	c
AXI4FragLastField	src/main/scala/amba/axi4/Fragmenter.scala	/^case class AXI4FragLastField() extends SimpleBundleField(AXI4FragLast)(Output(Bool()), false.B)$/;"	c
AXI4Fragmenter	src/main/scala/amba/axi4/Fragmenter.scala	/^class AXI4Fragmenter()(implicit p: Parameters) extends LazyModule$/;"	c
AXI4Fragmenter	src/main/scala/amba/axi4/Fragmenter.scala	/^object AXI4Fragmenter$/;"	c
AXI4FullFuzzRAM	src/main/scala/amba/axi4/Test.scala	/^class AXI4FullFuzzRAM(txns: Int)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4FullFuzzRAMTest	src/main/scala/amba/axi4/Test.scala	/^class AXI4FullFuzzRAMTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
AXI4FuzzBridge	src/main/scala/amba/axi4/Test.scala	/^class AXI4FuzzBridge(txns: Int)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4FuzzMaster	src/main/scala/amba/axi4/Test.scala	/^class AXI4FuzzMaster(txns: Int)(implicit p: Parameters) extends LazyModule with HasFuzzTarget$/;"	c
AXI4FuzzSlave	src/main/scala/amba/axi4/Test.scala	/^class AXI4FuzzSlave()(implicit p: Parameters) extends SimpleLazyModule with HasFuzzTarget$/;"	c
AXI4IdIndexer	src/main/scala/amba/axi4/IdIndexer.scala	/^class AXI4IdIndexer(idBits: Int)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4IdIndexer	src/main/scala/amba/axi4/IdIndexer.scala	/^object AXI4IdIndexer$/;"	c
AXI4IdMap	src/main/scala/amba/axi4/Parameters.scala	/^class AXI4IdMap(axi4: AXI4MasterPortParameters) extends IdMap[AXI4IdMapEntry] {$/;"	c
AXI4IdMapEntry	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4IdMapEntry(axi4Id: IdRange, name: String, maxTransactionsInFlight: Option[Int] = None) extends IdMapEntry {$/;"	c
AXI4IdentityNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4IdentityNode()(implicit valName: ValName) extends IdentityNode(AXI4Imp)()$/;"	c
AXI4Imp	src/main/scala/amba/axi4/Nodes.scala	/^object AXI4Imp extends SimpleNodeImp[AXI4MasterPortParameters, AXI4SlavePortParameters, AXI4EdgeParameters, AXI4Bundle]$/;"	c
AXI4InwardClockCrossingHelper	src/main/scala/amba/axi4/CrossingHelper.scala	/^case class AXI4InwardClockCrossingHelper(name: String, scope: LazyScope, node: AXI4InwardNode)$/;"	c
AXI4InwardCrossingHelper	src/main/scala/amba/axi4/CrossingHelper.scala	/^trait AXI4InwardCrossingHelper {$/;"	t
AXI4InwardNode	src/main/scala/amba/axi4/package.scala	/^  type AXI4InwardNode = InwardNodeHandle[AXI4MasterPortParameters, AXI4SlavePortParameters, AXI4EdgeParameters, AXI4Bundle]$/;"	T
AXI4InwardResetCrossingHelper	src/main/scala/amba/axi4/CrossingHelper.scala	/^case class AXI4InwardResetCrossingHelper(name: String, scope: LazyScope, node: AXI4InwardNode)$/;"	c
AXI4LiteFuzzRAM	src/main/scala/amba/axi4/Test.scala	/^class AXI4LiteFuzzRAM(txns: Int)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4LiteFuzzRAMTest	src/main/scala/amba/axi4/Test.scala	/^class AXI4LiteFuzzRAMTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
AXI4LiteSubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object AXI4LiteSubProtocol extends AXI4SubProtocol$/;"	c
AXI4LiteUserBitsFuzzRAM	src/main/scala/amba/axi4/Test.scala	/^class AXI4LiteUserBitsFuzzRAM(txns: Int)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4LiteUserBitsFuzzRAMTest	src/main/scala/amba/axi4/Test.scala	/^class AXI4LiteUserBitsFuzzRAMTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
AXI4MasterNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4MasterNode(portParams: Seq[AXI4MasterPortParameters])(implicit valName: ValName) extends SourceNode(AXI4Imp)(portParams)$/;"	c
AXI4MasterParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4MasterParameters($/;"	c
AXI4MasterPortParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4MasterPortParameters($/;"	c
AXI4MonitorArgs	src/main/scala/amba/axi4/Monitor.scala	/^case class AXI4MonitorArgs(edge: AXI4EdgeParameters)$/;"	c
AXI4MonitorBase	src/main/scala/amba/axi4/Monitor.scala	/^abstract class AXI4MonitorBase(args: AXI4MonitorArgs) extends Module$/;"	c
AXI4MonitorBuilder	src/main/scala/amba/axi4/Nodes.scala	/^case object AXI4MonitorBuilder extends Field[AXI4MonitorArgs => AXI4MonitorBase]$/;"	c
AXI4NameNode	src/main/scala/amba/axi4/Nodes.scala	/^object AXI4NameNode {$/;"	c
AXI4NexusNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4NexusNode($/;"	c
AXI4Node	src/main/scala/amba/axi4/package.scala	/^  type AXI4Node = SimpleNodeHandle[AXI4MasterPortParameters, AXI4SlavePortParameters, AXI4EdgeParameters, AXI4Bundle]$/;"	T
AXI4OutwardClockCrossingHelper	src/main/scala/amba/axi4/CrossingHelper.scala	/^case class AXI4OutwardClockCrossingHelper(name: String, scope: LazyScope, node: AXI4OutwardNode)$/;"	c
AXI4OutwardCrossingHelper	src/main/scala/amba/axi4/CrossingHelper.scala	/^trait AXI4OutwardCrossingHelper {$/;"	t
AXI4OutwardNode	src/main/scala/amba/axi4/package.scala	/^  type AXI4OutwardNode = OutwardNodeHandle[AXI4MasterPortParameters, AXI4SlavePortParameters, AXI4EdgeParameters, AXI4Bundle]$/;"	T
AXI4OutwardResetCrossingHelper	src/main/scala/amba/axi4/CrossingHelper.scala	/^case class AXI4OutwardResetCrossingHelper(name: String, scope: LazyScope, node: AXI4OutwardNode)$/;"	c
AXI4Parameters	src/main/scala/amba/axi4/Protocol.scala	/^object AXI4Parameters$/;"	c
AXI4Protocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object AXI4Protocol extends ProtocolType$/;"	c
AXI4RAM	src/main/scala/amba/axi4/SRAM.scala	/^class AXI4RAM($/;"	c
AXI4RAM	src/main/scala/amba/axi4/SRAM.scala	/^object AXI4RAM$/;"	c
AXI4RAMAsyncCrossing	src/main/scala/amba/axi4/AsyncCrossing.scala	/^class AXI4RAMAsyncCrossing(txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
AXI4RAMAsyncCrossingTest	src/main/scala/amba/axi4/AsyncCrossing.scala	/^class AXI4RAMAsyncCrossingTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
AXI4RAMCreditedCrossing	src/main/scala/amba/axi4/Credited.scala	/^class AXI4RAMCreditedCrossing(txns: Int, params: CreditedCrossing)(implicit p: Parameters) extends LazyModule {$/;"	c
AXI4RAMCreditedCrossingTest	src/main/scala/amba/axi4/Credited.scala	/^class AXI4RAMCreditedCrossingTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
AXI4RRId	src/main/scala/amba/axi4/RegisterRouter.scala	/^case object AXI4RRId extends ControlKey[UInt]("extra_id")$/;"	c
AXI4RRIdField	src/main/scala/amba/axi4/RegisterRouter.scala	/^case class AXI4RRIdField(width: Int) extends SimpleBundleField(AXI4RRId)(UInt(OUTPUT, width = 1 max width), UInt(0))$/;"	c
AXI4RRTest0	src/main/scala/amba/axi4/Test.scala	/^class AXI4RRTest0(address: BigInt)(implicit p: Parameters)$/;"	c
AXI4RRTest1	src/main/scala/amba/axi4/Test.scala	/^class AXI4RRTest1(address: BigInt)(implicit p: Parameters)$/;"	c
AXI4RegBundle	src/main/scala/amba/axi4/RegisterRouter.scala	/^class AXI4RegBundle[P](val params: P, arg: AXI4RegBundleArg) extends AXI4RegBundleBase(arg)$/;"	c
AXI4RegBundleArg	src/main/scala/amba/axi4/RegisterRouter.scala	/^case class AXI4RegBundleArg()(implicit val p: Parameters)$/;"	c
AXI4RegBundleBase	src/main/scala/amba/axi4/RegisterRouter.scala	/^class AXI4RegBundleBase(arg: AXI4RegBundleArg) extends Bundle$/;"	c
AXI4RegModule	src/main/scala/amba/axi4/RegisterRouter.scala	/^class AXI4RegModule[P, B <: AXI4RegBundleBase](val params: P, bundleBuilder: => B, router: AXI4RegisterRouterBase)$/;"	c
AXI4RegisterNode	src/main/scala/amba/axi4/RegisterRouter.scala	/^case class AXI4RegisterNode(address: AddressSet, concurrency: Int = 0, beatBytes: Int = 4, undefZero: Boolean = true, executable: Boolean = false)(implicit valName: ValName)$/;"	c
AXI4RegisterRouter	src/main/scala/amba/axi4/RegisterRouter.scala	/^class AXI4RegisterRouter[B <: AXI4RegBundleBase, M <: LazyModuleImp]$/;"	c
AXI4RegisterRouterBase	src/main/scala/amba/axi4/RegisterRouter.scala	/^abstract class AXI4RegisterRouterBase(address: AddressSet, interrupts: Int, concurrency: Int, beatBytes: Int, undefZero: Boolean, executable: Boolean)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4ResetDomainCrossing	src/main/scala/amba/axi4/package.scala	/^  implicit class AXI4ResetDomainCrossing(private val x: HasResetDomainCrossing) extends AnyVal {$/;"	c
AXI4SlaveNode	src/main/scala/amba/axi4/Nodes.scala	/^case class AXI4SlaveNode(portParams: Seq[AXI4SlavePortParameters])(implicit valName: ValName) extends SinkNode(AXI4Imp)(portParams)$/;"	c
AXI4SlaveParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4SlaveParameters($/;"	c
AXI4SlavePortParameters	src/main/scala/amba/axi4/Parameters.scala	/^case class AXI4SlavePortParameters($/;"	c
AXI4SubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object AXI4SubProtocol extends AXI4SubProtocol$/;"	c
AXI4SubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^trait AXI4SubProtocol extends SubProtocolType$/;"	t
AXI4TLState	src/main/scala/tilelink/ToAXI4.scala	/^case object AXI4TLState extends ControlKey[AXI4TLStateBundle]("tl_state")$/;"	c
AXI4TLStateBundle	src/main/scala/tilelink/ToAXI4.scala	/^class AXI4TLStateBundle(val sourceBits: Int) extends Bundle {$/;"	c
AXI4TLStateField	src/main/scala/tilelink/ToAXI4.scala	/^case class AXI4TLStateField(sourceBits: Int) extends BundleField(AXI4TLState) {$/;"	c
AXI4ToTL	src/main/scala/amba/axi4/ToTL.scala	/^class AXI4ToTL(wcorrupt: Boolean)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4ToTL	src/main/scala/amba/axi4/ToTL.scala	/^object AXI4ToTL$/;"	c
AXI4ToTLIdMapEntry	src/main/scala/amba/axi4/ToTL.scala	/^case class AXI4ToTLIdMapEntry(tlId: IdRange, axi4Id: IdRange, name: String)$/;"	c
AXI4ToTLNode	src/main/scala/amba/axi4/ToTL.scala	/^case class AXI4ToTLNode(wcorrupt: Boolean)(implicit valName: ValName) extends MixedAdapterNode(AXI4Imp, TLImp)($/;"	c
AXI4UserYanker	src/main/scala/amba/axi4/UserYanker.scala	/^class AXI4UserYanker(capMaxFlight: Option[Int] = None)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4UserYanker	src/main/scala/amba/axi4/UserYanker.scala	/^object AXI4UserYanker$/;"	c
AXI4Xbar	src/main/scala/amba/axi4/Xbar.scala	/^class AXI4Xbar($/;"	c
AXI4Xbar	src/main/scala/amba/axi4/Xbar.scala	/^object AXI4Xbar$/;"	c
AXI4XbarFuzzTest	src/main/scala/amba/axi4/Xbar.scala	/^class AXI4XbarFuzzTest(name: String, txns: Int, nMasters: Int, nSlaves: Int)(implicit p: Parameters) extends LazyModule$/;"	c
AXI4XbarTest	src/main/scala/amba/axi4/Xbar.scala	/^class AXI4XbarTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
AXI4_Lite	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class AXI4_Lite($/;"	c
AXISAdapterNode	src/main/scala/amba/axis/Nodes.scala	/^case class AXISAdapterNode($/;"	c
AXISBuffer	src/main/scala/amba/axis/Buffer.scala	/^class AXISBuffer(val params: BufferParams)(implicit p: Parameters) extends LazyModule$/;"	c
AXISBuffer	src/main/scala/amba/axis/Buffer.scala	/^object AXISBuffer$/;"	c
AXISBundle	src/main/scala/amba/axis/Bundles.scala	/^class AXISBundle(val params: AXISBundleParameters) extends IrrevocableIO(new AXISBundleBits(params)) {$/;"	c
AXISBundle	src/main/scala/amba/axis/Bundles.scala	/^object AXISBundle {$/;"	c
AXISBundleBits	src/main/scala/amba/axis/Bundles.scala	/^class AXISBundleBits(val params: AXISBundleParameters) extends BundleMap(AXISBundle.keys(params)) {$/;"	c
AXISBundleParameters	src/main/scala/amba/axis/Parameters.scala	/^class AXISBundleParameters private ($/;"	c
AXISBundleParameters	src/main/scala/amba/axis/Parameters.scala	/^object AXISBundleParameters {$/;"	c
AXISData	src/main/scala/amba/axis/Bundles.scala	/^case object AXISData extends DataKey   [UInt]("data") with AXISKey$/;"	c
AXISDataField	src/main/scala/amba/axis/Bundles.scala	/^case class AXISDataField(width: Int) extends BundleField(AXISData) {$/;"	c
AXISDest	src/main/scala/amba/axis/Bundles.scala	/^case object AXISDest extends ControlKey[UInt]("dest") with AXISKey$/;"	c
AXISDestField	src/main/scala/amba/axis/Bundles.scala	/^case class AXISDestField(width: Int) extends SimpleBundleField(AXISDest)(Output(UInt(width.W)), 0.U)$/;"	c
AXISEdgeParameters	src/main/scala/amba/axis/Parameters.scala	/^class AXISEdgeParameters private ($/;"	c
AXISEdgeParameters	src/main/scala/amba/axis/Parameters.scala	/^object AXISEdgeParameters {$/;"	c
AXISId	src/main/scala/amba/axis/Bundles.scala	/^case object AXISId   extends ControlKey[UInt]("id")   with AXISKey$/;"	c
AXISIdField	src/main/scala/amba/axis/Bundles.scala	/^case class AXISIdField  (width: Int) extends SimpleBundleField(AXISId)  (Output(UInt(width.W)), 0.U)$/;"	c
AXISIdentityNode	src/main/scala/amba/axis/Nodes.scala	/^case class AXISIdentityNode()(implicit valName: ValName) extends IdentityNode(AXISImp)()$/;"	c
AXISImp	src/main/scala/amba/axis/Nodes.scala	/^object AXISImp extends SimpleNodeImp[AXISMasterPortParameters, AXISSlavePortParameters, AXISEdgeParameters, AXISBundle]$/;"	c
AXISInwardNode	src/main/scala/amba/axis/package.scala	/^  type AXISInwardNode = InwardNodeHandle[AXISMasterPortParameters, AXISSlavePortParameters, AXISEdgeParameters, AXISBundle]$/;"	T
AXISKeep	src/main/scala/amba/axis/Bundles.scala	/^case object AXISKeep extends DataKey   [UInt]("keep") with AXISKey$/;"	c
AXISKeepField	src/main/scala/amba/axis/Bundles.scala	/^case class AXISKeepField(width: Int) extends SimpleBundleField(AXISKeep)(Output(UInt(width.W)), ~0.U(width.W))$/;"	c
AXISKey	src/main/scala/amba/axis/Bundles.scala	/^sealed trait AXISKey$/;"	t
AXISLast	src/main/scala/amba/axis/Bundles.scala	/^case object AXISLast extends ControlKey[Bool]("last") with AXISKey$/;"	c
AXISLastField	src/main/scala/amba/axis/Bundles.scala	/^case class AXISLastField()           extends SimpleBundleField(AXISLast)(Output(Bool()),        true.B)$/;"	c
AXISMasterNode	src/main/scala/amba/axis/Nodes.scala	/^case class AXISMasterNode(portParams: Seq[AXISMasterPortParameters])(implicit valName: ValName) extends SourceNode(AXISImp)(portParams)$/;"	c
AXISMasterParameters	src/main/scala/amba/axis/Parameters.scala	/^class AXISMasterParameters private ($/;"	c
AXISMasterParameters	src/main/scala/amba/axis/Parameters.scala	/^object AXISMasterParameters {$/;"	c
AXISMasterPortParameters	src/main/scala/amba/axis/Parameters.scala	/^class AXISMasterPortParameters private ($/;"	c
AXISMasterPortParameters	src/main/scala/amba/axis/Parameters.scala	/^object AXISMasterPortParameters {$/;"	c
AXISNexusNode	src/main/scala/amba/axis/Nodes.scala	/^case class AXISNexusNode($/;"	c
AXISNode	src/main/scala/amba/axis/package.scala	/^  type AXISNode = NodeHandle[AXISMasterPortParameters, AXISSlavePortParameters, AXISEdgeParameters, AXISBundle, AXISMasterPortParameters, AXISSlavePortParameters, AXISEdgeParameters, AXISBundle]$/;"	T
AXISOutwardNode	src/main/scala/amba/axis/package.scala	/^  type AXISOutwardNode = OutwardNodeHandle[AXISMasterPortParameters, AXISSlavePortParameters, AXISEdgeParameters, AXISBundle]$/;"	T
AXISSlaveNode	src/main/scala/amba/axis/Nodes.scala	/^case class AXISSlaveNode(portParams: Seq[AXISSlavePortParameters])(implicit valName: ValName) extends SinkNode(AXISImp)(portParams)$/;"	c
AXISSlaveParameters	src/main/scala/amba/axis/Parameters.scala	/^class AXISSlaveParameters private ($/;"	c
AXISSlaveParameters	src/main/scala/amba/axis/Parameters.scala	/^object AXISSlaveParameters {$/;"	c
AXISSlavePortParameters	src/main/scala/amba/axis/Parameters.scala	/^class AXISSlavePortParameters private ($/;"	c
AXISSlavePortParameters	src/main/scala/amba/axis/Parameters.scala	/^object AXISSlavePortParameters {$/;"	c
AXISStrb	src/main/scala/amba/axis/Bundles.scala	/^case object AXISStrb extends DataKey   [UInt]("strb") with AXISKey$/;"	c
AXISStrbField	src/main/scala/amba/axis/Bundles.scala	/^case class AXISStrbField(width: Int) extends SimpleBundleField(AXISStrb)(Output(UInt(width.W)), ~0.U(width.W))$/;"	c
AXISXbar	src/main/scala/amba/axis/Xbar.scala	/^class AXISXbar(beatBytes: Int, policy: TLArbiter.Policy = TLArbiter.roundRobin)(implicit p: Parameters) extends LazyModule$/;"	c
AXISXbar	src/main/scala/amba/axis/Xbar.scala	/^object AXISXbar$/;"	c
AbstractPipelineReg	src/main/scala/util/ShiftReg.scala	/^abstract class AbstractPipelineReg(w: Int = 1) extends Module {$/;"	c
AbstractPipelineReg	src/main/scala/util/ShiftReg.scala	/^object AbstractPipelineReg {$/;"	c
Access8Bit	src/main/scala/devices/debug/Debug.scala	/^  val Access8Bit, Access16Bit, Access32Bit, Access64Bit, Access128Bit = Value$/;"	l
AccessAck	src/main/scala/tilelink/Bundles.scala	/^  def AccessAck      = UInt(0) \/\/               .    .$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(a: TLBundleA): TLBundleD = AccessAck(a.source, a.size)$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(a: TLBundleA, data: UInt): TLBundleD = AccessAck(a.source, a.size, data)$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(a: TLBundleA, data: UInt, denied: Bool, corrupt: Bool): TLBundleD = AccessAck(a.source, a.size, data, denied, corrupt)$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(a: TLBundleA, denied: Bool): TLBundleD = AccessAck(a.source, a.size, denied)$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(b: TLBundleB): TLBundleC = AccessAck(b.source, address(b), b.size)$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(b: TLBundleB, data: UInt): TLBundleC = AccessAck(b.source, address(b), b.size, data)$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(b: TLBundleB, data: UInt, corrupt: Bool): TLBundleC = AccessAck(b.source, address(b), b.size, data, corrupt)$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(fromSource: UInt, toAddress: UInt, lgSize: UInt) = {$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(fromSource: UInt, toAddress: UInt, lgSize: UInt, data: UInt): TLBundleC = AccessAck(fromSource, toAddress, lgSize, data, Bool(false))$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(fromSource: UInt, toAddress: UInt, lgSize: UInt, data: UInt, corrupt: Bool) = {$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(toSource: UInt, lgSize: UInt): TLBundleD = AccessAck(toSource, lgSize, Bool(false))$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(toSource: UInt, lgSize: UInt, data: UInt): TLBundleD = AccessAck(toSource, lgSize, data, Bool(false), Bool(false))$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(toSource: UInt, lgSize: UInt, data: UInt, denied: Bool, corrupt: Bool) = {$/;"	m
AccessAck	src/main/scala/tilelink/Edges.scala	/^  def AccessAck(toSource: UInt, lgSize: UInt, denied: Bool) = {$/;"	m
AccessAckData	src/main/scala/tilelink/Bundles.scala	/^  def AccessAckData  = UInt(1) \/\/               .    .$/;"	m
AccessRegister	src/main/scala/devices/debug/Debug.scala	/^  val AccessRegister, QuickAccess  = Value$/;"	l
AccumulatorExample	src/main/scala/tile/LazyRoCC.scala	/^class AccumulatorExample(opcodes: OpcodeSet, val n: Int = 4)(implicit p: Parameters) extends LazyRoCC(opcodes) {$/;"	c
AccumulatorExampleModuleImp	src/main/scala/tile/LazyRoCC.scala	/^class AccumulatorExampleModuleImp(outer: AccumulatorExample)(implicit p: Parameters) extends LazyRoCCModuleImp(outer)$/;"	c
AcquireBlock	src/main/scala/tilelink/Bundles.scala	/^  def AcquireBlock   = UInt(6) \/\/     .                        => Grant[Data]$/;"	m
AcquireBlock	src/main/scala/tilelink/Edges.scala	/^  def AcquireBlock(fromSource: UInt, toAddress: UInt, lgSize: UInt, growPermissions: UInt) = {$/;"	m
AcquirePerm	src/main/scala/tilelink/Bundles.scala	/^  def AcquirePerm    = UInt(7) \/\/     .                        => Grant[Data]$/;"	m
AcquirePerm	src/main/scala/tilelink/Edges.scala	/^  def AcquirePerm(fromSource: UInt, toAddress: UInt, lgSize: UInt, growPermissions: UInt) = {$/;"	m
AdapterNode	src/main/scala/diplomacy/Nodes.scala	/^class AdapterNode[D, U, EO, EI, B <: Data](imp: NodeImp[D, U, EO, EI, B])($/;"	c
AddDefaultTests	src/main/scala/stage/phases/AddDefaultTests.scala	/^class AddDefaultTests extends Phase with PreservesAll[Phase] with HasRocketChipStageUtils {$/;"	c
AddressAdjuster	src/main/scala/tilelink/AddressAdjuster.scala	/^class AddressAdjuster($/;"	c
AddressAdjusterWrapper	src/main/scala/tilelink/BusWrapper.scala	/^class AddressAdjusterWrapper(params: AddressAdjusterWrapperParams, name: String)(implicit p: Parameters) extends TLBusWrapper(params, name) {$/;"	c
AddressAdjusterWrapperParams	src/main/scala/tilelink/BusWrapper.scala	/^case class AddressAdjusterWrapperParams($/;"	c
AddressBlockInfo	src/main/scala/regmapper/RegFieldDesc.scala	/^case class AddressBlockInfo ($/;"	c
AddressDecoder	src/main/scala/diplomacy/AddressDecoder.scala	/^object AddressDecoder$/;"	c
AddressMapAnnotation	src/main/scala/util/Annotations.scala	/^case class AddressMapAnnotation(target: Named, mapping: Seq[AddressMapEntry], label: String) extends SingleTargetAnnotation[Named] {$/;"	c
AddressMapEntry	src/main/scala/diplomacy/AddressRange.scala	/^case class AddressMapEntry(range: AddressRange, permissions: ResourcePermissions, names: Seq[String]) {$/;"	c
AddressRange	src/main/scala/diplomacy/AddressRange.scala	/^case class AddressRange(base: BigInt, size: BigInt) extends Ordered[AddressRange]$/;"	c
AddressRange	src/main/scala/diplomacy/AddressRange.scala	/^object AddressRange$/;"	c
AddressSet	src/main/scala/diplomacy/Parameters.scala	/^case class AddressSet(base: BigInt, mask: BigInt) extends Ordered[AddressSet]$/;"	c
AddressSet	src/main/scala/diplomacy/Parameters.scala	/^object AddressSet$/;"	c
AlgnError	src/main/scala/devices/debug/SBA.scala	/^  val AlgnError  = Value(3)$/;"	l
AlignmentExceptions	src/main/scala/rocket/HellaCache.scala	/^class AlignmentExceptions extends Bundle {$/;"	c
AllPuts	src/main/scala/tilelink/Fragmenter.scala	/^  case object AllPuts extends T$/;"	c
Annotated	src/main/scala/util/Annotations.scala	/^object Annotated {$/;"	c
AnyMixedNode	src/main/scala/diplomacy/package.scala	/^  type AnyMixedNode = MixedNode[_, _, _, _ <: Data, _, _, _, _ <: Data]$/;"	T
ArithMsg	src/main/scala/tilelink/Bundles.scala	/^  def ArithMsg:Seq[String] = Seq("MIN", "MAX", "MINU", "MAXU", "ADD")$/;"	m
Arithmetic	src/main/scala/tilelink/Edges.scala	/^  def Arithmetic(fromAddress: UInt, toSource: UInt, lgSize: UInt, data: UInt, atomic: UInt, corrupt: Bool = Bool(false)) = {$/;"	m
Arithmetic	src/main/scala/tilelink/Edges.scala	/^  def Arithmetic(fromSource: UInt, toAddress: UInt, lgSize: UInt, data: UInt, atomic: UInt, corrupt: Bool = Bool(false)): (Bool, TLBundleA) = {$/;"	m
ArithmeticData	src/main/scala/tilelink/Bundles.scala	/^  def ArithmeticData = UInt(2) \/\/     .    .                   => AccessAckData$/;"	m
AssemblyTestSuite	src/main/scala/system/RocketTestSuite.scala	/^class AssemblyTestSuite(prefix: String, val names: LinkedHashSet[String])(val envName: String) extends RocketTestSuite {$/;"	c
Assert	src/main/scala/util/Property.scala	/^  object Assert extends PropertyType("Assert")$/;"	c
Assume	src/main/scala/util/Property.scala	/^  object Assume extends PropertyType("Assume")$/;"	c
AsyncBundle	src/main/scala/util/AsyncQueue.scala	/^class AsyncBundle[T <: Data](private val gen: T, val params: AsyncQueueParams = AsyncQueueParams()) extends Bundle {$/;"	c
AsyncBundleSafety	src/main/scala/util/AsyncQueue.scala	/^class AsyncBundleSafety extends Bundle {$/;"	c
AsyncClockGroupsKey	src/main/scala/subsystem/BaseSubsystem.scala	/^case object AsyncClockGroupsKey extends Field[ClockGroupEphemeralNode](ClockGroupEphemeralNode()(ValName("clock_sources")))$/;"	c
AsyncQueue	src/main/scala/util/AsyncQueue.scala	/^class AsyncQueue[T <: Data](gen: T, params: AsyncQueueParams = AsyncQueueParams()) extends Crossing[T] {$/;"	c
AsyncQueueParams	src/main/scala/util/AsyncQueue.scala	/^case class AsyncQueueParams($/;"	c
AsyncQueueParams	src/main/scala/util/AsyncQueue.scala	/^object AsyncQueueParams {$/;"	c
AsyncQueueSink	src/main/scala/util/AsyncQueue.scala	/^class AsyncQueueSink[T <: Data](gen: T, params: AsyncQueueParams = AsyncQueueParams()) extends Module {$/;"	c
AsyncQueueSource	src/main/scala/util/AsyncQueue.scala	/^class AsyncQueueSource[T <: Data](gen: T, params: AsyncQueueParams = AsyncQueueParams()) extends Module {$/;"	c
AsyncRWSlaveRegField	src/main/scala/regmapper/RegisterCrossing.scala	/^object AsyncRWSlaveRegField {$/;"	c
AsyncResetReg	src/main/resources/vsrc/AsyncResetReg.v	/^module AsyncResetReg (d, q, en, clk, rst);$/;"	m
AsyncResetReg	src/main/scala/util/AsyncResetReg.scala	/^class AsyncResetReg(resetValue: Int = 0) extends RawModule {$/;"	c
AsyncResetReg	src/main/scala/util/AsyncResetReg.scala	/^object AsyncResetReg {$/;"	c
AsyncResetRegVec	src/main/scala/util/AsyncResetReg.scala	/^class AsyncResetRegVec(val w: Int, val init: BigInt) extends Module {$/;"	c
AsyncResetShiftReg	src/main/scala/util/ShiftReg.scala	/^class AsyncResetShiftReg(w: Int = 1, depth: Int = 1, init: Int = 0, name: String = "pipe") extends AbstractPipelineReg(w) {$/;"	c
AsyncResetShiftReg	src/main/scala/util/ShiftReg.scala	/^object AsyncResetShiftReg {$/;"	c
AsyncResetSynchronizerShiftReg	src/main/scala/util/SynchronizerReg.scala	/^class AsyncResetSynchronizerShiftReg(w: Int = 1, sync: Int, init: Int)$/;"	c
AsyncResetSynchronizerShiftReg	src/main/scala/util/SynchronizerReg.scala	/^object AsyncResetSynchronizerShiftReg {$/;"	c
AsyncValidSync	src/main/scala/util/AsyncQueue.scala	/^class AsyncValidSync(sync: Int, desc: String) extends RawModule {$/;"	c
Asynchronous	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^trait Asynchronous extends Synchronicity$/;"	t
AsynchronousCrossing	src/main/scala/diplomacy/ClockDomain.scala	/^case class AsynchronousCrossing(depth: Int = 8, sourceSync: Int = 3, sinkSync: Int = 3, safe: Boolean = true, narrow: Boolean = false) extends ClockCrossingType$/;"	c
Atomics	src/main/scala/tilelink/Atomics.scala	/^class Atomics(params: TLBundleParameters) extends Module$/;"	c
Attachable	src/main/scala/subsystem/Attachable.scala	/^trait Attachable extends HasTileLinkLocations { this: LazyModule =>$/;"	t
AutoBundle	src/main/scala/diplomacy/LazyModule.scala	/^final class AutoBundle(elts: (String, Data, Boolean)*) extends Record {$/;"	c
B	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object B extends OMExtensionType$/;"	c
BACKEND	vsim/Makefile	/^BACKEND ?= v$/;"	m
BDEP	src/main/scala/rocket/Instructions.scala	/^  def BDEP               = BitPat("b0100100??????????110?????0110011")$/;"	m
BDEPW	src/main/scala/rocket/Instructions.scala	/^  def BDEPW              = BitPat("b0100100??????????110?????0111011")$/;"	m
BEQ	src/main/scala/rocket/Instructions.scala	/^  def BEQ                = BitPat("b?????????????????000?????1100011")$/;"	m
BEXT	src/main/scala/rocket/Instructions.scala	/^  def BEXT               = BitPat("b0000100??????????110?????0110011")$/;"	m
BEXTW	src/main/scala/rocket/Instructions.scala	/^  def BEXTW              = BitPat("b0000100??????????110?????0111011")$/;"	m
BFP	src/main/scala/rocket/Instructions.scala	/^  def BFP                = BitPat("b0100100??????????111?????0110011")$/;"	m
BFPW	src/main/scala/rocket/Instructions.scala	/^  def BFPW               = BitPat("b0100100??????????111?????0111011")$/;"	m
BGE	src/main/scala/rocket/Instructions.scala	/^  def BGE                = BitPat("b?????????????????101?????1100011")$/;"	m
BGEU	src/main/scala/rocket/Instructions.scala	/^  def BGEU               = BitPat("b?????????????????111?????1100011")$/;"	m
BHT	src/main/scala/rocket/BTB.scala	/^class BHT(params: BHTParams)(implicit val p: Parameters) extends HasCoreParameters {$/;"	c
BHTParams	src/main/scala/rocket/BTB.scala	/^case class BHTParams($/;"	c
BHTResp	src/main/scala/rocket/BTB.scala	/^class BHTResp(implicit p: Parameters) extends BtbBundle()(p) {$/;"	c
BHTUpdate	src/main/scala/rocket/BTB.scala	/^class BHTUpdate(implicit p: Parameters) extends BtbBundle()(p) {$/;"	c
BIND_FLEX	src/main/scala/diplomacy/Nodes.scala	/^case object BIND_FLEX  extends NodeBinding {$/;"	c
BIND_ONCE	src/main/scala/diplomacy/Nodes.scala	/^case object BIND_ONCE  extends NodeBinding {$/;"	c
BIND_QUERY	src/main/scala/diplomacy/Nodes.scala	/^case object BIND_QUERY extends NodeBinding {$/;"	c
BIND_STAR	src/main/scala/diplomacy/Nodes.scala	/^case object BIND_STAR  extends NodeBinding {$/;"	c
BLT	src/main/scala/rocket/Instructions.scala	/^  def BLT                = BitPat("b?????????????????100?????1100011")$/;"	m
BLTU	src/main/scala/rocket/Instructions.scala	/^  def BLTU               = BitPat("b?????????????????110?????1100011")$/;"	m
BMATFLIP	src/main/scala/rocket/Instructions.scala	/^  def BMATFLIP           = BitPat("b011000000011?????001?????0010011")$/;"	m
BMATOR	src/main/scala/rocket/Instructions.scala	/^  def BMATOR             = BitPat("b0000100??????????011?????0110011")$/;"	m
BMATXOR	src/main/scala/rocket/Instructions.scala	/^  def BMATXOR            = BitPat("b0100100??????????011?????0110011")$/;"	m
BNE	src/main/scala/rocket/Instructions.scala	/^  def BNE                = BitPat("b?????????????????001?????1100011")$/;"	m
BP	src/main/scala/rocket/Breakpoint.scala	/^class BP(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
BPControl	src/main/scala/rocket/Breakpoint.scala	/^class BPControl(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
BPWatch	src/main/scala/rocket/Breakpoint.scala	/^class BPWatch (val n: Int) extends Bundle() {$/;"	c
BR_EQ	src/main/scala/rocket/Consts.scala	/^  def BR_EQ   = UInt(0, 3)$/;"	m
BR_GE	src/main/scala/rocket/Consts.scala	/^  def BR_GE   = UInt(5, 3)$/;"	m
BR_GEU	src/main/scala/rocket/Consts.scala	/^  def BR_GEU  = UInt(7, 3)$/;"	m
BR_J	src/main/scala/rocket/Consts.scala	/^  def BR_J    = UInt(2, 3)$/;"	m
BR_LT	src/main/scala/rocket/Consts.scala	/^  def BR_LT   = UInt(4, 3)$/;"	m
BR_LTU	src/main/scala/rocket/Consts.scala	/^  def BR_LTU  = UInt(6, 3)$/;"	m
BR_N	src/main/scala/rocket/Consts.scala	/^  def BR_N    = UInt(3, 3)$/;"	m
BR_NE	src/main/scala/rocket/Consts.scala	/^  def BR_NE   = UInt(1, 3)$/;"	m
BR_X	src/main/scala/rocket/Consts.scala	/^  def BR_X    = BitPat("b???")$/;"	m
BTB	src/main/scala/rocket/BTB.scala	/^class BTB(implicit p: Parameters) extends BtbModule {$/;"	c
BTBParams	src/main/scala/rocket/BTB.scala	/^case class BTBParams($/;"	c
BTBReq	src/main/scala/rocket/BTB.scala	/^class BTBReq(implicit p: Parameters) extends BtbBundle()(p) {$/;"	c
BTBResp	src/main/scala/rocket/BTB.scala	/^class BTBResp(implicit p: Parameters) extends BtbBundle()(p) {$/;"	c
BTBUpdate	src/main/scala/rocket/BTB.scala	/^class BTBUpdate(implicit p: Parameters) extends BtbBundle()(p) {$/;"	c
BURST_FIXED	src/main/scala/amba/axi4/Protocol.scala	/^  def BURST_FIXED = UInt(0, width = burstBits)$/;"	m
BURST_INCR	src/main/scala/amba/ahb/Protocol.scala	/^  def BURST_INCR   = UInt(1, width = burstBits) \/\/ Incrementing burst of arbitrary length, not crossing 1KB$/;"	m
BURST_INCR	src/main/scala/amba/axi4/Protocol.scala	/^  def BURST_INCR  = UInt(1, width = burstBits)$/;"	m
BURST_INCR16	src/main/scala/amba/ahb/Protocol.scala	/^  def BURST_INCR16 = UInt(7, width = burstBits) \/\/ 16-beat incrementing burst$/;"	m
BURST_INCR4	src/main/scala/amba/ahb/Protocol.scala	/^  def BURST_INCR4  = UInt(3, width = burstBits) \/\/ 4-beat incrementing burst$/;"	m
BURST_INCR8	src/main/scala/amba/ahb/Protocol.scala	/^  def BURST_INCR8  = UInt(5, width = burstBits) \/\/ 8-beat incrementing burst$/;"	m
BURST_SINGLE	src/main/scala/amba/ahb/Protocol.scala	/^  def BURST_SINGLE = UInt(0, width = burstBits) \/\/ Single access (no burst)$/;"	m
BURST_WRAP	src/main/scala/amba/axi4/Protocol.scala	/^  def BURST_WRAP  = UInt(2, width = burstBits)$/;"	m
BURST_WRAP16	src/main/scala/amba/ahb/Protocol.scala	/^  def BURST_WRAP16 = UInt(6, width = burstBits) \/\/ 16-beat wrapping burst$/;"	m
BURST_WRAP4	src/main/scala/amba/ahb/Protocol.scala	/^  def BURST_WRAP4  = UInt(2, width = burstBits) \/\/ 4-beat wrapping burst$/;"	m
BURST_WRAP8	src/main/scala/amba/ahb/Protocol.scala	/^  def BURST_WRAP8  = UInt(4, width = burstBits) \/\/ 8-beat wrapping burst$/;"	m
BadAccess	src/main/scala/devices/debug/SBA.scala	/^  val BadAccess  = Value(4)$/;"	l
BadAddr	src/main/scala/devices/debug/SBA.scala	/^  val BadAddr    = Value(2)$/;"	l
BankBinder	src/main/scala/tilelink/BankBinder.scala	/^class BankBinder(mask: BigInt)(implicit p: Parameters) extends LazyModule$/;"	c
BankBinder	src/main/scala/tilelink/BankBinder.scala	/^object BankBinder$/;"	c
BankBinderNode	src/main/scala/tilelink/BankBinder.scala	/^case class BankBinderNode(mask: BigInt)(implicit valName: ValName) extends TLCustomNode$/;"	c
BankedL2Key	src/main/scala/subsystem/BankedL2Params.scala	/^case object BankedL2Key extends Field(BankedL2Params())$/;"	c
BankedL2Params	src/main/scala/subsystem/BankedL2Params.scala	/^case class BankedL2Params($/;"	c
Bare	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object Bare extends OMAddressTranslationMode$/;"	c
BareSubsystem	src/main/scala/subsystem/BaseSubsystem.scala	/^abstract class BareSubsystem(implicit p: Parameters) extends LazyModule with BindingScope {$/;"	c
BareSubsystemModuleImp	src/main/scala/subsystem/BaseSubsystem.scala	/^abstract class BareSubsystemModuleImp[+L <: BareSubsystem](_outer: L) extends LazyModuleImp(_outer) {$/;"	c
BaseConfig	src/main/scala/system/Configs.scala	/^class BaseConfig extends Config($/;"	c
BaseExtensions	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^object BaseExtensions {$/;"	c
BaseFPGAConfig	src/main/scala/system/Configs.scala	/^class BaseFPGAConfig extends Config(new BaseConfig ++ new WithCoherentBusTopology)$/;"	c
BaseNode	src/main/scala/diplomacy/Nodes.scala	/^abstract class BaseNode(implicit val valName: ValName) {$/;"	c
BaseNode	src/main/scala/diplomacy/Nodes.scala	/^object BaseNode {$/;"	c
BaseProperty	src/main/scala/util/Property.scala	/^abstract class BaseProperty {$/;"	c
BasePropertyLibrary	src/main/scala/util/Property.scala	/^abstract class BasePropertyLibrary {$/;"	c
BasePropertyParameters	src/main/scala/util/Property.scala	/^trait BasePropertyParameters {$/;"	t
BaseSubsystem	src/main/scala/subsystem/BaseSubsystem.scala	/^abstract class BaseSubsystem(val location: HierarchicalLocation = InSubsystem)$/;"	c
BaseSubsystemConfig	src/main/scala/subsystem/Configs.scala	/^class BaseSubsystemConfig extends Config ((site, here, up) => {$/;"	c
BaseSubsystemModuleImp	src/main/scala/subsystem/BaseSubsystem.scala	/^abstract class BaseSubsystemModuleImp[+L <: BaseSubsystem](_outer: L) extends BareSubsystemModuleImp(_outer) {$/;"	c
BaseTile	src/main/scala/tile/BaseTile.scala	/^abstract class BaseTile private (val crossing: ClockCrossingType, q: Parameters)$/;"	c
BaseTileModuleImp	src/main/scala/tile/BaseTile.scala	/^abstract class BaseTileModuleImp[+L <: BaseTile](val outer: L) extends LazyModuleImp(outer) with HasTileParameters$/;"	c
BasicBusBlocker	src/main/scala/devices/tilelink/BusBlocker.scala	/^class BasicBusBlocker(params: BasicBusBlockerParams)(implicit p: Parameters)$/;"	c
BasicBusBlocker	src/main/scala/devices/tilelink/BusBlocker.scala	/^object BasicBusBlocker {$/;"	c
BasicBusBlockerParams	src/main/scala/devices/tilelink/BusBlocker.scala	/^case class BasicBusBlockerParams($/;"	c
BenchmarkTestSuite	src/main/scala/system/RocketTestSuite.scala	/^class BenchmarkTestSuite(makePrefix: String, val dir: String, val names: LinkedHashSet[String]) extends RocketTestSuite {$/;"	c
BigIntHexContext	src/main/scala/diplomacy/package.scala	/^  implicit class BigIntHexContext(private val sc: StringContext) extends AnyVal {$/;"	c
BigIntToProperty	src/main/scala/diplomacy/package.scala	/^  implicit class BigIntToProperty(x: BigInt) {$/;"	c
Binding	src/main/scala/diplomacy/Resources.scala	/^case class Binding(device: Option[Device], value: ResourceValue)$/;"	c
BindingScope	src/main/scala/diplomacy/Resources.scala	/^object BindingScope$/;"	c
BindingScope	src/main/scala/diplomacy/Resources.scala	/^trait BindingScope$/;"	t
BitRange	src/main/resources/csrc/float_fix.cc	/^uint64_t BitRange(uint64_t x, int high, int low) {$/;"	f
BlackBoxExample	src/main/scala/tile/LazyRoCC.scala	/^class BlackBoxExample(opcodes: OpcodeSet, blackBoxFile: String)(implicit p: Parameters)$/;"	c
BlackBoxExampleModuleImp	src/main/scala/tile/LazyRoCC.scala	/^class BlackBoxExampleModuleImp(outer: BlackBoxExample, blackBoxFile: String)(implicit p: Parameters)$/;"	c
BlackBoxedROM	src/main/scala/util/ROMGenerator.scala	/^class BlackBoxedROM(c: ROMConfig) extends BlackBox {$/;"	c
BlockDuringReset	src/main/scala/util/BlockDuringReset.scala	/^object BlockDuringReset$/;"	c
Blockable	src/main/scala/util/Blockable.scala	/^object Blockable {$/;"	c
Blockable	src/main/scala/util/Blockable.scala	/^trait Blockable[T <: Data] {$/;"	t
BlockableBool	src/main/scala/util/Blockable.scala	/^  implicit object BlockableBool extends Blockable[Bool] {$/;"	c
BlockableDataCanBeValid	src/main/scala/util/Blockable.scala	/^  implicit def BlockableDataCanBeValid[T <: DataCanBeValid]: Blockable[T] = new Blockable[T] {$/;"	m
BlockableDecoupled	src/main/scala/util/Blockable.scala	/^  implicit def BlockableDecoupled[T <: Data]: Blockable[DecoupledIO[T]] = new Blockable[DecoupledIO[T]] {$/;"	m
BlockableTraceCoreInterface	src/main/scala/util/Blockable.scala	/^  implicit object BlockableTraceCoreInterface extends Blockable[TraceCoreInterface] {$/;"	c
BlockableVec	src/main/scala/util/Blockable.scala	/^  implicit def BlockableVec[T <: Data : Blockable]: Blockable[Vec[T]] = new Blockable[Vec[T]] {$/;"	m
BooleanToAugmentedBoolean	src/main/scala/util/package.scala	/^  implicit class BooleanToAugmentedBoolean(private val x: Boolean) extends AnyVal {$/;"	c
BootROM	src/main/scala/devices/tilelink/BootROM.scala	/^object BootROM {$/;"	c
BootROMLocated	src/main/scala/devices/tilelink/BootROM.scala	/^case class BootROMLocated(loc: HierarchicalLocation) extends Field[Option[BootROMParams]](None)$/;"	c
BootROMParams	src/main/scala/devices/tilelink/BootROM.scala	/^case class BootROMParams($/;"	c
Branch	src/main/scala/tilelink/Metadata.scala	/^  def Branch  = UInt(1, width)$/;"	m
BreakpointUnit	src/main/scala/rocket/Breakpoint.scala	/^class BreakpointUnit(n: Int)(implicit val p: Parameters) extends Module with HasCoreParameters {$/;"	c
BroadcastFilter	src/main/scala/tilelink/Broadcast.scala	/^class BroadcastFilter(params: ProbeFilterParams) extends ProbeFilter(params) {$/;"	c
BroadcastFilter	src/main/scala/tilelink/Broadcast.scala	/^object BroadcastFilter {$/;"	c
BroadcastKey	src/main/scala/subsystem/BankedL2Params.scala	/^case object BroadcastKey extends Field(BroadcastParams())$/;"	c
BroadcastParams	src/main/scala/subsystem/BankedL2Params.scala	/^    val BroadcastParams(nTrackers, bufferless, controlAddress, filterFactory) = p(BroadcastKey)$/;"	l
BroadcastParams	src/main/scala/subsystem/BankedL2Params.scala	/^case class BroadcastParams($/;"	c
Broadcaster	src/main/scala/util/Broadcaster.scala	/^class Broadcaster[T <: Data](typ: T, n: Int) extends Module {$/;"	c
Broadcaster	src/main/scala/util/Broadcaster.scala	/^object Broadcaster {$/;"	c
BtbBundle	src/main/scala/rocket/BTB.scala	/^abstract class BtbBundle(implicit val p: Parameters) extends Bundle with HasBtbParameters$/;"	c
BtbModule	src/main/scala/rocket/BTB.scala	/^abstract class BtbModule(implicit val p: Parameters) extends Module with HasBtbParameters {$/;"	c
BtoB	src/main/scala/tilelink/Bundles.scala	/^  def BtoB = UInt(4, cWidth)$/;"	m
BtoN	src/main/scala/tilelink/Bundles.scala	/^  def BtoN = UInt(2, cWidth)$/;"	m
BtoT	src/main/scala/tilelink/Bundles.scala	/^  def BtoT = UInt(2, aWidth)$/;"	m
BufferParams	src/main/scala/diplomacy/Parameters.scala	/^case class BufferParams(depth: Int, flow: Boolean, pipe: Boolean)$/;"	c
BufferParams	src/main/scala/diplomacy/Parameters.scala	/^object BufferParams$/;"	c
BuildHellaCache	src/main/scala/rocket/HellaCache.scala	/^case object BuildHellaCache extends Field[BaseTile => Parameters => HellaCache](HellaCacheFactory.apply)$/;"	c
BuildRoCC	src/main/scala/tile/LazyRoCC.scala	/^case object BuildRoCC extends Field[Seq[Parameters => LazyRoCC]](Nil)$/;"	c
BuiltInDevices	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^object BuiltInDevices {$/;"	c
BuiltInDevices	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^sealed trait BuiltInDevices {$/;"	t
BuiltInErrorDeviceParams	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^case class BuiltInErrorDeviceParams($/;"	c
BuiltInZeroDeviceParams	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^case class BuiltInZeroDeviceParams($/;"	c
BundleBridgeBlockDuringReset	src/main/scala/prci/BundleBridgeBlockDuringReset.scala	/^object BundleBridgeBlockDuringReset {$/;"	c
BundleBridgeEdgeParams	src/main/scala/diplomacy/BundleBridge.scala	/^case class BundleBridgeEdgeParams[T <: Data](source: BundleBridgeParams[T], sink: BundleBridgeParams[T])$/;"	c
BundleBridgeEphemeralNode	src/main/scala/diplomacy/BundleBridge.scala	/^case class BundleBridgeEphemeralNode[T <: Data]()(implicit valName: ValName) extends EphemeralNode(new BundleBridgeImp[T])()$/;"	c
BundleBridgeIdentityNode	src/main/scala/diplomacy/BundleBridge.scala	/^case class BundleBridgeIdentityNode[T <: Data]()(implicit valName: ValName) extends IdentityNode(new BundleBridgeImp[T])()$/;"	c
BundleBridgeImp	src/main/scala/diplomacy/BundleBridge.scala	/^class BundleBridgeImp[T <: Data]() extends SimpleNodeImp[BundleBridgeParams[T], BundleBridgeParams[T], BundleBridgeEdgeParams[T], T]$/;"	c
BundleBridgeInwardNode	src/main/scala/diplomacy/package.scala	/^  type BundleBridgeInwardNode[T <: Data] = InwardNodeHandle[BundleBridgeParams[T], BundleBridgeParams[T], BundleBridgeEdgeParams[T], T]$/;"	T
BundleBridgeNameNode	src/main/scala/diplomacy/BundleBridge.scala	/^object BundleBridgeNameNode {$/;"	c
BundleBridgeNexus	src/main/scala/diplomacy/BundleBridge.scala	/^class BundleBridgeNexus[T <: Data]($/;"	c
BundleBridgeNexus	src/main/scala/diplomacy/BundleBridge.scala	/^object BundleBridgeNexus {$/;"	c
BundleBridgeNexusNode	src/main/scala/diplomacy/BundleBridge.scala	/^case class BundleBridgeNexusNode[T <: Data](default: Option[() => T] = None,$/;"	c
BundleBridgeNode	src/main/scala/diplomacy/package.scala	/^  type BundleBridgeNode[T <: Data] = NodeHandle[BundleBridgeParams[T], BundleBridgeParams[T], BundleBridgeEdgeParams[T], T, BundleBridgeParams[T], BundleBridgeParams[T], BundleBridgeEdgeParams[T], T]$/;"	T
BundleBridgeOutwardNode	src/main/scala/diplomacy/package.scala	/^  type BundleBridgeOutwardNode[T <: Data] = OutwardNodeHandle[BundleBridgeParams[T], BundleBridgeParams[T], BundleBridgeEdgeParams[T], T]$/;"	T
BundleBridgeParams	src/main/scala/diplomacy/BundleBridge.scala	/^case class BundleBridgeParams[T <: Data](genOpt: Option[() => T])$/;"	c
BundleBridgeParams	src/main/scala/diplomacy/BundleBridge.scala	/^case object BundleBridgeParams {$/;"	c
BundleBridgeSink	src/main/scala/diplomacy/BundleBridge.scala	/^case class BundleBridgeSink[T <: Data](genOpt: Option[() => T] = None)$/;"	c
BundleBridgeSink	src/main/scala/diplomacy/BundleBridge.scala	/^object BundleBridgeSink {$/;"	c
BundleBridgeSource	src/main/scala/diplomacy/BundleBridge.scala	/^case class BundleBridgeSource[T <: Data](genOpt: Option[() => T] = None)(implicit valName: ValName) extends SourceNode(new BundleBridgeImp[T])(Seq(BundleBridgeParams(genOpt)))$/;"	c
BundleBridgeSource	src/main/scala/diplomacy/BundleBridge.scala	/^object BundleBridgeSource {$/;"	c
BundleBroadcast	src/main/scala/diplomacy/BundleBridge.scala	/^object BundleBroadcast {$/;"	c
BundleField	src/main/scala/util/BundleMap.scala	/^abstract class BundleField[T <: Data](val key: BundleKey[T]) extends BundleFieldBase$/;"	c
BundleField	src/main/scala/util/BundleMap.scala	/^object BundleField {$/;"	c
BundleFieldBase	src/main/scala/util/BundleMap.scala	/^sealed trait BundleFieldBase {$/;"	t
BundleKey	src/main/scala/util/BundleMap.scala	/^sealed class BundleKey[T <: Data](val name: String) extends BundleKeyBase$/;"	c
BundleKeyBase	src/main/scala/util/BundleMap.scala	/^sealed trait BundleKeyBase {$/;"	t
BundleMap	src/main/scala/util/BundleMap.scala	/^class BundleMap(val fields: Seq[BundleFieldBase]) extends Record with CustomBulkAssignable {$/;"	c
BundleMap	src/main/scala/util/BundleMap.scala	/^object BundleMap {$/;"	c
BusAtomics	src/main/scala/subsystem/PeripheryBus.scala	/^case class BusAtomics($/;"	c
BusErrorLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^class BusErrorLogicalTreeNode(device: => SimpleDevice, f: => OMRegisterMap) extends LogicalTreeNode(() => Some(device)) {$/;"	c
BusErrorUnit	src/main/scala/tile/BusErrorUnit.scala	/^class BusErrorUnit[T <: BusErrors](t: => T, params: BusErrorUnitParams, logicalTreeNode: LogicalTreeNode)(implicit p: Parameters) extends LazyModule {$/;"	c
BusErrorUnitParams	src/main/scala/tile/BusErrorUnit.scala	/^case class BusErrorUnitParams(addr: BigInt, size: Int = 4096)$/;"	c
BusErrors	src/main/scala/tile/BusErrorUnit.scala	/^trait BusErrors extends Bundle {$/;"	t
BusMemoryLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^class BusMemoryLogicalTreeNode($/;"	c
BusyRegisterCrossing	src/main/scala/regmapper/RegisterCrossing.scala	/^class BusyRegisterCrossing extends Module {$/;"	c
ByteMonitor	src/main/scala/tilelink/RAMModel.scala	/^  class ByteMonitor(params: MonitorParameters) extends GenericParameterizedBundle(params) {$/;"	c
C	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object C extends OMExtensionType$/;"	c
C	src/main/scala/rocket/CSR.scala	/^  def C = UInt(7,SZ)$/;"	m
C	src/main/scala/tile/BaseTile.scala	/^    class C(implicit val p: Parameters) extends HasCoreParameters$/;"	c
CACHED	src/main/scala/diplomacy/Parameters.scala	/^  case object CACHED      extends T \/\/ an intermediate agent may have cached a copy of the region for you$/;"	c
CACHE_BUFFERABLE	src/main/scala/amba/axi4/Protocol.scala	/^  def CACHE_BUFFERABLE = UInt(1, width = cacheBits)$/;"	m
CACHE_MODIFIABLE	src/main/scala/amba/axi4/Protocol.scala	/^  def CACHE_MODIFIABLE = UInt(2, width = cacheBits)$/;"	m
CACHE_RALLOCATE	src/main/scala/amba/axi4/Protocol.scala	/^  def CACHE_RALLOCATE  = UInt(8, width = cacheBits)$/;"	m
CACHE_WALLOCATE	src/main/scala/amba/axi4/Protocol.scala	/^  def CACHE_WALLOCATE  = UInt(4, width = cacheBits)$/;"	m
CAMParams	src/main/scala/tilelink/AtomicAutomata.scala	/^  case class CAMParams(a: TLBundleParameters, domainsNeedingHelp: Int)$/;"	c
CAM_A	src/main/scala/tilelink/AtomicAutomata.scala	/^  class CAM_A(params: CAMParams) extends GenericParameterizedBundle(params) {$/;"	c
CAM_D	src/main/scala/tilelink/AtomicAutomata.scala	/^  class CAM_D(params: CAMParams) extends GenericParameterizedBundle(params) {$/;"	c
CAM_S	src/main/scala/tilelink/AtomicAutomata.scala	/^  class CAM_S(params: CAMParams) extends GenericParameterizedBundle(params) {$/;"	c
CBUS	src/main/scala/subsystem/BusTopology.scala	/^case object CBUS extends TLBusWrapperLocation("subsystem_cbus")$/;"	c
CC	scripts/debug_rom/Makefile	/^CC = $(RISCV)\/bin\/riscv64-unknown-elf-gcc$/;"	m
CDISCARD_D_L1	src/main/scala/rocket/Instructions.scala	/^  def CDISCARD_D_L1      = BitPat("b111111000010?????000000001110011")$/;"	m
CEASE	src/main/scala/rocket/Instructions.scala	/^  def CEASE              = BitPat("b00110000010100000000000001110011")$/;"	m
CFIType	src/main/scala/rocket/BTB.scala	/^object CFIType {$/;"	c
CFLUSH_D_L1	src/main/scala/rocket/Instructions.scala	/^  def CFLUSH_D_L1        = BitPat("b111111000000?????000000001110011")$/;"	m
CFlushDecode	src/main/scala/rocket/IDecode.scala	/^class CFlushDecode(supportsFlushLine: Boolean)(implicit val p: Parameters) extends DecodeConstants$/;"	c
CJTAG	src/main/scala/devices/debug/Periphery.scala	/^case object CJTAG extends DebugExportProtocol$/;"	c
CJTAG	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^case object CJTAG extends OMDebugInterfaceType$/;"	c
CLEAR	src/main/scala/regmapper/RegFieldDesc.scala	/^  val CLEAR, SET, MODIFY = Value$/;"	l
CLINT	src/main/scala/devices/tilelink/CLINT.scala	/^class CLINT(params: CLINTParams, beatBytes: Int)(implicit p: Parameters) extends LazyModule$/;"	c
CLINTAttachKey	src/main/scala/devices/tilelink/CLINT.scala	/^case object CLINTAttachKey extends Field(CLINTAttachParams())$/;"	c
CLINTAttachParams	src/main/scala/devices/tilelink/CLINT.scala	/^case class CLINTAttachParams($/;"	c
CLINTConsts	src/main/scala/devices/tilelink/CLINT.scala	/^object CLINTConsts$/;"	c
CLINTKey	src/main/scala/devices/tilelink/CLINT.scala	/^case object CLINTKey extends Field[Option[CLINTParams]](None)$/;"	c
CLINTLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^class CLINTLogicalTreeNode(device: SimpleDevice, f: => OMRegisterMap) extends LogicalTreeNode(() => Some(device)) {$/;"	c
CLINTParams	src/main/scala/devices/tilelink/CLINT.scala	/^case class CLINTParams(baseAddress: BigInt = 0x02000000, intStages: Int = 0)$/;"	c
CLMUL	src/main/scala/rocket/Instructions.scala	/^  def CLMUL              = BitPat("b0000101??????????001?????0110011")$/;"	m
CLMULH	src/main/scala/rocket/Instructions.scala	/^  def CLMULH             = BitPat("b0000101??????????011?????0110011")$/;"	m
CLMULHW	src/main/scala/rocket/Instructions.scala	/^  def CLMULHW            = BitPat("b0000101??????????011?????0111011")$/;"	m
CLMULR	src/main/scala/rocket/Instructions.scala	/^  def CLMULR             = BitPat("b0000101??????????010?????0110011")$/;"	m
CLMULRW	src/main/scala/rocket/Instructions.scala	/^  def CLMULRW            = BitPat("b0000101??????????010?????0111011")$/;"	m
CLMULW	src/main/scala/rocket/Instructions.scala	/^  def CLMULW             = BitPat("b0000101??????????001?????0111011")$/;"	m
CLZ	src/main/scala/rocket/Instructions.scala	/^  def CLZ                = BitPat("b011000000000?????001?????0010011")$/;"	m
CLZW	src/main/scala/rocket/Instructions.scala	/^  def CLZW               = BitPat("b011000000000?????001?????0011011")$/;"	m
CMIX	src/main/scala/rocket/Instructions.scala	/^  def CMIX               = BitPat("b?????11??????????001?????0110011")$/;"	m
CMOV	src/main/scala/rocket/Instructions.scala	/^  def CMOV               = BitPat("b?????11??????????101?????0110011")$/;"	m
COMMANDFields	src/main/scala/devices/debug/dm_registers.scala	/^class COMMANDFields extends Bundle {$/;"	c
COMMANDRdData	src/main/scala/devices/debug/Debug.scala	/^    val COMMANDRdData = COMMANDReg$/;"	l
COMMANDRdEn	src/main/scala/devices/debug/Debug.scala	/^    val COMMANDRdEn  = WireInit(false.B)$/;"	l
COMMANDReg	src/main/scala/devices/debug/Debug.scala	/^    val COMMANDReg = Reg(new COMMANDFields())$/;"	l
COMMANDReset	src/main/scala/devices/debug/Debug.scala	/^    val COMMANDReset = WireInit(0.U.asTypeOf(new COMMANDFields()))$/;"	l
COMMANDWrData	src/main/scala/devices/debug/Debug.scala	/^    val COMMANDWrData       = WireInit(COMMANDWrDataVal.asTypeOf(new COMMANDFields()))$/;"	l
COMMANDWrDataVal	src/main/scala/devices/debug/Debug.scala	/^    val COMMANDWrDataVal    = WireInit(0.U(32.W))$/;"	l
COMMANDWrEn	src/main/scala/devices/debug/Debug.scala	/^    val COMMANDWrEn = COMMANDWrEnMaybe && COMMANDWrEnLegal$/;"	l
COMMANDWrEnLegal	src/main/scala/devices/debug/Debug.scala	/^    val COMMANDWrEnLegal    = WireInit(false.B)$/;"	l
COMMANDWrEnMaybe	src/main/scala/devices/debug/Debug.scala	/^    val COMMANDWrEnMaybe    = WireInit(false.B)$/;"	l
COMPILE	scripts/debug_rom/Makefile	/^COMPILE = $(CC) -nostdlib -nostartfiles -I$(RISCV)\/riscv64-unknown-elf\/include\/ -Tlink.ld$/;"	m
CONFIGS	regression/Makefile	/^CONFIGS=$(PROJECT).AMBAUnitTestConfig $(PROJECT).TLSimpleUnitTestConfig $(PROJECT).TLWidthUnitTestConfig$/;"	m
CONFIGS	regression/Makefile	/^CONFIGS=$(PROJECT).DefaultBufferlessConfig$/;"	m
CONFIGS	regression/Makefile	/^CONFIGS=$(PROJECT).DefaultConfig$/;"	m
CONFIGS	regression/Makefile	/^CONFIGS=$(PROJECT).TinyConfig$/;"	m
CONFIGS	regression/Makefile	/^CONFIGS=\\$/;"	m
CONFIGS_32	regression/Makefile	/^CONFIGS_32=$(PROJECT).WithJtagDTMSystem,$(PROJECT).DefaultRV32Config$/;"	m
CONFIGS_32	regression/Makefile	/^CONFIGS_32=$(PROJECT).WithJtagDTMSystem,$(PROJECT).WithDebugSBASystem,$(PROJECT).DefaultRV32Config$/;"	m
CONFIGS_64	regression/Makefile	/^CONFIGS_64=$(PROJECT).WithJtagDTMSystem,$(PROJECT).DefaultConfig$/;"	m
CONFIGS_64	regression/Makefile	/^CONFIGS_64=$(PROJECT).WithJtagDTMSystem,$(PROJECT).WithDebugSBASystem,$(PROJECT).DefaultConfig$/;"	m
CONFSTRPTR0Fields	src/main/scala/devices/debug/dm_registers.scala	/^class CONFSTRPTR0Fields extends Bundle {$/;"	c
CRC	src/main/scala/util/CRC.scala	/^object CRC$/;"	c
CRC32C_B	src/main/scala/rocket/Instructions.scala	/^  def CRC32C_B           = BitPat("b011000011000?????001?????0010011")$/;"	m
CRC32C_D	src/main/scala/rocket/Instructions.scala	/^  def CRC32C_D           = BitPat("b011000011011?????001?????0010011")$/;"	m
CRC32C_H	src/main/scala/rocket/Instructions.scala	/^  def CRC32C_H           = BitPat("b011000011001?????001?????0010011")$/;"	m
CRC32C_W	src/main/scala/rocket/Instructions.scala	/^  def CRC32C_W           = BitPat("b011000011010?????001?????0010011")$/;"	m
CRC32_B	src/main/scala/rocket/Instructions.scala	/^  def CRC32_B            = BitPat("b011000010000?????001?????0010011")$/;"	m
CRC32_D	src/main/scala/rocket/Instructions.scala	/^  def CRC32_D            = BitPat("b011000010011?????001?????0010011")$/;"	m
CRC32_H	src/main/scala/rocket/Instructions.scala	/^  def CRC32_H            = BitPat("b011000010001?????001?????0010011")$/;"	m
CRC32_W	src/main/scala/rocket/Instructions.scala	/^  def CRC32_W            = BitPat("b011000010010?????001?????0010011")$/;"	m
CRC_16F_4_2	src/main/scala/util/CRC.scala	/^  val CRC_16F_4_2 = BigInt(0x1a2eb) \/\/ HD=4 for <32751 bits and HD=6 for <93 bits$/;"	l
CSR	src/main/scala/rocket/CSR.scala	/^object CSR$/;"	c
CSRDecodeIO	src/main/scala/rocket/CSR.scala	/^class CSRDecodeIO(implicit p: Parameters) extends CoreBundle {$/;"	c
CSRFile	src/main/scala/rocket/CSR.scala	/^class CSRFile($/;"	c
CSRFileIO	src/main/scala/rocket/CSR.scala	/^class CSRFileIO(implicit p: Parameters) extends CoreBundle$/;"	c
CSRRC	src/main/scala/rocket/Instructions.scala	/^  def CSRRC              = BitPat("b?????????????????011?????1110011")$/;"	m
CSRRCI	src/main/scala/rocket/Instructions.scala	/^  def CSRRCI             = BitPat("b?????????????????111?????1110011")$/;"	m
CSRRS	src/main/scala/rocket/Instructions.scala	/^  def CSRRS              = BitPat("b?????????????????010?????1110011")$/;"	m
CSRRSI	src/main/scala/rocket/Instructions.scala	/^  def CSRRSI             = BitPat("b?????????????????110?????1110011")$/;"	m
CSRRW	src/main/scala/rocket/Instructions.scala	/^  def CSRRW              = BitPat("b?????????????????001?????1110011")$/;"	m
CSRRWI	src/main/scala/rocket/Instructions.scala	/^  def CSRRWI             = BitPat("b?????????????????101?????1110011")$/;"	m
CSR_DSCRATCH1	scripts/debug_rom/debug_rom_nonzero.S	/^#define CSR_DSCRATCH1 (CSR_DSCRATCH + 1)$/;"	d
CSRs	src/main/scala/rocket/Instructions.scala	/^object CSRs {$/;"	c
CTZ	src/main/scala/rocket/Instructions.scala	/^  def CTZ                = BitPat("b011000000001?????001?????0010011")$/;"	m
CTZW	src/main/scala/rocket/Instructions.scala	/^  def CTZW               = BitPat("b011000000001?????001?????0011011")$/;"	m
CUSTOM0	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM0            = BitPat("b?????????????????000?????0001011")$/;"	m
CUSTOM0_RD	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM0_RD         = BitPat("b?????????????????100?????0001011")$/;"	m
CUSTOM0_RD_RS1	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM0_RD_RS1     = BitPat("b?????????????????110?????0001011")$/;"	m
CUSTOM0_RD_RS1_RS2	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM0_RD_RS1_RS2 = BitPat("b?????????????????111?????0001011")$/;"	m
CUSTOM0_RS1	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM0_RS1        = BitPat("b?????????????????010?????0001011")$/;"	m
CUSTOM0_RS1_RS2	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM0_RS1_RS2    = BitPat("b?????????????????011?????0001011")$/;"	m
CUSTOM1	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM1            = BitPat("b?????????????????000?????0101011")$/;"	m
CUSTOM1_RD	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM1_RD         = BitPat("b?????????????????100?????0101011")$/;"	m
CUSTOM1_RD_RS1	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM1_RD_RS1     = BitPat("b?????????????????110?????0101011")$/;"	m
CUSTOM1_RD_RS1_RS2	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM1_RD_RS1_RS2 = BitPat("b?????????????????111?????0101011")$/;"	m
CUSTOM1_RS1	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM1_RS1        = BitPat("b?????????????????010?????0101011")$/;"	m
CUSTOM1_RS1_RS2	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM1_RS1_RS2    = BitPat("b?????????????????011?????0101011")$/;"	m
CUSTOM2	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM2            = BitPat("b?????????????????000?????1011011")$/;"	m
CUSTOM2_RD	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM2_RD         = BitPat("b?????????????????100?????1011011")$/;"	m
CUSTOM2_RD_RS1	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM2_RD_RS1     = BitPat("b?????????????????110?????1011011")$/;"	m
CUSTOM2_RD_RS1_RS2	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM2_RD_RS1_RS2 = BitPat("b?????????????????111?????1011011")$/;"	m
CUSTOM2_RS1	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM2_RS1        = BitPat("b?????????????????010?????1011011")$/;"	m
CUSTOM2_RS1_RS2	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM2_RS1_RS2    = BitPat("b?????????????????011?????1011011")$/;"	m
CUSTOM3	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM3            = BitPat("b?????????????????000?????1111011")$/;"	m
CUSTOM3_RD	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM3_RD         = BitPat("b?????????????????100?????1111011")$/;"	m
CUSTOM3_RD_RS1	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM3_RD_RS1     = BitPat("b?????????????????110?????1111011")$/;"	m
CUSTOM3_RD_RS1_RS2	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM3_RD_RS1_RS2 = BitPat("b?????????????????111?????1111011")$/;"	m
CUSTOM3_RS1	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM3_RS1        = BitPat("b?????????????????010?????1111011")$/;"	m
CUSTOM3_RS1_RS2	src/main/scala/rocket/Instructions.scala	/^  def CUSTOM3_RS1_RS2    = BitPat("b?????????????????011?????1111011")$/;"	m
CXXFLAGS	emulator/Makefile	/^CXXFLAGS := $(CXXFLAGS) -std=c++11 -I$(RISCV)\/include$/;"	m
CXXFLAGS	scripts/Makefile	/^CXXFLAGS := $(CXXFLAGS) -std=c++11 -Wall$/;"	m
CXXSRCS	emulator/Makefile	/^CXXSRCS := emulator SimDTM SimJTAG remote_bitbang$/;"	m
CXXSRCS	scripts/Makefile	/^CXXSRCS := comlog float_fix$/;"	m
C_ADD	src/main/scala/rocket/Instructions.scala	/^  def C_ADD              = BitPat("b????????????????1001??????????10")$/;"	m
C_ADDI	src/main/scala/rocket/Instructions.scala	/^  def C_ADDI             = BitPat("b????????????????000???????????01")$/;"	m
C_ADDI16SP	src/main/scala/rocket/Instructions.scala	/^  def C_ADDI16SP         = BitPat("b????????????????011?00010?????01")$/;"	m
C_ADDI4SPN	src/main/scala/rocket/Instructions.scala	/^  def C_ADDI4SPN         = BitPat("b????????????????000???????????00")$/;"	m
C_ADDIW	src/main/scala/rocket/Instructions.scala	/^  def C_ADDIW            = BitPat("b????????????????001???????????01")$/;"	m
C_ADDW	src/main/scala/rocket/Instructions.scala	/^  def C_ADDW             = BitPat("b????????????????100111???01???01")$/;"	m
C_AND	src/main/scala/rocket/Instructions.scala	/^  def C_AND              = BitPat("b????????????????100011???11???01")$/;"	m
C_ANDI	src/main/scala/rocket/Instructions.scala	/^  def C_ANDI             = BitPat("b????????????????100?10????????01")$/;"	m
C_BEQZ	src/main/scala/rocket/Instructions.scala	/^  def C_BEQZ             = BitPat("b????????????????110???????????01")$/;"	m
C_BNEZ	src/main/scala/rocket/Instructions.scala	/^  def C_BNEZ             = BitPat("b????????????????111???????????01")$/;"	m
C_EBREAK	src/main/scala/rocket/Instructions.scala	/^  def C_EBREAK           = BitPat("b????????????????1001000000000010")$/;"	m
C_FLD	src/main/scala/rocket/Instructions.scala	/^  def C_FLD              = BitPat("b????????????????001???????????00")$/;"	m
C_FLDSP	src/main/scala/rocket/Instructions.scala	/^  def C_FLDSP            = BitPat("b????????????????001???????????10")$/;"	m
C_FLW	src/main/scala/rocket/Instructions.scala	/^  def C_FLW              = BitPat("b????????????????011???????????00")$/;"	m
C_FLWSP	src/main/scala/rocket/Instructions.scala	/^  def C_FLWSP            = BitPat("b????????????????011???????????10")$/;"	m
C_FSD	src/main/scala/rocket/Instructions.scala	/^  def C_FSD              = BitPat("b????????????????101???????????00")$/;"	m
C_FSDSP	src/main/scala/rocket/Instructions.scala	/^  def C_FSDSP            = BitPat("b????????????????101???????????10")$/;"	m
C_FSW	src/main/scala/rocket/Instructions.scala	/^  def C_FSW              = BitPat("b????????????????111???????????00")$/;"	m
C_FSWSP	src/main/scala/rocket/Instructions.scala	/^  def C_FSWSP            = BitPat("b????????????????111???????????10")$/;"	m
C_J	src/main/scala/rocket/Instructions.scala	/^  def C_J                = BitPat("b????????????????101???????????01")$/;"	m
C_JAL	src/main/scala/rocket/Instructions.scala	/^  def C_JAL              = BitPat("b????????????????001???????????01")$/;"	m
C_JALR	src/main/scala/rocket/Instructions.scala	/^  def C_JALR             = BitPat("b????????????????1001?????0000010")$/;"	m
C_JR	src/main/scala/rocket/Instructions.scala	/^  def C_JR               = BitPat("b????????????????1000?????0000010")$/;"	m
C_LD	src/main/scala/rocket/Instructions.scala	/^  def C_LD               = BitPat("b????????????????011???????????00")$/;"	m
C_LDSP	src/main/scala/rocket/Instructions.scala	/^  def C_LDSP             = BitPat("b????????????????011???????????10")$/;"	m
C_LI	src/main/scala/rocket/Instructions.scala	/^  def C_LI               = BitPat("b????????????????010???????????01")$/;"	m
C_LQ	src/main/scala/rocket/Instructions.scala	/^  def C_LQ               = BitPat("b????????????????001???????????00")$/;"	m
C_LQSP	src/main/scala/rocket/Instructions.scala	/^  def C_LQSP             = BitPat("b????????????????001???????????10")$/;"	m
C_LUI	src/main/scala/rocket/Instructions.scala	/^  def C_LUI              = BitPat("b????????????????011???????????01")$/;"	m
C_LW	src/main/scala/rocket/Instructions.scala	/^  def C_LW               = BitPat("b????????????????010???????????00")$/;"	m
C_LWSP	src/main/scala/rocket/Instructions.scala	/^  def C_LWSP             = BitPat("b????????????????010???????????10")$/;"	m
C_MV	src/main/scala/rocket/Instructions.scala	/^  def C_MV               = BitPat("b????????????????1000??????????10")$/;"	m
C_NOP	src/main/scala/rocket/Instructions.scala	/^  def C_NOP              = BitPat("b????????????????0000000000000001")$/;"	m
C_OR	src/main/scala/rocket/Instructions.scala	/^  def C_OR               = BitPat("b????????????????100011???10???01")$/;"	m
C_SD	src/main/scala/rocket/Instructions.scala	/^  def C_SD               = BitPat("b????????????????111???????????00")$/;"	m
C_SDSP	src/main/scala/rocket/Instructions.scala	/^  def C_SDSP             = BitPat("b????????????????111???????????10")$/;"	m
C_SLLI	src/main/scala/rocket/Instructions.scala	/^  def C_SLLI             = BitPat("b????????????????000???????????10")$/;"	m
C_SLLI_RV32	src/main/scala/rocket/Instructions.scala	/^  def C_SLLI_RV32        = BitPat("b????????????????0000??????????10")$/;"	m
C_SQ	src/main/scala/rocket/Instructions.scala	/^  def C_SQ               = BitPat("b????????????????101???????????00")$/;"	m
C_SQSP	src/main/scala/rocket/Instructions.scala	/^  def C_SQSP             = BitPat("b????????????????101???????????10")$/;"	m
C_SRAI	src/main/scala/rocket/Instructions.scala	/^  def C_SRAI             = BitPat("b????????????????100?01????????01")$/;"	m
C_SRAI_RV32	src/main/scala/rocket/Instructions.scala	/^  def C_SRAI_RV32        = BitPat("b????????????????100001????????01")$/;"	m
C_SRLI	src/main/scala/rocket/Instructions.scala	/^  def C_SRLI             = BitPat("b????????????????100?00????????01")$/;"	m
C_SRLI_RV32	src/main/scala/rocket/Instructions.scala	/^  def C_SRLI_RV32        = BitPat("b????????????????100000????????01")$/;"	m
C_SUB	src/main/scala/rocket/Instructions.scala	/^  def C_SUB              = BitPat("b????????????????100011???00???01")$/;"	m
C_SUBW	src/main/scala/rocket/Instructions.scala	/^  def C_SUBW             = BitPat("b????????????????100111???00???01")$/;"	m
C_SW	src/main/scala/rocket/Instructions.scala	/^  def C_SW               = BitPat("b????????????????110???????????00")$/;"	m
C_SWSP	src/main/scala/rocket/Instructions.scala	/^  def C_SWSP             = BitPat("b????????????????110???????????10")$/;"	m
C_XOR	src/main/scala/rocket/Instructions.scala	/^  def C_XOR              = BitPat("b????????????????100011???01???01")$/;"	m
CacheBlockBytes	src/main/scala/subsystem/BankedL2Params.scala	/^case object CacheBlockBytes extends Field[Int](64)$/;"	c
CanAttachTLMasters	src/main/scala/tilelink/BusWrapper.scala	/^trait CanAttachTLMasters extends HasTLBusParams { this: TLBusWrapper =>$/;"	t
CanAttachTLSlaves	src/main/scala/tilelink/BusWrapper.scala	/^trait CanAttachTLSlaves extends HasTLBusParams { this: TLBusWrapper =>$/;"	t
CanAttachTile	src/main/scala/subsystem/HasTiles.scala	/^trait CanAttachTile {$/;"	t
CanConnectWithinContextThatHasTileLinkLocations	src/main/scala/subsystem/Attachable.scala	/^trait CanConnectWithinContextThatHasTileLinkLocations {$/;"	t
CanHaveBuiltInDevices	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^trait CanHaveBuiltInDevices {$/;"	t
CanHaveErrors	src/main/scala/util/ECC.scala	/^trait CanHaveErrors extends Bundle {$/;"	t
CanHaveMasterAXI4MMIOPort	src/main/scala/subsystem/Ports.scala	/^trait CanHaveMasterAXI4MMIOPort { this: BaseSubsystem =>$/;"	t
CanHaveMasterAXI4MemPort	src/main/scala/subsystem/Ports.scala	/^trait CanHaveMasterAXI4MemPort { this: BaseSubsystem =>$/;"	t
CanHaveMasterTLMMIOPort	src/main/scala/subsystem/Ports.scala	/^trait CanHaveMasterTLMMIOPort { this: BaseSubsystem =>$/;"	t
CanHavePSDTestModeIO	src/main/scala/util/PSDTestMode.scala	/^trait CanHavePSDTestModeIO {$/;"	t
CanHavePTW	src/main/scala/rocket/PTW.scala	/^trait CanHavePTW extends HasTileParameters with HasHellaCache { this: BaseTile =>$/;"	t
CanHavePTWModule	src/main/scala/rocket/PTW.scala	/^trait CanHavePTWModule extends HasHellaCacheModule {$/;"	t
CanHavePeripheryCLINT	src/main/scala/devices/tilelink/CLINT.scala	/^trait CanHavePeripheryCLINT { this: BaseSubsystem =>$/;"	t
CanHavePeripheryPLIC	src/main/scala/devices/tilelink/Plic.scala	/^trait CanHavePeripheryPLIC { this: BaseSubsystem =>$/;"	t
CanHaveSlaveAXI4Port	src/main/scala/subsystem/Ports.scala	/^trait CanHaveSlaveAXI4Port { this: BaseSubsystem =>$/;"	t
CanHaveSlaveTLPort	src/main/scala/subsystem/Ports.scala	/^trait CanHaveSlaveTLPort { this: BaseSubsystem =>$/;"	t
CanInstantiateWithinContextThatHasTileLinkLocations	src/main/scala/subsystem/Attachable.scala	/^trait CanInstantiateWithinContextThatHasTileLinkLocations {$/;"	t
Capture	src/main/scala/jtag/JtagShifter.scala	/^class Capture[+T <: Data](gen: T) extends Bundle {$/;"	c
Capture	src/main/scala/jtag/JtagShifter.scala	/^object Capture {$/;"	c
CaptureChain	src/main/scala/jtag/JtagShifter.scala	/^class CaptureChain[+T <: Data](gen: T)(implicit val p: Parameters) extends Chain {$/;"	c
CaptureChain	src/main/scala/jtag/JtagShifter.scala	/^object CaptureChain {$/;"	c
CaptureDR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object CaptureDR extends State(6)  \/\/ parallel-load DR shifter when exiting this state (if required)$/;"	c
CaptureIR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object CaptureIR extends State(14)  \/\/ parallel-load IR shifter with fixed logic values and design-specific when exiting this state (if required)$/;"	c
CaptureUpdateChain	src/main/scala/jtag/JtagShifter.scala	/^class CaptureUpdateChain[+T <: Data, +V <: Data](genCapture: T, genUpdate: V)(implicit val p: Parameters) extends Chain {$/;"	c
CaptureUpdateChain	src/main/scala/jtag/JtagShifter.scala	/^object CaptureUpdateChain {$/;"	c
Case	src/main/scala/formal/FormalUtils.scala	/^object Case {$/;"	c
Causes	src/main/scala/rocket/Instructions.scala	/^object Causes {$/;"	c
CbusToPbusXTypeKey	src/main/scala/subsystem/BusTopology.scala	/^case object CbusToPbusXTypeKey extends Field[ClockCrossingType](SynchronousCrossing())$/;"	c
Cells	src/main/scala/diplomacy/DeviceTree.scala	/^  private case class Cells($/;"	c
Chain	src/main/scala/jtag/JtagShifter.scala	/^trait Chain extends Module {$/;"	t
ChainIO	src/main/scala/jtag/JtagShifter.scala	/^trait ChainIO extends Bundle {$/;"	t
CharacterCountExample	src/main/scala/tile/LazyRoCC.scala	/^class  CharacterCountExample(opcodes: OpcodeSet)(implicit p: Parameters) extends LazyRoCC(opcodes) {$/;"	c
CharacterCountExampleModuleImp	src/main/scala/tile/LazyRoCC.scala	/^class CharacterCountExampleModuleImp(outer: CharacterCountExample)(implicit p: Parameters) extends LazyRoCCModuleImp(outer)$/;"	c
Checks	src/main/scala/stage/phases/Checks.scala	/^class Checks extends Phase with PreservesAll[Phase] {$/;"	c
CisN	src/main/scala/tilelink/Broadcast.scala	/^      val CisN = in.c.bits.param === TLPermissions.TtoN ||$/;"	l
ClientFilter	src/main/scala/tilelink/Filter.scala	/^  type ClientFilter = TLMasterParameters => Option[TLMasterParameters]$/;"	T
ClientMetadata	src/main/scala/tilelink/Metadata.scala	/^class ClientMetadata extends Bundle {$/;"	c
ClientMetadata	src/main/scala/tilelink/Metadata.scala	/^object ClientMetadata {$/;"	c
ClientStates	src/main/scala/tilelink/Metadata.scala	/^object ClientStates {$/;"	c
ClockAdapterNode	src/main/scala/prci/ClockNodes.scala	/^case class ClockAdapterNode($/;"	c
ClockBundle	src/main/scala/prci/ClockBundles.scala	/^class ClockBundle(val params: ClockBundleParameters) extends Bundle$/;"	c
ClockBundleParameters	src/main/scala/prci/ClockParameters.scala	/^case class ClockBundleParameters()$/;"	c
ClockCrossingReg	src/main/scala/util/SynchronizerReg.scala	/^class ClockCrossingReg(w: Int = 1, doInit: Boolean) extends Module {$/;"	c
ClockCrossingReg	src/main/scala/util/SynchronizerReg.scala	/^object ClockCrossingReg {$/;"	c
ClockCrossingType	src/main/scala/diplomacy/ClockDomain.scala	/^sealed trait ClockCrossingType extends CrossingType$/;"	t
ClockDivider	src/main/scala/prci/ClockDivider.scala	/^class ClockDivider(div: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
ClockDivider2	src/main/resources/vsrc/ClockDivider2.v	/^module ClockDivider2 (output reg clk_out, input clk_in);$/;"	m
ClockDivider2	src/main/scala/util/ClockDivider.scala	/^class ClockDivider2 extends BlackBox with HasBlackBoxResource {$/;"	c
ClockDivider3	src/main/resources/vsrc/ClockDivider3.v	/^module ClockDivider3 (output reg clk_out, input clk_in);$/;"	m
ClockDivider3	src/main/scala/util/ClockDivider.scala	/^class ClockDivider3 extends BlackBox with HasBlackBoxResource {$/;"	c
ClockDomain	src/main/scala/prci/ClockDomain.scala	/^abstract class ClockDomain(implicit p: Parameters) extends Domain with HasClockDomainCrossing$/;"	c
ClockEdgeParameters	src/main/scala/prci/ClockParameters.scala	/^case class ClockEdgeParameters($/;"	c
ClockEphemeralNode	src/main/scala/prci/ClockNodes.scala	/^case class ClockEphemeralNode()(implicit valName: ValName) extends EphemeralNode(ClockImp)()$/;"	c
ClockGate	src/main/scala/util/ClockGate.scala	/^abstract class ClockGate extends BlackBox {$/;"	c
ClockGate	src/main/scala/util/ClockGate.scala	/^object ClockGate {$/;"	c
ClockGateImpl	src/main/scala/util/ClockGate.scala	/^case object ClockGateImpl extends Field[() => ClockGate](() => new EICG_wrapper)$/;"	c
ClockGroup	src/main/scala/prci/ClockGroup.scala	/^class ClockGroup(groupName: String)(implicit p: Parameters) extends LazyModule$/;"	c
ClockGroup	src/main/scala/prci/ClockGroup.scala	/^object ClockGroup$/;"	c
ClockGroupAdapterNode	src/main/scala/prci/ClockNodes.scala	/^case class ClockGroupAdapterNode($/;"	c
ClockGroupAggregateNode	src/main/scala/prci/ClockGroup.scala	/^case class ClockGroupAggregateNode(groupName: String)(implicit valName: ValName)$/;"	c
ClockGroupAggregator	src/main/scala/prci/ClockGroup.scala	/^class ClockGroupAggregator(groupName: String)(implicit p: Parameters) extends LazyModule$/;"	c
ClockGroupAggregator	src/main/scala/prci/ClockGroup.scala	/^object ClockGroupAggregator$/;"	c
ClockGroupBundle	src/main/scala/prci/ClockBundles.scala	/^class ClockGroupBundle(val params: ClockGroupBundleParameters) extends Bundle$/;"	c
ClockGroupBundleParameters	src/main/scala/prci/ClockParameters.scala	/^case class ClockGroupBundleParameters($/;"	c
ClockGroupDriver	src/main/scala/prci/ClockGroupDriver.scala	/^object ClockGroupDriver {$/;"	c
ClockGroupDriverParameters	src/main/scala/prci/ClockGroupDriver.scala	/^case class ClockGroupDriverParameters($/;"	c
ClockGroupEdgeParameters	src/main/scala/prci/ClockParameters.scala	/^case class ClockGroupEdgeParameters($/;"	c
ClockGroupEphemeralNode	src/main/scala/prci/ClockNodes.scala	/^case class ClockGroupEphemeralNode()(implicit valName: ValName) extends EphemeralNode(ClockGroupImp)()$/;"	c
ClockGroupIdentityNode	src/main/scala/prci/ClockNodes.scala	/^case class ClockGroupIdentityNode()(implicit valName: ValName) extends IdentityNode(ClockGroupImp)()$/;"	c
ClockGroupImp	src/main/scala/prci/ClockNodes.scala	/^object ClockGroupImp extends SimpleNodeImp[ClockGroupSourceParameters, ClockGroupSinkParameters, ClockGroupEdgeParameters, ClockGroupBundle]$/;"	c
ClockGroupNode	src/main/scala/prci/ClockGroup.scala	/^case class ClockGroupNode(groupName: String)(implicit valName: ValName)$/;"	c
ClockGroupResetSynchronizer	src/main/scala/prci/ResetSynchronizer.scala	/^class ClockGroupResetSynchronizer(implicit p: Parameters) extends LazyModule {$/;"	c
ClockGroupResetSynchronizer	src/main/scala/prci/ResetSynchronizer.scala	/^object ClockGroupResetSynchronizer {$/;"	c
ClockGroupSinkNode	src/main/scala/prci/ClockNodes.scala	/^case class ClockGroupSinkNode(params: Seq[ClockGroupSinkParameters])(implicit valName: ValName) extends SinkNode(ClockGroupImp)(params)$/;"	c
ClockGroupSinkParameters	src/main/scala/prci/ClockParameters.scala	/^case class ClockGroupSinkParameters($/;"	c
ClockGroupSourceNode	src/main/scala/prci/ClockNodes.scala	/^case class ClockGroupSourceNode(params: Seq[ClockGroupSourceParameters])(implicit valName: ValName) extends SourceNode(ClockGroupImp)(params)$/;"	c
ClockGroupSourceParameters	src/main/scala/prci/ClockParameters.scala	/^case class ClockGroupSourceParameters()$/;"	c
ClockIdentityNode	src/main/scala/prci/ClockNodes.scala	/^case class ClockIdentityNode()(implicit valName: ValName) extends IdentityNode(ClockImp)()$/;"	c
ClockImp	src/main/scala/prci/ClockNodes.scala	/^object ClockImp extends SimpleNodeImp[ClockSourceParameters, ClockSinkParameters, ClockEdgeParameters, ClockBundle]$/;"	c
ClockInwardNode	src/main/scala/prci/package.scala	/^  type ClockInwardNode = InwardNodeHandle[ClockSourceParameters, ClockSinkParameters, ClockEdgeParameters, ClockBundle]$/;"	T
ClockNameNode	src/main/scala/prci/ClockNodes.scala	/^object ClockNameNode {$/;"	c
ClockNode	src/main/scala/prci/package.scala	/^  type ClockNode = NodeHandle[ClockSourceParameters, ClockSinkParameters, ClockEdgeParameters, ClockBundle, ClockSourceParameters, ClockSinkParameters, ClockEdgeParameters, ClockBundle]$/;"	T
ClockOutwardNode	src/main/scala/prci/package.scala	/^  type ClockOutwardNode = OutwardNodeHandle[ClockSourceParameters, ClockSinkParameters, ClockEdgeParameters, ClockBundle]$/;"	T
ClockParameters	src/main/scala/prci/ClockParameters.scala	/^case class ClockParameters($/;"	c
ClockSinkDomain	src/main/scala/prci/ClockDomain.scala	/^class ClockSinkDomain(val clockSinkParams: ClockSinkParameters)(implicit p: Parameters) extends ClockDomain$/;"	c
ClockSinkNode	src/main/scala/prci/ClockNodes.scala	/^case class ClockSinkNode(val portParams: Seq[ClockSinkParameters])(implicit valName: ValName) extends SinkNode(ClockImp)(portParams)$/;"	c
ClockSinkNode	src/main/scala/prci/ClockNodes.scala	/^object ClockSinkNode$/;"	c
ClockSinkParameters	src/main/scala/prci/ClockParameters.scala	/^case class ClockSinkParameters($/;"	c
ClockSourceAtFreq	src/main/scala/prci/TestClockSource.scala	/^class ClockSourceAtFreq(val freqMHz: Double) extends BlackBox(Map($/;"	c
ClockSourceAtFreqFromPlusArg	src/main/scala/prci/TestClockSource.scala	/^class ClockSourceAtFreqFromPlusArg(val plusArgName: String) extends BlackBox$/;"	c
ClockSourceDomain	src/main/scala/prci/ClockDomain.scala	/^class ClockSourceDomain(val clockSourceParams: ClockSourceParameters)(implicit p: Parameters) extends ClockDomain$/;"	c
ClockSourceIO	src/main/scala/prci/TestClockSource.scala	/^class ClockSourceIO extends Bundle {$/;"	c
ClockSourceNode	src/main/scala/prci/ClockNodes.scala	/^case class ClockSourceNode(val portParams: Seq[ClockSourceParameters])(implicit valName: ValName) extends SourceNode(ClockImp)(portParams)$/;"	c
ClockSourceNode	src/main/scala/prci/ClockNodes.scala	/^object ClockSourceNode$/;"	c
ClockSourceParameters	src/main/scala/prci/ClockParameters.scala	/^case class ClockSourceParameters($/;"	c
ClockTempNode	src/main/scala/prci/ClockNodes.scala	/^object ClockTempNode {$/;"	c
Clocked	src/main/scala/util/Misc.scala	/^trait Clocked extends Bundle {$/;"	t
ClockedAPBBundle	src/main/scala/devices/debug/Periphery.scala	/^class ClockedAPBBundle(params: APBBundleParameters) extends APBBundle(params) {$/;"	c
ClockedCounter	src/main/scala/jtag/Utils.scala	/^class ClockedCounter(counts: BigInt, init: Option[BigInt]) extends Module {$/;"	c
ClockedCounter	src/main/scala/jtag/Utils.scala	/^object ClockedCounter {$/;"	c
ClockedDMIIO	src/main/scala/devices/debug/DMI.scala	/^class ClockedDMIIO(implicit val p: Parameters) extends ParameterizedBundle()(p){$/;"	c
CloneLazyModule	src/main/scala/diplomacy/Clone.scala	/^final class CloneLazyModule private (val base: LazyModule)$/;"	c
CloneLazyModule	src/main/scala/diplomacy/Clone.scala	/^object CloneLazyModule$/;"	c
CloneModule	src/main/scala/diplomacy/CloneModule.scala	/^class CloneModule private (model: RawModule) extends BlackBox$/;"	c
CloneModule	src/main/scala/diplomacy/CloneModule.scala	/^object CloneModule$/;"	c
ClonePorts	src/main/scala/diplomacy/CloneModule.scala	/^class ClonePorts protected[shim](elts: Data*) extends Record$/;"	c
Code	src/main/scala/util/ECC.scala	/^abstract class Code$/;"	c
Code	src/main/scala/util/ECC.scala	/^object Code {$/;"	c
CoherenceManagerInstantiationFn	src/main/scala/subsystem/BankedL2Params.scala	/^  type CoherenceManagerInstantiationFn = HasTileLinkLocations => (TLInwardNode, TLOutwardNode, Option[IntOutwardNode])$/;"	T
CoherenceManagerWrapper	src/main/scala/subsystem/BankedL2Params.scala	/^class CoherenceManagerWrapper(params: CoherenceManagerWrapperParams, context: HasTileLinkLocations)(implicit p: Parameters) extends TLBusWrapper(params, params.name) {$/;"	c
CoherenceManagerWrapper	src/main/scala/subsystem/BankedL2Params.scala	/^object CoherenceManagerWrapper {$/;"	c
CoherenceManagerWrapperParams	src/main/scala/subsystem/BankedL2Params.scala	/^case class CoherenceManagerWrapperParams($/;"	c
CoherentBusTopologyParams	src/main/scala/subsystem/BusTopology.scala	/^case class CoherentBusTopologyParams($/;"	c
CompileOptions	src/main/scala/util/CompileOptions.scala	/^object CompileOptions {$/;"	c
ConfigsAnnotation	src/main/scala/stage/RocketChipAnnotations.scala	/^case class ConfigsAnnotation(configNames: Seq[String]) extends NoTargetAnnotation with RocketChipOption$/;"	c
ConstructOM	src/main/scala/diplomaticobjectmodel/ConstructOM.scala	/^case object ConstructOM {$/;"	c
ControlBusKey	src/main/scala/subsystem/BusTopology.scala	/^case object ControlBusKey extends Field[PeripheryBusParams]$/;"	c
ControlKey	src/main/scala/util/BundleMap.scala	/^abstract class ControlKey[T <: Data](name: String) extends BundleKey[T](name) with IsControlKey$/;"	c
CoreBundle	src/main/scala/tile/Core.scala	/^abstract class CoreBundle(implicit val p: Parameters) extends ParameterizedBundle()(p)$/;"	c
CoreComplexResetTypeSeparateCoreAndUncoreAsynchronous	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^case object CoreComplexResetTypeSeparateCoreAndUncoreAsynchronous extends OMCoreComplexResetType$/;"	c
CoreComplexResetTypeSeparateCoreAndUncoreAsynchronousFull	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^case object CoreComplexResetTypeSeparateCoreAndUncoreAsynchronousFull extends OMCoreComplexResetType$/;"	c
CoreComplexResetTypeSeparateCoreAndUncoreSynchronous	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^case object CoreComplexResetTypeSeparateCoreAndUncoreSynchronous extends OMCoreComplexResetType$/;"	c
CoreComplexResetTypeSeparateGPRAsynchronousFull	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^case object CoreComplexResetTypeSeparateGPRAsynchronousFull extends OMCoreComplexResetType$/;"	c
CoreComplexResetTypeSingleAsynchronous	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^case object CoreComplexResetTypeSingleAsynchronous extends OMCoreComplexResetType$/;"	c
CoreComplexResetTypeSingleAsynchronousFull	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^case object CoreComplexResetTypeSingleAsynchronousFull extends OMCoreComplexResetType$/;"	c
CoreComplexResetTypeSingleSynchronous	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^case object CoreComplexResetTypeSingleSynchronous extends OMCoreComplexResetType$/;"	c
CoreComplexResetTypeUnspecified	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^case object CoreComplexResetTypeUnspecified extends OMCoreComplexResetType$/;"	c
CoreInterrupts	src/main/scala/tile/Core.scala	/^class CoreInterrupts(implicit p: Parameters) extends TileInterrupts()(p) {$/;"	c
CoreModule	src/main/scala/tile/Core.scala	/^abstract class CoreModule(implicit val p: Parameters) extends Module$/;"	c
CoreMonitorBundle	src/main/scala/util/CoreMonitor.scala	/^class CoreMonitorBundle(val xLen: Int, val fLen: Int) extends Bundle with Clocked {$/;"	c
CoreParams	src/main/scala/tile/Core.scala	/^trait CoreParams {$/;"	t
CountIO	src/main/scala/jtag/Utils.scala	/^  class CountIO extends Bundle {$/;"	c
Cover	src/main/scala/formal/FormalUtils.scala	/^  object Cover extends MonitorDirection("Cover") { override def flip: MonitorDirection = Cover }$/;"	c
Cover	src/main/scala/util/Property.scala	/^  object Cover extends PropertyType("Cover")$/;"	c
CoverBoolean	src/main/scala/util/Property.scala	/^case class CoverBoolean(cond: Bool, labels: Seq[String]) {$/;"	c
CoverDisableMonitor	src/main/scala/formal/FormalUtils.scala	/^  object CoverDisableMonitor extends PropertyClass("CoverDisableMonitor")$/;"	c
CoverPropertyParameters	src/main/scala/util/Property.scala	/^case class CoverPropertyParameters($/;"	c
CreditedCrossing	src/main/scala/diplomacy/ClockDomain.scala	/^case class CreditedCrossing(sourceDelay: CreditedDelay, sinkDelay: CreditedDelay) extends ClockCrossingType$/;"	c
CreditedCrossing	src/main/scala/diplomacy/ClockDomain.scala	/^object CreditedCrossing {$/;"	c
CreditedDelay	src/main/scala/util/CreditedIO.scala	/^case class CreditedDelay(debit: Int, credit: Int)$/;"	c
CreditedIO	src/main/scala/util/CreditedIO.scala	/^final class CreditedIO[T <: Data](gen: T) extends Bundle$/;"	c
CreditedIO	src/main/scala/util/CreditedIO.scala	/^object CreditedIO$/;"	c
CreditedIOCounter	src/main/scala/util/CreditedIO.scala	/^class CreditedIOCounter(val init: Int, val depth: Int) {$/;"	c
CrossProperty	src/main/scala/util/Property.scala	/^class CrossProperty(cond: Seq[Seq[CoverBoolean]], exclude: Seq[Seq[String]], message: String) extends BaseProperty {$/;"	c
CrossesToOnlyOneClockDomain	src/main/scala/subsystem/CrossingWrapper.scala	/^trait CrossesToOnlyOneClockDomain extends HasClockDomainCrossing { this: LazyModule =>$/;"	t
CrossesToOnlyOneResetDomain	src/main/scala/subsystem/CrossingWrapper.scala	/^trait CrossesToOnlyOneResetDomain extends HasResetDomainCrossing { this: LazyModule =>$/;"	t
Crossing	src/main/scala/util/Crossing.scala	/^abstract class Crossing[T <: Data] extends Module {$/;"	c
CrossingIO	src/main/scala/util/Crossing.scala	/^class CrossingIO[T <: Data](gen: T) extends Bundle {$/;"	c
CrossingType	src/main/scala/diplomacy/ClockDomain.scala	/^trait CrossingType$/;"	t
CrossingWrapper	src/main/scala/subsystem/CrossingWrapper.scala	/^class CrossingWrapper(val crossing: ClockCrossingType)(implicit p: Parameters) extends SimpleLazyModule with CrossesToOnlyOneClockDomain$/;"	c
CtrlState	src/main/scala/devices/debug/Debug.scala	/^      type CtrlState = Value$/;"	T
CtrlState	src/main/scala/devices/debug/Debug.scala	/^    object CtrlState extends scala.Enumeration {$/;"	c
CustomBulkAssignable	src/main/scala/util/BundleMap.scala	/^trait CustomBulkAssignable {$/;"	t
CustomCSR	src/main/scala/tile/CustomCSRs.scala	/^case class CustomCSR(id: Int, mask: BigInt, init: Option[BigInt])$/;"	c
CustomCSR	src/main/scala/tile/CustomCSRs.scala	/^object CustomCSR {$/;"	c
CustomCSRIO	src/main/scala/tile/CustomCSRs.scala	/^class CustomCSRIO(implicit p: Parameters) extends CoreBundle {$/;"	c
CustomCSRs	src/main/scala/tile/CustomCSRs.scala	/^class CustomCSRs(implicit p: Parameters) extends CoreBundle {$/;"	c
CustomNode	src/main/scala/diplomacy/Nodes.scala	/^abstract class CustomNode[D, U, EO, EI, B <: Data](imp: NodeImp[D, U, EO, EI, B])($/;"	c
CycleException	src/main/scala/diplomacy/Nodes.scala	/^abstract class CycleException(kind: String, loop: Seq[String]) extends Exception(s"Diplomatic $kind cycle detected involving $loop")$/;"	c
D	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object D extends OMExtensionType$/;"	c
D	src/main/scala/rocket/IDecode.scala	/^  val D = if (pipelinedMul) N else Y$/;"	l
D	src/main/scala/tile/FPU.scala	/^  def D = typeTagGroup(FType.D)$/;"	m
D	src/main/scala/tile/FPU.scala	/^  val D = new FType(11, 53)$/;"	l
D64Decode	src/main/scala/rocket/IDecode.scala	/^class D64Decode(implicit val p: Parameters) extends DecodeConstants$/;"	c
DATA	src/main/scala/devices/debug/Debug.scala	/^  def DATA         = 0x380$/;"	m
DATA0Fields	src/main/scala/devices/debug/dm_registers.scala	/^class DATA0Fields extends Bundle {$/;"	c
DATA_BEATS	scripts/check_cache_trace.py	/^DATA_BEATS = 8$/;"	v
DCSR	src/main/scala/rocket/CSR.scala	/^class DCSR extends Bundle {$/;"	c
DCache	src/main/scala/rocket/DCache.scala	/^class DCache(staticIdForMetadataUseOnly: Int, val crossing: ClockCrossingType)(implicit p: Parameters) extends HellaCache(staticIdForMetadataUseOnly)(p) {$/;"	c
DCacheDataArray	src/main/scala/rocket/DCache.scala	/^class DCacheDataArray(implicit p: Parameters) extends L1HellaCacheModule()(p) {$/;"	c
DCacheDataReq	src/main/scala/rocket/DCache.scala	/^class DCacheDataReq(implicit p: Parameters) extends L1HellaCacheBundle()(p) {$/;"	c
DCacheErrors	src/main/scala/rocket/DCache.scala	/^class DCacheErrors(implicit p: Parameters) extends L1HellaCacheBundle()(p)$/;"	c
DCacheLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^class DCacheLogicalTreeNode(dcache: HellaCache, deviceOpt: Option[SimpleDevice], params: DCacheParams) extends LogicalTreeNode(() => deviceOpt) {$/;"	c
DCacheMetadataReq	src/main/scala/rocket/DCache.scala	/^class DCacheMetadataReq(implicit p: Parameters) extends L1HellaCacheBundle()(p) {$/;"	c
DCacheModule	src/main/scala/rocket/DCache.scala	/^class DCacheModule(outer: DCache) extends HellaCacheModule(outer) {$/;"	c
DCacheParams	src/main/scala/rocket/HellaCache.scala	/^case class DCacheParams($/;"	c
DCacheTLBPort	src/main/scala/rocket/DCache.scala	/^class DCacheTLBPort(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
DDecode	src/main/scala/rocket/IDecode.scala	/^class DDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
DEFAULT	src/main/resources/vsrc/plusarg_reader.v	/^   parameter [WIDTH-1:0] DEFAULT=0$/;"	c
DFS	src/main/scala/diplomacy/Nodes.scala	/^    def DFS(v: BaseNode, visited: Map[Int, BaseNode]): Map[Int, BaseNode] = {$/;"	m
DIV	src/main/scala/rocket/Instructions.scala	/^  def DIV                = BitPat("b0000001??????????100?????0110011")$/;"	m
DIVU	src/main/scala/rocket/Instructions.scala	/^  def DIVU               = BitPat("b0000001??????????101?????0110011")$/;"	m
DIVUW	src/main/scala/rocket/Instructions.scala	/^  def DIVUW              = BitPat("b0000001??????????101?????0111011")$/;"	m
DIVW	src/main/scala/rocket/Instructions.scala	/^  def DIVW               = BitPat("b0000001??????????100?????0111011")$/;"	m
DMCONTROLFields	src/main/scala/devices/debug/dm_registers.scala	/^class DMCONTROLFields extends Bundle {$/;"	c
DMCONTROLNxt	src/main/scala/devices/debug/Debug.scala	/^    val DMCONTROLNxt = WireInit(0.U.asTypeOf(new DMCONTROLFields()))$/;"	l
DMCONTROLReg	src/main/scala/devices/debug/Debug.scala	/^    val DMCONTROLReg = RegNext(next=DMCONTROLNxt, init=0.U.asTypeOf(DMCONTROLNxt)).suggestName("DMCONTROLReg")$/;"	l
DMCONTROLReset	src/main/scala/devices/debug/Debug.scala	/^    val DMCONTROLReset = WireInit(0.U.asTypeOf(new DMCONTROLFields()))$/;"	l
DMCONTROLWrData	src/main/scala/devices/debug/Debug.scala	/^    val DMCONTROLWrData = WireInit(0.U.asTypeOf(new DMCONTROLFields()))$/;"	l
DMCS2Fields	src/main/scala/devices/debug/dm_registers.scala	/^class DMCS2Fields extends Bundle {$/;"	c
DMCS2RdData	src/main/scala/devices/debug/Debug.scala	/^    val DMCS2RdData    = WireInit(0.U.asTypeOf(new DMCS2Fields()))$/;"	l
DMCS2WrData	src/main/scala/devices/debug/Debug.scala	/^    val DMCS2WrData    = WireInit(0.U.asTypeOf(new DMCS2Fields()))$/;"	l
DMI	src/main/scala/devices/debug/Periphery.scala	/^case object DMI extends DebugExportProtocol$/;"	c
DMI	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^case object DMI extends OMDebugInterfaceType$/;"	c
DMIAccessCapture	src/main/scala/devices/debug/DebugTransport.scala	/^class DMIAccessCapture(addrBits: Int) extends Bundle {$/;"	c
DMIAccessUpdate	src/main/scala/devices/debug/DebugTransport.scala	/^class DMIAccessUpdate(addrBits: Int) extends Bundle {$/;"	c
DMIConsts	src/main/scala/devices/debug/DMI.scala	/^object DMIConsts{$/;"	c
DMIIO	src/main/scala/devices/debug/DMI.scala	/^class DMIIO(implicit val p: Parameters) extends ParameterizedBundle()(p) {$/;"	c
DMIReq	src/main/scala/devices/debug/DMI.scala	/^class DMIReq(addrBits : Int) extends Bundle {$/;"	c
DMIResp	src/main/scala/devices/debug/DMI.scala	/^class DMIResp( ) extends Bundle {$/;"	c
DMIToTL	src/main/scala/devices/debug/DMI.scala	/^class DMIToTL(implicit p: Parameters) extends LazyModule {$/;"	c
DMI_ABSTRACTAUTO	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_ABSTRACTAUTO =  0x18$/;"	m
DMI_ABSTRACTCS	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_ABSTRACTCS =  0x16$/;"	m
DMI_ACCESS	src/main/scala/devices/debug/DebugTransport.scala	/^  def DMI_ACCESS = 0x11$/;"	m
DMI_AUTHDATA	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_AUTHDATA =  0x30$/;"	m
DMI_COMMAND	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_COMMAND =  0x17$/;"	m
DMI_CONFSTRPTR0	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_CONFSTRPTR0 =  0x19$/;"	m
DMI_CONFSTRPTR1	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_CONFSTRPTR1 =  0x1a$/;"	m
DMI_CONFSTRPTR2	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_CONFSTRPTR2 =  0x1b$/;"	m
DMI_CONFSTRPTR3	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_CONFSTRPTR3 =  0x1c$/;"	m
DMI_DATA0	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_DATA0 =  0x04$/;"	m
DMI_DATA11	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_DATA11 =  0x0f$/;"	m
DMI_DMCONTROL	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_DMCONTROL =  0x10$/;"	m
DMI_DMCONTROL_OFFSET	src/main/scala/devices/debug/Debug.scala	/^    def DMI_DMCONTROL_OFFSET   = 0$/;"	m
DMI_DMCS2	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_DMCS2 =  0x32$/;"	m
DMI_DMSTATUS	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_DMSTATUS =  0x11$/;"	m
DMI_HALTSUM0	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_HALTSUM0 =  0x40$/;"	m
DMI_HALTSUM1	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_HALTSUM1 =  0x13$/;"	m
DMI_HALTSUM2	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_HALTSUM2 =  0x34$/;"	m
DMI_HALTSUM3	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_HALTSUM3 =  0x35$/;"	m
DMI_HARTINFO	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_HARTINFO =  0x12$/;"	m
DMI_HARTINFO_OFFSET	src/main/scala/devices/debug/Debug.scala	/^    def DMI_HARTINFO_OFFSET    = ((DMI_HARTINFO - DMI_DMCONTROL) << 2)$/;"	m
DMI_HAWINDOW	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_HAWINDOW =  0x15$/;"	m
DMI_HAWINDOWSEL	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_HAWINDOWSEL =  0x14$/;"	m
DMI_HAWINDOWSEL_OFFSET	src/main/scala/devices/debug/Debug.scala	/^    def DMI_HAWINDOWSEL_OFFSET = ((DMI_HAWINDOWSEL - DMI_DMCONTROL) << 2)$/;"	m
DMI_HAWINDOW_OFFSET	src/main/scala/devices/debug/Debug.scala	/^    def DMI_HAWINDOW_OFFSET    = ((DMI_HAWINDOW - DMI_DMCONTROL) << 2)$/;"	m
DMI_NEXTDM	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_NEXTDM =  0x1d$/;"	m
DMI_PROGBUF0	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_PROGBUF0 =  0x20$/;"	m
DMI_PROGBUF15	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_PROGBUF15 =  0x2f$/;"	m
DMI_RegAddrs	src/main/scala/devices/debug/dm_registers.scala	/^object DMI_RegAddrs {$/;"	c
DMI_SBADDRESS0	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_SBADDRESS0 =  0x39$/;"	m
DMI_SBADDRESS1	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_SBADDRESS1 =  0x3a$/;"	m
DMI_SBADDRESS2	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_SBADDRESS2 =  0x3b$/;"	m
DMI_SBADDRESS3	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_SBADDRESS3 =  0x37$/;"	m
DMI_SBCS	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_SBCS =  0x38$/;"	m
DMI_SBDATA0	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_SBDATA0 =  0x3c$/;"	m
DMI_SBDATA1	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_SBDATA1 =  0x3d$/;"	m
DMI_SBDATA2	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_SBDATA2 =  0x3e$/;"	m
DMI_SBDATA3	src/main/scala/devices/debug/dm_registers.scala	/^  def DMI_SBDATA3 =  0x3f$/;"	m
DMSTATUSFields	src/main/scala/devices/debug/dm_registers.scala	/^class DMSTATUSFields extends Bundle {$/;"	c
DMSTATUSRdData	src/main/scala/devices/debug/Debug.scala	/^    val DMSTATUSRdData = WireInit(0.U.asTypeOf(new DMSTATUSFields()))$/;"	l
DRAM_BASE	bootrom/bootrom.S	/^#define DRAM_BASE 0x80000000$/;"	d
DRET	src/main/scala/rocket/Instructions.scala	/^  def DRET               = BitPat("b01111011001000000000000001110011")$/;"	m
DROP	src/main/scala/tilelink/Broadcast.scala	/^  def DROP        = 1.U$/;"	m
DTB	src/main/scala/diplomacy/DeviceTree.scala	/^case class DTB(contents: Seq[Byte])$/;"	c
DTB	src/main/scala/diplomacy/DeviceTree.scala	/^object DTB$/;"	c
DTMInfo	src/main/scala/devices/debug/DebugTransport.scala	/^class DTMInfo extends Bundle {$/;"	c
DTM_INFO	src/main/scala/devices/debug/DebugTransport.scala	/^  def DTM_INFO     = 0x10$/;"	m
DTS	src/main/scala/diplomacy/DeviceTree.scala	/^object DTS$/;"	c
DTSCompat	src/main/scala/diplomacy/DeviceTree.scala	/^case object DTSCompat   extends Field[Seq[String]] \/\/ -dev, -soc$/;"	c
DTSModel	src/main/scala/diplomacy/DeviceTree.scala	/^case object DTSModel    extends Field[String]$/;"	c
DTSTimebase	src/main/scala/diplomacy/DeviceTree.scala	/^case object DTSTimebase extends Field[BigInt](0)   \/\/ Clock frequency of clint RTC (use 0 if you don't know it)$/;"	c
DW_32	src/main/scala/rocket/Consts.scala	/^  def DW_32 = Bool(false)$/;"	m
DW_64	src/main/scala/rocket/Consts.scala	/^  def DW_64 = Bool(true)$/;"	m
DW_X	src/main/scala/rocket/Consts.scala	/^  def DW_X  = X$/;"	m
DW_XPR	src/main/scala/rocket/Consts.scala	/^  def DW_XPR = DW_64$/;"	m
Dangle	src/main/scala/diplomacy/LazyModule.scala	/^case class Dangle(source: HalfEdge, sink: HalfEdge, flipped: Boolean, name: String, data: Data)$/;"	c
DataArray	src/main/scala/rocket/NBDcache.scala	/^class DataArray(implicit p: Parameters) extends L1HellaCacheModule()(p) {$/;"	c
DataCanBeValid	src/main/scala/util/package.scala	/^  type DataCanBeValid = Data { val valid: Bool }$/;"	T
DataKey	src/main/scala/util/BundleMap.scala	/^abstract class DataKey   [T <: Data](name: String) extends BundleKey[T](name) with IsDataKey$/;"	c
DataToAugmentedData	src/main/scala/util/package.scala	/^  implicit class DataToAugmentedData[T <: Data](private val x: T) extends AnyVal {$/;"	c
DatapathPTWIO	src/main/scala/rocket/PTW.scala	/^class DatapathPTWIO(implicit p: Parameters) extends CoreBundle()(p)$/;"	c
Debug	src/main/scala/devices/debug/Periphery.scala	/^object Debug {$/;"	c
DebugAPB	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^case object DebugAPB extends OMDebugInterfaceType$/;"	c
DebugAbstractCommandError	src/main/scala/devices/debug/Debug.scala	/^  type DebugAbstractCommandError = Value$/;"	T
DebugAbstractCommandError	src/main/scala/devices/debug/Debug.scala	/^object DebugAbstractCommandError extends scala.Enumeration {$/;"	c
DebugAbstractCommandType	src/main/scala/devices/debug/Debug.scala	/^  type DebugAbstractCommandType = Value$/;"	T
DebugAbstractCommandType	src/main/scala/devices/debug/Debug.scala	/^object DebugAbstractCommandType extends scala.Enumeration {$/;"	c
DebugAttachParams	src/main/scala/devices/debug/Periphery.scala	/^case class DebugAttachParams($/;"	c
DebugAuthenticationIO	src/main/scala/devices/debug/Debug.scala	/^class DebugAuthenticationIO () (implicit val p: Parameters) extends ParameterizedBundle()(p) {$/;"	c
DebugCombiner	src/main/scala/groundtest/Status.scala	/^object DebugCombiner {$/;"	c
DebugCtrlBundle	src/main/scala/devices/debug/Debug.scala	/^class DebugCtrlBundle (nComponents: Int)(implicit val p: Parameters) extends ParameterizedBundle()(p) {$/;"	c
DebugCustomBundle	src/main/scala/devices/debug/Custom.scala	/^class DebugCustomBundle(val p: DebugCustomParams) extends Bundle {$/;"	c
DebugCustomImp	src/main/scala/devices/debug/Custom.scala	/^class DebugCustomImp extends SimpleNodeImp[DebugCustomParams, DebugCustomNull, DebugCustomParams, DebugCustomBundle] {$/;"	c
DebugCustomNexusNode	src/main/scala/devices/debug/Custom.scala	/^case class DebugCustomNexusNode($/;"	c
DebugCustomNull	src/main/scala/devices/debug/Custom.scala	/^case class DebugCustomNull()$/;"	c
DebugCustomParams	src/main/scala/devices/debug/Custom.scala	/^case class DebugCustomParams($/;"	c
DebugCustomSink	src/main/scala/devices/debug/Custom.scala	/^case class DebugCustomSink()(implicit valName: ValName) extends SinkNode(new DebugCustomImp)(pi = Seq(DebugCustomNull()))$/;"	c
DebugCustomSource	src/main/scala/devices/debug/Custom.scala	/^case class DebugCustomSource(snoopable: DebugCustomParams)(implicit valName: ValName) extends SourceNode(new DebugCustomImp)(Seq(snoopable))$/;"	c
DebugCustomXbar	src/main/scala/devices/debug/Custom.scala	/^class DebugCustomXbar($/;"	c
DebugDecode	src/main/scala/rocket/IDecode.scala	/^class DebugDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
DebugExportProtocol	src/main/scala/devices/debug/Periphery.scala	/^sealed trait DebugExportProtocol$/;"	t
DebugExtTriggerIO	src/main/scala/devices/debug/Debug.scala	/^class DebugExtTriggerIO () (implicit val p: Parameters) extends ParameterizedBundle()(p) {$/;"	c
DebugExtTriggerIn	src/main/scala/devices/debug/Debug.scala	/^class DebugExtTriggerIn (val nExtTriggers: Int) extends Bundle {$/;"	c
DebugExtTriggerOut	src/main/scala/devices/debug/Debug.scala	/^class DebugExtTriggerOut (val nExtTriggers: Int) extends Bundle {$/;"	c
DebugIO	src/main/scala/devices/debug/Periphery.scala	/^class DebugIO(implicit val p: Parameters) extends Bundle {$/;"	c
DebugInternalBundle	src/main/scala/devices/debug/Debug.scala	/^class DebugInternalBundle (val nComponents: Int)(implicit val p: Parameters) extends ParameterizedBundle()(p) {$/;"	c
DebugLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^class DebugLogicalTreeNode($/;"	c
DebugModuleAccessType	src/main/scala/devices/debug/Debug.scala	/^  type DebugModuleAccessType = Value$/;"	T
DebugModuleAccessType	src/main/scala/devices/debug/Debug.scala	/^object DebugModuleAccessType extends scala.Enumeration {$/;"	c
DebugModuleHartSelFuncs	src/main/scala/devices/debug/Debug.scala	/^case class DebugModuleHartSelFuncs ($/;"	c
DebugModuleHartSelKey	src/main/scala/devices/debug/Debug.scala	/^case object DebugModuleHartSelKey extends Field(DebugModuleHartSelFuncs())$/;"	c
DebugModuleKey	src/main/scala/devices/debug/Debug.scala	/^case object DebugModuleKey extends Field[Option[DebugModuleParams]](Some(DebugModuleParams()))$/;"	c
DebugModuleParams	src/main/scala/devices/debug/Debug.scala	/^case class DebugModuleParams ($/;"	c
DebugRomContents	src/main/scala/devices/debug/DebugRomContents.scala	/^object DebugRomContents {$/;"	c
DebugRomNonzeroContents	src/main/scala/devices/debug/DebugRomNonzeroContents.scala	/^object DebugRomNonzeroContents {$/;"	c
DebugTransportModuleJTAG	src/main/scala/devices/debug/DebugTransport.scala	/^class DebugTransportModuleJTAG(debugAddrBits: Int, c: JtagDTMConfig)$/;"	c
DecodeConstants	src/main/scala/rocket/IDecode.scala	/^abstract trait DecodeConstants extends HasCoreParameters$/;"	t
DecodeLogic	src/main/scala/rocket/Decode.scala	/^object DecodeLogic$/;"	c
Decoding	src/main/scala/util/ECC.scala	/^abstract class Decoding$/;"	c
DecoupledArbiterTest	src/main/scala/tilelink/Arbiter.scala	/^abstract class DecoupledArbiterTest($/;"	c
DecoupledHelper	src/main/scala/util/Misc.scala	/^class DecoupledHelper(val rvs: Seq[Bool]) {$/;"	c
DecoupledHelper	src/main/scala/util/Misc.scala	/^object DecoupledHelper {$/;"	c
Default	src/main/scala/formal/FormalUtils.scala	/^  object Default extends PropertyClass("Default")$/;"	c
DefaultBufferlessConfig	src/main/scala/system/Configs.scala	/^class DefaultBufferlessConfig extends Config(new WithBufferlessBroadcastHub ++ new DefaultConfig)$/;"	c
DefaultConfig	src/main/scala/system/Configs.scala	/^class DefaultConfig extends Config(new WithNBigCores(1) ++ new WithCoherentBusTopology ++ new BaseConfig)$/;"	c
DefaultDebugModuleParams	src/main/scala/devices/debug/Debug.scala	/^object DefaultDebugModuleParams {$/;"	c
DefaultFPGAConfig	src/main/scala/system/Configs.scala	/^class DefaultFPGAConfig extends Config(new WithNSmallCores(1) ++ new BaseFPGAConfig)$/;"	c
DefaultPropertyLibrary	src/main/scala/util/Property.scala	/^class DefaultPropertyLibrary extends BasePropertyLibrary {$/;"	c
DefaultRV32Config	src/main/scala/system/Configs.scala	/^class DefaultRV32Config extends Config(new WithRV32 ++ new DefaultConfig)$/;"	c
DefaultSmallConfig	src/main/scala/system/Configs.scala	/^class DefaultSmallConfig extends Config(new WithNSmallCores(1) ++ new WithCoherentBusTopology ++ new BaseConfig)$/;"	c
DefaultTestSuites	src/main/scala/system/RocketTestSuite.scala	/^object DefaultTestSuites {$/;"	c
DefaultTileContextType	src/main/scala/subsystem/HasTiles.scala	/^trait DefaultTileContextType$/;"	t
DensePrefixSum	src/main/scala/util/PrefixSum.scala	/^object DensePrefixSum extends PrefixSum {$/;"	c
DescribedReg	src/main/scala/regmapper/DescribedReg.scala	/^object DescribedReg {$/;"	c
DescribedSRAM	src/main/scala/util/DescribedSRAM.scala	/^object DescribedSRAM {$/;"	c
Description	src/main/scala/devices/debug/Debug.scala	/^      val Description(name, mapping) = super.describe(resources)$/;"	l
Description	src/main/scala/devices/tilelink/Error.scala	/^      val Description(name, mapping) = device.describe(resourceBindings)$/;"	l
Description	src/main/scala/devices/tilelink/Plic.scala	/^      val Description(name, mapping) = super.describe(resources)$/;"	l
Description	src/main/scala/devices/tilelink/Zero.scala	/^      val Description(name, mapping) = device.describe(resourceBindings)$/;"	l
Description	src/main/scala/diplomacy/Resources.scala	/^        val Description(name, mapping) = dev.describe(bindings)$/;"	l
Description	src/main/scala/diplomacy/Resources.scala	/^    val Description(_, mapping) = super.describe(resources)$/;"	l
Description	src/main/scala/diplomacy/Resources.scala	/^case class Description(name: String, mapping: Map[String, Seq[ResourceValue]])$/;"	c
Description	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val Description(name, mapping) = device.describe(resourceBindings)$/;"	l
Description	src/main/scala/regmapper/RegisterRouter.scala	/^      val Description(name, mapping) = super.describe(resources)$/;"	l
Description	src/main/scala/rocket/ICache.scala	/^     val Description(name, mapping) = super.describe(resources)$/;"	l
Description	src/main/scala/tile/RocketTile.scala	/^      val Description(name, mapping) = super.describe(resources)$/;"	l
Description	src/main/scala/tilelink/RegisterRouter.scala	/^      val Description(name, mapping) = super.describe(resources)$/;"	l
DesiredNameAnnotation	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^case class DesiredNameAnnotation($/;"	c
DevNullDevice	src/main/scala/devices/tilelink/DevNull.scala	/^abstract class DevNullDevice(params: DevNullParams, minLatency: Int, beatBytes: Int, protected val device: SimpleDevice)$/;"	c
DevNullParams	src/main/scala/devices/tilelink/DevNull.scala	/^case class DevNullParams($/;"	c
Device	src/main/scala/diplomacy/Resources.scala	/^abstract class Device$/;"	c
Device	src/main/scala/diplomacy/Resources.scala	/^object Device$/;"	c
DeviceClocks	src/main/scala/diplomacy/Resources.scala	/^trait DeviceClocks$/;"	t
DeviceInterrupts	src/main/scala/diplomacy/Resources.scala	/^trait DeviceInterrupts$/;"	t
DevicePMP	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^class DevicePMP(params: DevicePMPParams) extends GenericParameterizedBundle(params)$/;"	c
DevicePMP	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^object DevicePMP$/;"	c
DevicePMPParams	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^case class DevicePMPParams(addressBits: Int, pageBits: Int)$/;"	c
DeviceRegName	src/main/scala/diplomacy/Resources.scala	/^trait DeviceRegName$/;"	t
DeviceSnippet	src/main/scala/diplomacy/Resources.scala	/^abstract class DeviceSnippet extends Device$/;"	c
DeviceToProperty	src/main/scala/diplomacy/package.scala	/^  implicit class DeviceToProperty(x: Device) {$/;"	c
DiffAndFix	src/main/resources/csrc/float_fix.cc	/^void DiffAndFix(std::string rocket_filename, std::string lspike_filename) {$/;"	f
DiplomacyUtils	src/main/scala/diplomacy/Resources.scala	/^object DiplomacyUtils {$/;"	c
DiplomaticObjectModelAddressing	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^object DiplomaticObjectModelAddressing {$/;"	c
DiplomaticObjectModelUtils	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^object DiplomaticObjectModelUtils {$/;"	c
DiplomaticSRAM	src/main/scala/diplomacy/SRAM.scala	/^abstract class DiplomaticSRAM($/;"	c
DirectedBuffers	src/main/scala/diplomacy/Parameters.scala	/^trait DirectedBuffers[T] {$/;"	t
Dirty	src/main/scala/tilelink/Metadata.scala	/^  def Dirty   = UInt(3, width)$/;"	m
DisableMonitors	src/main/scala/diplomacy/package.scala	/^  def DisableMonitors[T](body: Parameters => T)(implicit p: Parameters) = body(p.alterPartial {$/;"	m
DisplayOptions	src/main/scala/linting/LintAnnotation.scala	/^case class DisplayOptions($/;"	c
Doctypeable	src/main/scala/util/PlusArg.scala	/^trait Doctypeable[A] {$/;"	t
Doctypes	src/main/scala/util/PlusArg.scala	/^object Doctypes {$/;"	c
Domain	src/main/scala/prci/ClockDomain.scala	/^abstract class Domain(implicit p: Parameters) extends LazyModule with HasDomainCrossing {$/;"	c
DomainCrossingType	src/main/scala/diplomacy/ClockDomain.scala	/^  type DomainCrossingType <: CrossingType$/;"	T
DomainCrossingType	src/main/scala/diplomacy/ClockDomain.scala	/^  type DomainCrossingType = ClockCrossingType$/;"	T
DomainCrossingType	src/main/scala/prci/ResetCrossingType.scala	/^  type DomainCrossingType = ResetCrossingType$/;"	T
DontTouch	src/main/scala/util/Annotations.scala	/^trait DontTouch { self: RawModule =>$/;"	t
DownwardCycleException	src/main/scala/diplomacy/Nodes.scala	/^case class DownwardCycleException(loop: Seq[String] = Nil) extends CycleException("downward", loop)$/;"	c
DriveClocksFromSBus	src/main/scala/subsystem/BusTopology.scala	/^case object DriveClocksFromSBus extends Field[Boolean](true)$/;"	c
DriveFn	src/main/scala/prci/ClockGroupDriver.scala	/^  type DriveFn = (ClockGroupEphemeralNode, Int, Parameters, ValName) => ModuleValue[RecordMap[ClockBundle]]$/;"	T
Driver	src/main/scala/formal/FormalUtils.scala	/^  object Driver  extends MonitorDirection("Driver") { override def flip: MonitorDirection = Receiver }$/;"	c
DsbBusConsts	src/main/scala/devices/debug/Debug.scala	/^object DsbBusConsts {$/;"	c
DsbRegAddrs	src/main/scala/devices/debug/Debug.scala	/^object DsbRegAddrs{$/;"	c
DualBankConfig	src/main/scala/system/Configs.scala	/^class DualBankConfig extends Config(new WithNBanks(2) ++ new DefaultConfig)$/;"	c
DualChannelBenchmarkConfig	src/main/scala/system/Configs.scala	/^class DualChannelBenchmarkConfig extends Config(new WithNMemoryChannels(2) ++ new SingleChannelBenchmarkConfig)$/;"	c
DualChannelConfig	src/main/scala/system/Configs.scala	/^class DualChannelConfig extends Config(new WithNMemoryChannels(2) ++ new DefaultConfig)$/;"	c
DualChannelDualBankConfig	src/main/scala/system/Configs.scala	/^class DualChannelDualBankConfig extends Config($/;"	c
DualCoreConfig	src/main/scala/system/Configs.scala	/^class DualCoreConfig extends Config(new WithNBigCores(2) ++ new WithCoherentBusTopology ++ new BaseConfig)$/;"	c
DummyPTW	src/main/scala/groundtest/DummyPTW.scala	/^class DummyPTW(n: Int)(implicit p: Parameters) extends CoreModule()(p) {$/;"	c
DynamicTimer	src/main/scala/util/Timer.scala	/^class DynamicTimer(w: Int) extends Module {$/;"	c
EBREAK	src/main/scala/rocket/Instructions.scala	/^  def EBREAK             = BitPat("b00000000000100000000000001110011")$/;"	m
ECALL	src/main/scala/rocket/Instructions.scala	/^  def ECALL              = BitPat("b00000000000000000000000001110011")$/;"	m
ECCParams	src/main/scala/util/ECC.scala	/^case class ECCParams($/;"	c
ECCTest	src/main/scala/util/ECC.scala	/^class ECCTest(k: Int, timeout: Int = 500000) extends UnitTest(timeout) {$/;"	c
ECCUnitTestConfig	src/main/scala/unittest/Configs.scala	/^class ECCUnitTestConfig extends Config(new WithECCTests)$/;"	c
EICG_wrapper	src/main/resources/vsrc/EICG_wrapper.v	/^module EICG_wrapper($/;"	m
EICG_wrapper	src/main/scala/util/ClockGate.scala	/^class EICG_wrapper extends ClockGate$/;"	c
ELFS	scripts/debug_rom/Makefile	/^ELFS = debug_rom debug_rom_nonzero$/;"	m
EMULATOR_JTAG_DTM_32_TEST_STAMPS	regression/Makefile	/^EMULATOR_JTAG_DTM_32_TEST_STAMPS=$(foreach config,$(CONFIGS_32),stamps\/$(config)\/emulator-jtag-dtm-32-$(JTAG_DTM_TEST).stamp)$/;"	m
EMULATOR_JTAG_DTM_64_TEST_STAMPS	regression/Makefile	/^EMULATOR_JTAG_DTM_64_TEST_STAMPS=$(foreach config,$(CONFIGS_64),stamps\/$(config)\/emulator-jtag-dtm-64-$(JTAG_DTM_TEST).stamp)$/;"	m
EMULATOR_JTAG_VCDPLUS_32	regression/Makefile	/^EMULATOR_JTAG_VCDPLUS_32= -v regression32.vcd$/;"	m
EMULATOR_JTAG_VCDPLUS_64	regression/Makefile	/^EMULATOR_JTAG_VCDPLUS_64= -v regression64.vcd$/;"	m
EMU_ASM_TEST_STAMPS	regression/Makefile	/^EMU_ASM_TEST_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/emulator-asm-tests.stamp)$/;"	m
EMU_BMARK_TEST_STAMPS	regression/Makefile	/^EMU_BMARK_TEST_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/emulator-bmark-tests.stamp)$/;"	m
EMU_DEBUG_STAMPS	regression/Makefile	/^EMU_DEBUG_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/emulator-debug.stamp)$/;"	m
EMU_NDEBUG_STAMPS	regression/Makefile	/^EMU_NDEBUG_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/emulator-ndebug.stamp)$/;"	m
EMU_REGRESSION_TEST_STAMPS	regression/Makefile	/^EMU_REGRESSION_TEST_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/emulator-regression-tests.stamp)$/;"	m
EMU_TORTURE_STAMPS	regression/Makefile	/^EMU_TORTURE_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/emulator-torture-$(TORTURE_CONFIG).stamp)$/;"	m
EXCEPTION	scripts/debug_rom/debug_rom.S	/^#define EXCEPTION 0x10C$/;"	d
EXCEPTION	scripts/debug_rom/debug_rom_nonzero.S	/^#define EXCEPTION -0x6F4  \/\/ 0x10C$/;"	d
EXCEPTION	src/main/scala/devices/debug/Debug.scala	/^  def EXCEPTION    = 0x10C$/;"	m
EarlyAck	src/main/scala/tilelink/Fragmenter.scala	/^object EarlyAck {$/;"	c
Edge128BitConfig	src/main/scala/system/Configs.scala	/^class Edge128BitConfig extends Config($/;"	c
Edge32BitConfig	src/main/scala/system/Configs.scala	/^class Edge32BitConfig extends Config($/;"	c
Edges	src/main/scala/diplomacy/Nodes.scala	/^case class Edges[EI, EO](in: Seq[EI], out: Seq[EO])$/;"	c
EightChannelConfig	src/main/scala/system/Configs.scala	/^class EightChannelConfig extends Config(new WithNMemoryChannels(8) ++ new DefaultConfig)$/;"	c
ElaborationArtefactAnnotation	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^case class ElaborationArtefactAnnotation(outputFile: String, tokens: List[Any]) extends Annotation with HasSerializationHints {$/;"	c
ElaborationArtefactAnnotation	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^object ElaborationArtefactAnnotation {$/;"	c
ElaborationArtefacts	src/main/scala/util/GeneratorUtils.scala	/^object ElaborationArtefacts {$/;"	c
EnableMonitors	src/main/scala/diplomacy/package.scala	/^  def EnableMonitors[T](body: Parameters => T)(implicit p: Parameters) = body(p.alterPartial {$/;"	m
EnhancedChisel3Assign	src/main/scala/util/package.scala	/^  implicit class EnhancedChisel3Assign[T <: Data](private val x: T) extends AnyVal {$/;"	c
EphemeralNode	src/main/scala/diplomacy/Nodes.scala	/^class EphemeralNode[D, U, EO, EI, B <: Data](imp: NodeImp[D, U, EO, EI, B])()(implicit valName: ValName)$/;"	c
ErrGen	src/main/scala/util/ECC.scala	/^object ErrGen$/;"	c
EventSet	src/main/scala/rocket/Events.scala	/^class EventSet(val gate: (UInt, UInt) => Bool, val events: Seq[(String, () => Bool)]) {$/;"	c
EventSets	src/main/scala/rocket/Events.scala	/^class EventSets(val eventSets: Seq[EventSet]) {$/;"	c
ExampleDevice	src/main/scala/examples/ExampleDevice.scala	/^abstract class ExampleDevice(params: ExampleDeviceParams)(implicit p: Parameters)$/;"	c
ExampleDeviceIOBundle	src/main/scala/examples/ExampleDevice.scala	/^class ExampleDeviceIOBundle(val params: ExampleDeviceParams) extends Bundle {$/;"	c
ExampleDeviceParams	src/main/scala/examples/ExampleDevice.scala	/^case class ExampleDeviceParams(num: Int, address: BigInt)$/;"	c
ExampleRocketSystem	src/main/scala/system/ExampleRocketSystem.scala	/^class ExampleRocketSystem(implicit p: Parameters) extends RocketSubsystem$/;"	c
ExampleRocketSystemModuleImp	src/main/scala/system/ExampleRocketSystem.scala	/^class ExampleRocketSystemModuleImp[+L <: ExampleRocketSystem](_outer: L) extends RocketSubsystemModuleImp(_outer)$/;"	c
Exit1DR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object Exit1DR extends State(1)$/;"	c
Exit1IR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object Exit1IR extends State(9)$/;"	c
Exit2DR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object Exit2DR extends State(0)$/;"	c
Exit2IR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object Exit2IR extends State(8)$/;"	c
ExpandedInstruction	src/main/scala/rocket/RVC.scala	/^class ExpandedInstruction extends Bundle {$/;"	c
ExpandedValue	src/main/scala/diplomacy/Resources.scala	/^  private case class ExpandedValue(path: Seq[String], labels: Seq[String], value: Seq[ResourceValue])$/;"	c
ExportDebug	src/main/scala/devices/debug/Periphery.scala	/^case object ExportDebug extends Field(DebugAttachParams())$/;"	c
ExtBus	src/main/scala/subsystem/Ports.scala	/^case object ExtBus extends Field[Option[MasterPortParams]](None)$/;"	c
ExtIn	src/main/scala/subsystem/Ports.scala	/^case object ExtIn extends Field[Option[SlavePortParams]](None)$/;"	c
ExtMem	src/main/scala/subsystem/Ports.scala	/^case object ExtMem extends Field[Option[MemoryPortParams]](None)$/;"	c
F	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object F extends OMExtensionType$/;"	c
F64Decode	src/main/scala/rocket/IDecode.scala	/^class F64Decode(implicit val p: Parameters) extends DecodeConstants$/;"	c
FADD_D	src/main/scala/rocket/Instructions.scala	/^  def FADD_D             = BitPat("b0000001??????????????????1010011")$/;"	m
FADD_H	src/main/scala/rocket/Instructions.scala	/^  def FADD_H             = BitPat("b0000010??????????????????1010011")$/;"	m
FADD_Q	src/main/scala/rocket/Instructions.scala	/^  def FADD_Q             = BitPat("b0000011??????????????????1010011")$/;"	m
FADD_S	src/main/scala/rocket/Instructions.scala	/^  def FADD_S             = BitPat("b0000000??????????????????1010011")$/;"	m
FBUS	src/main/scala/subsystem/BusTopology.scala	/^case object FBUS extends TLBusWrapperLocation("subsystem_fbus")$/;"	c
FCLASS_D	src/main/scala/rocket/Instructions.scala	/^  def FCLASS_D           = BitPat("b111000100000?????001?????1010011")$/;"	m
FCLASS_H	src/main/scala/rocket/Instructions.scala	/^  def FCLASS_H           = BitPat("b111001000000?????001?????1010011")$/;"	m
FCLASS_Q	src/main/scala/rocket/Instructions.scala	/^  def FCLASS_Q           = BitPat("b111001100000?????001?????1010011")$/;"	m
FCLASS_S	src/main/scala/rocket/Instructions.scala	/^  def FCLASS_S           = BitPat("b111000000000?????001?????1010011")$/;"	m
FCVT_D_H	src/main/scala/rocket/Instructions.scala	/^  def FCVT_D_H           = BitPat("b010000100010?????????????1010011")$/;"	m
FCVT_D_L	src/main/scala/rocket/Instructions.scala	/^  def FCVT_D_L           = BitPat("b110100100010?????????????1010011")$/;"	m
FCVT_D_LU	src/main/scala/rocket/Instructions.scala	/^  def FCVT_D_LU          = BitPat("b110100100011?????????????1010011")$/;"	m
FCVT_D_Q	src/main/scala/rocket/Instructions.scala	/^  def FCVT_D_Q           = BitPat("b010000100011?????????????1010011")$/;"	m
FCVT_D_S	src/main/scala/rocket/Instructions.scala	/^  def FCVT_D_S           = BitPat("b010000100000?????????????1010011")$/;"	m
FCVT_D_W	src/main/scala/rocket/Instructions.scala	/^  def FCVT_D_W           = BitPat("b110100100000?????????????1010011")$/;"	m
FCVT_D_WU	src/main/scala/rocket/Instructions.scala	/^  def FCVT_D_WU          = BitPat("b110100100001?????????????1010011")$/;"	m
FCVT_H_D	src/main/scala/rocket/Instructions.scala	/^  def FCVT_H_D           = BitPat("b010001000001?????????????1010011")$/;"	m
FCVT_H_L	src/main/scala/rocket/Instructions.scala	/^  def FCVT_H_L           = BitPat("b110101000010?????????????1010011")$/;"	m
FCVT_H_LU	src/main/scala/rocket/Instructions.scala	/^  def FCVT_H_LU          = BitPat("b110101000011?????????????1010011")$/;"	m
FCVT_H_Q	src/main/scala/rocket/Instructions.scala	/^  def FCVT_H_Q           = BitPat("b010001000011?????????????1010011")$/;"	m
FCVT_H_S	src/main/scala/rocket/Instructions.scala	/^  def FCVT_H_S           = BitPat("b010001000000?????????????1010011")$/;"	m
FCVT_H_W	src/main/scala/rocket/Instructions.scala	/^  def FCVT_H_W           = BitPat("b110101000000?????????????1010011")$/;"	m
FCVT_H_WU	src/main/scala/rocket/Instructions.scala	/^  def FCVT_H_WU          = BitPat("b110101000001?????????????1010011")$/;"	m
FCVT_LU_D	src/main/scala/rocket/Instructions.scala	/^  def FCVT_LU_D          = BitPat("b110000100011?????????????1010011")$/;"	m
FCVT_LU_H	src/main/scala/rocket/Instructions.scala	/^  def FCVT_LU_H          = BitPat("b110001000011?????????????1010011")$/;"	m
FCVT_LU_Q	src/main/scala/rocket/Instructions.scala	/^  def FCVT_LU_Q          = BitPat("b110001100011?????????????1010011")$/;"	m
FCVT_LU_S	src/main/scala/rocket/Instructions.scala	/^  def FCVT_LU_S          = BitPat("b110000000011?????????????1010011")$/;"	m
FCVT_L_D	src/main/scala/rocket/Instructions.scala	/^  def FCVT_L_D           = BitPat("b110000100010?????????????1010011")$/;"	m
FCVT_L_H	src/main/scala/rocket/Instructions.scala	/^  def FCVT_L_H           = BitPat("b110001000010?????????????1010011")$/;"	m
FCVT_L_Q	src/main/scala/rocket/Instructions.scala	/^  def FCVT_L_Q           = BitPat("b110001100010?????????????1010011")$/;"	m
FCVT_L_S	src/main/scala/rocket/Instructions.scala	/^  def FCVT_L_S           = BitPat("b110000000010?????????????1010011")$/;"	m
FCVT_Q_D	src/main/scala/rocket/Instructions.scala	/^  def FCVT_Q_D           = BitPat("b010001100001?????????????1010011")$/;"	m
FCVT_Q_H	src/main/scala/rocket/Instructions.scala	/^  def FCVT_Q_H           = BitPat("b010001100010?????????????1010011")$/;"	m
FCVT_Q_L	src/main/scala/rocket/Instructions.scala	/^  def FCVT_Q_L           = BitPat("b110101100010?????????????1010011")$/;"	m
FCVT_Q_LU	src/main/scala/rocket/Instructions.scala	/^  def FCVT_Q_LU          = BitPat("b110101100011?????????????1010011")$/;"	m
FCVT_Q_S	src/main/scala/rocket/Instructions.scala	/^  def FCVT_Q_S           = BitPat("b010001100000?????????????1010011")$/;"	m
FCVT_Q_W	src/main/scala/rocket/Instructions.scala	/^  def FCVT_Q_W           = BitPat("b110101100000?????????????1010011")$/;"	m
FCVT_Q_WU	src/main/scala/rocket/Instructions.scala	/^  def FCVT_Q_WU          = BitPat("b110101100001?????????????1010011")$/;"	m
FCVT_S_D	src/main/scala/rocket/Instructions.scala	/^  def FCVT_S_D           = BitPat("b010000000001?????????????1010011")$/;"	m
FCVT_S_H	src/main/scala/rocket/Instructions.scala	/^  def FCVT_S_H           = BitPat("b010000000010?????????????1010011")$/;"	m
FCVT_S_L	src/main/scala/rocket/Instructions.scala	/^  def FCVT_S_L           = BitPat("b110100000010?????????????1010011")$/;"	m
FCVT_S_LU	src/main/scala/rocket/Instructions.scala	/^  def FCVT_S_LU          = BitPat("b110100000011?????????????1010011")$/;"	m
FCVT_S_Q	src/main/scala/rocket/Instructions.scala	/^  def FCVT_S_Q           = BitPat("b010000000011?????????????1010011")$/;"	m
FCVT_S_W	src/main/scala/rocket/Instructions.scala	/^  def FCVT_S_W           = BitPat("b110100000000?????????????1010011")$/;"	m
FCVT_S_WU	src/main/scala/rocket/Instructions.scala	/^  def FCVT_S_WU          = BitPat("b110100000001?????????????1010011")$/;"	m
FCVT_WU_D	src/main/scala/rocket/Instructions.scala	/^  def FCVT_WU_D          = BitPat("b110000100001?????????????1010011")$/;"	m
FCVT_WU_H	src/main/scala/rocket/Instructions.scala	/^  def FCVT_WU_H          = BitPat("b110001000001?????????????1010011")$/;"	m
FCVT_WU_Q	src/main/scala/rocket/Instructions.scala	/^  def FCVT_WU_Q          = BitPat("b110001100001?????????????1010011")$/;"	m
FCVT_WU_S	src/main/scala/rocket/Instructions.scala	/^  def FCVT_WU_S          = BitPat("b110000000001?????????????1010011")$/;"	m
FCVT_W_D	src/main/scala/rocket/Instructions.scala	/^  def FCVT_W_D           = BitPat("b110000100000?????????????1010011")$/;"	m
FCVT_W_H	src/main/scala/rocket/Instructions.scala	/^  def FCVT_W_H           = BitPat("b110001000000?????????????1010011")$/;"	m
FCVT_W_Q	src/main/scala/rocket/Instructions.scala	/^  def FCVT_W_Q           = BitPat("b110001100000?????????????1010011")$/;"	m
FCVT_W_S	src/main/scala/rocket/Instructions.scala	/^  def FCVT_W_S           = BitPat("b110000000000?????????????1010011")$/;"	m
FDIV_D	src/main/scala/rocket/Instructions.scala	/^  def FDIV_D             = BitPat("b0001101??????????????????1010011")$/;"	m
FDIV_H	src/main/scala/rocket/Instructions.scala	/^  def FDIV_H             = BitPat("b0001110??????????????????1010011")$/;"	m
FDIV_Q	src/main/scala/rocket/Instructions.scala	/^  def FDIV_Q             = BitPat("b0001111??????????????????1010011")$/;"	m
FDIV_S	src/main/scala/rocket/Instructions.scala	/^  def FDIV_S             = BitPat("b0001100??????????????????1010011")$/;"	m
FDecode	src/main/scala/rocket/IDecode.scala	/^class FDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
FENCE	src/main/scala/rocket/Instructions.scala	/^  def FENCE              = BitPat("b?????????????????000?????0001111")$/;"	m
FENCE_I	src/main/scala/rocket/Instructions.scala	/^  def FENCE_I            = BitPat("b?????????????????001?????0001111")$/;"	m
FENCE_TSO	src/main/scala/rocket/Instructions.scala	/^  def FENCE_TSO          = BitPat("b100000110011?????000?????0001111")$/;"	m
FEQ_D	src/main/scala/rocket/Instructions.scala	/^  def FEQ_D              = BitPat("b1010001??????????010?????1010011")$/;"	m
FEQ_H	src/main/scala/rocket/Instructions.scala	/^  def FEQ_H              = BitPat("b1010010??????????010?????1010011")$/;"	m
FEQ_Q	src/main/scala/rocket/Instructions.scala	/^  def FEQ_Q              = BitPat("b1010011??????????010?????1010011")$/;"	m
FEQ_S	src/main/scala/rocket/Instructions.scala	/^  def FEQ_S              = BitPat("b1010000??????????010?????1010011")$/;"	m
FLAGS	scripts/debug_rom/debug_rom.S	/^#define FLAGS 0x400$/;"	d
FLAGS	scripts/debug_rom/debug_rom_nonzero.S	/^#define FLAGS     -0x400  \/\/ 0x400$/;"	d
FLAGS	src/main/scala/devices/debug/Debug.scala	/^  def FLAGS        = 0x400$/;"	m
FLAGS_SZ	src/main/scala/tile/FPU.scala	/^  val FLAGS_SZ = 5$/;"	l
FLAG_GO	scripts/debug_rom/debug_rom.S	/^#define FLAG_GO     0$/;"	d
FLAG_GO	scripts/debug_rom/debug_rom_nonzero.S	/^#define FLAG_GO     0$/;"	d
FLAG_RESUME	scripts/debug_rom/debug_rom.S	/^#define FLAG_RESUME 1$/;"	d
FLAG_RESUME	scripts/debug_rom/debug_rom_nonzero.S	/^#define FLAG_RESUME 1$/;"	d
FLD	src/main/scala/rocket/Instructions.scala	/^  def FLD                = BitPat("b?????????????????011?????0000111")$/;"	m
FLE_D	src/main/scala/rocket/Instructions.scala	/^  def FLE_D              = BitPat("b1010001??????????000?????1010011")$/;"	m
FLE_H	src/main/scala/rocket/Instructions.scala	/^  def FLE_H              = BitPat("b1010010??????????000?????1010011")$/;"	m
FLE_Q	src/main/scala/rocket/Instructions.scala	/^  def FLE_Q              = BitPat("b1010011??????????000?????1010011")$/;"	m
FLE_S	src/main/scala/rocket/Instructions.scala	/^  def FLE_S              = BitPat("b1010000??????????000?????1010011")$/;"	m
FLH	src/main/scala/rocket/Instructions.scala	/^  def FLH                = BitPat("b?????????????????001?????0000111")$/;"	m
FLQ	src/main/scala/rocket/Instructions.scala	/^  def FLQ                = BitPat("b?????????????????100?????0000111")$/;"	m
FLT_D	src/main/scala/rocket/Instructions.scala	/^  def FLT_D              = BitPat("b1010001??????????001?????1010011")$/;"	m
FLT_H	src/main/scala/rocket/Instructions.scala	/^  def FLT_H              = BitPat("b1010010??????????001?????1010011")$/;"	m
FLT_Q	src/main/scala/rocket/Instructions.scala	/^  def FLT_Q              = BitPat("b1010011??????????001?????1010011")$/;"	m
FLT_S	src/main/scala/rocket/Instructions.scala	/^  def FLT_S              = BitPat("b1010000??????????001?????1010011")$/;"	m
FLW	src/main/scala/rocket/Instructions.scala	/^  def FLW                = BitPat("b?????????????????010?????0000111")$/;"	m
FMADD_D	src/main/scala/rocket/Instructions.scala	/^  def FMADD_D            = BitPat("b?????01??????????????????1000011")$/;"	m
FMADD_H	src/main/scala/rocket/Instructions.scala	/^  def FMADD_H            = BitPat("b?????10??????????????????1000011")$/;"	m
FMADD_Q	src/main/scala/rocket/Instructions.scala	/^  def FMADD_Q            = BitPat("b?????11??????????????????1000011")$/;"	m
FMADD_S	src/main/scala/rocket/Instructions.scala	/^  def FMADD_S            = BitPat("b?????00??????????????????1000011")$/;"	m
FMAX_D	src/main/scala/rocket/Instructions.scala	/^  def FMAX_D             = BitPat("b0010101??????????001?????1010011")$/;"	m
FMAX_H	src/main/scala/rocket/Instructions.scala	/^  def FMAX_H             = BitPat("b0010110??????????001?????1010011")$/;"	m
FMAX_Q	src/main/scala/rocket/Instructions.scala	/^  def FMAX_Q             = BitPat("b0010111??????????001?????1010011")$/;"	m
FMAX_S	src/main/scala/rocket/Instructions.scala	/^  def FMAX_S             = BitPat("b0010100??????????001?????1010011")$/;"	m
FMIN_D	src/main/scala/rocket/Instructions.scala	/^  def FMIN_D             = BitPat("b0010101??????????000?????1010011")$/;"	m
FMIN_H	src/main/scala/rocket/Instructions.scala	/^  def FMIN_H             = BitPat("b0010110??????????000?????1010011")$/;"	m
FMIN_Q	src/main/scala/rocket/Instructions.scala	/^  def FMIN_Q             = BitPat("b0010111??????????000?????1010011")$/;"	m
FMIN_S	src/main/scala/rocket/Instructions.scala	/^  def FMIN_S             = BitPat("b0010100??????????000?????1010011")$/;"	m
FMSUB_D	src/main/scala/rocket/Instructions.scala	/^  def FMSUB_D            = BitPat("b?????01??????????????????1000111")$/;"	m
FMSUB_H	src/main/scala/rocket/Instructions.scala	/^  def FMSUB_H            = BitPat("b?????10??????????????????1000111")$/;"	m
FMSUB_Q	src/main/scala/rocket/Instructions.scala	/^  def FMSUB_Q            = BitPat("b?????11??????????????????1000111")$/;"	m
FMSUB_S	src/main/scala/rocket/Instructions.scala	/^  def FMSUB_S            = BitPat("b?????00??????????????????1000111")$/;"	m
FMUL_D	src/main/scala/rocket/Instructions.scala	/^  def FMUL_D             = BitPat("b0001001??????????????????1010011")$/;"	m
FMUL_H	src/main/scala/rocket/Instructions.scala	/^  def FMUL_H             = BitPat("b0001010??????????????????1010011")$/;"	m
FMUL_Q	src/main/scala/rocket/Instructions.scala	/^  def FMUL_Q             = BitPat("b0001011??????????????????1010011")$/;"	m
FMUL_S	src/main/scala/rocket/Instructions.scala	/^  def FMUL_S             = BitPat("b0001000??????????????????1010011")$/;"	m
FMV_D_X	src/main/scala/rocket/Instructions.scala	/^  def FMV_D_X            = BitPat("b111100100000?????000?????1010011")$/;"	m
FMV_H_X	src/main/scala/rocket/Instructions.scala	/^  def FMV_H_X            = BitPat("b111101000000?????000?????1010011")$/;"	m
FMV_Q_X	src/main/scala/rocket/Instructions.scala	/^  def FMV_Q_X            = BitPat("b111101100000?????000?????1010011")$/;"	m
FMV_S_X	src/main/scala/rocket/Instructions.scala	/^  def FMV_S_X            = BitPat("b111100000000?????000?????1010011")$/;"	m
FMV_W_X	src/main/scala/rocket/Instructions.scala	/^  def FMV_W_X            = BitPat("b111100000000?????000?????1010011")$/;"	m
FMV_X_D	src/main/scala/rocket/Instructions.scala	/^  def FMV_X_D            = BitPat("b111000100000?????000?????1010011")$/;"	m
FMV_X_H	src/main/scala/rocket/Instructions.scala	/^  def FMV_X_H            = BitPat("b111001000000?????000?????1010011")$/;"	m
FMV_X_Q	src/main/scala/rocket/Instructions.scala	/^  def FMV_X_Q            = BitPat("b111001100000?????000?????1010011")$/;"	m
FMV_X_S	src/main/scala/rocket/Instructions.scala	/^  def FMV_X_S            = BitPat("b111000000000?????000?????1010011")$/;"	m
FMV_X_W	src/main/scala/rocket/Instructions.scala	/^  def FMV_X_W            = BitPat("b111000000000?????000?????1010011")$/;"	m
FNMADD_D	src/main/scala/rocket/Instructions.scala	/^  def FNMADD_D           = BitPat("b?????01??????????????????1001111")$/;"	m
FNMADD_H	src/main/scala/rocket/Instructions.scala	/^  def FNMADD_H           = BitPat("b?????10??????????????????1001111")$/;"	m
FNMADD_Q	src/main/scala/rocket/Instructions.scala	/^  def FNMADD_Q           = BitPat("b?????11??????????????????1001111")$/;"	m
FNMADD_S	src/main/scala/rocket/Instructions.scala	/^  def FNMADD_S           = BitPat("b?????00??????????????????1001111")$/;"	m
FNMSUB_D	src/main/scala/rocket/Instructions.scala	/^  def FNMSUB_D           = BitPat("b?????01??????????????????1001011")$/;"	m
FNMSUB_H	src/main/scala/rocket/Instructions.scala	/^  def FNMSUB_H           = BitPat("b?????10??????????????????1001011")$/;"	m
FNMSUB_Q	src/main/scala/rocket/Instructions.scala	/^  def FNMSUB_Q           = BitPat("b?????11??????????????????1001011")$/;"	m
FNMSUB_S	src/main/scala/rocket/Instructions.scala	/^  def FNMSUB_S           = BitPat("b?????00??????????????????1001011")$/;"	m
FN_ADD	src/main/scala/rocket/ALU.scala	/^  def FN_ADD  = UInt(0)$/;"	m
FN_AND	src/main/scala/rocket/ALU.scala	/^  def FN_AND  = UInt(7)$/;"	m
FN_DIV	src/main/scala/rocket/ALU.scala	/^  def FN_DIV  = FN_XOR$/;"	m
FN_DIVU	src/main/scala/rocket/ALU.scala	/^  def FN_DIVU = FN_SR$/;"	m
FN_MUL	src/main/scala/rocket/ALU.scala	/^  def FN_MUL    = FN_ADD$/;"	m
FN_MULH	src/main/scala/rocket/ALU.scala	/^  def FN_MULH   = FN_SL$/;"	m
FN_MULHSU	src/main/scala/rocket/ALU.scala	/^  def FN_MULHSU = FN_SEQ$/;"	m
FN_MULHU	src/main/scala/rocket/ALU.scala	/^  def FN_MULHU  = FN_SNE$/;"	m
FN_OR	src/main/scala/rocket/ALU.scala	/^  def FN_OR   = UInt(6)$/;"	m
FN_REM	src/main/scala/rocket/ALU.scala	/^  def FN_REM  = FN_OR$/;"	m
FN_REMU	src/main/scala/rocket/ALU.scala	/^  def FN_REMU = FN_AND$/;"	m
FN_SEQ	src/main/scala/rocket/ALU.scala	/^  def FN_SEQ  = UInt(2)$/;"	m
FN_SGE	src/main/scala/rocket/ALU.scala	/^  def FN_SGE  = UInt(13)$/;"	m
FN_SGEU	src/main/scala/rocket/ALU.scala	/^  def FN_SGEU = UInt(15)$/;"	m
FN_SL	src/main/scala/rocket/ALU.scala	/^  def FN_SL   = UInt(1)$/;"	m
FN_SLT	src/main/scala/rocket/ALU.scala	/^  def FN_SLT  = UInt(12)$/;"	m
FN_SLTU	src/main/scala/rocket/ALU.scala	/^  def FN_SLTU = UInt(14)$/;"	m
FN_SNE	src/main/scala/rocket/ALU.scala	/^  def FN_SNE  = UInt(3)$/;"	m
FN_SR	src/main/scala/rocket/ALU.scala	/^  def FN_SR   = UInt(5)$/;"	m
FN_SRA	src/main/scala/rocket/ALU.scala	/^  def FN_SRA  = UInt(11)$/;"	m
FN_SUB	src/main/scala/rocket/ALU.scala	/^  def FN_SUB  = UInt(10)$/;"	m
FN_X	src/main/scala/rocket/ALU.scala	/^  def FN_X    = BitPat("b????")$/;"	m
FN_XOR	src/main/scala/rocket/ALU.scala	/^  def FN_XOR  = UInt(4)$/;"	m
FORMAT	src/main/resources/vsrc/plusarg_reader.v	/^   parameter FORMAT="borked=%d",$/;"	c
FPConstants	src/main/scala/tile/FPU.scala	/^object FPConstants$/;"	c
FPInput	src/main/scala/tile/FPU.scala	/^class FPInput(implicit p: Parameters) extends CoreBundle()(p) with HasFPUCtrlSigs {$/;"	c
FPResult	src/main/scala/tile/FPU.scala	/^class FPResult(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
FPToFP	src/main/scala/tile/FPU.scala	/^class FPToFP(val latency: Int)(implicit p: Parameters) extends FPUModule()(p) with ShouldBeRetimed {$/;"	c
FPToInt	src/main/scala/tile/FPU.scala	/^class FPToInt(implicit p: Parameters) extends FPUModule()(p) with ShouldBeRetimed {$/;"	c
FPU	src/main/scala/tile/FPU.scala	/^class FPU(cfg: FPUParams)(implicit p: Parameters) extends FPUModule()(p) {$/;"	c
FPUCoreIO	src/main/scala/tile/FPU.scala	/^class FPUCoreIO(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
FPUCtrlSigs	src/main/scala/tile/FPU.scala	/^class FPUCtrlSigs extends Bundle with HasFPUCtrlSigs$/;"	c
FPUDecoder	src/main/scala/tile/FPU.scala	/^class FPUDecoder(implicit p: Parameters) extends FPUModule()(p) {$/;"	c
FPUFMAPipe	src/main/scala/tile/FPU.scala	/^class FPUFMAPipe(val latency: Int, val t: FType)$/;"	c
FPUIO	src/main/scala/tile/FPU.scala	/^class FPUIO(implicit p: Parameters) extends FPUCoreIO ()(p) {$/;"	c
FPUModule	src/main/scala/tile/FPU.scala	/^abstract class FPUModule(implicit val p: Parameters) extends Module with HasCoreParameters with HasFPUParameters$/;"	c
FPUParams	src/main/scala/tile/FPU.scala	/^case class FPUParams($/;"	c
FRCSR	src/main/scala/rocket/Instructions.scala	/^  def FRCSR              = BitPat("b00000000001100000010?????1110011")$/;"	m
FREE	src/main/scala/tilelink/AtomicAutomata.scala	/^      val FREE = UInt(0) \/\/ unused                   waiting on Atomic from A$/;"	l
FRFLAGS	src/main/scala/rocket/Instructions.scala	/^  def FRFLAGS            = BitPat("b00000000000100000010?????1110011")$/;"	m
FRRM	src/main/scala/rocket/Instructions.scala	/^  def FRRM               = BitPat("b00000000001000000010?????1110011")$/;"	m
FSCSR	src/main/scala/rocket/Instructions.scala	/^  def FSCSR              = BitPat("b000000000011?????001?????1110011")$/;"	m
FSD	src/main/scala/rocket/Instructions.scala	/^  def FSD                = BitPat("b?????????????????011?????0100111")$/;"	m
FSFLAGS	src/main/scala/rocket/Instructions.scala	/^  def FSFLAGS            = BitPat("b000000000001?????001?????1110011")$/;"	m
FSFLAGSI	src/main/scala/rocket/Instructions.scala	/^  def FSFLAGSI           = BitPat("b000000000001?????101?????1110011")$/;"	m
FSGNJN_D	src/main/scala/rocket/Instructions.scala	/^  def FSGNJN_D           = BitPat("b0010001??????????001?????1010011")$/;"	m
FSGNJN_H	src/main/scala/rocket/Instructions.scala	/^  def FSGNJN_H           = BitPat("b0010010??????????001?????1010011")$/;"	m
FSGNJN_Q	src/main/scala/rocket/Instructions.scala	/^  def FSGNJN_Q           = BitPat("b0010011??????????001?????1010011")$/;"	m
FSGNJN_S	src/main/scala/rocket/Instructions.scala	/^  def FSGNJN_S           = BitPat("b0010000??????????001?????1010011")$/;"	m
FSGNJX_D	src/main/scala/rocket/Instructions.scala	/^  def FSGNJX_D           = BitPat("b0010001??????????010?????1010011")$/;"	m
FSGNJX_H	src/main/scala/rocket/Instructions.scala	/^  def FSGNJX_H           = BitPat("b0010010??????????010?????1010011")$/;"	m
FSGNJX_Q	src/main/scala/rocket/Instructions.scala	/^  def FSGNJX_Q           = BitPat("b0010011??????????010?????1010011")$/;"	m
FSGNJX_S	src/main/scala/rocket/Instructions.scala	/^  def FSGNJX_S           = BitPat("b0010000??????????010?????1010011")$/;"	m
FSGNJ_D	src/main/scala/rocket/Instructions.scala	/^  def FSGNJ_D            = BitPat("b0010001??????????000?????1010011")$/;"	m
FSGNJ_H	src/main/scala/rocket/Instructions.scala	/^  def FSGNJ_H            = BitPat("b0010010??????????000?????1010011")$/;"	m
FSGNJ_Q	src/main/scala/rocket/Instructions.scala	/^  def FSGNJ_Q            = BitPat("b0010011??????????000?????1010011")$/;"	m
FSGNJ_S	src/main/scala/rocket/Instructions.scala	/^  def FSGNJ_S            = BitPat("b0010000??????????000?????1010011")$/;"	m
FSH	src/main/scala/rocket/Instructions.scala	/^  def FSH                = BitPat("b?????????????????001?????0100111")$/;"	m
FSL	src/main/scala/rocket/Instructions.scala	/^  def FSL                = BitPat("b?????10??????????001?????0110011")$/;"	m
FSLW	src/main/scala/rocket/Instructions.scala	/^  def FSLW               = BitPat("b?????10??????????001?????0111011")$/;"	m
FSQ	src/main/scala/rocket/Instructions.scala	/^  def FSQ                = BitPat("b?????????????????100?????0100111")$/;"	m
FSQRT_D	src/main/scala/rocket/Instructions.scala	/^  def FSQRT_D            = BitPat("b010110100000?????????????1010011")$/;"	m
FSQRT_H	src/main/scala/rocket/Instructions.scala	/^  def FSQRT_H            = BitPat("b010111000000?????????????1010011")$/;"	m
FSQRT_Q	src/main/scala/rocket/Instructions.scala	/^  def FSQRT_Q            = BitPat("b010111100000?????????????1010011")$/;"	m
FSQRT_S	src/main/scala/rocket/Instructions.scala	/^  def FSQRT_S            = BitPat("b010110000000?????????????1010011")$/;"	m
FSR	src/main/scala/rocket/Instructions.scala	/^  def FSR                = BitPat("b?????10??????????101?????0110011")$/;"	m
FSRI	src/main/scala/rocket/Instructions.scala	/^  def FSRI               = BitPat("b?????1???????????101?????0010011")$/;"	m
FSRIW	src/main/scala/rocket/Instructions.scala	/^  def FSRIW              = BitPat("b?????10??????????101?????0011011")$/;"	m
FSRM	src/main/scala/rocket/Instructions.scala	/^  def FSRM               = BitPat("b000000000010?????001?????1110011")$/;"	m
FSRMI	src/main/scala/rocket/Instructions.scala	/^  def FSRMI              = BitPat("b000000000010?????101?????1110011")$/;"	m
FSRW	src/main/scala/rocket/Instructions.scala	/^  def FSRW               = BitPat("b?????10??????????101?????0111011")$/;"	m
FSUB_D	src/main/scala/rocket/Instructions.scala	/^  def FSUB_D             = BitPat("b0000101??????????????????1010011")$/;"	m
FSUB_H	src/main/scala/rocket/Instructions.scala	/^  def FSUB_H             = BitPat("b0000110??????????????????1010011")$/;"	m
FSUB_Q	src/main/scala/rocket/Instructions.scala	/^  def FSUB_Q             = BitPat("b0000111??????????????????1010011")$/;"	m
FSUB_S	src/main/scala/rocket/Instructions.scala	/^  def FSUB_S             = BitPat("b0000100??????????????????1010011")$/;"	m
FSW	src/main/scala/rocket/Instructions.scala	/^  def FSW                = BitPat("b?????????????????010?????0100111")$/;"	m
FType	src/main/scala/tile/FPU.scala	/^case class FType(exp: Int, sig: Int) {$/;"	c
FType	src/main/scala/tile/FPU.scala	/^object FType {$/;"	c
Failure	src/main/scala/formal/FormalUtils.scala	/^  object Failure extends PropertyClass("Fail")$/;"	c
FastToSlow	src/main/scala/util/RationalCrossing.scala	/^case object FastToSlow extends RationalDirection {$/;"	c
FbusToSbusXTypeKey	src/main/scala/subsystem/BusTopology.scala	/^case object FbusToSbusXTypeKey extends Field[ClockCrossingType](SynchronousCrossing())$/;"	c
FenceIDecode	src/main/scala/rocket/IDecode.scala	/^class FenceIDecode(flushDCache: Boolean)(implicit val p: Parameters) extends DecodeConstants$/;"	c
FixChisel3	src/main/scala/util/BundleMap.scala	/^object FixChisel3 {$/;"	c
FixedClockBroadcast	src/main/scala/prci/ClockGroup.scala	/^class FixedClockBroadcast(fixedClockOpt: Option[ClockParameters])(implicit p: Parameters) extends LazyModule$/;"	c
FixedClockBroadcast	src/main/scala/prci/ClockGroup.scala	/^object FixedClockBroadcast$/;"	c
FixedClockBroadcastNode	src/main/scala/prci/ClockGroup.scala	/^case class FixedClockBroadcastNode(fixedClockOpt: Option[ClockParameters])(implicit valName: ValName)$/;"	c
FixedClockResource	src/main/scala/diplomacy/FixedClockResource.scala	/^class FixedClockResource(val name: String, val freqMHz: Double, val prefix: String = "soc\/")$/;"	c
Flexible	src/main/scala/util/RationalCrossing.scala	/^case object Flexible extends RationalDirection {$/;"	c
FlightMonitor	src/main/scala/tilelink/RAMModel.scala	/^  class FlightMonitor(params: MonitorParameters) extends GenericParameterizedBundle(params) {$/;"	c
FlipRendering	src/main/scala/diplomacy/package.scala	/^  def FlipRendering[T](body: Parameters => T)(implicit p: Parameters) = body(p.alterPartial {$/;"	m
FloppedLanePositionedQueue	src/main/scala/util/LanePositionedQueue.scala	/^object FloppedLanePositionedQueue extends LanePositionedQueue {$/;"	c
FloppedLanePositionedQueueModule	src/main/scala/util/LanePositionedQueue.scala	/^class FloppedLanePositionedQueueModule[T <: Data](gen: T, args: LanePositionedQueueArgs)$/;"	c
ForceFanout	src/main/scala/tilelink/Xbar.scala	/^object ForceFanout$/;"	c
ForceFanoutKey	src/main/scala/tilelink/Xbar.scala	/^private case object ForceFanoutKey extends Field(ForceFanoutParams(false, false, false, false, false))$/;"	c
ForceFanoutParams	src/main/scala/tilelink/Xbar.scala	/^private case class ForceFanoutParams(a: Boolean, b: Boolean, c: Boolean, d: Boolean, e: Boolean)$/;"	c
FormatEdge	src/main/scala/diplomacy/Nodes.scala	/^trait FormatEdge {$/;"	t
FormatNode	src/main/scala/diplomacy/Nodes.scala	/^trait FormatNode[I <: FormatEdge, O <: FormatEdge] extends BaseNode {$/;"	t
Frequency	src/main/scala/util/Frequency.scala	/^object Frequency {$/;"	c
FromAsyncBundle	src/main/scala/util/AsyncQueue.scala	/^object FromAsyncBundle$/;"	c
FromRational	src/main/scala/util/RationalCrossing.scala	/^object FromRational$/;"	c
FrontBus	src/main/scala/subsystem/FrontBus.scala	/^class FrontBus(params: FrontBusParams, name: String = "front_bus")(implicit p: Parameters)$/;"	c
FrontBusKey	src/main/scala/subsystem/BusTopology.scala	/^case object FrontBusKey extends Field[FrontBusParams]$/;"	c
FrontBusParams	src/main/scala/subsystem/FrontBus.scala	/^case class FrontBusParams($/;"	c
FrontPort	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class FrontPort($/;"	c
FrontPortType	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object FrontPortType extends PortType$/;"	c
Frontend	src/main/scala/rocket/Frontend.scala	/^class Frontend(val icacheParams: ICacheParams, staticIdForMetadataUseOnly: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
FrontendBundle	src/main/scala/rocket/Frontend.scala	/^class FrontendBundle(val outer: Frontend) extends CoreBundle()(outer.p) {$/;"	c
FrontendExceptions	src/main/scala/rocket/Frontend.scala	/^class FrontendExceptions extends Bundle {$/;"	c
FrontendIO	src/main/scala/rocket/Frontend.scala	/^class FrontendIO(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
FrontendModule	src/main/scala/rocket/Frontend.scala	/^class FrontendModule(outer: Frontend) extends LazyModuleImp(outer)$/;"	c
FrontendPerfEvents	src/main/scala/rocket/Frontend.scala	/^class FrontendPerfEvents extends Bundle {$/;"	c
FrontendReq	src/main/scala/rocket/Frontend.scala	/^class FrontendReq(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
FrontendResp	src/main/scala/rocket/Frontend.scala	/^class FrontendResp(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
FuzzRRTest0	src/main/scala/tilelink/RegisterRouterTest.scala	/^class FuzzRRTest0(txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
FuzzRRTest1	src/main/scala/tilelink/RegisterRouterTest.scala	/^class FuzzRRTest1(txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
GCC	bootrom/Makefile	/^GCC=riscv64-unknown-elf-gcc$/;"	m
GDBSERVER	regression/Makefile	/^GDBSERVER = $(abspath $(TOP))\/rocket-tools\/riscv-tests\/debug\/gdbserver.py \\$/;"	m
GET	src/main/scala/tilelink/AtomicAutomata.scala	/^      val GET  = UInt(3) \/\/ Get sent down A          waiting on AccessDataAck from D$/;"	l
GET_BEAT_RE	scripts/check_comparator_trace.py	/^GET_BEAT_RE = re.compile($/;"	v
GET_BLOCK_RE	scripts/check_comparator_trace.py	/^GET_BLOCK_RE = re.compile($/;"	v
GET_EFFECTS	src/main/scala/diplomacy/Parameters.scala	/^  case object GET_EFFECTS extends T \/\/ gets produce side effects and so must not be issued speculatively$/;"	c
GLOBAL_EXTERNAL_INTERRUPTS	src/main/scala/util/Annotations.scala	/^  val GLOBAL_EXTERNAL_INTERRUPTS = "global-external-interrupts"$/;"	l
GNT_RE	scripts/check_comparator_trace.py	/^GNT_RE = re.compile($/;"	v
GOING	scripts/debug_rom/debug_rom.S	/^#define GOING     0x104$/;"	d
GOING	scripts/debug_rom/debug_rom_nonzero.S	/^#define GOING     -0x6FC  \/\/ 0x104$/;"	d
GOING	src/main/scala/devices/debug/Debug.scala	/^  def GOING        = 0x104$/;"	m
GORC	src/main/scala/rocket/Instructions.scala	/^  def GORC               = BitPat("b0010100??????????101?????0110011")$/;"	m
GORCI	src/main/scala/rocket/Instructions.scala	/^  def GORCI              = BitPat("b001010???????????101?????0010011")$/;"	m
GORCIW	src/main/scala/rocket/Instructions.scala	/^  def GORCIW             = BitPat("b0010100??????????101?????0011011")$/;"	m
GORCW	src/main/scala/rocket/Instructions.scala	/^  def GORCW              = BitPat("b0010100??????????101?????0111011")$/;"	m
GREV	src/main/scala/rocket/Instructions.scala	/^  def GREV               = BitPat("b0110100??????????101?????0110011")$/;"	m
GREVI	src/main/scala/rocket/Instructions.scala	/^  def GREVI              = BitPat("b011010???????????101?????0010011")$/;"	m
GREVIW	src/main/scala/rocket/Instructions.scala	/^  def GREVIW             = BitPat("b0110100??????????101?????0011011")$/;"	m
GREVW	src/main/scala/rocket/Instructions.scala	/^  def GREVW              = BitPat("b0110100??????????101?????0111011")$/;"	m
GatewayPLICIO	src/main/scala/devices/tilelink/Plic.scala	/^class GatewayPLICIO extends Bundle {$/;"	c
Gather	src/main/scala/util/ScatterGather.scala	/^object Gather {$/;"	c
GatherTest	src/main/scala/util/ScatterGather.scala	/^class GatherTest(size: Int, timeout: Int = 500000) extends UnitTest(timeout) {$/;"	c
GenRegDescsAnno	src/main/scala/util/Annotations.scala	/^object GenRegDescsAnno {$/;"	c
GenerateArtefacts	src/main/scala/stage/phases/GenerateArtefacts.scala	/^class GenerateArtefacts extends Phase with PreservesAll[Phase] with HasRocketChipStageUtils {$/;"	c
GenerateDefaultTestSuites	src/main/scala/stage/phases/AddDefaultTests.scala	/^  def GenerateDefaultTestSuites(): List[RocketTestSuite] = {$/;"	m
GenerateFirrtlAnnos	src/main/scala/stage/phases/GenerateFirrtlAnnos.scala	/^class GenerateFirrtlAnnos extends Phase with PreservesAll[Phase] with HasRocketChipStageUtils {$/;"	c
GenerateROMs	src/main/scala/stage/phases/GenerateROMs.scala	/^class GenerateROMs extends Phase with PreservesAll[Phase] with HasRocketChipStageUtils {$/;"	c
GenerateSystemTestSuites	src/main/scala/stage/phases/AddDefaultTests.scala	/^  def GenerateSystemTestSuites(annotations: AnnotationSeq): scala.collection.mutable.Buffer[RocketTestSuite] = {$/;"	m
GenerateTestSuiteMakefrags	src/main/scala/stage/phases/GenerateTestSuiteMakefrags.scala	/^class GenerateTestSuiteMakefrags extends Phase with PreservesAll[Phase] with HasRocketChipStageUtils {$/;"	c
GeneratedCSR	src/main/scala/devices/debug/Debug.scala	/^    class GeneratedCSR extends Bundle {$/;"	c
GeneratedI	src/main/scala/devices/debug/Debug.scala	/^    class GeneratedI extends Bundle {$/;"	c
GeneratedS	src/main/scala/devices/debug/Debug.scala	/^    class GeneratedS extends Bundle {$/;"	c
GeneratedUJ	src/main/scala/devices/debug/Debug.scala	/^    class GeneratedUJ extends Bundle {$/;"	c
Generator	src/main/scala/groundtest/Generator.scala	/^object Generator extends StageMain(new RocketChipStage)$/;"	c
Generator	src/main/scala/system/RocketChipStageGenerator.scala	/^object Generator extends StageMain(new RocketChipStage)$/;"	c
Generator	src/main/scala/unittest/Generator.scala	/^object Generator extends StageMain(new RocketChipStage)$/;"	c
GenericLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^class GenericLogicalTreeNode extends LogicalTreeNode(() => None) {$/;"	c
GenericParameterizedBundle	src/main/scala/util/GenericParameterizedBundle.scala	/^abstract class GenericParameterizedBundle[+T <: Object](val params: T) extends Bundle/;"	c
Get	src/main/scala/tilelink/Bundles.scala	/^  def Get            = UInt(4) \/\/     .    .                   => AccessAckData$/;"	m
Get	src/main/scala/tilelink/Edges.scala	/^  def Get(fromAddress: UInt, toSource: UInt, lgSize: UInt) = {$/;"	m
Get	src/main/scala/tilelink/Edges.scala	/^  def Get(fromSource: UInt, toAddress: UInt, lgSize: UInt) = {$/;"	m
GlobalConstantsAnnotation	src/main/scala/util/Annotations.scala	/^case class GlobalConstantsAnnotation(target: Named, xLen: Int) extends SingleTargetAnnotation[Named] {$/;"	c
GlobalConstantsChiselAnnotation	src/main/scala/util/Annotations.scala	/^case class GlobalConstantsChiselAnnotation[T <: Product](target: InstanceId, xLen: Int) extends ChiselAnnotation {$/;"	c
Grant	src/main/scala/tilelink/Bundles.scala	/^  def Grant          = UInt(4) \/\/                    .         => GrantAck$/;"	m
Grant	src/main/scala/tilelink/Edges.scala	/^  def Grant(fromSink: UInt, toSource: UInt, lgSize: UInt, capPermissions: UInt): TLBundleD = Grant(fromSink, toSource, lgSize, capPermissions, Bool(false))$/;"	m
Grant	src/main/scala/tilelink/Edges.scala	/^  def Grant(fromSink: UInt, toSource: UInt, lgSize: UInt, capPermissions: UInt, data: UInt): TLBundleD = Grant(fromSink, toSource, lgSize, capPermissions, data, Bool(false), Bool(false))$/;"	m
Grant	src/main/scala/tilelink/Edges.scala	/^  def Grant(fromSink: UInt, toSource: UInt, lgSize: UInt, capPermissions: UInt, data: UInt, denied: Bool, corrupt: Bool) = {$/;"	m
Grant	src/main/scala/tilelink/Edges.scala	/^  def Grant(fromSink: UInt, toSource: UInt, lgSize: UInt, capPermissions: UInt, denied: Bool) = {$/;"	m
GrantAck	src/main/scala/tilelink/Bundles.scala	/^  def GrantAck       = UInt(0) \/\/                         .$/;"	m
GrantAck	src/main/scala/tilelink/Edges.scala	/^  def GrantAck(d: TLBundleD): TLBundleE = GrantAck(d.sink)$/;"	m
GrantAck	src/main/scala/tilelink/Edges.scala	/^  def GrantAck(toSink: UInt): TLBundleE = {$/;"	m
GrantData	src/main/scala/tilelink/Bundles.scala	/^  def GrantData      = UInt(5) \/\/                    .         => GrantAck$/;"	m
GrayCounter	src/main/scala/util/AsyncQueue.scala	/^object GrayCounter {$/;"	c
GroundTestBaseConfig	src/main/scala/groundtest/Configs.scala	/^class GroundTestBaseConfig extends Config($/;"	c
GroundTestStatus	src/main/scala/groundtest/Status.scala	/^class GroundTestStatus extends Bundle {$/;"	c
GroundTestSubsystem	src/main/scala/groundtest/GroundTestSubsystem.scala	/^class GroundTestSubsystem(implicit p: Parameters)$/;"	c
GroundTestSubsystemModuleImp	src/main/scala/groundtest/GroundTestSubsystem.scala	/^class GroundTestSubsystemModuleImp[+L <: GroundTestSubsystem](_outer: L) extends BaseSubsystemModuleImp(_outer) {$/;"	c
GroundTestTile	src/main/scala/groundtest/Tile.scala	/^abstract class GroundTestTile($/;"	c
GroundTestTileModuleImp	src/main/scala/groundtest/Tile.scala	/^class GroundTestTileModuleImp(outer: GroundTestTile) extends BaseTileModuleImp(outer) {$/;"	c
GroundTestTileParams	src/main/scala/groundtest/Tile.scala	/^trait GroundTestTileParams extends TileParams {$/;"	t
H	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object H extends OMExtensionType$/;"	c
H	src/main/scala/rocket/CSR.scala	/^  val H = 2$/;"	l
H	src/main/scala/tile/FPU.scala	/^  def H = typeTagGroup(FType.H)$/;"	m
H	src/main/scala/tile/FPU.scala	/^  val H = new FType(5, 11)$/;"	l
H64Decode	src/main/scala/rocket/IDecode.scala	/^class H64Decode(implicit val p: Parameters) extends DecodeConstants$/;"	c
HALTED	scripts/debug_rom/debug_rom.S	/^#define HALTED    0x100$/;"	d
HALTED	scripts/debug_rom/debug_rom_nonzero.S	/^#define HALTED    -0x700  \/\/ 0x100$/;"	d
HALTED	src/main/scala/devices/debug/Debug.scala	/^  def HALTED       = 0x100$/;"	m
HALTSUM0Fields	src/main/scala/devices/debug/dm_registers.scala	/^class HALTSUM0Fields extends Bundle {$/;"	c
HALTSUM0RdData	src/main/scala/devices/debug/Debug.scala	/^    val HALTSUM0RdData = selectedHaltedStatus.asTypeOf(new HALTSUM0Fields())$/;"	l
HALTSUM1Fields	src/main/scala/devices/debug/dm_registers.scala	/^class HALTSUM1Fields extends Bundle {$/;"	c
HALTSUM1RdData	src/main/scala/devices/debug/Debug.scala	/^    val HALTSUM1RdData = haltedSummary.asTypeOf(new HALTSUM1Fields())$/;"	l
HALTSUM2Fields	src/main/scala/devices/debug/dm_registers.scala	/^class HALTSUM2Fields extends Bundle {$/;"	c
HALTSUM3Fields	src/main/scala/devices/debug/dm_registers.scala	/^class HALTSUM3Fields extends Bundle {$/;"	c
HAMASKNxt	src/main/scala/devices/debug/Debug.scala	/^        val HAMASKNxt = WireInit(0.U.asTypeOf(new HAWINDOWFields()))$/;"	l
HAMASKReg	src/main/scala/devices/debug/Debug.scala	/^        val HAMASKReg = RegNext(next=HAMASKNxt, init=0.U.asTypeOf(HAMASKNxt))$/;"	l
HAMASKRst	src/main/scala/devices/debug/Debug.scala	/^        val HAMASKRst = WireInit(0.U.asTypeOf(new HAWINDOWFields()))$/;"	l
HARTINFOFields	src/main/scala/devices/debug/dm_registers.scala	/^class HARTINFOFields extends Bundle {$/;"	c
HARTINFORdData	src/main/scala/devices/debug/Debug.scala	/^    val HARTINFORdData = WireInit(0.U.asTypeOf(new HARTINFOFields()))$/;"	l
HAWINDOWFields	src/main/scala/devices/debug/dm_registers.scala	/^class HAWINDOWFields extends Bundle {$/;"	c
HAWINDOWRdData	src/main/scala/devices/debug/Debug.scala	/^    val HAWINDOWRdData = WireInit(0.U.asTypeOf(new HAWINDOWFields()))$/;"	l
HAWINDOWSELFields	src/main/scala/devices/debug/dm_registers.scala	/^class HAWINDOWSELFields extends Bundle {$/;"	c
HAWINDOWSELNxt	src/main/scala/devices/debug/Debug.scala	/^    val HAWINDOWSELNxt = WireInit(0.U.asTypeOf(new HAWINDOWSELFields()))$/;"	l
HAWINDOWSELReg	src/main/scala/devices/debug/Debug.scala	/^    val HAWINDOWSELReg = RegNext(next=HAWINDOWSELNxt, init=0.U.asTypeOf(HAWINDOWSELNxt))$/;"	l
HAWINDOWSELReset	src/main/scala/devices/debug/Debug.scala	/^      val HAWINDOWSELReset = WireInit(0.U.asTypeOf(new HAWINDOWSELFields()))$/;"	l
HAWINDOWSELWrData	src/main/scala/devices/debug/Debug.scala	/^    val HAWINDOWSELWrData = WireInit(0.U.asTypeOf(new HAWINDOWSELFields()))$/;"	l
HAWINDOWSELWrEn	src/main/scala/devices/debug/Debug.scala	/^    val HAWINDOWSELWrEn   = WireInit(false.B)$/;"	l
HAWINDOWWrData	src/main/scala/devices/debug/Debug.scala	/^    val HAWINDOWWrData = WireInit(0.U.asTypeOf(new HAWINDOWFields()))$/;"	l
HAWINDOWWrEn	src/main/scala/devices/debug/Debug.scala	/^    val HAWINDOWWrEn   = WireInit(false.B)$/;"	l
HDDecode	src/main/scala/rocket/IDecode.scala	/^class HDDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
HDecode	src/main/scala/rocket/IDecode.scala	/^class HDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
HFENCE_GVMA	src/main/scala/rocket/Instructions.scala	/^  def HFENCE_GVMA        = BitPat("b0110001??????????000000001110011")$/;"	m
HFENCE_VVMA	src/main/scala/rocket/Instructions.scala	/^  def HFENCE_VVMA        = BitPat("b0010001??????????000000001110011")$/;"	m
HLVX_HU	src/main/scala/rocket/Instructions.scala	/^  def HLVX_HU            = BitPat("b011001000011?????100?????1110011")$/;"	m
HLVX_WU	src/main/scala/rocket/Instructions.scala	/^  def HLVX_WU            = BitPat("b011010000011?????100?????1110011")$/;"	m
HLV_B	src/main/scala/rocket/Instructions.scala	/^  def HLV_B              = BitPat("b011000000000?????100?????1110011")$/;"	m
HLV_BU	src/main/scala/rocket/Instructions.scala	/^  def HLV_BU             = BitPat("b011000000001?????100?????1110011")$/;"	m
HLV_D	src/main/scala/rocket/Instructions.scala	/^  def HLV_D              = BitPat("b011011000000?????100?????1110011")$/;"	m
HLV_H	src/main/scala/rocket/Instructions.scala	/^  def HLV_H              = BitPat("b011001000000?????100?????1110011")$/;"	m
HLV_HU	src/main/scala/rocket/Instructions.scala	/^  def HLV_HU             = BitPat("b011001000001?????100?????1110011")$/;"	m
HLV_W	src/main/scala/rocket/Instructions.scala	/^  def HLV_W              = BitPat("b011010000000?????100?????1110011")$/;"	m
HLV_WU	src/main/scala/rocket/Instructions.scala	/^  def HLV_WU             = BitPat("b011010000001?????100?????1110011")$/;"	m
HSV_B	src/main/scala/rocket/Instructions.scala	/^  def HSV_B              = BitPat("b0110001??????????100000001110011")$/;"	m
HSV_D	src/main/scala/rocket/Instructions.scala	/^  def HSV_D              = BitPat("b0110111??????????100000001110011")$/;"	m
HSV_H	src/main/scala/rocket/Instructions.scala	/^  def HSV_H              = BitPat("b0110011??????????100000001110011")$/;"	m
HSV_W	src/main/scala/rocket/Instructions.scala	/^  def HSV_W              = BitPat("b0110101??????????100000001110011")$/;"	m
HStatus	src/main/scala/rocket/CSR.scala	/^class HStatus extends Bundle {$/;"	c
HalfEdge	src/main/scala/diplomacy/LazyModule.scala	/^case class HalfEdge(serial: Int, index: Int) extends Ordered[HalfEdge] {$/;"	c
HartsWontDeduplicate	src/main/scala/tile/LookupByHartId.scala	/^case class HartsWontDeduplicate(t: TileParams) extends LookupByHartIdImpl {$/;"	c
HasAHBControlRegMap	src/main/scala/amba/ahb/RegisterRouter.scala	/^trait HasAHBControlRegMap { this: RegisterRouter =>$/;"	t
HasAPBControlRegMap	src/main/scala/amba/apb/RegisterRouter.scala	/^trait HasAPBControlRegMap { this: RegisterRouter =>$/;"	t
HasAXI4ControlRegMap	src/main/scala/amba/axi4/RegisterRouter.scala	/^trait HasAXI4ControlRegMap { this: RegisterRouter =>$/;"	t
HasAsyncExtInterrupts	src/main/scala/subsystem/InterruptBus.scala	/^trait HasAsyncExtInterrupts extends HasExtInterrupts { this: BaseSubsystem =>$/;"	t
HasBtbParameters	src/main/scala/rocket/BTB.scala	/^trait HasBtbParameters extends HasCoreParameters { this: InstanceId =>$/;"	t
HasBuiltInDeviceParams	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^trait HasBuiltInDeviceParams {$/;"	t
HasClockDomainCrossing	src/main/scala/diplomacy/ClockDomain.scala	/^trait HasClockDomainCrossing extends HasDomainCrossing { this: LazyModule =>$/;"	t
HasConfigurablePRCILocations	src/main/scala/subsystem/BaseSubsystem.scala	/^trait HasConfigurablePRCILocations { this: HasPRCILocations =>$/;"	t
HasConfigurableTLNetworkTopology	src/main/scala/subsystem/BaseSubsystem.scala	/^trait HasConfigurableTLNetworkTopology { this: HasTileLinkLocations =>$/;"	t
HasCoreData	src/main/scala/rocket/HellaCache.scala	/^trait HasCoreData extends HasCoreParameters {$/;"	t
HasCoreIO	src/main/scala/tile/Core.scala	/^trait HasCoreIO extends HasTileParameters {$/;"	t
HasCoreMemOp	src/main/scala/rocket/HellaCache.scala	/^trait HasCoreMemOp extends HasL1HellaCacheParameters {$/;"	t
HasCoreMonitorBundles	src/main/scala/util/CoreMonitor.scala	/^trait HasCoreMonitorBundles {$/;"	t
HasCoreParameters	src/main/scala/tile/Core.scala	/^trait HasCoreParameters extends HasTileParameters {$/;"	t
HasCrossing	src/main/scala/subsystem/CrossingWrapper.scala	/^trait HasCrossing extends CrossesToOnlyOneClockDomain { this: LazyModule => }$/;"	t
HasDomainCrossing	src/main/scala/diplomacy/ClockDomain.scala	/^trait HasDomainCrossing extends LazyScope { this: LazyModule =>$/;"	t
HasExtInterrupts	src/main/scala/subsystem/InterruptBus.scala	/^abstract trait HasExtInterrupts { this: BaseSubsystem =>$/;"	t
HasExtInterruptsBundle	src/main/scala/subsystem/InterruptBus.scala	/^trait HasExtInterruptsBundle {$/;"	t
HasExtInterruptsModuleImp	src/main/scala/subsystem/InterruptBus.scala	/^trait HasExtInterruptsModuleImp extends LazyModuleImp with HasExtInterruptsBundle {$/;"	t
HasFPUCtrlSigs	src/main/scala/tile/FPU.scala	/^trait HasFPUCtrlSigs {$/;"	t
HasFPUParameters	src/main/scala/tile/FPU.scala	/^trait HasFPUParameters {$/;"	t
HasFpuOpt	src/main/scala/tile/RocketTile.scala	/^trait HasFpuOpt { this: RocketTileModuleImp =>$/;"	t
HasFuzzTarget	src/main/scala/amba/ahb/Test.scala	/^trait HasFuzzTarget {$/;"	t
HasFuzzTarget	src/main/scala/amba/axi4/Test.scala	/^trait HasFuzzTarget {$/;"	t
HasHellaCache	src/main/scala/rocket/HellaCache.scala	/^trait HasHellaCache { this: BaseTile =>$/;"	t
HasHellaCacheModule	src/main/scala/rocket/HellaCache.scala	/^trait HasHellaCacheModule {$/;"	t
HasICacheFrontend	src/main/scala/rocket/Frontend.scala	/^trait HasICacheFrontend extends CanHavePTW { this: BaseTile =>$/;"	t
HasICacheFrontendModule	src/main/scala/rocket/Frontend.scala	/^trait HasICacheFrontendModule extends CanHavePTWModule {$/;"	t
HasInterruptSources	src/main/scala/interrupts/RegisterRouter.scala	/^trait HasInterruptSources { this: RegisterRouter =>$/;"	t
HasJustOneSeqMem	src/main/scala/diplomacy/SRAM.scala	/^trait HasJustOneSeqMem {$/;"	t
HasL1CacheParameters	src/main/scala/tile/L1Cache.scala	/^trait HasL1CacheParameters extends HasTileParameters {$/;"	t
HasL1HellaCacheParameters	src/main/scala/rocket/HellaCache.scala	/^trait HasL1HellaCacheParameters extends HasL1CacheParameters with HasCoreParameters {$/;"	t
HasL1ICacheParameters	src/main/scala/rocket/ICache.scala	/^trait HasL1ICacheParameters extends HasL1CacheParameters with HasCoreParameters {$/;"	t
HasLazyRoCC	src/main/scala/tile/LazyRoCC.scala	/^trait HasLazyRoCC extends CanHavePTW { this: BaseTile =>$/;"	t
HasLazyRoCCModule	src/main/scala/tile/LazyRoCC.scala	/^trait HasLazyRoCCModule extends CanHavePTWModule$/;"	t
HasLogicalHierarchy	src/main/scala/subsystem/Attachable.scala	/^trait HasLogicalHierarchy extends LazyScopeWithParameters with HasLogicalTreeNode { this: LazyModule => }$/;"	t
HasLogicalTreeNode	src/main/scala/diplomaticobjectmodel/HasLogicalTreeNode.scala	/^trait HasLogicalTreeNode {$/;"	t
HasMissInfo	src/main/scala/rocket/NBDcache.scala	/^trait HasMissInfo extends HasL1HellaCacheParameters {$/;"	t
HasNoiseMakerIO	src/main/scala/tilelink/Fuzzer.scala	/^trait HasNoiseMakerIO$/;"	t
HasNonDiplomaticTileParameters	src/main/scala/tile/BaseTile.scala	/^trait HasNonDiplomaticTileParameters {$/;"	t
HasPRCILocations	src/main/scala/subsystem/Attachable.scala	/^trait HasPRCILocations extends HasLogicalHierarchy { this: LazyModule =>$/;"	t
HasPeripheryDebug	src/main/scala/devices/debug/Periphery.scala	/^trait HasPeripheryDebug { this: BaseSubsystem =>$/;"	t
HasPeripheryDebugModuleImp	src/main/scala/devices/debug/Periphery.scala	/^trait HasPeripheryDebugModuleImp extends LazyModuleImp {$/;"	t
HasRTCModuleImp	src/main/scala/subsystem/RTC.scala	/^trait HasRTCModuleImp extends LazyModuleImp {$/;"	t
HasRegMap	src/main/scala/regmapper/RegField.scala	/^trait HasRegMap$/;"	t
HasRegionReplicatorParams	src/main/scala/tilelink/RegionReplication.scala	/^trait HasRegionReplicatorParams {$/;"	t
HasResetDomainCrossing	src/main/scala/prci/ResetCrossingType.scala	/^trait HasResetDomainCrossing extends HasDomainCrossing { this: LazyModule =>$/;"	t
HasRocketChipStageUtils	src/main/scala/util/GeneratorUtils.scala	/^trait HasRocketChipStageUtils {$/;"	t
HasRocketCoreParameters	src/main/scala/rocket/RocketCore.scala	/^trait HasRocketCoreParameters extends HasCoreParameters {$/;"	t
HasRocketTiles	src/main/scala/subsystem/RocketSubsystem.scala	/^trait HasRocketTiles extends HasTiles { this: BaseSubsystem =>$/;"	t
HasSyncExtInterrupts	src/main/scala/subsystem/InterruptBus.scala	/^trait HasSyncExtInterrupts extends HasExtInterrupts { this: BaseSubsystem =>$/;"	t
HasTLBusParams	src/main/scala/tilelink/BusWrapper.scala	/^trait HasTLBusParams {$/;"	t
HasTLControlRegMap	src/main/scala/tilelink/RegisterRouter.scala	/^trait HasTLControlRegMap { this: RegisterRouter =>$/;"	t
HasTLXbarPhy	src/main/scala/tilelink/BusWrapper.scala	/^trait HasTLXbarPhy { this: TLBusWrapper =>$/;"	t
HasTileInputConstants	src/main/scala/subsystem/HasTiles.scala	/^trait HasTileInputConstants extends InstantiatesTiles { this: BaseSubsystem =>$/;"	t
HasTileInterruptSources	src/main/scala/subsystem/HasTiles.scala	/^trait HasTileInterruptSources$/;"	t
HasTileLinkLocations	src/main/scala/subsystem/Attachable.scala	/^trait HasTileLinkLocations extends HasPRCILocations { this: LazyModule =>$/;"	t
HasTileNotificationSinks	src/main/scala/subsystem/HasTiles.scala	/^trait HasTileNotificationSinks { this: LazyModule =>$/;"	t
HasTileParameters	src/main/scala/tile/BaseTile.scala	/^trait HasTileParameters extends HasNonDiplomaticTileParameters {$/;"	t
HasTiles	src/main/scala/subsystem/HasTiles.scala	/^trait HasTiles extends InstantiatesTiles with HasCoreMonitorBundles with DefaultTileContextType$/;"	t
HasTilesModuleImp	src/main/scala/subsystem/HasTiles.scala	/^trait HasTilesModuleImp extends LazyModuleImp with HasPeripheryDebugModuleImp {$/;"	t
HasTraceGenParams	src/main/scala/groundtest/TraceGen.scala	/^trait HasTraceGenParams {$/;"	t
HasUnitTestIO	src/main/scala/unittest/UnitTest.scala	/^trait HasUnitTestIO {$/;"	t
HellaCache	src/main/scala/rocket/HellaCache.scala	/^abstract class HellaCache(staticIdForMetadataUseOnly: Int)(implicit p: Parameters) extends LazyModule$/;"	c
HellaCacheArbiter	src/main/scala/rocket/HellaCacheArbiter.scala	/^class HellaCacheArbiter(n: Int)(implicit p: Parameters) extends Module$/;"	c
HellaCacheBundle	src/main/scala/rocket/HellaCache.scala	/^class HellaCacheBundle(val outer: HellaCache)(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
HellaCacheExceptions	src/main/scala/rocket/HellaCache.scala	/^class HellaCacheExceptions extends Bundle {$/;"	c
HellaCacheFactory	src/main/scala/rocket/HellaCache.scala	/^object HellaCacheFactory {$/;"	c
HellaCacheIO	src/main/scala/rocket/HellaCache.scala	/^class HellaCacheIO(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
HellaCacheModule	src/main/scala/rocket/HellaCache.scala	/^class HellaCacheModule(outer: HellaCache) extends LazyModuleImp(outer)$/;"	c
HellaCachePerfEvents	src/main/scala/rocket/HellaCache.scala	/^class HellaCachePerfEvents extends Bundle {$/;"	c
HellaCacheReq	src/main/scala/rocket/HellaCache.scala	/^class HellaCacheReq(implicit p: Parameters) extends HellaCacheReqInternal()(p) with HasCoreData$/;"	c
HellaCacheReqInternal	src/main/scala/rocket/HellaCache.scala	/^class HellaCacheReqInternal(implicit p: Parameters) extends CoreBundle()(p) with HasCoreMemOp {$/;"	c
HellaCacheResp	src/main/scala/rocket/HellaCache.scala	/^class HellaCacheResp(implicit p: Parameters) extends CoreBundle()(p)$/;"	c
HellaCacheWriteData	src/main/scala/rocket/HellaCache.scala	/^class HellaCacheWriteData(implicit p: Parameters) extends CoreBundle()(p) with HasCoreData$/;"	c
HellaCountingArbiter	src/main/scala/util/Arbiters.scala	/^class HellaCountingArbiter[T <: Data]($/;"	c
HellaFlowQueue	src/main/scala/util/HellaQueue.scala	/^class HellaFlowQueue[T <: Data](val entries: Int)(data: => T) extends Module {$/;"	c
HellaLockingArbiter	src/main/scala/util/Arbiters.scala	/^abstract class HellaLockingArbiter[T <: Data](typ: T, arbN: Int, rr: Boolean = false)$/;"	c
HellaPeekingArbiter	src/main/scala/util/Arbiters.scala	/^class HellaPeekingArbiter[T <: Data]($/;"	c
HellaQueue	src/main/scala/util/HellaQueue.scala	/^class HellaQueue[T <: Data](val entries: Int)(data: => T) extends Module {$/;"	c
HellaQueue	src/main/scala/util/HellaQueue.scala	/^object HellaQueue {$/;"	c
HelperCrossingType	src/main/scala/amba/axi4/CrossingHelper.scala	/^  type HelperCrossingType <: CrossingType$/;"	T
HelperCrossingType	src/main/scala/amba/axi4/CrossingHelper.scala	/^  type HelperCrossingType = ClockCrossingType$/;"	T
HelperCrossingType	src/main/scala/amba/axi4/CrossingHelper.scala	/^  type HelperCrossingType = ResetCrossingType$/;"	T
HelperCrossingType	src/main/scala/interrupts/CrossingHelper.scala	/^  type HelperCrossingType <: CrossingType$/;"	T
HelperCrossingType	src/main/scala/interrupts/CrossingHelper.scala	/^  type HelperCrossingType = ClockCrossingType$/;"	T
HelperCrossingType	src/main/scala/interrupts/CrossingHelper.scala	/^  type HelperCrossingType = ResetCrossingType$/;"	T
HelperCrossingType	src/main/scala/tilelink/CrossingHelper.scala	/^  type HelperCrossingType <: CrossingType$/;"	T
HelperCrossingType	src/main/scala/tilelink/CrossingHelper.scala	/^  type HelperCrossingType = ClockCrossingType$/;"	T
HelperCrossingType	src/main/scala/tilelink/CrossingHelper.scala	/^  type HelperCrossingType = ResetCrossingType$/;"	T
HeterogeneousBag	src/main/scala/util/HeterogeneousBag.scala	/^final case class HeterogeneousBag[T <: Data](elts: Seq[T]) extends Record with collection.IndexedSeq[T] {$/;"	c
HeterogeneousBag	src/main/scala/util/HeterogeneousBag.scala	/^object HeterogeneousBag$/;"	c
HeterogeneousTileExampleConfig	src/main/scala/system/Configs.scala	/^class HeterogeneousTileExampleConfig extends Config($/;"	c
HierarchicalBusTopologyParams	src/main/scala/subsystem/BusTopology.scala	/^case class HierarchicalBusTopologyParams($/;"	c
HierarchicalLocation	src/main/scala/subsystem/BaseSubsystem.scala	/^class HierarchicalLocation(override val name: String) extends Location[LazyScope](name)$/;"	c
High	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^trait High extends OMSignalAssertionLevel$/;"	t
Hint	src/main/scala/tilelink/Bundles.scala	/^  def Hint           = UInt(5) \/\/     .    .                   => HintAck$/;"	m
Hint	src/main/scala/tilelink/Edges.scala	/^  def Hint(fromAddress: UInt, toSource: UInt, lgSize: UInt, param: UInt) = {$/;"	m
Hint	src/main/scala/tilelink/Edges.scala	/^  def Hint(fromSource: UInt, toAddress: UInt, lgSize: UInt, param: UInt) = {$/;"	m
HintAck	src/main/scala/tilelink/Bundles.scala	/^  def HintAck        = UInt(2) \/\/               .    .$/;"	m
HintAck	src/main/scala/tilelink/Edges.scala	/^  def HintAck(a: TLBundleA): TLBundleD = HintAck(a, Bool(false))$/;"	m
HintAck	src/main/scala/tilelink/Edges.scala	/^  def HintAck(a: TLBundleA, denied: Bool): TLBundleD = HintAck(a.source, a.size, denied)$/;"	m
HintAck	src/main/scala/tilelink/Edges.scala	/^  def HintAck(b: TLBundleB): TLBundleC = HintAck(b.source, address(b), b.size)$/;"	m
HintAck	src/main/scala/tilelink/Edges.scala	/^  def HintAck(fromSource: UInt, toAddress: UInt, lgSize: UInt) = {$/;"	m
HintAck	src/main/scala/tilelink/Edges.scala	/^  def HintAck(toSource: UInt, lgSize: UInt): TLBundleD = HintAck(toSource, lgSize, Bool(false))$/;"	m
HintAck	src/main/scala/tilelink/Edges.scala	/^  def HintAck(toSource: UInt, lgSize: UInt, denied: Bool) = {$/;"	m
HintsMsg	src/main/scala/tilelink/Bundles.scala	/^  def HintsMsg:Seq[String] = Seq("PrefetchRead", "PrefetchWrite")$/;"	m
Hypervisor64Decode	src/main/scala/rocket/IDecode.scala	/^class Hypervisor64Decode(implicit val p: Parameters) extends DecodeConstants$/;"	c
HypervisorDecode	src/main/scala/rocket/IDecode.scala	/^class HypervisorDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
HypervisorLevelISA	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^case object HypervisorLevelISA extends PrivilegedArchitectureExtension$/;"	c
I	src/main/scala/rocket/CSR.scala	/^  def I = UInt(4,SZ)$/;"	m
I	src/main/scala/tile/FPU.scala	/^  def I = UInt(typeTag(maxType))$/;"	m
I32Decode	src/main/scala/rocket/IDecode.scala	/^class I32Decode(implicit val p: Parameters) extends DecodeConstants$/;"	c
I64Decode	src/main/scala/rocket/IDecode.scala	/^class I64Decode(implicit val p: Parameters) extends DecodeConstants$/;"	c
IBuf	src/main/scala/rocket/IBuf.scala	/^class IBuf(implicit p: Parameters) extends CoreModule {$/;"	c
ICache	src/main/scala/rocket/ICache.scala	/^class ICache(val icacheParams: ICacheParams, val staticIdForMetadataUseOnly: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
ICacheBundle	src/main/scala/rocket/ICache.scala	/^class ICacheBundle(val outer: ICache) extends CoreBundle()(outer.p) {$/;"	c
ICacheErrors	src/main/scala/rocket/ICache.scala	/^class ICacheErrors(implicit p: Parameters) extends CoreBundle()(p)$/;"	c
ICacheLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^class ICacheLogicalTreeNode(icache: ICache, deviceOpt: Option[SimpleDevice], params: ICacheParams) extends LogicalTreeNode(() => deviceOpt) {$/;"	c
ICacheModule	src/main/scala/rocket/ICache.scala	/^class ICacheModule(outer: ICache) extends LazyModuleImp(outer)$/;"	c
ICacheParams	src/main/scala/rocket/ICache.scala	/^case class ICacheParams($/;"	c
ICachePerfEvents	src/main/scala/rocket/ICache.scala	/^class ICachePerfEvents extends Bundle {$/;"	c
ICacheReq	src/main/scala/rocket/ICache.scala	/^class ICacheReq(implicit p: Parameters) extends CoreBundle()(p) with HasL1ICacheParameters {$/;"	c
ICacheResp	src/main/scala/rocket/ICache.scala	/^class ICacheResp(outer: ICache) extends Bundle {$/;"	c
IDCODE	src/main/scala/devices/debug/DebugTransport.scala	/^  def IDCODE       = 0x1$/;"	m
IDEMPOTENT	src/main/scala/diplomacy/Parameters.scala	/^  case object IDEMPOTENT  extends T \/\/ gets return most recently put content, but content should not be cached$/;"	c
IDMapGenerator	src/main/scala/tilelink/Fuzzer.scala	/^class IDMapGenerator(numIds: Int) extends Module {$/;"	c
IDPool	src/main/scala/util/IDPool.scala	/^class IDPool(numIds: Int, lateValid: Boolean = false, revocableSelect: Boolean = false) extends Module {$/;"	c
IDecode	src/main/scala/rocket/IDecode.scala	/^class IDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
IEEEBundle	src/main/scala/tile/FPU.scala	/^    class IEEEBundle extends Bundle {$/;"	c
IMM_I	src/main/scala/rocket/Consts.scala	/^  def IMM_I  = UInt(4, 3)$/;"	m
IMM_S	src/main/scala/rocket/Consts.scala	/^  def IMM_S  = UInt(0, 3)$/;"	m
IMM_SB	src/main/scala/rocket/Consts.scala	/^  def IMM_SB = UInt(1, 3)$/;"	m
IMM_U	src/main/scala/rocket/Consts.scala	/^  def IMM_U  = UInt(2, 3)$/;"	m
IMM_UJ	src/main/scala/rocket/Consts.scala	/^  def IMM_UJ = UInt(3, 3)$/;"	m
IMM_X	src/main/scala/rocket/Consts.scala	/^  def IMM_X  = BitPat("b???")$/;"	m
IMM_Z	src/main/scala/rocket/Consts.scala	/^  def IMM_Z  = UInt(5, 3)$/;"	m
IMPEBREAK	src/main/scala/devices/debug/Debug.scala	/^  def IMPEBREAK(cfg: DebugModuleParams) = { DATA - 4 }$/;"	m
IOHelper	src/main/scala/prci/IOHelper.scala	/^object IOHelper {$/;"	c
IOMSHR	src/main/scala/rocket/NBDcache.scala	/^class IOMSHR(id: Int)(implicit edge: TLEdgeOut, p: Parameters) extends L1HellaCacheModule()(p) {$/;"	c
IORegisterRouter	src/main/scala/regmapper/RegisterRouter.scala	/^abstract class IORegisterRouter[T <: Data](devParams: RegisterRouterParams, portBundle: => T)(implicit p: Parameters)$/;"	c
ISAExtensions	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^object ISAExtensions {$/;"	c
ISOi	src/main/scala/tilelink/Isolation.scala	/^    def ISOi[T <: Data](x: T): T = x.fromBits(fIn (io.iso_in,  x.asUInt))$/;"	m
ISOo	src/main/scala/tilelink/Isolation.scala	/^    def ISOo[T <: Data](x: T): T = x.fromBits(fOut(io.iso_out, x.asUInt))$/;"	m
ITBrNTaken	src/main/scala/util/TraceCoreInterface.scala	/^  val ITBrNTaken  = Value(4.U)$/;"	l
ITBrTaken	src/main/scala/util/TraceCoreInterface.scala	/^  val ITBrTaken   = Value(5.U)$/;"	l
ITCoSwap	src/main/scala/util/TraceCoreInterface.scala	/^  val ITCoSwap    = Value(12.U)$/;"	l
ITExcReturn	src/main/scala/util/TraceCoreInterface.scala	/^  val ITExcReturn = Value(3.U)$/;"	l
ITException	src/main/scala/util/TraceCoreInterface.scala	/^  val ITException = Value(1.U)$/;"	l
ITInCall	src/main/scala/util/TraceCoreInterface.scala	/^  val ITInCall    = Value(9.U)$/;"	l
ITInJump	src/main/scala/util/TraceCoreInterface.scala	/^  val ITInJump    = Value(15.U)$/;"	l
ITInTail	src/main/scala/util/TraceCoreInterface.scala	/^  val ITInTail    = Value(11.U)$/;"	l
ITInterrupt	src/main/scala/util/TraceCoreInterface.scala	/^  val ITInterrupt = Value(2.U)$/;"	l
ITNothing	src/main/scala/util/TraceCoreInterface.scala	/^  val ITNothing   = Value(0.U)$/;"	l
ITReserved6	src/main/scala/util/TraceCoreInterface.scala	/^  val ITReserved6 = Value(6.U)$/;"	l
ITReserved7	src/main/scala/util/TraceCoreInterface.scala	/^  val ITReserved7 = Value(7.U)$/;"	l
ITReturn	src/main/scala/util/TraceCoreInterface.scala	/^  val ITReturn    = Value(13.U)$/;"	l
ITUnCall	src/main/scala/util/TraceCoreInterface.scala	/^  val ITUnCall    = Value(8.U)$/;"	l
ITUnJump	src/main/scala/util/TraceCoreInterface.scala	/^  val ITUnJump    = Value(14.U)$/;"	l
ITUnTail	src/main/scala/util/TraceCoreInterface.scala	/^  val ITUnTail    = Value(10.U)$/;"	l
IdMap	src/main/scala/diplomacy/Parameters.scala	/^abstract class IdMap[T <: IdMapEntry] {$/;"	c
IdMapEntry	src/main/scala/diplomacy/Parameters.scala	/^trait IdMapEntry {$/;"	t
IdRange	src/main/scala/diplomacy/Parameters.scala	/^case class IdRange(start: Int, end: Int) extends Ordered[IdRange]$/;"	c
IdRange	src/main/scala/diplomacy/Parameters.scala	/^object IdRange$/;"	c
IdentityCode	src/main/scala/util/ECC.scala	/^class IdentityCode extends Code$/;"	c
IdentityModule	src/main/scala/util/IdentityModule.scala	/^class IdentityModule[T <: Data](gen: T) extends Module$/;"	c
IdentityModule	src/main/scala/util/IdentityModule.scala	/^object IdentityModule$/;"	c
IdentityNode	src/main/scala/diplomacy/Nodes.scala	/^class IdentityNode[D, U, EO, EI, B <: Data](imp: NodeImp[D, U, EO, EI, B])()(implicit valName: ValName)$/;"	c
Idle	src/main/scala/devices/debug/SBA.scala	/^   val Idle, SBReadRequest, SBWriteRequest, SBReadResponse, SBWriteResponse = Value$/;"	l
IfThen	src/main/scala/formal/FormalUtils.scala	/^object IfThen {$/;"	c
ImmGen	src/main/scala/rocket/RocketCore.scala	/^object ImmGen {$/;"	c
InModuleBody	src/main/scala/diplomacy/LazyModule.scala	/^object InModuleBody {$/;"	c
InOrderArbiter	src/main/scala/util/Arbiters.scala	/^class InOrderArbiter[T <: Data, U <: Data](reqTyp: T, respTyp: U, n: Int)$/;"	c
InSet	src/main/scala/formal/FormalUtils.scala	/^object InSet {$/;"	c
InSubsystem	src/main/scala/subsystem/BaseSubsystem.scala	/^case object InSubsystem extends HierarchicalLocation("InSubsystem")$/;"	c
InSystem	src/main/scala/subsystem/BaseSubsystem.scala	/^case object InSystem extends HierarchicalLocation("InSystem")$/;"	c
InTile	src/main/scala/subsystem/BaseSubsystem.scala	/^case object InTile extends HierarchicalLocation("InTile")$/;"	c
InboundPort	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^trait InboundPort extends OMPort$/;"	t
IncludePSDTest	src/main/scala/util/PSDTestMode.scala	/^case object IncludePSDTest extends Field[Boolean](false)$/;"	c
InlineInstance	src/main/scala/rocket/DCache.scala	/^trait InlineInstance { self: chisel3.experimental.BaseModule =>$/;"	t
InsertTimingClosureRegistersOnHartIds	src/main/scala/subsystem/HasTiles.scala	/^case object InsertTimingClosureRegistersOnHartIds extends Field[Boolean](false)$/;"	c
InstantiableTileParams	src/main/scala/tile/BaseTile.scala	/^abstract class InstantiableTileParams[TileType <: BaseTile] extends TileParams {$/;"	c
InstantiatesTiles	src/main/scala/subsystem/HasTiles.scala	/^trait InstantiatesTiles { this: BaseSubsystem =>$/;"	t
Instruction	src/main/scala/rocket/IBuf.scala	/^class Instruction(implicit val p: Parameters) extends ParameterizedBundle with HasCoreParameters {$/;"	c
Instructions	src/main/scala/rocket/Instructions.scala	/^object Instructions {$/;"	c
IntAdapterNode	src/main/scala/interrupts/Nodes.scala	/^case class IntAdapterNode($/;"	c
IntBlockDuringReset	src/main/scala/interrupts/BlockDuringReset.scala	/^class IntBlockDuringReset(stretchResetCycles: Int = 0)(implicit p: Parameters) extends LazyModule$/;"	c
IntBlockDuringReset	src/main/scala/interrupts/BlockDuringReset.scala	/^object IntBlockDuringReset {$/;"	c
IntClockDomainCrossing	src/main/scala/interrupts/package.scala	/^  implicit class IntClockDomainCrossing(private val x: HasClockDomainCrossing) extends AnyVal {$/;"	c
IntCtrlSigs	src/main/scala/rocket/IDecode.scala	/^class IntCtrlSigs extends Bundle {$/;"	c
IntEdge	src/main/scala/interrupts/Parameters.scala	/^case class IntEdge(source: IntSourcePortParameters, sink: IntSinkPortParameters, params: Parameters, sourceInfo: SourceInfo)$/;"	c
IntEphemeralNode	src/main/scala/interrupts/Nodes.scala	/^case class IntEphemeralNode()(implicit valName: ValName) extends EphemeralNode(IntImp)() with IntFormatNode$/;"	c
IntFormatNode	src/main/scala/interrupts/Nodes.scala	/^trait IntFormatNode extends BaseNode$/;"	t
IntIdentityNode	src/main/scala/interrupts/Nodes.scala	/^case class IntIdentityNode()(implicit valName: ValName) extends IdentityNode(IntImp)() with IntFormatNode$/;"	c
IntImp	src/main/scala/interrupts/Nodes.scala	/^object IntImp extends SimpleNodeImp[IntSourcePortParameters, IntSinkPortParameters, IntEdge, Vec[Bool]]$/;"	c
IntInwardClockCrossingHelper	src/main/scala/interrupts/CrossingHelper.scala	/^case class IntInwardClockCrossingHelper(name: String, scope: LazyScope, node: IntInwardNode)$/;"	c
IntInwardCrossingHelper	src/main/scala/interrupts/CrossingHelper.scala	/^trait IntInwardCrossingHelper {$/;"	t
IntInwardNode	src/main/scala/interrupts/package.scala	/^  type IntInwardNode = InwardNodeHandle[IntSourcePortParameters, IntSinkPortParameters, IntEdge, Vec[Bool]]$/;"	T
IntInwardResetCrossingHelper	src/main/scala/interrupts/CrossingHelper.scala	/^case class IntInwardResetCrossingHelper(name: String, scope: LazyScope, node: IntInwardNode)$/;"	c
IntNameNode	src/main/scala/interrupts/Nodes.scala	/^object IntNameNode {$/;"	c
IntNexusNode	src/main/scala/interrupts/Nodes.scala	/^case class IntNexusNode($/;"	c
IntNode	src/main/scala/interrupts/package.scala	/^  type IntNode = SimpleNodeHandle[IntSourcePortParameters, IntSinkPortParameters, IntEdge, Vec[Bool]]$/;"	T
IntOutwardClockCrossingHelper	src/main/scala/interrupts/CrossingHelper.scala	/^case class IntOutwardClockCrossingHelper(name: String, scope: LazyScope, node: IntOutwardNode)$/;"	c
IntOutwardCrossingHelper	src/main/scala/interrupts/CrossingHelper.scala	/^trait IntOutwardCrossingHelper {$/;"	t
IntOutwardNode	src/main/scala/interrupts/package.scala	/^  type IntOutwardNode = OutwardNodeHandle[IntSourcePortParameters, IntSinkPortParameters, IntEdge, Vec[Bool]]$/;"	T
IntOutwardResetCrossingHelper	src/main/scala/interrupts/CrossingHelper.scala	/^case class IntOutwardResetCrossingHelper(name: String, scope: LazyScope, node: IntOutwardNode)$/;"	c
IntRange	src/main/scala/interrupts/Parameters.scala	/^case class IntRange(start: Int, end: Int)$/;"	c
IntRange	src/main/scala/interrupts/Parameters.scala	/^object IntRange$/;"	c
IntResetDomainCrossing	src/main/scala/interrupts/package.scala	/^  implicit class IntResetDomainCrossing(private val x: HasResetDomainCrossing) extends AnyVal {$/;"	c
IntSinkNode	src/main/scala/interrupts/Nodes.scala	/^case class IntSinkNode(portParams: Seq[IntSinkPortParameters])(implicit valName: ValName) extends SinkNode(IntImp)(portParams) with IntFormatNode$/;"	c
IntSinkParameters	src/main/scala/interrupts/Parameters.scala	/^case class IntSinkParameters($/;"	c
IntSinkPortParameters	src/main/scala/interrupts/Parameters.scala	/^case class IntSinkPortParameters(sinks: Seq[IntSinkParameters])$/;"	c
IntSinkPortSimple	src/main/scala/interrupts/Parameters.scala	/^object IntSinkPortSimple$/;"	c
IntSourceNode	src/main/scala/interrupts/Nodes.scala	/^case class IntSourceNode(portParams: Seq[IntSourcePortParameters])(implicit valName: ValName) extends SourceNode(IntImp)(portParams) with IntFormatNode$/;"	c
IntSourceParameters	src/main/scala/interrupts/Parameters.scala	/^case class IntSourceParameters($/;"	c
IntSourcePortParameters	src/main/scala/interrupts/Parameters.scala	/^case class IntSourcePortParameters(sources: Seq[IntSourceParameters])$/;"	c
IntSourcePortSimple	src/main/scala/interrupts/Parameters.scala	/^object IntSourcePortSimple$/;"	c
IntSyncAsyncCrossingSink	src/main/scala/interrupts/Crossing.scala	/^class IntSyncAsyncCrossingSink(sync: Int = 3)(implicit p: Parameters) extends LazyModule$/;"	c
IntSyncAsyncCrossingSink	src/main/scala/interrupts/Crossing.scala	/^object IntSyncAsyncCrossingSink$/;"	c
IntSyncCrossingSink	src/main/scala/interrupts/Crossing.scala	/^object IntSyncCrossingSink$/;"	c
IntSyncCrossingSource	src/main/scala/interrupts/Crossing.scala	/^class IntSyncCrossingSource(alreadyRegistered: Boolean = false)(implicit p: Parameters) extends LazyModule$/;"	c
IntSyncCrossingSource	src/main/scala/interrupts/Crossing.scala	/^object IntSyncCrossingSource$/;"	c
IntSyncIdentityNode	src/main/scala/interrupts/Nodes.scala	/^case class IntSyncIdentityNode()(implicit valName: ValName) extends IdentityNode(IntSyncImp)() with IntFormatNode$/;"	c
IntSyncImp	src/main/scala/interrupts/Nodes.scala	/^object IntSyncImp extends SimpleNodeImp[IntSourcePortParameters, IntSinkPortParameters, IntEdge, SyncInterrupts]$/;"	c
IntSyncNameNode	src/main/scala/interrupts/Nodes.scala	/^object IntSyncNameNode {$/;"	c
IntSyncRationalCrossingSink	src/main/scala/interrupts/Crossing.scala	/^class IntSyncRationalCrossingSink()(implicit p: Parameters) extends LazyModule$/;"	c
IntSyncRationalCrossingSink	src/main/scala/interrupts/Crossing.scala	/^object IntSyncRationalCrossingSink$/;"	c
IntSyncSinkNode	src/main/scala/interrupts/Nodes.scala	/^case class IntSyncSinkNode(sync: Int)(implicit valName: ValName)$/;"	c
IntSyncSourceNode	src/main/scala/interrupts/Nodes.scala	/^case class IntSyncSourceNode(alreadyRegistered: Boolean)(implicit valName: ValName)$/;"	c
IntSyncSyncCrossingSink	src/main/scala/interrupts/Crossing.scala	/^class IntSyncSyncCrossingSink()(implicit p: Parameters) extends LazyModule$/;"	c
IntSyncSyncCrossingSink	src/main/scala/interrupts/Crossing.scala	/^object IntSyncSyncCrossingSink$/;"	c
IntTempNode	src/main/scala/interrupts/Nodes.scala	/^object IntTempNode {$/;"	c
IntToAugmentedInt	src/main/scala/util/package.scala	/^  implicit class IntToAugmentedInt(private val x: Int) extends AnyVal {$/;"	c
IntToFP	src/main/scala/tile/FPU.scala	/^class IntToFP(val latency: Int)(implicit p: Parameters) extends FPUModule()(p) with ShouldBeRetimed {$/;"	c
IntToFPInput	src/main/scala/tile/FPU.scala	/^class IntToFPInput(implicit p: Parameters) extends CoreBundle()(p) with HasFPUCtrlSigs {$/;"	c
IntToProperty	src/main/scala/diplomacy/package.scala	/^  implicit class IntToProperty(x: Int) {$/;"	c
IntXbar	src/main/scala/interrupts/Xbar.scala	/^class IntXbar()(implicit p: Parameters) extends LazyModule$/;"	c
IntXbar	src/main/scala/interrupts/Xbar.scala	/^object IntXbar {$/;"	c
IntXing	src/main/scala/interrupts/Crossing.scala	/^class IntXing(sync: Int = 3)(implicit p: Parameters) extends LazyModule$/;"	c
InterruptBusWrapper	src/main/scala/subsystem/InterruptBus.scala	/^class InterruptBusWrapper(implicit p: Parameters) extends ClockSinkDomain {$/;"	c
InterruptTarget	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    case class InterruptTarget(device: Device, numberAtReceiver: BigInt)$/;"	c
InterruptsPortAnnotation	src/main/scala/util/Annotations.scala	/^case class InterruptsPortAnnotation(target: Named, name: String, interruptIndexes: Seq[Int]) extends SingleTargetAnnotation[Named] {$/;"	c
InterruptsPortAnnotation	src/main/scala/util/Annotations.scala	/^object InterruptsPortAnnotation {$/;"	c
InwardEdge	src/main/scala/aop/Select.scala	/^  case class InwardEdge[Bundle <: Data, EdgeInParams]($/;"	c
InwardNode	src/main/scala/diplomacy/Nodes.scala	/^trait InwardNode[DI, UI, BI <: Data] extends BaseNode {$/;"	t
InwardNodeHandle	src/main/scala/diplomacy/Nodes.scala	/^trait InwardNodeHandle[DI, UI, EI, BI <: Data] extends NoHandle$/;"	t
InwardNodeImp	src/main/scala/diplomacy/Nodes.scala	/^trait InwardNodeImp[DI, UI, EI, BI <: Data]$/;"	t
IsControlKey	src/main/scala/util/BundleMap.scala	/^sealed trait IsControlKey extends BundleKeyBase$/;"	t
IsDataKey	src/main/scala/util/BundleMap.scala	/^sealed trait IsDataKey    extends BundleKeyBase$/;"	t
JAL	src/main/scala/rocket/Instructions.scala	/^  def JAL                = BitPat("b?????????????????????????1101111")$/;"	m
JALR	src/main/scala/rocket/Instructions.scala	/^  def JALR               = BitPat("b?????????????????000?????1100111")$/;"	m
JSON	src/main/scala/diplomacy/JSON.scala	/^object JSON$/;"	c
JTAG	src/main/scala/devices/debug/Periphery.scala	/^case object JTAG extends DebugExportProtocol$/;"	c
JTAG	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^case object JTAG extends OMDebugInterfaceType$/;"	c
JTAGIO	src/main/scala/jtag/JtagTap.scala	/^class JTAGIO(hasTRSTn: Boolean = false) extends Bundle {$/;"	c
JTAGIdcodeBundle	src/main/scala/jtag/JtagUtils.scala	/^class JTAGIdcodeBundle extends Bundle {$/;"	c
JTAG_DEBUG_SUFFIX	regression/Makefile	/^JTAG_DEBUG_SUFFIX=-debug$/;"	m
JTAG_DTM_ENABLE_SBA	regression/Makefile	/^export JTAG_DTM_ENABLE_SBA ?= off$/;"	m
JTAG_DTM_SIM_ARGS	regression/Makefile	/^JTAG_DTM_SIM_ARGS = +jtag_rbb_enable=1 $(SEED_ARG)$/;"	m
JTAG_DTM_TEST	regression/Makefile	/^JTAG_DTM_TEST ?= MemTest64$/;"	m
JTAG_STAMP_SUFFIX	regression/Makefile	/^JTAG_STAMP_SUFFIX=-debug$/;"	m
JTAG_STAMP_SUFFIX	regression/Makefile	/^JTAG_STAMP_SUFFIX=-ndebug$/;"	m
JtagBlockIO	src/main/scala/jtag/JtagTap.scala	/^class JtagBlockIO(irLength: Int, hasIdcode:Boolean = true) extends Bundle {$/;"	c
JtagBypassChain	src/main/scala/jtag/JtagShifter.scala	/^class JtagBypassChain(implicit val p: Parameters) extends Chain {$/;"	c
JtagBypassChain	src/main/scala/jtag/JtagShifter.scala	/^object JtagBypassChain {$/;"	c
JtagControl	src/main/scala/jtag/JtagTap.scala	/^class JtagControl extends Bundle {$/;"	c
JtagControllerIO	src/main/scala/jtag/JtagTap.scala	/^class JtagControllerIO(irLength: Int) extends JtagBlockIO(irLength, false) {$/;"	c
JtagDTMConfig	src/main/scala/devices/debug/DebugTransport.scala	/^case class JtagDTMConfig ($/;"	c
JtagDTMKey	src/main/scala/devices/debug/DebugTransport.scala	/^case object JtagDTMKey extends Field[JtagDTMConfig](new JtagDTMKeyDefault())$/;"	c
JtagDTMKeyDefault	src/main/scala/devices/debug/DebugTransport.scala	/^class JtagDTMKeyDefault extends JtagDTMConfig($/;"	c
JtagIdcode	src/main/scala/jtag/JtagUtils.scala	/^object JtagIdcode {$/;"	c
JtagOutput	src/main/scala/jtag/JtagTap.scala	/^class JtagOutput(irLength: Int) extends Bundle {$/;"	c
JtagState	src/main/scala/jtag/JtagStateMachine.scala	/^object JtagState {$/;"	c
JtagStateMachine	src/main/scala/jtag/JtagStateMachine.scala	/^class JtagStateMachine(implicit val p: Parameters) extends Module() {$/;"	c
JtagTapController	src/main/scala/jtag/JtagTap.scala	/^class JtagTapController(irLength: Int, initialInstruction: BigInt)(implicit val p: Parameters) extends Module {$/;"	c
JtagTapGenerator	src/main/scala/jtag/JtagTap.scala	/^object JtagTapGenerator {$/;"	c
JunctionNode	src/main/scala/diplomacy/Nodes.scala	/^class JunctionNode[D, U, EO, EI, B <: Data](imp: NodeImp[D, U, EO, EI, B])($/;"	c
JustOneBusTopologyParams	src/main/scala/subsystem/BusTopology.scala	/^case class JustOneBusTopologyParams($/;"	c
L	src/main/scala/util/LanePositionedQueue.scala	/^    val L = BigInt(1) << logL$/;"	l
L	src/main/scala/util/LanePositionedQueue.scala	/^  val L = BigInt(1) << logL$/;"	l
L1BusErrors	src/main/scala/tile/BusErrorUnit.scala	/^class L1BusErrors(implicit p: Parameters) extends CoreBundle()(p) with BusErrors {$/;"	c
L1CacheBundle	src/main/scala/tile/L1Cache.scala	/^abstract class L1CacheBundle(implicit val p: Parameters) extends Bundle$/;"	c
L1CacheModule	src/main/scala/tile/L1Cache.scala	/^abstract class L1CacheModule(implicit val p: Parameters) extends Module$/;"	c
L1CacheParams	src/main/scala/tile/L1Cache.scala	/^trait L1CacheParams {$/;"	t
L1DataReadReq	src/main/scala/rocket/NBDcache.scala	/^class L1DataReadReq(implicit p: Parameters) extends L1HellaCacheBundle()(p) {$/;"	c
L1DataWriteReq	src/main/scala/rocket/NBDcache.scala	/^class L1DataWriteReq(implicit p: Parameters) extends L1DataReadReq()(p) {$/;"	c
L1HellaCacheBundle	src/main/scala/rocket/HellaCache.scala	/^abstract class L1HellaCacheBundle(implicit val p: Parameters) extends ParameterizedBundle()(p)$/;"	c
L1HellaCacheModule	src/main/scala/rocket/HellaCache.scala	/^abstract class L1HellaCacheModule(implicit val p: Parameters) extends Module$/;"	c
L1MetaReadReq	src/main/scala/rocket/HellaCache.scala	/^class L1MetaReadReq(implicit p: Parameters) extends L1HellaCacheBundle()(p) {$/;"	c
L1MetaWriteReq	src/main/scala/rocket/HellaCache.scala	/^class L1MetaWriteReq(implicit p: Parameters) extends L1MetaReadReq()(p) {$/;"	c
L1Metadata	src/main/scala/rocket/HellaCache.scala	/^class L1Metadata(implicit p: Parameters) extends L1HellaCacheBundle()(p) {$/;"	c
L1Metadata	src/main/scala/rocket/HellaCache.scala	/^object L1Metadata {$/;"	c
L1MetadataArray	src/main/scala/rocket/HellaCache.scala	/^class L1MetadataArray[T <: L1Metadata](onReset: () => T)(implicit p: Parameters) extends L1HellaCacheModule()(p) {$/;"	c
L1RefillReq	src/main/scala/rocket/NBDcache.scala	/^class L1RefillReq(implicit p: Parameters) extends L1DataReadReq()(p)$/;"	c
L2	src/main/scala/subsystem/BusTopology.scala	/^case object L2   extends TLBusWrapperLocation("subsystem_l2")$/;"	c
L2TLBEntry	src/main/scala/rocket/PTW.scala	/^class L2TLBEntry(nSets: Int)(implicit p: Parameters) extends CoreBundle()(p)$/;"	c
LB	src/main/scala/rocket/Instructions.scala	/^  def LB                 = BitPat("b?????????????????000?????0000011")$/;"	m
LBU	src/main/scala/rocket/Instructions.scala	/^  def LBU                = BitPat("b?????????????????100?????0000011")$/;"	m
LCG	src/main/scala/util/LCG.scala	/^class LCG(val w: Int) extends Module {$/;"	c
LCG	src/main/scala/util/LCG.scala	/^object LCG {$/;"	c
LCG16	src/main/scala/util/LCG.scala	/^class LCG16 extends Module { $/;"	c
LCG16	src/main/scala/util/LCG.scala	/^object LCG16 {$/;"	c
LD	src/main/scala/rocket/Instructions.scala	/^  def LD                 = BitPat("b?????????????????011?????0000011")$/;"	m
LDFLAGS	emulator/Makefile	/^LDFLAGS := $(LDFLAGS) -L$(RISCV)\/lib -Wl,-rpath,$(RISCV)\/lib -L$(abspath $(sim_dir)) -lfesvr -lpthread$/;"	m
LFSR16Seed	src/main/scala/regmapper/Test.scala	/^object LFSR16Seed$/;"	c
LFSR64	src/main/scala/tilelink/Fuzzer.scala	/^object LFSR64$/;"	c
LFSRNoiseMaker	src/main/scala/tilelink/Fuzzer.scala	/^class LFSRNoiseMaker(wide: Int) extends Module with HasNoiseMakerIO$/;"	c
LFSRNoiseMaker	src/main/scala/tilelink/Fuzzer.scala	/^object LFSRNoiseMaker {$/;"	c
LH	src/main/scala/rocket/Instructions.scala	/^  def LH                 = BitPat("b?????????????????001?????0000011")$/;"	m
LHU	src/main/scala/rocket/Instructions.scala	/^  def LHU                = BitPat("b?????????????????101?????0000011")$/;"	m
LOCAL_EXTERNAL_INTERRUPTS	src/main/scala/util/Annotations.scala	/^  val LOCAL_EXTERNAL_INTERRUPTS = "local-external-interrupts"$/;"	l
LOCAL_INTERRUPTS_STARTING_NUMBER	src/main/scala/util/Annotations.scala	/^  val LOCAL_INTERRUPTS_STARTING_NUMBER = 16 \/* TODO the ISA specfication reserves the first 12 interrupts but$/;"	l
LR_D	src/main/scala/rocket/Instructions.scala	/^  def LR_D               = BitPat("b00010??00000?????011?????0101111")$/;"	m
LR_W	src/main/scala/rocket/Instructions.scala	/^  def LR_W               = BitPat("b00010??00000?????010?????0101111")$/;"	m
LUI	src/main/scala/rocket/Instructions.scala	/^  def LUI                = BitPat("b?????????????????????????0110111")$/;"	m
LW	src/main/scala/rocket/Instructions.scala	/^  def LW                 = BitPat("b?????????????????010?????0000011")$/;"	m
LWU	src/main/scala/rocket/Instructions.scala	/^  def LWU                = BitPat("b?????????????????110?????0000011")$/;"	m
LanePositionedDecoupledIO	src/main/scala/util/LanePositionedQueue.scala	/^class LanePositionedDecoupledIO[T <: Data](private val gen: T, val maxValid: Int, val maxReady: Int) extends Bundle {$/;"	c
LanePositionedQueue	src/main/scala/util/LanePositionedQueue.scala	/^trait LanePositionedQueue {$/;"	t
LanePositionedQueueArgs	src/main/scala/util/LanePositionedQueue.scala	/^  val LanePositionedQueueArgs(lanes, rows, flow, pipe, free, commit, rewind, abort) = args$/;"	l
LanePositionedQueueArgs	src/main/scala/util/LanePositionedQueue.scala	/^case class LanePositionedQueueArgs($/;"	c
LanePositionedQueueBase	src/main/scala/util/LanePositionedQueue.scala	/^class LanePositionedQueueBase[T <: Data](val gen: T, args: LanePositionedQueueArgs) extends Module with LanePositionedQueueModule[T] {$/;"	c
LanePositionedQueueIO	src/main/scala/util/LanePositionedQueue.scala	/^class LanePositionedQueueIO[T <: Data](private val gen: T, val args: LanePositionedQueueArgs) extends Bundle {$/;"	c
LanePositionedQueueModule	src/main/scala/util/LanePositionedQueue.scala	/^trait LanePositionedQueueModule[T <: Data] extends Module {$/;"	t
LatencyPipe	src/main/scala/util/LatencyPipe.scala	/^class LatencyPipe[T <: Data](typ: T, latency: Int) extends Module {$/;"	c
LatencyPipe	src/main/scala/util/LatencyPipe.scala	/^object LatencyPipe {$/;"	c
LazyModule	src/main/scala/diplomacy/LazyModule.scala	/^abstract class LazyModule()(implicit val p: Parameters) {$/;"	c
LazyModule	src/main/scala/diplomacy/LazyModule.scala	/^object LazyModule {$/;"	c
LazyModuleImp	src/main/scala/diplomacy/LazyModule.scala	/^class LazyModuleImp(val wrapper: LazyModule) extends MultiIOModule with LazyModuleImpLike {$/;"	c
LazyModuleImpLike	src/main/scala/diplomacy/LazyModule.scala	/^sealed trait LazyModuleImpLike extends RawModule {$/;"	t
LazyRawModuleImp	src/main/scala/diplomacy/LazyModule.scala	/^class LazyRawModuleImp(val wrapper: LazyModule) extends RawModule with LazyModuleImpLike {$/;"	c
LazyRoCC	src/main/scala/tile/LazyRoCC.scala	/^abstract class LazyRoCC($/;"	c
LazyRoCCModuleImp	src/main/scala/tile/LazyRoCC.scala	/^class LazyRoCCModuleImp(outer: LazyRoCC) extends LazyModuleImp(outer) {$/;"	c
LazyScope	src/main/scala/diplomacy/LazyModule.scala	/^object LazyScope {$/;"	c
LazyScope	src/main/scala/diplomacy/LazyModule.scala	/^trait LazyScope {$/;"	t
LazyScopeWithParameters	src/main/scala/subsystem/Attachable.scala	/^trait LazyScopeWithParameters extends LazyScope { this: LazyModule =>$/;"	t
LazyUnitTest	src/main/scala/unittest/TestGenerator.scala	/^abstract class LazyUnitTest(implicit p: Parameters) extends LazyModule$/;"	c
LazyUnitTestSeq	src/main/scala/unittest/package.scala	/^  implicit class LazyUnitTestSeq(val seq: Seq[LazyUnitTest]) {$/;"	c
LegacyTileFieldHelper	src/main/scala/subsystem/Configs.scala	/^object LegacyTileFieldHelper {$/;"	c
LevelGateway	src/main/scala/devices/tilelink/Plic.scala	/^class LevelGateway extends Module {$/;"	c
LineIsFLDInst	src/main/resources/csrc/float_fix.cc	/^bool LineIsFLDInst(std::string line) {$/;"	f
LintAnnotation	src/main/scala/linting/LintAnnotation.scala	/^trait LintAnnotation extends NoTargetAnnotation with ChiselAnnotation {$/;"	t
LintAnonymousRegisters	src/main/scala/linting/rule/LintAnonymousRegisters.scala	/^final class LintAnonymousRegisters extends LintRule {$/;"	c
LintConflictingModuleNames	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^final class LintConflictingModuleNames extends LintRule {$/;"	c
LintConflictingModuleNamesAspect	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^case object LintConflictingModuleNamesAspect extends Aspect[RawModule] {$/;"	c
LintConflictingModuleNamesSpec	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^class LintConflictingModuleNamesSpec extends AnyPropSpec with Matchers {$/;"	c
LintException	src/main/scala/linting/LintException.scala	/^case class LintException(seq: Seq[Violation], lintDisplayOptions: DisplayOptions) extends FirrtlUserException($/;"	c
LintException	src/main/scala/linting/LintException.scala	/^object LintException {$/;"	c
LintReporter	src/main/scala/linting/LintReporter.scala	/^final class LintReporter extends Transform with RegisteredLibrary with DependencyAPIMigration with PreservesAll[Transform] {$/;"	c
LintRule	src/main/scala/linting/rule/LintRule.scala	/^abstract class LintRule extends Transform with RegisteredLibrary with DependencyAPIMigration with PreservesAll[Transform] {$/;"	c
LintTruncatingWidths	src/main/scala/linting/rule/LintTruncatingWidths.scala	/^final class LintTruncatingWidths extends LintRule {$/;"	c
Linter	src/main/scala/linting/Linter.scala	/^object Linter {$/;"	c
LoadGen	src/main/scala/rocket/AMOALU.scala	/^class LoadGen(typ: UInt, signed: Bool, addr: UInt, dat: UInt, zero: Bool, maxSize: Int) {$/;"	c
LocalRTL	src/main/scala/formal/FormalUtils.scala	/^  object LocalRTL extends PropertyClass("LocalRTL")$/;"	c
Location	src/main/scala/util/Location.scala	/^class Location[T](val name: String) extends Dynamic {$/;"	c
Location	src/main/scala/util/Location.scala	/^object Location {$/;"	c
LocationMap	src/main/scala/util/Location.scala	/^class LocationMap[T] private (val internalMap: Map[String, T]) extends Map[Location[_], T] {$/;"	c
LocationMap	src/main/scala/util/Location.scala	/^object LocationMap {$/;"	c
LogicMsg	src/main/scala/tilelink/Bundles.scala	/^  def LogicMsg:Seq[String] = Seq("XOR", "OR", "AND", "SWAP")$/;"	m
Logical	src/main/scala/tilelink/Edges.scala	/^  def Logical(fromAddress: UInt, toSource: UInt, lgSize: UInt, data: UInt, atomic: UInt, corrupt: Bool = Bool(false)) = {$/;"	m
Logical	src/main/scala/tilelink/Edges.scala	/^  def Logical(fromSource: UInt, toAddress: UInt, lgSize: UInt, data: UInt, atomic: UInt, corrupt: Bool = Bool(false)) = {$/;"	m
LogicalData	src/main/scala/tilelink/Bundles.scala	/^  def LogicalData    = UInt(3) \/\/     .    .                   => AccessAckData$/;"	m
LogicalModuleTree	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^object LogicalModuleTree {$/;"	c
LogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^abstract class LogicalTreeNode(protected val deviceOpt: () => Option[Device]) {$/;"	c
LookupByHartId	src/main/scala/tile/BaseTile.scala	/^case object LookupByHartId extends Field[LookupByHartIdImpl]$/;"	c
LookupByHartIdImpl	src/main/scala/tile/LookupByHartId.scala	/^abstract class LookupByHartIdImpl {$/;"	c
Low	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^trait Low extends OMSignalAssertionLevel$/;"	t
M	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object M extends OMExtensionType$/;"	c
M	src/main/scala/rocket/CSR.scala	/^  val M = 3$/;"	l
M	src/main/scala/rocket/IDecode.scala	/^  val M = if (pipelinedMul) Y else N$/;"	l
M64Decode	src/main/scala/rocket/IDecode.scala	/^class M64Decode(pipelinedMul: Boolean)(implicit val p: Parameters) extends DecodeConstants$/;"	c
MAX	src/main/scala/rocket/Instructions.scala	/^  def MAX                = BitPat("b0000101??????????110?????0110011")$/;"	m
MAX	src/main/scala/tilelink/Bundles.scala	/^  def MAX  = UInt(1, width)$/;"	m
MAXU	src/main/scala/rocket/Instructions.scala	/^  def MAXU               = BitPat("b0000101??????????111?????0110011")$/;"	m
MAXU	src/main/scala/tilelink/Bundles.scala	/^  def MAXU = UInt(3, width)$/;"	m
MBUS	src/main/scala/subsystem/BusTopology.scala	/^case object MBUS extends TLBusWrapperLocation("subsystem_mbus")$/;"	c
MDecode	src/main/scala/rocket/IDecode.scala	/^class MDecode(pipelinedMul: Boolean)(implicit val p: Parameters) extends DecodeConstants$/;"	c
MIN	src/main/scala/rocket/Instructions.scala	/^  def MIN                = BitPat("b0000101??????????100?????0110011")$/;"	m
MIN	src/main/scala/tilelink/Bundles.scala	/^  def MIN  = UInt(0, width)$/;"	m
MINU	src/main/scala/rocket/Instructions.scala	/^  def MINU               = BitPat("b0000101??????????101?????0110011")$/;"	m
MINU	src/main/scala/tilelink/Bundles.scala	/^  def MINU = UInt(2, width)$/;"	m
MIP	src/main/scala/rocket/CSR.scala	/^class MIP(implicit p: Parameters) extends CoreBundle()(p)$/;"	c
MMIOPortOnlyConfig	src/main/scala/system/Configs.scala	/^class MMIOPortOnlyConfig extends Config($/;"	c
MNRET	src/main/scala/rocket/Instructions.scala	/^  def MNRET              = BitPat("b01110000001000000000000001110011")$/;"	m
MNStatus	src/main/scala/rocket/CSR.scala	/^class MNStatus extends Bundle {$/;"	c
MODEL	src/main/resources/vsrc/TestDriver.v	/^ `define MODEL TestHarness$/;"	c
MRET	src/main/scala/rocket/Instructions.scala	/^  def MRET               = BitPat("b00110000001000000000000001110011")$/;"	m
MSHR	src/main/scala/rocket/NBDcache.scala	/^class MSHR(id: Int)(implicit edge: TLEdgeOut, p: Parameters) extends L1HellaCacheModule()(p) {$/;"	c
MSHRFile	src/main/scala/rocket/NBDcache.scala	/^class MSHRFile(implicit edge: TLEdgeOut, p: Parameters) extends L1HellaCacheModule()(p) {$/;"	c
MSHRReq	src/main/scala/rocket/NBDcache.scala	/^class MSHRReq(implicit p: Parameters) extends Replay()(p) with HasMissInfo$/;"	c
MSHRReqInternal	src/main/scala/rocket/NBDcache.scala	/^class MSHRReqInternal(implicit p: Parameters) extends ReplayInternal()(p) with HasMissInfo$/;"	c
MStatus	src/main/scala/rocket/CSR.scala	/^class MStatus extends Bundle {$/;"	c
MUL	src/main/scala/rocket/Instructions.scala	/^  def MUL                = BitPat("b0000001??????????000?????0110011")$/;"	m
MULH	src/main/scala/rocket/Instructions.scala	/^  def MULH               = BitPat("b0000001??????????001?????0110011")$/;"	m
MULHSU	src/main/scala/rocket/Instructions.scala	/^  def MULHSU             = BitPat("b0000001??????????010?????0110011")$/;"	m
MULHU	src/main/scala/rocket/Instructions.scala	/^  def MULHU              = BitPat("b0000001??????????011?????0110011")$/;"	m
MULW	src/main/scala/rocket/Instructions.scala	/^  def MULW               = BitPat("b0000001??????????000?????0111011")$/;"	m
M_CLEAN	src/main/scala/rocket/Consts.scala	/^  def M_CLEAN   = UInt("b10011") \/\/ write back dirty data and retain R\/W permissions$/;"	m
M_FLUSH	src/main/scala/rocket/Consts.scala	/^  def M_FLUSH   = UInt("b10000") \/\/ write back dirty data and cede R\/W permissions$/;"	m
M_FLUSH_ALL	src/main/scala/rocket/Consts.scala	/^  def M_FLUSH_ALL = UInt("b00101")  \/\/ flush all lines$/;"	m
M_HFENCEG	src/main/scala/rocket/Consts.scala	/^  def M_HFENCEG = UInt("b10110") \/\/ HFENCE.GVMA$/;"	m
M_HFENCEV	src/main/scala/rocket/Consts.scala	/^  def M_HFENCEV = UInt("b10101") \/\/ HFENCE.VVMA$/;"	m
M_HLVX	src/main/scala/rocket/Consts.scala	/^  def M_HLVX    = UInt("b10000") \/\/ HLVX instruction$/;"	m
M_PFR	src/main/scala/rocket/Consts.scala	/^  def M_PFR     = UInt("b00010"); \/\/ prefetch with intent to read$/;"	m
M_PFW	src/main/scala/rocket/Consts.scala	/^  def M_PFW     = UInt("b00011"); \/\/ prefetch with intent to write$/;"	m
M_PRODUCE	src/main/scala/rocket/Consts.scala	/^  def M_PRODUCE = UInt("b10010") \/\/ write back dirty data and cede W permissions$/;"	m
M_PWR	src/main/scala/rocket/Consts.scala	/^  def M_PWR     = UInt("b10001") \/\/ partial (masked) store$/;"	m
M_SFENCE	src/main/scala/rocket/Consts.scala	/^  def M_SFENCE  = UInt("b10100") \/\/ SFENCE.VMA$/;"	m
M_SZ	src/main/scala/rocket/Consts.scala	/^  val M_SZ      = 5$/;"	l
M_WOK	src/main/scala/rocket/Consts.scala	/^  def M_WOK     = UInt("b10111") \/\/ check write permissions but don't perform a write$/;"	m
M_X	src/main/scala/rocket/Consts.scala	/^  def M_X       = BitPat("b?????");$/;"	m
M_XA_ADD	src/main/scala/rocket/Consts.scala	/^  def M_XA_ADD  = UInt("b01000");$/;"	m
M_XA_AND	src/main/scala/rocket/Consts.scala	/^  def M_XA_AND  = UInt("b01011");$/;"	m
M_XA_MAX	src/main/scala/rocket/Consts.scala	/^  def M_XA_MAX  = UInt("b01101");$/;"	m
M_XA_MAXU	src/main/scala/rocket/Consts.scala	/^  def M_XA_MAXU = UInt("b01111");$/;"	m
M_XA_MIN	src/main/scala/rocket/Consts.scala	/^  def M_XA_MIN  = UInt("b01100");$/;"	m
M_XA_MINU	src/main/scala/rocket/Consts.scala	/^  def M_XA_MINU = UInt("b01110");$/;"	m
M_XA_OR	src/main/scala/rocket/Consts.scala	/^  def M_XA_OR   = UInt("b01010");$/;"	m
M_XA_SWAP	src/main/scala/rocket/Consts.scala	/^  def M_XA_SWAP = UInt("b00100");$/;"	m
M_XA_XOR	src/main/scala/rocket/Consts.scala	/^  def M_XA_XOR  = UInt("b01001");$/;"	m
M_XLR	src/main/scala/rocket/Consts.scala	/^  def M_XLR     = UInt("b00110");$/;"	m
M_XRD	src/main/scala/rocket/Consts.scala	/^  def M_XRD     = UInt("b00000"); \/\/ int load$/;"	m
M_XSC	src/main/scala/rocket/Consts.scala	/^  def M_XSC     = UInt("b00111");$/;"	m
M_XWR	src/main/scala/rocket/Consts.scala	/^  def M_XWR     = UInt("b00001"); \/\/ int store$/;"	m
MachineLevelISA	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^case object MachineLevelISA extends PrivilegedArchitectureExtension$/;"	c
MachineMode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val MachineMode = BigInt(11)$/;"	l
Majority	src/main/scala/util/Misc.scala	/^object Majority {$/;"	c
ManagerFilter	src/main/scala/tilelink/Filter.scala	/^  type ManagerFilter = TLSlaveParameters => Option[TLSlaveParameters]$/;"	T
ManagerUnification	src/main/scala/tilelink/Parameters.scala	/^object ManagerUnification$/;"	c
ManagerUnificationKey	src/main/scala/tilelink/Parameters.scala	/^case class ManagerUnificationKey($/;"	c
ManagerUnificationKey	src/main/scala/tilelink/Parameters.scala	/^object ManagerUnificationKey$/;"	c
Map	src/main/scala/regmapper/RegField.scala	/^  type Map = (Int, Seq[RegField])$/;"	T
MaskGen	src/main/scala/util/Misc.scala	/^object MaskGen {$/;"	c
MaskROM	src/main/scala/devices/tilelink/MaskROM.scala	/^object MaskROM {$/;"	c
MaskROMLocated	src/main/scala/devices/tilelink/MaskROM.scala	/^case class MaskROMLocated(loc: HierarchicalLocation) extends Field[Seq[MaskROMParams]](Nil)$/;"	c
MaskROMParams	src/main/scala/devices/tilelink/MaskROM.scala	/^case class MaskROMParams(address: BigInt, name: String, depth: Int = 2048, width: Int = 32)$/;"	c
MasterMux	src/main/scala/devices/tilelink/MasterMux.scala	/^class MasterMux(uFn: Seq[TLMasterPortParameters] => TLMasterPortParameters)(implicit p: Parameters) extends LazyModule$/;"	c
MasterMuxNode	src/main/scala/devices/tilelink/MasterMux.scala	/^class MasterMuxNode(uFn: Seq[TLMasterPortParameters] => TLMasterPortParameters)(implicit valName: ValName) extends TLCustomNode$/;"	c
MasterPortParams	src/main/scala/subsystem/Ports.scala	/^case class MasterPortParams($/;"	c
MaxHartIdBits	src/main/scala/tile/Core.scala	/^case object MaxHartIdBits extends Field[Int]$/;"	c
MemPortOnlyConfig	src/main/scala/system/Configs.scala	/^class MemPortOnlyConfig extends Config($/;"	c
MemoryBus	src/main/scala/subsystem/MemoryBus.scala	/^class MemoryBus(params: MemoryBusParams, name: String = "memory_bus")(implicit p: Parameters)$/;"	c
MemoryBusKey	src/main/scala/subsystem/BusTopology.scala	/^case object MemoryBusKey extends Field[MemoryBusParams]$/;"	c
MemoryBusParams	src/main/scala/subsystem/MemoryBus.scala	/^case class MemoryBusParams($/;"	c
MemoryDevice	src/main/scala/diplomacy/Resources.scala	/^class MemoryDevice extends Device with DeviceRegName$/;"	c
MemoryOpCategories	src/main/scala/tilelink/Metadata.scala	/^object MemoryOpCategories extends MemoryOpConstants {$/;"	c
MemoryOpConstants	src/main/scala/rocket/Consts.scala	/^trait MemoryOpConstants {$/;"	t
MemoryPathToken	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^case class MemoryPathToken(target: ReferenceTarget) extends Token {$/;"	c
MemoryPort	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class MemoryPort($/;"	c
MemoryPortParams	src/main/scala/subsystem/Ports.scala	/^case class MemoryPortParams(master: MasterPortParams, nMemoryChannels: Int)$/;"	c
MemoryPortType	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object MemoryPortType extends PortType$/;"	c
Midentity	src/main/scala/amba/axi4/Filter.scala	/^  def Midentity: AXI4MasterParameters => Option[AXI4MasterParameters] = { m => Some(m) }$/;"	m
MixedAdapterNode	src/main/scala/diplomacy/Nodes.scala	/^class MixedAdapterNode[DI, UI, EI, BI <: Data, DO, UO, EO, BO <: Data]($/;"	c
MixedCustomNode	src/main/scala/diplomacy/Nodes.scala	/^abstract class MixedCustomNode[DI, UI, EI, BI <: Data, DO, UO, EO, BO <: Data]($/;"	c
MixedJunctionNode	src/main/scala/diplomacy/Nodes.scala	/^class MixedJunctionNode[DI, UI, EI, BI <: Data, DO, UO, EO, BO <: Data]($/;"	c
MixedNexusNode	src/main/scala/diplomacy/Nodes.scala	/^class MixedNexusNode[DI, UI, EI, BI <: Data, DO, UO, EO, BO <: Data]($/;"	c
MixedNode	src/main/scala/diplomacy/Nodes.scala	/^sealed abstract class MixedNode[DI, UI, EI, BI <: Data, DO, UO, EO, BO <: Data]($/;"	c
MixedTestNode	src/main/scala/diplomacy/Nodes.scala	/^class MixedTestNode[DI, UI, EI, BI <: Data, DO, UO, EO, BO <: Data] protected[diplomacy]($/;"	c
ModIO	src/main/scala/jtag/JtagShifter.scala	/^  class ModIO extends ChainIO {$/;"	c
ModIO	src/main/scala/jtag/JtagShifter.scala	/^  class ModIO extends ChainIO$/;"	c
ModulePathToken	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^case class ModulePathToken(target: IsModule) extends Token {$/;"	c
ModuleValue	src/main/scala/diplomacy/LazyModule.scala	/^trait ModuleValue[T] {$/;"	t
Monitor	src/main/scala/formal/FormalUtils.scala	/^  object Monitor extends MonitorDirection("Monitor") { override def flip: MonitorDirection = Monitor }$/;"	c
MonitorDirection	src/main/scala/formal/FormalUtils.scala	/^object MonitorDirection {$/;"	c
MonitorDirection	src/main/scala/formal/FormalUtils.scala	/^sealed abstract class MonitorDirection(name: String) {$/;"	c
MonitorParameters	src/main/scala/tilelink/RAMModel.scala	/^  case class MonitorParameters(addressBits: Int, sizeBits: Int)$/;"	c
MonitorsEnabled	src/main/scala/diplomacy/Nodes.scala	/^case object MonitorsEnabled extends Field[Boolean](true)$/;"	c
MulAddRecFNPipe	src/main/scala/tile/FPU.scala	/^class MulAddRecFNPipe(latency: Int, expWidth: Int, sigWidth: Int) extends Module$/;"	c
MulDiv	src/main/scala/rocket/Multiplier.scala	/^class MulDiv(cfg: MulDivParams, width: Int, nXpr: Int = 32) extends Module {$/;"	c
MulDivParams	src/main/scala/rocket/Multiplier.scala	/^case class MulDivParams($/;"	c
MultiLaneQueue	src/main/scala/util/MultiLaneQueue.scala	/^class MultiLaneQueue[T <: Data](gen: T, val lanes: Int, val rows: Int, val flow: Boolean = false, storage: LanePositionedQueue = FloppedLanePositionedQueue) extends Module {$/;"	c
MultiLaneQueueTest	src/main/scala/util/MultiLaneQueue.scala	/^class MultiLaneQueueTest(lanes: Int, rows: Int, cycles: Int, timeout: Int = 500000) extends UnitTest(timeout) {$/;"	c
MultiPortQueue	src/main/scala/util/MultiPortQueue.scala	/^class MultiPortQueue[T <: Data](gen: T, val enq_lanes: Int, val deq_lanes: Int, val lanes: Int, val rows: Int, val flow: Boolean = false, storage: LanePositionedQueue = FloppedLanePositionedQueue) extends Module {$/;"	c
MultiPortQueue	src/main/scala/util/MultiPortQueue.scala	/^object MultiPortQueue {$/;"	c
MultiPortQueueTest	src/main/scala/util/MultiPortQueue.scala	/^class MultiPortQueueTest(lanes: Int, wlanes: Int, rows: Int, cycles: Int, timeout: Int = 500000) extends UnitTest(timeout) {$/;"	c
MultiWidthFifo	src/main/scala/util/MultiWidthFifo.scala	/^class MultiWidthFifo(inW: Int, outW: Int, n: Int) extends Module {$/;"	c
MultiWidthFifoTest	src/main/scala/util/MultiWidthFifo.scala	/^class MultiWidthFifoTest extends UnitTest {$/;"	c
MultiplierIO	src/main/scala/rocket/Multiplier.scala	/^class MultiplierIO(val dataBits: Int, val tagBits: Int) extends Bundle {$/;"	c
MultiplierReq	src/main/scala/rocket/Multiplier.scala	/^class MultiplierReq(dataBits: Int, tagBits: Int) extends Bundle {$/;"	c
MultiplierResp	src/main/scala/rocket/Multiplier.scala	/^class MultiplierResp(dataBits: Int, tagBits: Int) extends Bundle {$/;"	c
MuteMaster	src/main/scala/devices/tilelink/MasterMux.scala	/^class MuteMaster(name: String = "MuteMaster", maxProbe: Int = 0)(implicit p: Parameters) extends LazyModule$/;"	c
MuxLiteral	src/main/scala/util/MuxLiteral.scala	/^object MuxLiteral$/;"	c
MuxSeq	src/main/scala/util/MuxLiteral.scala	/^object MuxSeq$/;"	c
MuxT	src/main/scala/util/Misc.scala	/^object MuxT {$/;"	c
MuxTLookup	src/main/scala/util/Misc.scala	/^object MuxTLookup {$/;"	c
MuxTable	src/main/scala/util/MuxLiteral.scala	/^object MuxTable$/;"	c
N	src/main/scala/rocket/CSR.scala	/^  def N = UInt(0,SZ)$/;"	m
N	src/main/scala/rocket/Consts.scala	/^  def N = BitPat("b0")$/;"	m
NEXTDMFields	src/main/scala/devices/debug/dm_registers.scala	/^class NEXTDMFields extends Bundle {$/;"	c
NExtTopInterrupts	src/main/scala/subsystem/InterruptBus.scala	/^case object NExtTopInterrupts extends Field[Int](0)$/;"	c
NMI	src/main/scala/tile/Interrupts.scala	/^class NMI(val w: Int) extends Bundle {$/;"	c
NMIDecode	src/main/scala/rocket/IDecode.scala	/^class NMIDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
NONE	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^case object NONE extends OMDebugAuthenticationType$/;"	c
NUM_XA_OPS	src/main/scala/rocket/Consts.scala	/^  val NUM_XA_OPS = 9$/;"	l
N_BEATS	scripts/check_comparator_trace.py	/^N_BEATS = 8$/;"	v
N_BLOCKS	scripts/check_comparator_trace.py	/^N_BLOCKS = 4$/;"	v
N_BYTES	scripts/check_comparator_trace.py	/^N_BYTES = 8$/;"	v
N_OPS	scripts/check_comparator_trace.py	/^N_OPS = 142$/;"	v
NestedFloatPossible	src/main/resources/csrc/float_fix.cc	/^bool NestedFloatPossible(uint64_t raw_input) {$/;"	f
NexusNode	src/main/scala/diplomacy/Nodes.scala	/^class NexusNode[D, U, EO, EI, B <: Data](imp: NodeImp[D, U, EO, EI, B])($/;"	c
NoCrossing	src/main/scala/diplomacy/ClockDomain.scala	/^case object NoCrossing \/\/ converts to SynchronousCrossing(BufferParams.none) via implicit def in package$/;"	c
NoError	src/main/scala/devices/debug/SBA.scala	/^  val NoError    = Value(0)$/;"	l
NoHandle	src/main/scala/diplomacy/Nodes.scala	/^trait NoHandle$/;"	t
NoHandleObject	src/main/scala/diplomacy/Nodes.scala	/^case object NoHandleObject extends NoHandle$/;"	c
NoResetCrossing	src/main/scala/prci/ResetCrossingType.scala	/^case class NoResetCrossing() extends ResetCrossingType {$/;"	c
NodeBinding	src/main/scala/diplomacy/Nodes.scala	/^sealed trait NodeBinding$/;"	t
NodeHandle	src/main/scala/diplomacy/Nodes.scala	/^object NodeHandle {$/;"	c
NodeHandle	src/main/scala/diplomacy/Nodes.scala	/^trait NodeHandle[DI, UI, EI, BI <: Data, DO, UO, EO, BO <: Data]$/;"	t
NodeHandlePair	src/main/scala/diplomacy/Nodes.scala	/^class NodeHandlePair[DI, UI, EI, BI <: Data, DO, UO, EO, BO <: Data]$/;"	c
NodeImp	src/main/scala/diplomacy/Nodes.scala	/^abstract class NodeImp[D, U, EO, EI, B <: Data] extends Object$/;"	c
NonBlockingDCache	src/main/scala/rocket/NBDcache.scala	/^class NonBlockingDCache(staticIdForMetadataUseOnly: Int)(implicit p: Parameters) extends HellaCache(staticIdForMetadataUseOnly)(p) {$/;"	c
NonBlockingDCacheModule	src/main/scala/rocket/NBDcache.scala	/^class NonBlockingDCacheModule(outer: NonBlockingDCache) extends HellaCacheModule(outer) {$/;"	c
NonSync	src/main/scala/util/SynchronizerReg.scala	/^  val NonSync, Inferred, Sync, Async = Value$/;"	l
None	src/main/scala/tilelink/Fragmenter.scala	/^  case object None extends T$/;"	c
NotStrictInferReset	src/main/scala/util/CompileOptions.scala	/^  implicit val NotStrictInferReset = NotStrict.copy(inferModuleReset = true)$/;"	l
Nothing	src/main/scala/tilelink/Metadata.scala	/^  def Nothing = UInt(0, width)$/;"	m
NtoB	src/main/scala/tilelink/Bundles.scala	/^  def NtoB = UInt(0, aWidth)$/;"	m
NtoN	src/main/scala/tilelink/Bundles.scala	/^  def NtoN = UInt(5, cWidth)$/;"	m
NtoT	src/main/scala/tilelink/Bundles.scala	/^  def NtoT = UInt(1, aWidth)$/;"	m
NullIntSource	src/main/scala/interrupts/NullIntSource.scala	/^class NullIntSource(num: Int = 1, ports: Int = 1, sources: Int = 1)(implicit p: Parameters) extends LazyModule$/;"	c
NullIntSource	src/main/scala/interrupts/NullIntSource.scala	/^object NullIntSource {$/;"	c
OBJCOPY	bootrom/Makefile	/^OBJCOPY=riscv64-unknown-elf-objcopy$/;"	m
OBJCOPY	scripts/debug_rom/Makefile	/^OBJCOPY = $(RISCV)\/bin\/riscv64-unknown-elf-objcopy$/;"	m
OBJS	scripts/Makefile	/^OBJS := $(addsuffix .o,$(CXXSRCS))$/;"	m
OH1ToOH	src/main/scala/util/package.scala	/^  def OH1ToOH(x: UInt): UInt = (x << 1 | UInt(1)) & ~Cat(UInt(0, width=1), x)$/;"	m
OH1ToUInt	src/main/scala/util/package.scala	/^  def OH1ToUInt(x: UInt): UInt = OHToUInt(OH1ToOH(x))$/;"	m
OMAddressBlock	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^case class OMAddressBlock ($/;"	c
OMAddressSet	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^case class OMAddressSet($/;"	c
OMAddressTranslationMode	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^trait OMAddressTranslationMode extends OMEnum$/;"	t
OMBTB	src/main/scala/diplomaticobjectmodel/model/OMRocketCore.scala	/^object OMBTB {$/;"	c
OMBaseInstructionSet	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^trait OMBaseInstructionSet extends OMEnum$/;"	t
OMBaseType	src/main/scala/diplomaticobjectmodel/model/OMBase.scala	/^trait OMBaseType$/;"	t
OMBitRange	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^case class OMBitRange($/;"	c
OMBranchPredictor	src/main/scala/diplomaticobjectmodel/model/OMBranchPredictor.scala	/^trait OMBranchPredictor extends OMComponent$/;"	t
OMBusError	src/main/scala/diplomaticobjectmodel/model/OMBusError.scala	/^case class OMBusError($/;"	c
OMBusMemory	src/main/scala/diplomaticobjectmodel/model/OMBusMemory.scala	/^case class OMBusMemory($/;"	c
OMCLINT	src/main/scala/diplomaticobjectmodel/model/OMCLINT.scala	/^case class OMCLINT($/;"	c
OMCache	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^trait OMCache extends OMDevice {$/;"	t
OMClock	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^case class OMClock($/;"	c
OMClockRelationship	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^case class OMClockRelationship($/;"	c
OMComponent	src/main/scala/diplomaticobjectmodel/model/OMBase.scala	/^trait OMComponent extends OMCompoundType$/;"	t
OMCompoundType	src/main/scala/diplomaticobjectmodel/model/OMBase.scala	/^trait OMCompoundType extends OMBaseType$/;"	t
OMCore	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^trait OMCore extends OMComponent{$/;"	t
OMCoreComplex	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^case class OMCoreComplex($/;"	c
OMCoreComplexResetType	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^sealed trait OMCoreComplexResetType extends OMEnum$/;"	t
OMCustomExtensionSpecification	src/main/scala/diplomaticobjectmodel/model/CustomISAExtensions.scala	/^trait OMCustomExtensionSpecification{$/;"	t
OMDCache	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^case class OMDCache($/;"	c
OMDebug	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^case class OMDebug($/;"	c
OMDebug	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^object OMDebug {$/;"	c
OMDebugAuthenticationType	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^sealed trait OMDebugAuthenticationType extends OMEnum$/;"	t
OMDebugInterfaceType	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^sealed trait OMDebugInterfaceType extends OMEnum$/;"	t
OMDevice	src/main/scala/diplomaticobjectmodel/model/OMDevice.scala	/^trait OMDevice extends OMComponent {$/;"	t
OMECC	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^object OMECC {$/;"	c
OMECC	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^trait OMECC extends OMEnum$/;"	t
OMECCIdentity	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^case object OMECCIdentity extends OMECC$/;"	c
OMECCParity	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^case object OMECCParity extends OMECC$/;"	c
OMECCSEC	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^case object OMECCSEC extends OMECC$/;"	c
OMECCSECDED	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^case object OMECCSECDED extends OMECC$/;"	c
OMEnum	src/main/scala/diplomaticobjectmodel/model/OMBase.scala	/^trait OMEnum extends OMBaseType$/;"	t
OMEnumSerializer	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^class OMEnumSerializer extends CustomSerializer[OMEnum](format => {$/;"	c
OMErrorDevice	src/main/scala/diplomaticobjectmodel/model/OMErrorDevice.scala	/^case class OMErrorDevice($/;"	c
OMExtensionType	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^trait OMExtensionType extends OMEnum$/;"	t
OMFPU	src/main/scala/diplomaticobjectmodel/model/OMFPU.scala	/^case class OMFPU($/;"	c
OMHypervisorMode	src/main/scala/diplomaticobjectmodel/model/OMPLIC.scala	/^case object OMHypervisorMode extends OMPrivilegeMode$/;"	c
OMICache	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^case class OMICache($/;"	c
OMIDMapEntry	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^class OMIDMapEntry(val name: String,$/;"	c
OMIDMapEntry	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^object OMIDMapEntry {$/;"	c
OMIDRange	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^class OMIDRange (val start: Int,$/;"	c
OMIDRange	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^object OMIDRange {$/;"	c
OMISA	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case class OMISA($/;"	c
OMISA	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^object OMISA {$/;"	c
OMInterrupt	src/main/scala/diplomaticobjectmodel/model/OMInterrupts.scala	/^case class OMInterrupt($/;"	c
OMInterruptTarget	src/main/scala/diplomaticobjectmodel/model/OMPLIC.scala	/^case class OMInterruptTarget($/;"	c
OMMachineMode	src/main/scala/diplomaticobjectmodel/model/OMPLIC.scala	/^case object OMMachineMode extends OMPrivilegeMode$/;"	c
OMMemory	src/main/scala/diplomaticobjectmodel/model/OMMemory.scala	/^case class OMMemory($/;"	c
OMMemoryRegion	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^case class OMMemoryRegion ($/;"	c
OMModes	src/main/scala/diplomaticobjectmodel/model/OMPLIC.scala	/^object OMModes {$/;"	c
OMMulDiv	src/main/scala/diplomaticobjectmodel/model/OMMulDiv.scala	/^case class OMMulDiv($/;"	c
OMMulDiv	src/main/scala/diplomaticobjectmodel/model/OMMulDiv.scala	/^object OMMulDiv {$/;"	c
OMPLIC	src/main/scala/diplomaticobjectmodel/model/OMPLIC.scala	/^case class OMPLIC($/;"	c
OMPMP	src/main/scala/diplomaticobjectmodel/model/OMPMP.scala	/^case class OMPMP($/;"	c
OMPMP	src/main/scala/diplomaticobjectmodel/model/OMPMP.scala	/^object OMPMP {$/;"	c
OMPerformanceMonitor	src/main/scala/diplomaticobjectmodel/model/OMPerformanceMonitor.scala	/^case class OMPerformanceMonitor($/;"	c
OMPermissions	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^case class OMPermissions($/;"	c
OMPort	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^trait OMPort extends OMDevice {$/;"	t
OMPortMaker	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^object OMPortMaker {$/;"	c
OMPrivilegeMode	src/main/scala/diplomaticobjectmodel/model/OMPLIC.scala	/^sealed trait OMPrivilegeMode extends OMEnum$/;"	t
OMProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^trait OMProtocol extends OMCompoundType {$/;"	t
OMRTLInterface	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^case class OMRTLInterface($/;"	c
OMRTLModule	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^case class  OMRTLModule($/;"	c
OMRTLReset	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^case class OMRTLReset($/;"	c
OMRange	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^trait OMRange extends OMCompoundType {$/;"	t
OMRegField	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^case class OMRegField ($/;"	c
OMRegFieldAccessType	src/main/scala/diplomaticobjectmodel/model/OMRegFieldAccessType.scala	/^sealed trait OMRegFieldAccessType extends OMEnum$/;"	t
OMRegFieldDesc	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^case class OMRegFieldDesc($/;"	c
OMRegFieldEnumeration	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^case class  OMRegFieldEnumeration($/;"	c
OMRegFieldGroup	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^case class OMRegFieldGroup ($/;"	c
OMRegFieldRdAction	src/main/scala/diplomaticobjectmodel/model/OMRegFieldRdAction.scala	/^sealed trait OMRegFieldRdAction extends OMEnum$/;"	t
OMRegFieldWrType	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^sealed trait OMRegFieldWrType extends OMEnum$/;"	t
OMRegister	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^object OMRegister {$/;"	c
OMRegisterMap	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^case class OMRegisterMap ($/;"	c
OMResetVector	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^case class OMResetVector($/;"	c
OMRocketBranchPredictor	src/main/scala/diplomaticobjectmodel/model/OMRocketCore.scala	/^case class OMRocketBranchPredictor($/;"	c
OMRocketCore	src/main/scala/diplomaticobjectmodel/model/OMRocketCore.scala	/^case class OMRocketCore($/;"	c
OMSRAM	src/main/scala/diplomaticobjectmodel/model/OMSRAM.scala	/^case class OMSRAM($/;"	c
OMSignal	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^trait OMSignal extends RTLComponent {$/;"	t
OMSignalAssertionLevel	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^trait OMSignalAssertionLevel extends OMEnum$/;"	t
OMSpecification	src/main/scala/diplomaticobjectmodel/model/OMSpecification.scala	/^case class OMSpecification($/;"	c
OMSupervisorMode	src/main/scala/diplomaticobjectmodel/model/OMPLIC.scala	/^case object OMSupervisorMode extends OMPrivilegeMode$/;"	c
OMTestHarness	src/main/scala/diplomaticobjectmodel/model/OMTestHarness.scala	/^case class OMTestHarness($/;"	c
OMUTLB	src/main/scala/diplomaticobjectmodel/model/OMUTLB.scala	/^case class OMUTLB($/;"	c
OMUserMode	src/main/scala/diplomaticobjectmodel/model/OMPLIC.scala	/^case object OMUserMode extends OMPrivilegeMode$/;"	c
OMVectorExtension	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case class OMVectorExtension($/;"	c
OMZeroDevice	src/main/scala/diplomaticobjectmodel/model/OMZeroDevice.scala	/^case class OMZeroDevice($/;"	c
ONE_TO_CLEAR	src/main/scala/regmapper/RegFieldDesc.scala	/^  val ONE_TO_CLEAR, ONE_TO_SET, ONE_TO_TOGGLE, ZERO_TO_CLEAR,$/;"	l
OPENOCD_DEBUG	regression/Makefile	/^OPENOCD_DEBUG= -d$/;"	m
OR	src/main/scala/rocket/Instructions.scala	/^  def OR                 = BitPat("b0000000??????????110?????0110011")$/;"	m
OR	src/main/scala/tilelink/Bundles.scala	/^  def OR   = UInt(1, width)$/;"	m
ORC_B	src/main/scala/rocket/Instructions.scala	/^  def ORC_B              = BitPat("b001010000111?????101?????0010011")$/;"	m
ORI	src/main/scala/rocket/Instructions.scala	/^  def ORI                = BitPat("b?????????????????110?????0010011")$/;"	m
ORN	src/main/scala/rocket/Instructions.scala	/^  def ORN                = BitPat("b0100000??????????110?????0110011")$/;"	m
OctoChannelBenchmarkConfig	src/main/scala/system/Configs.scala	/^class OctoChannelBenchmarkConfig extends Config(new WithNMemoryChannels(8) ++ new SingleChannelBenchmarkConfig)$/;"	c
OneHot0Prop	src/main/scala/formal/FormalUtils.scala	/^object OneHot0Prop {$/;"	c
OneHotPriorityEncoder	src/main/scala/formal/FormalUtils.scala	/^object OneHotPriorityEncoder {$/;"	c
OneHotProp	src/main/scala/formal/FormalUtils.scala	/^object OneHotProp {$/;"	c
OnePortLanePositionedQueue	src/main/scala/util/LanePositionedQueue.scala	/^case class OnePortLanePositionedQueue(ecc: Code) extends LanePositionedQueue {$/;"	c
OnePortLanePositionedQueueModule	src/main/scala/util/LanePositionedQueue.scala	/^class OnePortLanePositionedQueueModule[T <: Data](ecc: Code)(gen: T, args: LanePositionedQueueArgs)$/;"	c
OpcodeSet	src/main/scala/tile/LazyRoCC.scala	/^class OpcodeSet(val opcodes: Seq[UInt]) {$/;"	c
OpcodeSet	src/main/scala/tile/LazyRoCC.scala	/^object OpcodeSet {$/;"	c
OptimizationBarrier	src/main/scala/util/package.scala	/^  def OptimizationBarrier[T <: Data](in: T): T = {$/;"	m
OptionUIntToAugmentedOptionUInt	src/main/scala/util/package.scala	/^  implicit class OptionUIntToAugmentedOptionUInt(private val x: Option[UInt]) extends AnyVal {$/;"	c
OtherError	src/main/scala/devices/debug/SBA.scala	/^  val OtherError = Value(7)$/;"	l
OutboundPort	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^trait OutboundPort extends OMPort$/;"	t
Output	src/main/scala/tile/FPU.scala	/^  class Output extends Bundle {$/;"	c
OutputBaseNameAnnotation	src/main/scala/stage/RocketChipAnnotations.scala	/^case class OutputBaseNameAnnotation(outputBaseName: String) extends NoTargetAnnotation with RocketChipOption$/;"	c
OutwardEdge	src/main/scala/aop/Select.scala	/^  case class OutwardEdge[Bundle <: Data, EdgeOutParams]($/;"	c
OutwardNode	src/main/scala/diplomacy/Nodes.scala	/^trait OutwardNode[DO, UO, BO <: Data] extends BaseNode {$/;"	t
OutwardNodeHandle	src/main/scala/diplomacy/Nodes.scala	/^trait OutwardNodeHandle[DO, UO, EO, BO <: Data] extends NoHandle {$/;"	t
OutwardNodeImp	src/main/scala/diplomacy/Nodes.scala	/^trait OutwardNodeImp[DO, UO, EO, BO <: Data]$/;"	t
OverrideDesiredNameAnnotation	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^case class OverrideDesiredNameAnnotation($/;"	c
PACK	src/main/scala/rocket/Instructions.scala	/^  def PACK               = BitPat("b0000100??????????100?????0110011")$/;"	m
PACKH	src/main/scala/rocket/Instructions.scala	/^  def PACKH              = BitPat("b0000100??????????111?????0110011")$/;"	m
PACKU	src/main/scala/rocket/Instructions.scala	/^  def PACKU              = BitPat("b0100100??????????100?????0110011")$/;"	m
PACKUW	src/main/scala/rocket/Instructions.scala	/^  def PACKUW             = BitPat("b0100100??????????100?????0111011")$/;"	m
PACKW	src/main/scala/rocket/Instructions.scala	/^  def PACKW              = BitPat("b0000100??????????100?????0111011")$/;"	m
PASS	src/main/scala/tilelink/Broadcast.scala	/^  def PASS        = 0.U$/;"	m
PASSTHRU	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^case object PASSTHRU extends OMDebugAuthenticationType$/;"	c
PAUSE	src/main/scala/rocket/Instructions.scala	/^  def PAUSE              = BitPat("b00000001000000000000000000001111")$/;"	m
PBUS	src/main/scala/subsystem/BusTopology.scala	/^case object PBUS extends TLBusWrapperLocation("subsystem_pbus")$/;"	c
PCNT	src/main/scala/rocket/Instructions.scala	/^  def PCNT               = BitPat("b011000000010?????001?????0010011")$/;"	m
PCNTW	src/main/scala/rocket/Instructions.scala	/^  def PCNTW              = BitPat("b011000000010?????001?????0011011")$/;"	m
PLICAttachKey	src/main/scala/devices/tilelink/Plic.scala	/^case object PLICAttachKey extends Field(PLICAttachParams())$/;"	c
PLICAttachParams	src/main/scala/devices/tilelink/Plic.scala	/^case class PLICAttachParams($/;"	c
PLICConsts	src/main/scala/devices/tilelink/Plic.scala	/^object PLICConsts$/;"	c
PLICFanIn	src/main/scala/devices/tilelink/Plic.scala	/^class PLICFanIn(nDevices: Int, prioBits: Int) extends Module {$/;"	c
PLICKey	src/main/scala/devices/tilelink/Plic.scala	/^case object PLICKey extends Field[Option[PLICParams]](None)$/;"	c
PLICLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^class PLICLogicalTreeNode($/;"	c
PLICParams	src/main/scala/devices/tilelink/Plic.scala	/^case class PLICParams(baseAddress: BigInt = 0xC000000, maxPriorities: Int = 7, intStages: Int = 0, maxHarts: Int = PLICConsts.maxMaxHarts)$/;"	c
PLRUTest	src/main/scala/util/Replacement.scala	/^class PLRUTest(n_ways: Int, timeout: Int = 500) extends UnitTest(timeout) {$/;"	c
PLRUUnitTestConfig	src/main/scala/unittest/Configs.scala	/^class PLRUUnitTestConfig extends Config(new WithPLRUTests)$/;"	c
PMP	src/main/scala/rocket/PMP.scala	/^class PMP(implicit p: Parameters) extends PMPReg {$/;"	c
PMP	src/main/scala/rocket/PMP.scala	/^object PMP {$/;"	c
PMPChecker	src/main/scala/rocket/PMP.scala	/^class PMPChecker(lgMaxSize: Int)(implicit val p: Parameters) extends Module$/;"	c
PMPConfig	src/main/scala/rocket/PMP.scala	/^class PMPConfig extends Bundle {$/;"	c
PMPHomogeneityChecker	src/main/scala/rocket/PMP.scala	/^class PMPHomogeneityChecker(pmps: Seq[PMP])(implicit p: Parameters) {$/;"	c
PMPInitialValue	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^case class PMPInitialValue(address: BigInt = 0, l: Boolean = false, a: Boolean = false, r: Boolean = false, w: Boolean = false)$/;"	c
PMPInitialValueInt	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^case class PMPInitialValueInt(addr_hi: BigInt = 0, l: Int, a: Int, r: Int, w: Int)$/;"	c
PMPReg	src/main/scala/rocket/PMP.scala	/^class PMPReg(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
PRCIClockGroupNode	src/main/scala/prci/ClockGroup.scala	/^case class PRCIClockGroupNode()(implicit valName: ValName)$/;"	c
PREFETCH_READ	src/main/scala/tilelink/Bundles.scala	/^  def PREFETCH_READ  = UInt(0, width)$/;"	m
PREFETCH_WRITE	src/main/scala/tilelink/Bundles.scala	/^  def PREFETCH_WRITE = UInt(1, width)$/;"	m
PROGBUF	src/main/scala/devices/debug/Debug.scala	/^  def PROGBUF(cfg:DebugModuleParams) = {$/;"	m
PROGBUF0Fields	src/main/scala/devices/debug/dm_registers.scala	/^class PROGBUF0Fields extends Bundle {$/;"	c
PROGRAMS	scripts/Makefile	/^PROGRAMS := $(CXXSRCS)$/;"	m
PROJECT	regression/Makefile	/^PROJECT=freechips.rocketchip.system$/;"	m
PROJECT	regression/Makefile	/^PROJECT=freechips.rocketchip.unittest$/;"	m
PROT_BUFFERABLE	src/main/scala/amba/ahb/Protocol.scala	/^  def PROT_BUFFERABLE  = UInt(4, width = protBits)$/;"	m
PROT_CACHEABLE	src/main/scala/amba/ahb/Protocol.scala	/^  def PROT_CACHEABLE   = UInt(8, width = protBits)$/;"	m
PROT_DATA	src/main/scala/amba/ahb/Protocol.scala	/^  def PROT_DATA        = UInt(1, width = protBits)$/;"	m
PROT_DEFAULT	src/main/scala/amba/ahb/Protocol.scala	/^  def PROT_DEFAULT = PROT_DATA | PROT_PRIVILEDGED$/;"	m
PROT_DEFAULT	src/main/scala/amba/apb/Protocol.scala	/^  def PROT_DEFAULT = PROT_PRIVILEDGED$/;"	m
PROT_INSECURE	src/main/scala/amba/axi4/Protocol.scala	/^  def PROT_INSECURE    = UInt(2, width = protBits)$/;"	m
PROT_INSTRUCTION	src/main/scala/amba/apb/Protocol.scala	/^  def PROT_INSTRUCTION = UInt(4, width = protBits)$/;"	m
PROT_INSTRUCTION	src/main/scala/amba/axi4/Protocol.scala	/^  def PROT_INSTRUCTION = UInt(4, width = protBits)$/;"	m
PROT_NONSECURE	src/main/scala/amba/apb/Protocol.scala	/^  def PROT_NONSECURE   = UInt(2, width = protBits)$/;"	m
PROT_PRIVILEDGED	src/main/scala/amba/ahb/Protocol.scala	/^  def PROT_PRIVILEDGED = UInt(2, width = protBits)$/;"	m
PROT_PRIVILEDGED	src/main/scala/amba/apb/Protocol.scala	/^  def PROT_PRIVILEDGED = UInt(1, width = protBits)$/;"	m
PROT_PRIVILEDGED	src/main/scala/amba/axi4/Protocol.scala	/^  def PROT_PRIVILEDGED = UInt(1, width = protBits)$/;"	m
PRV	src/main/scala/rocket/CSR.scala	/^object PRV$/;"	c
PSDIO	src/main/scala/devices/debug/Periphery.scala	/^class PSDIO(implicit val p: Parameters) extends Bundle with CanHavePSDTestModeIO {$/;"	c
PSDTestMode	src/main/scala/util/PSDTestMode.scala	/^class PSDTestMode extends Bundle {$/;"	c
PSDTestModeBroadcastKey	src/main/scala/util/PSDTestMode.scala	/^case object PSDTestModeBroadcastKey extends Field($/;"	c
PTBR	src/main/scala/rocket/CSR.scala	/^class PTBR(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
PTE	src/main/scala/rocket/PTW.scala	/^class PTE(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
PTW	src/main/scala/rocket/PTW.scala	/^class PTW(n: Int)(implicit edge: TLEdgeOut, p: Parameters) extends CoreModule()(p) {$/;"	c
PTWPerfEvents	src/main/scala/rocket/PTW.scala	/^class PTWPerfEvents extends Bundle {$/;"	c
PTWReq	src/main/scala/rocket/PTW.scala	/^class PTWReq(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
PTWResp	src/main/scala/rocket/PTW.scala	/^class PTWResp(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
PUT_BEAT_RE	scripts/check_comparator_trace.py	/^PUT_BEAT_RE = re.compile($/;"	v
PUT_BLOCK_RE	scripts/check_comparator_trace.py	/^PUT_BLOCK_RE = re.compile($/;"	v
PUT_EFFECTS	src/main/scala/diplomacy/Parameters.scala	/^  case object PUT_EFFECTS extends T \/\/ puts produce side effects and so must not be combined\/delayed$/;"	c
ParameterizedBundle	src/main/scala/util/Misc.scala	/^class ParameterizedBundle(implicit p: Parameters) extends Bundle$/;"	c
ParamsAnnotation	src/main/scala/util/Annotations.scala	/^case class ParamsAnnotation(target: Named, paramsClassName: String, params: Map[String,Any]) extends SingleTargetAnnotation[Named] {$/;"	c
ParamsChiselAnnotation	src/main/scala/util/Annotations.scala	/^case class ParamsChiselAnnotation[T <: Product](target: InstanceId, params: T) extends ChiselAnnotation {$/;"	c
ParityCode	src/main/scala/util/ECC.scala	/^class ParityCode extends Code$/;"	c
Partition	src/main/scala/diplomacy/AddressDecoder.scala	/^  type Partition = Ports$/;"	T
Partitions	src/main/scala/diplomacy/AddressDecoder.scala	/^  type Partitions = Seq[Partition]$/;"	T
Pattern	src/main/scala/tilelink/PatternPusher.scala	/^trait Pattern {$/;"	t
PauseDR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object PauseDR extends State(3)  \/\/ pause DR shifting$/;"	c
PauseIR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object PauseIR extends State(11)  \/\/ pause IR shifting$/;"	c
PerfCounterIO	src/main/scala/rocket/CSR.scala	/^class PerfCounterIO(implicit p: Parameters) extends CoreBundle$/;"	c
PerformanceMonitor	src/main/scala/diplomaticobjectmodel/model/OMPerformanceMonitor.scala	/^object PerformanceMonitor {$/;"	c
PeripheralPort	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class PeripheralPort($/;"	c
PeripheralPortType	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object PeripheralPortType extends PortType$/;"	c
PeripheryBus	src/main/scala/subsystem/PeripheryBus.scala	/^class PeripheryBus(params: PeripheryBusParams, name: String)(implicit p: Parameters)$/;"	c
PeripheryBusKey	src/main/scala/subsystem/BusTopology.scala	/^case object PeripheryBusKey extends Field[PeripheryBusParams]$/;"	c
PeripheryBusParams	src/main/scala/subsystem/PeripheryBus.scala	/^case class PeripheryBusParams($/;"	c
PermMsgCap	src/main/scala/tilelink/Bundles.scala	/^  def PermMsgCap:Seq[String] = Seq("Cap toT", "Cap toB", "Cap toN")$/;"	m
PermMsgGrow	src/main/scala/tilelink/Bundles.scala	/^  def PermMsgGrow:Seq[String] = Seq("Grow NtoB", "Grow NtoT", "Grow BtoT")$/;"	m
PermMsgReport	src/main/scala/tilelink/Bundles.scala	/^  def PermMsgReport:Seq[String] = Seq("Shrink TtoB", "Shrink TtoN", "Shrink BtoN", "Report TotT", "Report BtoB", "Report NtoN")$/;"	m
PermMsgReserved	src/main/scala/tilelink/Bundles.scala	/^  def PermMsgReserved:Seq[String] = Seq("Reserved")$/;"	m
PgLevels	src/main/scala/rocket/TLB.scala	/^case object PgLevels extends Field[Int](2)$/;"	c
PhysicalFilter	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^class PhysicalFilter(params: PhysicalFilterParams)(implicit p: Parameters) extends LazyModule$/;"	c
PhysicalFilterParams	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^case class PhysicalFilterParams($/;"	c
Pipe	src/main/scala/tile/FPU.scala	/^  case class Pipe(p: Module, lat: Int, cond: (FPUCtrlSigs) => Bool, res: FPResult)$/;"	c
PipelinedMultiplier	src/main/scala/rocket/Multiplier.scala	/^class PipelinedMultiplier(width: Int, latency: Int, nXpr: Int = 32) extends Module with ShouldBeRetimed {$/;"	c
PlusArg	src/main/scala/util/PlusArg.scala	/^object PlusArg$/;"	c
PlusArgArtefacts	src/main/scala/util/PlusArg.scala	/^object PlusArgArtefacts {$/;"	c
PlusArgContainer	src/main/scala/util/PlusArg.scala	/^private case class PlusArgContainer[A](default: Option[A], docstring: String, doctype: String)$/;"	c
PlusArgInfo	src/main/scala/util/PlusArg.scala	/^case class PlusArgInfo(default: BigInt, docstring: String)$/;"	c
PlusArgTimeout	src/main/scala/util/PlusArg.scala	/^class PlusArgTimeout(val format: String, val default: BigInt, val docstring: String, val width: Int) extends Module {$/;"	c
Policy	src/main/scala/tilelink/Arbiter.scala	/^  type Policy = (Integer, UInt, Bool) => UInt$/;"	T
Policy	src/main/scala/tilelink/FIFOFixer.scala	/^  type Policy = TLSlaveParameters => Boolean$/;"	T
PopCountAtLeast	src/main/scala/util/Misc.scala	/^object PopCountAtLeast {$/;"	c
Port	src/main/scala/diplomacy/AddressDecoder.scala	/^  type Port = Seq[AddressSet]$/;"	T
PortType	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^sealed trait PortType extends OMEnum$/;"	t
Ports	src/main/scala/diplomacy/AddressDecoder.scala	/^  type Ports = Seq[Port]$/;"	T
PositionedQueueTest	src/main/scala/util/LanePositionedQueue.scala	/^class PositionedQueueTest(queueFactory: LanePositionedQueue, lanes: Int, rows: Int, rewind: Boolean, abort: Boolean, cycles: Int, timeout: Int = 500000) extends UnitTest(timeout) {$/;"	c
Pow2ClockDivider	src/main/scala/util/ClockDivider.scala	/^class Pow2ClockDivider(pow2: Int) extends Module {$/;"	c
Pow2ClockDivider	src/main/scala/util/ClockDivider.scala	/^object Pow2ClockDivider {$/;"	c
PowerQueueTestConfig	src/main/scala/unittest/Configs.scala	/^class PowerQueueTestConfig extends Config(new WithPowerQueueTests)$/;"	c
PreElaboration	src/main/scala/stage/phases/PreElaboration.scala	/^class PreElaboration extends Phase with PreservesAll[Phase] with HasRocketChipStageUtils {$/;"	c
PrefixSum	src/main/scala/util/PrefixSum.scala	/^trait PrefixSum {$/;"	t
PriorityMuxHartIdFromSeq	src/main/scala/tile/LookupByHartId.scala	/^case class PriorityMuxHartIdFromSeq(seq: Seq[TileParams]) extends LookupByHartIdImpl {$/;"	c
PrivilegedArchitectureExtension	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^sealed trait PrivilegedArchitectureExtension extends OMEnum$/;"	t
PrivilegedArchitectureExtensions	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^object PrivilegedArchitectureExtensions {$/;"	c
Probe	src/main/scala/tilelink/Bundles.scala	/^  def Probe          = UInt(6) \/\/          .                   => ProbeAck[Data]$/;"	m
Probe	src/main/scala/tilelink/Edges.scala	/^  def Probe(fromAddress: UInt, toSource: UInt, lgSize: UInt, capPermissions: UInt) = {$/;"	m
ProbeAck	src/main/scala/tilelink/Bundles.scala	/^  def ProbeAck       = UInt(4) \/\/               .$/;"	m
ProbeAck	src/main/scala/tilelink/Edges.scala	/^  def ProbeAck(b: TLBundleB, reportPermissions: UInt): TLBundleC =$/;"	m
ProbeAck	src/main/scala/tilelink/Edges.scala	/^  def ProbeAck(b: TLBundleB, reportPermissions: UInt, data: UInt): TLBundleC =$/;"	m
ProbeAck	src/main/scala/tilelink/Edges.scala	/^  def ProbeAck(fromSource: UInt, toAddress: UInt, lgSize: UInt, reportPermissions: UInt): TLBundleC = {$/;"	m
ProbeAck	src/main/scala/tilelink/Edges.scala	/^  def ProbeAck(fromSource: UInt, toAddress: UInt, lgSize: UInt, reportPermissions: UInt, data: UInt): TLBundleC =$/;"	m
ProbeAck	src/main/scala/tilelink/Edges.scala	/^  def ProbeAck(fromSource: UInt, toAddress: UInt, lgSize: UInt, reportPermissions: UInt, data: UInt, corrupt: Bool): TLBundleC = {$/;"	m
ProbeAckData	src/main/scala/tilelink/Bundles.scala	/^  def ProbeAckData   = UInt(5) \/\/               .$/;"	m
ProbeFilter	src/main/scala/tilelink/Broadcast.scala	/^abstract class ProbeFilter(val params: ProbeFilterParams) extends MultiIOModule {$/;"	c
ProbeFilterFactory	src/main/scala/tilelink/Broadcast.scala	/^  type ProbeFilterFactory = ProbeFilterParams => ProbeFilter$/;"	T
ProbeFilterIO	src/main/scala/tilelink/Broadcast.scala	/^class ProbeFilterIO(val params: ProbeFilterParams) extends Bundle {$/;"	c
ProbeFilterParams	src/main/scala/tilelink/Broadcast.scala	/^case class ProbeFilterParams(mshrs: Int, caches: Int, maxAddress: BigInt, addressMask: BigInt)$/;"	c
ProbeFilterRelease	src/main/scala/tilelink/Broadcast.scala	/^class ProbeFilterRelease(val params: ProbeFilterParams) extends Bundle {$/;"	c
ProbeFilterRequest	src/main/scala/tilelink/Broadcast.scala	/^class ProbeFilterRequest(val params: ProbeFilterParams) extends Bundle {$/;"	c
ProbeFilterResponse	src/main/scala/tilelink/Broadcast.scala	/^class ProbeFilterResponse(params: ProbeFilterParams) extends ProbeFilterRequest(params) {$/;"	c
ProbeFilterUpdate	src/main/scala/tilelink/Broadcast.scala	/^class ProbeFilterUpdate(val params: ProbeFilterParams) extends Bundle {$/;"	c
ProbePicker	src/main/scala/tilelink/ProbePicker.scala	/^class ProbePicker(implicit p: Parameters) extends LazyModule$/;"	c
ProbePicker	src/main/scala/tilelink/ProbePicker.scala	/^object ProbePicker$/;"	c
ProbeTrackInfo	src/main/scala/tilelink/Broadcast.scala	/^class ProbeTrackInfo(val caches: Int) extends Bundle {$/;"	c
ProbeUnit	src/main/scala/rocket/NBDcache.scala	/^class ProbeUnit(implicit edge: TLEdgeOut, p: Parameters) extends L1HellaCacheModule()(p) {$/;"	c
Property	src/main/scala/formal/FormalUtils.scala	/^object Property {$/;"	c
PropertyClass	src/main/scala/formal/FormalUtils.scala	/^object PropertyClass {$/;"	c
PropertyClass	src/main/scala/formal/FormalUtils.scala	/^sealed abstract class PropertyClass(name: String) {$/;"	c
PropertyMap	src/main/scala/diplomacy/package.scala	/^  type PropertyMap = Iterable[(String, Seq[ResourceValue])]$/;"	T
PropertyOption	src/main/scala/diplomacy/package.scala	/^  type PropertyOption = Option[(String, Seq[ResourceValue])]$/;"	T
PropertyType	src/main/scala/util/Property.scala	/^object PropertyType {$/;"	c
PropertyType	src/main/scala/util/Property.scala	/^sealed abstract class PropertyType(name: String) {$/;"	c
ProtocolType	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^sealed trait ProtocolType extends OMEnum$/;"	t
PseudoLRU	src/main/scala/util/Replacement.scala	/^class PseudoLRU(n_ways: Int) extends ReplacementPolicy {$/;"	c
Put	src/main/scala/tilelink/Edges.scala	/^  def Put(fromAddress: UInt, toSource: UInt, lgSize: UInt, data: UInt): (Bool, TLBundleB) =$/;"	m
Put	src/main/scala/tilelink/Edges.scala	/^  def Put(fromAddress: UInt, toSource: UInt, lgSize: UInt, data: UInt, corrupt: Bool): (Bool, TLBundleB) = {$/;"	m
Put	src/main/scala/tilelink/Edges.scala	/^  def Put(fromAddress: UInt, toSource: UInt, lgSize: UInt, data: UInt, mask: UInt): (Bool, TLBundleB) =$/;"	m
Put	src/main/scala/tilelink/Edges.scala	/^  def Put(fromAddress: UInt, toSource: UInt, lgSize: UInt, data: UInt, mask: UInt, corrupt: Bool): (Bool, TLBundleB) = {$/;"	m
Put	src/main/scala/tilelink/Edges.scala	/^  def Put(fromSource: UInt, toAddress: UInt, lgSize: UInt, data: UInt): (Bool, TLBundleA) =$/;"	m
Put	src/main/scala/tilelink/Edges.scala	/^  def Put(fromSource: UInt, toAddress: UInt, lgSize: UInt, data: UInt, corrupt: Bool): (Bool, TLBundleA) = {$/;"	m
Put	src/main/scala/tilelink/Edges.scala	/^  def Put(fromSource: UInt, toAddress: UInt, lgSize: UInt, data: UInt, mask: UInt): (Bool, TLBundleA) =$/;"	m
Put	src/main/scala/tilelink/Edges.scala	/^  def Put(fromSource: UInt, toAddress: UInt, lgSize: UInt, data: UInt, mask: UInt, corrupt: Bool): (Bool, TLBundleA) = {$/;"	m
PutFullData	src/main/scala/tilelink/Bundles.scala	/^  def PutFullData    = UInt(0) \/\/     .    .                   => AccessAck$/;"	m
PutFulls	src/main/scala/tilelink/Fragmenter.scala	/^  case object PutFulls extends T$/;"	c
PutPartialData	src/main/scala/tilelink/Bundles.scala	/^  def PutPartialData = UInt(1) \/\/     .    .                   => AccessAck$/;"	m
QUICK_ACCESSFields	src/main/scala/devices/debug/abstract_commands.scala	/^class QUICK_ACCESSFields extends Bundle {$/;"	c
QuadChannelBenchmarkConfig	src/main/scala/system/Configs.scala	/^class QuadChannelBenchmarkConfig extends Config(new WithNMemoryChannels(4) ++ new SingleChannelBenchmarkConfig)$/;"	c
QueueChannel	src/main/scala/groundtest/DummyPTW.scala	/^  class QueueChannel extends ParameterizedBundle()(p) {$/;"	c
R	src/main/scala/diplomaticobjectmodel/model/OMRegFieldAccessType.scala	/^case object R  extends OMRegFieldAccessType$/;"	c
R	src/main/scala/regmapper/RegFieldDesc.scala	/^  val R, W, RW = Value$/;"	l
R	src/main/scala/rocket/CSR.scala	/^  def R = UInt(2,SZ)$/;"	m
RANDOMIZE	src/main/resources/vsrc/AsyncResetReg.v	/^`define RANDOMIZE$/;"	c
RAS	src/main/scala/rocket/BTB.scala	/^class RAS(nras: Int) {$/;"	c
RASUpdate	src/main/scala/rocket/BTB.scala	/^class RASUpdate(implicit p: Parameters) extends BtbBundle()(p) {$/;"	c
RDCYCLE	src/main/scala/rocket/Instructions.scala	/^  def RDCYCLE            = BitPat("b11000000000000000010?????1110011")$/;"	m
RDCYCLEH	src/main/scala/rocket/Instructions.scala	/^  def RDCYCLEH           = BitPat("b11001000000000000010?????1110011")$/;"	m
RDINSTRET	src/main/scala/rocket/Instructions.scala	/^  def RDINSTRET          = BitPat("b11000000001000000010?????1110011")$/;"	m
RDINSTRETH	src/main/scala/rocket/Instructions.scala	/^  def RDINSTRETH         = BitPat("b11001000001000000010?????1110011")$/;"	m
RDTIME	src/main/scala/rocket/Instructions.scala	/^  def RDTIME             = BitPat("b11000000000100000010?????1110011")$/;"	m
RDTIMEH	src/main/scala/rocket/Instructions.scala	/^  def RDTIMEH            = BitPat("b11001000000100000010?????1110011")$/;"	m
REM	src/main/scala/rocket/Instructions.scala	/^  def REM                = BitPat("b0000001??????????110?????0110011")$/;"	m
REMOTE_BITBANG_H	src/main/resources/csrc/remote_bitbang.h	4;"	d
REMU	src/main/scala/rocket/Instructions.scala	/^  def REMU               = BitPat("b0000001??????????111?????0110011")$/;"	m
REMUW	src/main/scala/rocket/Instructions.scala	/^  def REMUW              = BitPat("b0000001??????????111?????0111011")$/;"	m
REMW	src/main/scala/rocket/Instructions.scala	/^  def REMW               = BitPat("b0000001??????????110?????0111011")$/;"	m
RESET_DELAY	src/main/resources/vsrc/TestDriver.v	/^ `define RESET_DELAY 777.7$/;"	c
RESET_VALUE	src/main/resources/vsrc/AsyncResetReg.v	/^parameter RESET_VALUE = 0;$/;"	c
RESP_DECERR	src/main/scala/amba/axi4/Protocol.scala	/^  def RESP_DECERR = UInt(3, width = respBits)$/;"	m
RESP_ERROR	src/main/scala/amba/ahb/Protocol.scala	/^  def RESP_ERROR = UInt(1, width=2)$/;"	m
RESP_EXOKAY	src/main/scala/amba/axi4/Protocol.scala	/^  def RESP_EXOKAY = UInt(1, width = respBits)$/;"	m
RESP_OKAY	src/main/scala/amba/ahb/Protocol.scala	/^  def RESP_OKAY  = UInt(0, width=2)$/;"	m
RESP_OKAY	src/main/scala/amba/axi4/Protocol.scala	/^  def RESP_OKAY   = UInt(0, width = respBits)$/;"	m
RESP_RETRY	src/main/scala/amba/ahb/Protocol.scala	/^  def RESP_RETRY = UInt(2, width=2)$/;"	m
RESP_SLVERR	src/main/scala/amba/axi4/Protocol.scala	/^  def RESP_SLVERR = UInt(2, width = respBits)$/;"	m
RESP_SPLIT	src/main/scala/amba/ahb/Protocol.scala	/^  def RESP_SPLIT = UInt(3, width=2)$/;"	m
RESUMING	scripts/debug_rom/debug_rom.S	/^#define RESUMING  0x108$/;"	d
RESUMING	scripts/debug_rom/debug_rom_nonzero.S	/^#define RESUMING  -0x6F8  \/\/ 0x108$/;"	d
RESUMING	src/main/scala/devices/debug/Debug.scala	/^  def RESUMING     = 0x108$/;"	m
REV	src/main/scala/rocket/Instructions.scala	/^  def REV                = BitPat("b011010111111?????101?????0010011")$/;"	m
REV8	src/main/scala/rocket/Instructions.scala	/^  def REV8               = BitPat("b011010111000?????101?????0010011")$/;"	m
REV8_RV32	src/main/scala/rocket/Instructions.scala	/^  def REV8_RV32          = BitPat("b011010011000?????101?????0010011")$/;"	m
REV_RV32	src/main/scala/rocket/Instructions.scala	/^  def REV_RV32           = BitPat("b011010011111?????101?????0010011")$/;"	m
RFRA_CLEAR	src/main/scala/diplomaticobjectmodel/model/OMRegFieldRdAction.scala	/^case object RFRA_CLEAR  extends OMRegFieldRdAction$/;"	c
RFRA_MODIFY	src/main/scala/diplomaticobjectmodel/model/OMRegFieldRdAction.scala	/^case object RFRA_MODIFY extends OMRegFieldRdAction$/;"	c
RFRA_SET	src/main/scala/diplomaticobjectmodel/model/OMRegFieldRdAction.scala	/^case object RFRA_SET    extends OMRegFieldRdAction$/;"	c
RFWT_CLEAR	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^case object RFWT_CLEAR          extends OMRegFieldWrType$/;"	c
RFWT_MODIFY	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^case object RFWT_MODIFY         extends OMRegFieldWrType$/;"	c
RFWT_ONE_TO_CLEAR	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^case object RFWT_ONE_TO_CLEAR   extends OMRegFieldWrType$/;"	c
RFWT_ONE_TO_SET	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^case object RFWT_ONE_TO_SET     extends OMRegFieldWrType$/;"	c
RFWT_ONE_TO_TOGGLE	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^case object RFWT_ONE_TO_TOGGLE  extends OMRegFieldWrType$/;"	c
RFWT_SET	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^case object RFWT_SET            extends OMRegFieldWrType$/;"	c
RFWT_ZERO_TO_CLEAR	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^case object RFWT_ZERO_TO_CLEAR  extends OMRegFieldWrType$/;"	c
RFWT_ZERO_TO_SET	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^case object RFWT_ZERO_TO_SET    extends OMRegFieldWrType$/;"	c
RFWT_ZERO_TO_TOGGLE	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^case object RFWT_ZERO_TO_TOGGLE extends OMRegFieldWrType$/;"	c
RISCV	regression/Makefile	/^RISCV ?= install\/$(TOOLS_HASH)$/;"	m
RISCV_TOOLS	regression/Makefile	/^RISCV_TOOLS = $(abspath $(TOP))\/rocket-tools$/;"	m
RM_SZ	src/main/scala/tile/FPU.scala	/^  val RM_SZ = 3$/;"	l
ROL	src/main/scala/rocket/Instructions.scala	/^  def ROL                = BitPat("b0110000??????????001?????0110011")$/;"	m
ROLW	src/main/scala/rocket/Instructions.scala	/^  def ROLW               = BitPat("b0110000??????????001?????0111011")$/;"	m
ROMBASE	src/main/scala/devices/debug/Debug.scala	/^  def ROMBASE      = 0x800$/;"	m
ROMConfig	src/main/scala/util/ROMGenerator.scala	/^case class ROMConfig(name: String, depth: Int, width: Int)$/;"	c
ROMGenerator	src/main/scala/util/ROMGenerator.scala	/^object ROMGenerator {$/;"	c
ROMParameters	scripts/vlsi_rom_gen	/^ROMParameters = namedtuple('ROMParameters', ['name', 'depth', 'width'])$/;"	v
ROR	src/main/scala/rocket/Instructions.scala	/^  def ROR                = BitPat("b0110000??????????101?????0110011")$/;"	m
RORI	src/main/scala/rocket/Instructions.scala	/^  def RORI               = BitPat("b011000???????????101?????0010011")$/;"	m
RORIW	src/main/scala/rocket/Instructions.scala	/^  def RORIW              = BitPat("b0110000??????????101?????0011011")$/;"	m
RORI_RV32	src/main/scala/rocket/Instructions.scala	/^  def RORI_RV32          = BitPat("b0110000??????????101?????0010011")$/;"	m
RORW	src/main/scala/rocket/Instructions.scala	/^  def RORW               = BitPat("b0110000??????????101?????0111011")$/;"	m
RRTest0	src/main/scala/regmapper/Test.scala	/^abstract class RRTest0(address: BigInt)(implicit p: Parameters)$/;"	c
RRTest0Map	src/main/scala/regmapper/Test.scala	/^object RRTest0Map$/;"	c
RRTest1	src/main/scala/regmapper/Test.scala	/^abstract class RRTest1(address: BigInt, concurrency: Int, undefZero: Boolean = true)(implicit p: Parameters)$/;"	c
RRTest1Map	src/main/scala/regmapper/Test.scala	/^object RRTest1Map$/;"	c
RRTestCombinational	src/main/scala/regmapper/Test.scala	/^class RRTestCombinational(val bits: Int, rvalid: Bool => Bool, wready: Bool => Bool) extends Module$/;"	c
RRTestCombinational	src/main/scala/regmapper/Test.scala	/^object RRTestCombinational$/;"	c
RRTestRequest	src/main/scala/regmapper/Test.scala	/^class RRTestRequest(val bits: Int,$/;"	c
RRTestRequest	src/main/scala/regmapper/Test.scala	/^object RRTestRequest$/;"	c
RTLComponent	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^trait RTLComponent extends OMCompoundType$/;"	t
RV128I	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object RV128I extends OMBaseInstructionSet$/;"	c
RV32E	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object RV32E extends OMBaseInstructionSet$/;"	c
RV32I	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object RV32I extends OMBaseInstructionSet$/;"	c
RV64E	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object RV64E extends OMBaseInstructionSet$/;"	c
RV64I	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object RV64I extends OMBaseInstructionSet$/;"	c
RVCDecoder	src/main/scala/rocket/RVC.scala	/^class RVCDecoder(x: UInt, xLen: Int) {$/;"	c
RVCExpander	src/main/scala/rocket/RVC.scala	/^class RVCExpander(implicit val p: Parameters) extends Module with HasCoreParameters {$/;"	c
RW	src/main/scala/diplomaticobjectmodel/model/OMRegFieldAccessType.scala	/^case object RW extends OMRegFieldAccessType$/;"	c
RWNotify	src/main/scala/devices/debug/Debug.scala	/^object RWNotify {$/;"	c
Random	src/main/scala/util/Misc.scala	/^object Random$/;"	c
RandomReplacement	src/main/scala/util/Replacement.scala	/^class RandomReplacement(n_ways: Int) extends ReplacementPolicy {$/;"	c
RationalCrossing	src/main/scala/diplomacy/ClockDomain.scala	/^case class RationalCrossing(direction: RationalDirection = FastToSlow) extends ClockCrossingType$/;"	c
RationalCrossingFull	src/main/scala/util/RationalCrossing.scala	/^class RationalCrossingFull[T <: Data](gen: T, direction: RationalDirection = Symmetric) extends Module$/;"	c
RationalCrossingSink	src/main/scala/util/RationalCrossing.scala	/^class RationalCrossingSink[T <: Data](gen: T, direction: RationalDirection = Symmetric) extends Module$/;"	c
RationalCrossingSource	src/main/scala/util/RationalCrossing.scala	/^class RationalCrossingSource[T <: Data](gen: T, direction: RationalDirection = Symmetric) extends Module$/;"	c
RationalDirection	src/main/scala/util/RationalCrossing.scala	/^sealed trait RationalDirection {$/;"	t
RationalIO	src/main/scala/util/RationalCrossing.scala	/^final class RationalIO[T <: Data](gen: T) extends Bundle$/;"	c
RationalIO	src/main/scala/util/RationalCrossing.scala	/^object RationalIO$/;"	c
ReadExpectPattern	src/main/scala/tilelink/PatternPusher.scala	/^case class ReadExpectPattern(address: BigInt, size: Int, data: BigInt) extends Pattern$/;"	c
ReadPattern	src/main/scala/tilelink/PatternPusher.scala	/^case class ReadPattern(address: BigInt, size: Int) extends Pattern$/;"	c
ReadyValidCancel	src/main/scala/util/ReadyValidCancel.scala	/^class ReadyValidCancel[+T <: Data](gen: T) extends ValidCancel(gen)$/;"	c
ReadyValidCancel	src/main/scala/util/ReadyValidCancel.scala	/^object ReadyValidCancel {$/;"	c
ReadyValidCancelArbiter	src/main/scala/util/ReadyValidCancel.scala	/^class ReadyValidCancelArbiter[T <: Data](gen: T, n: Int)$/;"	c
ReadyValidCancelRRArbiter	src/main/scala/util/ReadyValidCancel.scala	/^class ReadyValidCancelRRArbiter[T <: Data](gen: T, n: Int, rr: Boolean) extends Module {$/;"	c
Receiver	src/main/scala/formal/FormalUtils.scala	/^  object Receiver extends MonitorDirection("Receiver") { override def flip: MonitorDirection = Driver }$/;"	c
RecordMap	src/main/scala/util/RecordMap.scala	/^final class RecordMap[T <: Data] private (eltMap: ListMap[String, T])$/;"	c
RecordMap	src/main/scala/util/RecordMap.scala	/^object RecordMap {$/;"	c
ReduceOthers	src/main/scala/util/ReduceOthers.scala	/^object ReduceOthers {$/;"	c
ReferencePathToken	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^case class ReferencePathToken(target: ReferenceTarget) extends Token {$/;"	c
RegField	src/main/scala/regmapper/RegField.scala	/^case class RegField(width: Int, read: RegReadFn, write: RegWriteFn, desc: Option[RegFieldDesc])$/;"	c
RegField	src/main/scala/regmapper/RegField.scala	/^object RegField$/;"	c
RegFieldAccessType	src/main/scala/regmapper/RegFieldDesc.scala	/^  type RegFieldAccessType = Value$/;"	T
RegFieldAccessType	src/main/scala/regmapper/RegFieldDesc.scala	/^object RegFieldAccessType extends scala.Enumeration {$/;"	c
RegFieldAddressBlock	src/main/scala/regmapper/RegFieldDesc.scala	/^object RegFieldAddressBlock {$/;"	c
RegFieldDesc	src/main/scala/regmapper/RegFieldDesc.scala	/^case class RegFieldDesc ($/;"	c
RegFieldDesc	src/main/scala/regmapper/RegFieldDesc.scala	/^object RegFieldDesc {$/;"	c
RegFieldDescMappingAnnotation	src/main/scala/util/Annotations.scala	/^case class RegFieldDescMappingAnnotation($/;"	c
RegFieldDescSer	src/main/scala/regmapper/Annotation.scala	/^case class RegFieldDescSer($/;"	c
RegFieldGroup	src/main/scala/regmapper/RegFieldDesc.scala	/^object RegFieldGroup {$/;"	c
RegFieldRdAction	src/main/scala/regmapper/RegFieldDesc.scala	/^  type RegFieldRdAction = Value$/;"	T
RegFieldRdAction	src/main/scala/regmapper/RegFieldDesc.scala	/^object RegFieldRdAction extends scala.Enumeration {$/;"	c
RegFieldWrType	src/main/scala/regmapper/RegFieldDesc.scala	/^  type RegFieldWrType = Value$/;"	T
RegFieldWrType	src/main/scala/regmapper/RegFieldDesc.scala	/^object RegFieldWrType extends scala.Enumeration {$/;"	c
RegFile	src/main/scala/rocket/RocketCore.scala	/^class RegFile(n: Int, w: Int, zero: Boolean = false) {$/;"	c
RegMapper	src/main/scala/regmapper/RegMapper.scala	/^object RegMapper$/;"	c
RegMapperInput	src/main/scala/regmapper/RegMapper.scala	/^class RegMapperInput(val params: RegMapperParams) extends Bundle$/;"	c
RegMapperOutput	src/main/scala/regmapper/RegMapper.scala	/^class RegMapperOutput(val params: RegMapperParams) extends Bundle$/;"	c
RegMapperParams	src/main/scala/regmapper/RegMapper.scala	/^case class RegMapperParams(indexBits: Int, maskBits: Int, extraFields: Seq[BundleFieldBase] = Nil)$/;"	c
RegReadFn	src/main/scala/regmapper/RegField.scala	/^case class RegReadFn private(combinational: Boolean, fn: (Bool, Bool) => (Bool, Bool, UInt))$/;"	c
RegReadFn	src/main/scala/regmapper/RegField.scala	/^object RegReadFn$/;"	c
RegWriteFn	src/main/scala/regmapper/RegField.scala	/^case class RegWriteFn private(combinational: Boolean, fn: (Bool, Bool, UInt) => (Bool, Bool))$/;"	c
RegWriteFn	src/main/scala/regmapper/RegField.scala	/^object RegWriteFn$/;"	c
RegionReplicator	src/main/scala/tilelink/RegionReplication.scala	/^class RegionReplicator(val params: ReplicatedRegion)(implicit p: Parameters) extends LazyModule {$/;"	c
RegionType	src/main/scala/diplomacy/Parameters.scala	/^object RegionType {$/;"	c
RegisterCrossingAssertion	src/main/scala/regmapper/RegisterCrossing.scala	/^class RegisterCrossingAssertion extends Module {$/;"	c
RegisterReadCrossing	src/main/scala/regmapper/RegisterCrossing.scala	/^class RegisterReadCrossing[T <: Data](gen: T, sync: Int = 3) extends Module {$/;"	c
RegisterReadCrossingIO	src/main/scala/regmapper/RegisterCrossing.scala	/^class RegisterReadCrossingIO[T <: Data](gen: T) extends Bundle {$/;"	c
RegisterReadIO	src/main/scala/regmapper/RegisterCrossing.scala	/^class RegisterReadIO[T <: Data](gen: T) extends Bundle {$/;"	c
RegisterRouter	src/main/scala/regmapper/RegisterRouter.scala	/^abstract class RegisterRouter(devParams: RegisterRouterParams)(implicit p: Parameters)$/;"	c
RegisterRouterParams	src/main/scala/regmapper/RegisterRouter.scala	/^case class RegisterRouterParams($/;"	c
RegisterWriteCrossing	src/main/scala/regmapper/RegisterCrossing.scala	/^class RegisterWriteCrossing[T <: Data](gen: T, sync: Int = 3) extends Module {$/;"	c
RegisterWriteCrossingIO	src/main/scala/regmapper/RegisterCrossing.scala	/^class RegisterWriteCrossingIO[T <: Data](gen: T) extends Bundle {$/;"	c
RegisterWriteIO	src/main/scala/regmapper/RegisterCrossing.scala	/^class RegisterWriteIO[T <: Data](gen: T) extends Bundle {$/;"	c
RegistersSer	src/main/scala/regmapper/Annotation.scala	/^case class RegistersSer($/;"	c
RegressionTestSuite	src/main/scala/system/RocketTestSuite.scala	/^class RegressionTestSuite(val names: LinkedHashSet[String]) extends RocketTestSuite {$/;"	c
Release	src/main/scala/tilelink/Bundles.scala	/^  def Release        = UInt(6) \/\/               .              => ReleaseAck$/;"	m
Release	src/main/scala/tilelink/Edges.scala	/^  def Release(fromSource: UInt, toAddress: UInt, lgSize: UInt, shrinkPermissions: UInt): (Bool, TLBundleC) = {$/;"	m
Release	src/main/scala/tilelink/Edges.scala	/^  def Release(fromSource: UInt, toAddress: UInt, lgSize: UInt, shrinkPermissions: UInt, data: UInt): (Bool, TLBundleC) =$/;"	m
Release	src/main/scala/tilelink/Edges.scala	/^  def Release(fromSource: UInt, toAddress: UInt, lgSize: UInt, shrinkPermissions: UInt, data: UInt, corrupt: Bool): (Bool, TLBundleC) = {$/;"	m
ReleaseAck	src/main/scala/tilelink/Bundles.scala	/^  def ReleaseAck     = UInt(6) \/\/                    .$/;"	m
ReleaseAck	src/main/scala/tilelink/Edges.scala	/^  def ReleaseAck(c: TLBundleC): TLBundleD = ReleaseAck(c.source, c.size, Bool(false))$/;"	m
ReleaseAck	src/main/scala/tilelink/Edges.scala	/^  def ReleaseAck(toSource: UInt, lgSize: UInt, denied: Bool): TLBundleD = {$/;"	m
ReleaseData	src/main/scala/tilelink/Bundles.scala	/^  def ReleaseData    = UInt(7) \/\/               .              => ReleaseAck$/;"	m
RenameDesiredNames	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^class RenameDesiredNames extends Transform with DependencyAPIMigration {$/;"	c
RenameDesiredNamesSpec	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^class RenameDesiredNamesSpec extends AnyPropSpec with Matchers {$/;"	c
RenameModules	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^object RenameModules {$/;"	c
RenameModulesAspect	src/main/scala/aspects/RenameModulesAspect.scala	/^abstract class RenameModulesAspect($/;"	c
RenderFlipped	src/main/scala/diplomacy/Nodes.scala	/^case object RenderFlipped extends Field[Boolean](false)$/;"	c
RenderedEdge	src/main/scala/diplomacy/LazyModule.scala	/^        val RenderedEdge(colour, label, flipped) = edge$/;"	l
RenderedEdge	src/main/scala/diplomacy/Nodes.scala	/^case class RenderedEdge($/;"	c
ReorderDequeueIO	src/main/scala/util/ReorderQueue.scala	/^class ReorderDequeueIO[T <: Data](dType: T, tagWidth: Int) extends Bundle {$/;"	c
ReorderEnqueueIO	src/main/scala/util/ReorderQueue.scala	/^class ReorderEnqueueIO[T <: Data](dType: T, tagWidth: Int)$/;"	c
ReorderQueue	src/main/scala/util/ReorderQueue.scala	/^class ReorderQueue[T <: Data](dType: T, tagWidth: Int, size: Option[Int] = None)$/;"	c
ReorderQueueWrite	src/main/scala/util/ReorderQueue.scala	/^class ReorderQueueWrite[T <: Data](dType: T, tagWidth: Int) extends Bundle {$/;"	c
Repeater	src/main/scala/util/Repeater.scala	/^class Repeater[T <: Data](gen: T) extends Module$/;"	c
Repeater	src/main/scala/util/Repeater.scala	/^object Repeater$/;"	c
ReplacementPolicy	src/main/scala/util/Replacement.scala	/^abstract class ReplacementPolicy {$/;"	c
ReplacementPolicy	src/main/scala/util/Replacement.scala	/^object ReplacementPolicy {$/;"	c
Replay	src/main/scala/rocket/NBDcache.scala	/^class Replay(implicit p: Parameters) extends HellaCacheReqInternal()(p) with HasCoreData$/;"	c
ReplayInternal	src/main/scala/rocket/NBDcache.scala	/^class ReplayInternal(implicit p: Parameters) extends HellaCacheReqInternal()(p)$/;"	c
ReplicatedRegion	src/main/scala/tilelink/RegionReplication.scala	/^case class ReplicatedRegion($/;"	c
RequestPattern	src/main/scala/tilelink/ErrorEvaluator.scala	/^class RequestPattern(test: TLBundleA => Bool)$/;"	c
RequestPattern	src/main/scala/tilelink/ErrorEvaluator.scala	/^object RequestPattern$/;"	c
ResetAsynchronous	src/main/scala/subsystem/BaseSubsystem.scala	/^case object ResetAsynchronous extends SubsystemResetScheme$/;"	c
ResetAsynchronousFull	src/main/scala/subsystem/BaseSubsystem.scala	/^case object ResetAsynchronousFull extends SubsystemResetScheme$/;"	c
ResetCatchAndSync	src/main/scala/util/ResetCatchAndSync.scala	/^class ResetCatchAndSync (sync: Int = 3) extends Module {$/;"	c
ResetCatchAndSync	src/main/scala/util/ResetCatchAndSync.scala	/^object ResetCatchAndSync {$/;"	c
ResetCrossingType	src/main/scala/prci/ResetCrossingType.scala	/^sealed trait ResetCrossingType extends CrossingType {$/;"	t
ResetCtrlIO	src/main/scala/devices/debug/Periphery.scala	/^class ResetCtrlIO(val nComponents: Int)(implicit val p: Parameters) extends Bundle {$/;"	c
ResetDomain	src/main/scala/prci/ClockDomain.scala	/^abstract class ResetDomain(implicit p: Parameters) extends Domain with HasResetDomainCrossing$/;"	c
ResetStretcher	src/main/scala/prci/ResetStretcher.scala	/^class ResetStretcher(cycles: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
ResetSynchronizer	src/main/scala/prci/ResetSynchronizer.scala	/^class ResetSynchronizer(implicit p: Parameters) extends LazyModule {$/;"	c
ResetSynchronizer	src/main/scala/prci/ResetSynchronizer.scala	/^object ResetSynchronizer {$/;"	c
ResetSynchronizerShiftReg	src/main/scala/util/SynchronizerReg.scala	/^class ResetSynchronizerShiftReg(w: Int = 1, sync: Int, init: Int) extends AbstractPipelineReg(w) {$/;"	c
ResetSynchronizerShiftReg	src/main/scala/util/SynchronizerReg.scala	/^object ResetSynchronizerShiftReg {$/;"	c
ResetSynchronous	src/main/scala/subsystem/BaseSubsystem.scala	/^case object ResetSynchronous extends SubsystemResetScheme$/;"	c
ResetUtils	src/main/scala/formal/FormalUtils.scala	/^object ResetUtils {$/;"	c
ResetVectorAnnotation	src/main/scala/util/Annotations.scala	/^case class ResetVectorAnnotation(target: Named, resetVec: BigInt) extends SingleTargetAnnotation[Named] {$/;"	c
ResetWrangler	src/main/scala/prci/ResetWrangler.scala	/^class ResetWrangler(debounceNs: Double = 100000)(implicit p: Parameters) extends LazyModule$/;"	c
Resource	src/main/scala/diplomacy/Resources.scala	/^case class Resource(owner: Device, key: String)$/;"	c
ResourceAddress	src/main/scala/diplomacy/Resources.scala	/^final case class ResourceAddress(address: Seq[AddressSet], permissions: ResourcePermissions) extends ResourceValue$/;"	c
ResourceAddress	src/main/scala/diplomacy/Resources.scala	/^object ResourceAddress {$/;"	c
ResourceAlias	src/main/scala/diplomacy/Resources.scala	/^final case class ResourceAlias(value: String) extends ResourceValue$/;"	c
ResourceAnchors	src/main/scala/diplomacy/Resources.scala	/^object ResourceAnchors$/;"	c
ResourceBinding	src/main/scala/diplomacy/Resources.scala	/^object ResourceBinding$/;"	c
ResourceBindings	src/main/scala/diplomacy/Resources.scala	/^case class ResourceBindings(map: Map[String, Seq[Binding]] = Map.empty)$/;"	c
ResourceBindingsMap	src/main/scala/diplomacy/Resources.scala	/^case class ResourceBindingsMap(map: Map[Device, ResourceBindings])$/;"	c
ResourceInt	src/main/scala/diplomacy/Resources.scala	/^final case class ResourceInt(value: BigInt) extends ResourceValue {$/;"	c
ResourceInt	src/main/scala/diplomacy/Resources.scala	/^object ResourceInt {$/;"	c
ResourceMap	src/main/scala/diplomacy/Resources.scala	/^final case class ResourceMap(value: Map[String, Seq[ResourceValue]], labels: Seq[String] = Nil) extends ResourceValue$/;"	c
ResourceMapping	src/main/scala/diplomacy/Resources.scala	/^final case class ResourceMapping(address: Seq[AddressSet], offset: BigInt, permissions: ResourcePermissions) extends ResourceValue$/;"	c
ResourcePermissions	src/main/scala/diplomacy/AddressRange.scala	/^  val ResourcePermissions(r, w, x, c, a) = permissions$/;"	l
ResourcePermissions	src/main/scala/diplomacy/Resources.scala	/^case class ResourcePermissions(r: Boolean, w: Boolean, x: Boolean, c: Boolean, a: Boolean) \/\/ Not part of DTS$/;"	c
ResourceReference	src/main/scala/diplomacy/Resources.scala	/^final case class ResourceReference(value: String) extends ResourceValue$/;"	c
ResourceString	src/main/scala/diplomacy/Resources.scala	/^final case class ResourceString(value: String) extends ResourceValue$/;"	c
ResourceValue	src/main/scala/diplomacy/Resources.scala	/^sealed trait ResourceValue$/;"	t
RetimeModuleAnnotation	src/main/scala/util/Annotations.scala	/^case class RetimeModuleAnnotation(target: ModuleName) extends SingleTargetAnnotation[ModuleName] {$/;"	c
RipplePrefixSum	src/main/scala/util/PrefixSum.scala	/^object RipplePrefixSum extends PrefixSum {$/;"	c
RoCCCommand	src/main/scala/tile/LazyRoCC.scala	/^class RoCCCommand(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
RoCCCoreIO	src/main/scala/tile/LazyRoCC.scala	/^class RoCCCoreIO(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
RoCCDecode	src/main/scala/rocket/IDecode.scala	/^class RoCCDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
RoCCIO	src/main/scala/tile/LazyRoCC.scala	/^class RoCCIO(val nPTWPorts: Int)(implicit p: Parameters) extends RoCCCoreIO()(p) {$/;"	c
RoCCInstruction	src/main/scala/tile/LazyRoCC.scala	/^class RoCCInstruction extends Bundle {$/;"	c
RoCCResponse	src/main/scala/tile/LazyRoCC.scala	/^class RoCCResponse(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
RobEntry	src/main/resources/csrc/comlog.cc	/^typedef struct RobEntry$/;"	s	file:
RobEntry	src/main/resources/csrc/comlog.cc	/^} RobEntry;$/;"	t	typeref:struct:RobEntry	file:
RoccBlackBox	src/main/resources/vsrc/RoccBlackBox.v	/^module RoccBlackBox$/;"	m
RoccCommandRouter	src/main/scala/tile/LazyRoCC.scala	/^class RoccCommandRouter(opcodes: Seq[OpcodeSet])(implicit p: Parameters)$/;"	c
RoccExampleConfig	src/main/scala/system/Configs.scala	/^class RoccExampleConfig extends Config(new WithRoccExample ++ new DefaultConfig)$/;"	c
Rocket	src/main/scala/rocket/RocketCore.scala	/^class Rocket(tile: RocketTile)(implicit p: Parameters) extends CoreModule()(p)$/;"	c
RocketChipCli	src/main/scala/stage/RocketChipCli.scala	/^trait RocketChipCli { this: Shell =>$/;"	t
RocketChipOption	src/main/scala/stage/RocketChipAnnotations.scala	/^sealed trait RocketChipOption extends Unserializable { this: Annotation => }$/;"	t
RocketChipOptions	src/main/scala/stage/RocketChipOptions.scala	/^class RocketChipOptions private[stage] ($/;"	c
RocketChipOptionsView	src/main/scala/stage/package.scala	/^  implicit object RocketChipOptionsView extends OptionsView[RocketChipOptions] {$/;"	c
RocketChipStage	src/main/scala/system/RocketChipStageGenerator.scala	/^class RocketChipStage extends Stage with PreservesAll[Phase] {$/;"	c
RocketCoreParams	src/main/scala/rocket/RocketCore.scala	/^case class RocketCoreParams($/;"	c
RocketCrossingKey	src/main/scala/subsystem/RocketSubsystem.scala	/^case object RocketCrossingKey extends Field[Seq[RocketCrossingParams]](List(RocketCrossingParams()))$/;"	c
RocketCrossingParams	src/main/scala/subsystem/RocketSubsystem.scala	/^case class RocketCrossingParams($/;"	c
RocketCustomCSRs	src/main/scala/rocket/RocketCore.scala	/^class RocketCustomCSRs(implicit p: Parameters) extends CustomCSRs with HasRocketCoreParameters {$/;"	c
RocketLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^class RocketLogicalTreeNode($/;"	c
RocketSim	scripts/RocketSim.py	/^class RocketSim(targets.Target):$/;"	c
RocketSim	scripts/RocketSim32.py	/^class RocketSim(targets.Target):$/;"	c
RocketSim	scripts/RocketSim64.py	/^class RocketSim(targets.Target):$/;"	c
RocketSimHart	scripts/RocketSim.py	/^class RocketSimHart(targets.Hart):$/;"	c
RocketSimHart	scripts/RocketSim32.py	/^class RocketSimHart(targets.Hart):$/;"	c
RocketSimHart	scripts/RocketSim64.py	/^class RocketSimHart(targets.Hart):$/;"	c
RocketSubsystem	src/main/scala/subsystem/RocketSubsystem.scala	/^class RocketSubsystem(implicit p: Parameters) extends BaseSubsystem with HasRocketTiles {$/;"	c
RocketSubsystemModuleImp	src/main/scala/subsystem/RocketSubsystem.scala	/^class RocketSubsystemModuleImp[+L <: RocketSubsystem](_outer: L) extends BaseSubsystemModuleImp(_outer)$/;"	c
RocketTestSuite	src/main/scala/system/RocketTestSuite.scala	/^abstract class RocketTestSuite {$/;"	c
RocketTestSuiteAnnotation	src/main/scala/stage/phases/AddDefaultTests.scala	/^case class RocketTestSuiteAnnotation(tests: Seq[RocketTestSuite]) extends NoTargetAnnotation with Unserializable$/;"	c
RocketTile	src/main/scala/tile/RocketTile.scala	/^class RocketTile private($/;"	c
RocketTileAttachParams	src/main/scala/subsystem/RocketSubsystem.scala	/^case class RocketTileAttachParams($/;"	c
RocketTileLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^class RocketTileLogicalTreeNode($/;"	c
RocketTileModuleImp	src/main/scala/tile/RocketTile.scala	/^class RocketTileModuleImp(outer: RocketTile) extends BaseTileModuleImp(outer)$/;"	c
RocketTileParams	src/main/scala/tile/RocketTile.scala	/^case class RocketTileParams($/;"	c
RocketTilesKey	src/main/scala/subsystem/RocketSubsystem.scala	/^case object RocketTilesKey extends Field[Seq[RocketTileParams]](Nil)$/;"	c
RotateVector	src/main/scala/util/MultiLaneQueue.scala	/^object RotateVector {$/;"	c
RunTestIdle	src/main/scala/jtag/JtagStateMachine.scala	/^  case object RunTestIdle extends State(12)  \/\/ runs active instruction (which can be idle)$/;"	c
S	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object S extends OMExtensionType$/;"	c
S	src/main/scala/rocket/CSR.scala	/^  def S = UInt(6,SZ)$/;"	m
S	src/main/scala/rocket/CSR.scala	/^  val S = 1$/;"	l
S	src/main/scala/tile/FPU.scala	/^  def S = typeTagGroup(FType.S)$/;"	m
S	src/main/scala/tile/FPU.scala	/^  val S = new FType(8, 24)$/;"	l
SB	src/main/scala/rocket/Instructions.scala	/^  def SB                 = BitPat("b?????????????????000?????0100011")$/;"	m
SBADDRESS0Fields	src/main/scala/devices/debug/dm_registers.scala	/^class SBADDRESS0Fields extends Bundle {$/;"	c
SBADDRESS1Fields	src/main/scala/devices/debug/dm_registers.scala	/^class SBADDRESS1Fields extends Bundle {$/;"	c
SBADDRESS2Fields	src/main/scala/devices/debug/dm_registers.scala	/^class SBADDRESS2Fields extends Bundle {$/;"	c
SBADDRESS3Fields	src/main/scala/devices/debug/dm_registers.scala	/^class SBADDRESS3Fields extends Bundle {$/;"	c
SBADDRESSFieldsReg	src/main/scala/devices/debug/SBA.scala	/^    val SBADDRESSFieldsReg = Reg(Vec(4, UInt(32.W)))$/;"	l
SBADDRESSRdEn	src/main/scala/devices/debug/SBA.scala	/^    val SBADDRESSRdEn      = WireInit(VecInit(Seq.fill(4) {false.B} ))$/;"	l
SBADDRESSWrData	src/main/scala/devices/debug/SBA.scala	/^    val SBADDRESSWrData    = WireInit(VecInit(Seq.fill(4) {0.U(32.W)} ))$/;"	l
SBADDRESSWrEn	src/main/scala/devices/debug/SBA.scala	/^    val SBADDRESSWrEn      = WireInit(VecInit(Seq.fill(4) {false.B} ))$/;"	l
SBCLR	src/main/scala/rocket/Instructions.scala	/^  def SBCLR              = BitPat("b0100100??????????001?????0110011")$/;"	m
SBCLRI	src/main/scala/rocket/Instructions.scala	/^  def SBCLRI             = BitPat("b010010???????????001?????0010011")$/;"	m
SBCLRIW	src/main/scala/rocket/Instructions.scala	/^  def SBCLRIW            = BitPat("b0100100??????????001?????0011011")$/;"	m
SBCLRW	src/main/scala/rocket/Instructions.scala	/^  def SBCLRW             = BitPat("b0100100??????????001?????0111011")$/;"	m
SBCSFields	src/main/scala/devices/debug/dm_registers.scala	/^class SBCSFields extends Bundle {$/;"	c
SBCSFieldsReg	src/main/scala/devices/debug/SBA.scala	/^    val SBCSFieldsReg = Reg(new SBCSFields()).suggestName("SBCSFieldsReg")$/;"	l
SBCSFieldsRegReset	src/main/scala/devices/debug/SBA.scala	/^    val SBCSFieldsRegReset = WireInit(0.U.asTypeOf(new SBCSFields()))$/;"	l
SBCSRdData	src/main/scala/devices/debug/SBA.scala	/^    val SBCSRdData         = WireInit(0.U.asTypeOf(new SBCSFields())).suggestName("SBCSRdData")$/;"	l
SBCSWrData	src/main/scala/devices/debug/SBA.scala	/^    val SBCSWrData         = WireInit(SBCSWrDataVal.asTypeOf(new SBCSFields()))$/;"	l
SBCSWrDataVal	src/main/scala/devices/debug/SBA.scala	/^    val SBCSWrDataVal      = WireInit(0.U(32.W))$/;"	l
SBDATA0Fields	src/main/scala/devices/debug/dm_registers.scala	/^class SBDATA0Fields extends Bundle {$/;"	c
SBDATA1Fields	src/main/scala/devices/debug/dm_registers.scala	/^class SBDATA1Fields extends Bundle {$/;"	c
SBDATA2Fields	src/main/scala/devices/debug/dm_registers.scala	/^class SBDATA2Fields extends Bundle {$/;"	c
SBDATA3Fields	src/main/scala/devices/debug/dm_registers.scala	/^class SBDATA3Fields extends Bundle {$/;"	c
SBDATAFieldsReg	src/main/scala/devices/debug/SBA.scala	/^    val SBDATAFieldsReg = Reg(Vec(4, Vec(4, UInt(8.W))))$/;"	l
SBDATARdData	src/main/scala/devices/debug/SBA.scala	/^    val SBDATARdData    = WireInit(VecInit(Seq.fill(4) {0.U(32.W)} ))$/;"	l
SBDATARdEn	src/main/scala/devices/debug/SBA.scala	/^    val SBDATARdEn      = WireInit(VecInit(Seq.fill(4) {false.B} ))$/;"	l
SBDATAWrData	src/main/scala/devices/debug/SBA.scala	/^    val SBDATAWrData    = WireInit(VecInit(Seq.fill(4) {0.U(32.W)} ))$/;"	l
SBDATAWrEn	src/main/scala/devices/debug/SBA.scala	/^    val SBDATAWrEn      = WireInit(VecInit(Seq.fill(4) {false.B} ))$/;"	l
SBEXT	src/main/scala/rocket/Instructions.scala	/^  def SBEXT              = BitPat("b0100100??????????101?????0110011")$/;"	m
SBEXTI	src/main/scala/rocket/Instructions.scala	/^  def SBEXTI             = BitPat("b010010???????????101?????0010011")$/;"	m
SBEXTW	src/main/scala/rocket/Instructions.scala	/^  def SBEXTW             = BitPat("b0100100??????????101?????0111011")$/;"	m
SBErrorCode	src/main/scala/devices/debug/SBA.scala	/^  type SBErrorCode = Value$/;"	T
SBErrorCode	src/main/scala/devices/debug/SBA.scala	/^object SBErrorCode extends scala.Enumeration {$/;"	c
SBINV	src/main/scala/rocket/Instructions.scala	/^  def SBINV              = BitPat("b0110100??????????001?????0110011")$/;"	m
SBINVI	src/main/scala/rocket/Instructions.scala	/^  def SBINVI             = BitPat("b011010???????????001?????0010011")$/;"	m
SBINVIW	src/main/scala/rocket/Instructions.scala	/^  def SBINVIW            = BitPat("b0110100??????????001?????0011011")$/;"	m
SBINVW	src/main/scala/rocket/Instructions.scala	/^  def SBINVW             = BitPat("b0110100??????????001?????0111011")$/;"	m
SBREAK	src/main/scala/rocket/Instructions.scala	/^  def SBREAK             = BitPat("b00000000000100000000000001110011")$/;"	m
SBSET	src/main/scala/rocket/Instructions.scala	/^  def SBSET              = BitPat("b0010100??????????001?????0110011")$/;"	m
SBSETI	src/main/scala/rocket/Instructions.scala	/^  def SBSETI             = BitPat("b001010???????????001?????0010011")$/;"	m
SBSETIW	src/main/scala/rocket/Instructions.scala	/^  def SBSETIW            = BitPat("b0010100??????????001?????0011011")$/;"	m
SBSETW	src/main/scala/rocket/Instructions.scala	/^  def SBSETW             = BitPat("b0010100??????????001?????0111011")$/;"	m
SBToTL	src/main/scala/devices/debug/SBA.scala	/^class SBToTL(implicit p: Parameters) extends LazyModule {$/;"	c
SBUS	src/main/scala/subsystem/BusTopology.scala	/^case object SBUS extends TLBusWrapperLocation("subsystem_sbus")$/;"	c
SCALL	src/main/scala/rocket/Instructions.scala	/^  def SCALL              = BitPat("b00000000000000000000000001110011")$/;"	m
SCIE	src/main/scala/scie/SCIE.scala	/^object SCIE {$/;"	c
SCIEDecode	src/main/scala/rocket/IDecode.scala	/^class SCIEDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
SCIEDecoder	src/main/scala/scie/SCIE.scala	/^class SCIEDecoder extends BlackBox with HasBlackBoxInline {$/;"	c
SCIEDecoderInterface	src/main/scala/scie/SCIE.scala	/^class SCIEDecoderInterface extends Bundle {$/;"	c
SCIEPipelined	src/main/scala/scie/SCIE.scala	/^class SCIEPipelined(xLen: Int) extends BlackBox(Map("XLEN" -> xLen)) with HasBlackBoxInline {$/;"	c
SCIEPipelinedInterface	src/main/scala/scie/SCIE.scala	/^class SCIEPipelinedInterface(xLen: Int) extends Bundle {$/;"	c
SCIEUnpipelined	src/main/scala/scie/SCIE.scala	/^class SCIEUnpipelined(xLen: Int) extends BlackBox(Map("XLEN" -> xLen)) with HasBlackBoxInline {$/;"	c
SCIEUnpipelinedInterface	src/main/scala/scie/SCIE.scala	/^class SCIEUnpipelinedInterface(xLen: Int) extends Bundle {$/;"	c
SC_D	src/main/scala/rocket/Instructions.scala	/^  def SC_D               = BitPat("b00011????????????011?????0101111")$/;"	m
SC_W	src/main/scala/rocket/Instructions.scala	/^  def SC_W               = BitPat("b00011????????????010?????0101111")$/;"	m
SD	src/main/scala/rocket/Instructions.scala	/^  def SD                 = BitPat("b?????????????????011?????0100011")$/;"	m
SDecode	src/main/scala/rocket/IDecode.scala	/^class SDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
SECCode	src/main/scala/util/ECC.scala	/^class SECCode extends Code$/;"	c
SECDEDCode	src/main/scala/util/ECC.scala	/^class SECDEDCode extends Code$/;"	c
SEED_ARG	regression/Makefile	/^SEED_ARG = --seed $(SEED)$/;"	m
SEXT_B	src/main/scala/rocket/Instructions.scala	/^  def SEXT_B             = BitPat("b011000000100?????001?????0010011")$/;"	m
SEXT_H	src/main/scala/rocket/Instructions.scala	/^  def SEXT_H             = BitPat("b011000000101?????001?????0010011")$/;"	m
SFENCE_VMA	src/main/scala/rocket/Instructions.scala	/^  def SFENCE_VMA         = BitPat("b0001001??????????000000001110011")$/;"	m
SFenceReq	src/main/scala/rocket/TLB.scala	/^class SFenceReq(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
SH	src/main/scala/rocket/Instructions.scala	/^  def SH                 = BitPat("b?????????????????001?????0100011")$/;"	m
SH1ADD	src/main/scala/rocket/Instructions.scala	/^  def SH1ADD             = BitPat("b0010000??????????010?????0110011")$/;"	m
SH1ADDU_W	src/main/scala/rocket/Instructions.scala	/^  def SH1ADDU_W          = BitPat("b0010000??????????010?????0111011")$/;"	m
SH2ADD	src/main/scala/rocket/Instructions.scala	/^  def SH2ADD             = BitPat("b0010000??????????100?????0110011")$/;"	m
SH2ADDU_W	src/main/scala/rocket/Instructions.scala	/^  def SH2ADDU_W          = BitPat("b0010000??????????100?????0111011")$/;"	m
SH3ADD	src/main/scala/rocket/Instructions.scala	/^  def SH3ADD             = BitPat("b0010000??????????110?????0110011")$/;"	m
SH3ADDU_W	src/main/scala/rocket/Instructions.scala	/^  def SH3ADDU_W          = BitPat("b0010000??????????110?????0111011")$/;"	m
SHFL	src/main/scala/rocket/Instructions.scala	/^  def SHFL               = BitPat("b0000100??????????001?????0110011")$/;"	m
SHFLI	src/main/scala/rocket/Instructions.scala	/^  def SHFLI              = BitPat("b0000100??????????001?????0010011")$/;"	m
SHFLW	src/main/scala/rocket/Instructions.scala	/^  def SHFLW              = BitPat("b0000100??????????001?????0111011")$/;"	m
SLL	src/main/scala/rocket/Instructions.scala	/^  def SLL                = BitPat("b0000000??????????001?????0110011")$/;"	m
SLLI	src/main/scala/rocket/Instructions.scala	/^  def SLLI               = BitPat("b000000???????????001?????0010011")$/;"	m
SLLIU_W	src/main/scala/rocket/Instructions.scala	/^  def SLLIU_W            = BitPat("b000010???????????001?????0011011")$/;"	m
SLLIW	src/main/scala/rocket/Instructions.scala	/^  def SLLIW              = BitPat("b0000000??????????001?????0011011")$/;"	m
SLLI_RV32	src/main/scala/rocket/Instructions.scala	/^  def SLLI_RV32          = BitPat("b0000000??????????001?????0010011")$/;"	m
SLLW	src/main/scala/rocket/Instructions.scala	/^  def SLLW               = BitPat("b0000000??????????001?????0111011")$/;"	m
SLO	src/main/scala/rocket/Instructions.scala	/^  def SLO                = BitPat("b0010000??????????001?????0110011")$/;"	m
SLOI	src/main/scala/rocket/Instructions.scala	/^  def SLOI               = BitPat("b001000???????????001?????0010011")$/;"	m
SLOIW	src/main/scala/rocket/Instructions.scala	/^  def SLOIW              = BitPat("b0010000??????????001?????0011011")$/;"	m
SLOW	src/main/scala/rocket/Instructions.scala	/^  def SLOW               = BitPat("b0010000??????????001?????0111011")$/;"	m
SLT	src/main/scala/rocket/Instructions.scala	/^  def SLT                = BitPat("b0000000??????????010?????0110011")$/;"	m
SLTI	src/main/scala/rocket/Instructions.scala	/^  def SLTI               = BitPat("b?????????????????010?????0010011")$/;"	m
SLTIU	src/main/scala/rocket/Instructions.scala	/^  def SLTIU              = BitPat("b?????????????????011?????0010011")$/;"	m
SLTU	src/main/scala/rocket/Instructions.scala	/^  def SLTU               = BitPat("b0000000??????????011?????0110011")$/;"	m
SRA	src/main/scala/rocket/Instructions.scala	/^  def SRA                = BitPat("b0100000??????????101?????0110011")$/;"	m
SRAI	src/main/scala/rocket/Instructions.scala	/^  def SRAI               = BitPat("b010000???????????101?????0010011")$/;"	m
SRAIW	src/main/scala/rocket/Instructions.scala	/^  def SRAIW              = BitPat("b0100000??????????101?????0011011")$/;"	m
SRAI_RV32	src/main/scala/rocket/Instructions.scala	/^  def SRAI_RV32          = BitPat("b0100000??????????101?????0010011")$/;"	m
SRAMAnnotation	src/main/scala/util/Annotations.scala	/^case class SRAMAnnotation(target: Named,$/;"	c
SRAW	src/main/scala/rocket/Instructions.scala	/^  def SRAW               = BitPat("b0100000??????????101?????0111011")$/;"	m
SRET	src/main/scala/rocket/Instructions.scala	/^  def SRET               = BitPat("b00010000001000000000000001110011")$/;"	m
SRL	src/main/scala/rocket/Instructions.scala	/^  def SRL                = BitPat("b0000000??????????101?????0110011")$/;"	m
SRLI	src/main/scala/rocket/Instructions.scala	/^  def SRLI               = BitPat("b000000???????????101?????0010011")$/;"	m
SRLIW	src/main/scala/rocket/Instructions.scala	/^  def SRLIW              = BitPat("b0000000??????????101?????0011011")$/;"	m
SRLI_RV32	src/main/scala/rocket/Instructions.scala	/^  def SRLI_RV32          = BitPat("b0000000??????????101?????0010011")$/;"	m
SRLW	src/main/scala/rocket/Instructions.scala	/^  def SRLW               = BitPat("b0000000??????????101?????0111011")$/;"	m
SRO	src/main/scala/rocket/Instructions.scala	/^  def SRO                = BitPat("b0010000??????????101?????0110011")$/;"	m
SROI	src/main/scala/rocket/Instructions.scala	/^  def SROI               = BitPat("b001000???????????101?????0010011")$/;"	m
SROIW	src/main/scala/rocket/Instructions.scala	/^  def SROIW              = BitPat("b0010000??????????101?????0011011")$/;"	m
SROW	src/main/scala/rocket/Instructions.scala	/^  def SROW               = BitPat("b0010000??????????101?????0111011")$/;"	m
SUB	src/main/scala/rocket/Instructions.scala	/^  def SUB                = BitPat("b0100000??????????000?????0110011")$/;"	m
SUBW	src/main/scala/rocket/Instructions.scala	/^  def SUBW               = BitPat("b0100000??????????000?????0111011")$/;"	m
SUBWU	src/main/scala/rocket/Instructions.scala	/^  def SUBWU              = BitPat("b0100101??????????000?????0111011")$/;"	m
SVMDecode	src/main/scala/rocket/IDecode.scala	/^class SVMDecode(implicit val p: Parameters) extends DecodeConstants$/;"	c
SW	src/main/scala/rocket/Instructions.scala	/^  def SW                 = BitPat("b?????????????????010?????0100011")$/;"	m
SWAP	src/main/scala/tilelink/Bundles.scala	/^  def SWAP = UInt(3, width)$/;"	m
SZ	src/main/scala/rocket/BTB.scala	/^  def SZ = 2$/;"	m
SZ	src/main/scala/rocket/CSR.scala	/^  val SZ = 2$/;"	l
SZ	src/main/scala/rocket/CSR.scala	/^  val SZ = 3$/;"	l
SZ_ALU_FN	src/main/scala/rocket/ALU.scala	/^  val SZ_ALU_FN = 4$/;"	l
SZ_BR	src/main/scala/rocket/Consts.scala	/^  val SZ_BR = 3$/;"	l
SZ_DW	src/main/scala/rocket/Consts.scala	/^  val SZ_DW = 1$/;"	l
SbusToCbusXTypeKey	src/main/scala/subsystem/BusTopology.scala	/^case object SbusToCbusXTypeKey extends Field[ClockCrossingType](NoCrossing)$/;"	c
SbusToMbusXTypeKey	src/main/scala/subsystem/BusTopology.scala	/^case object SbusToMbusXTypeKey extends Field[ClockCrossingType](NoCrossing)$/;"	c
ScalaUtils	src/main/scala/formal/FormalUtils.scala	/^object ScalaUtils {$/;"	c
ScalarOpConstants	src/main/scala/rocket/Consts.scala	/^trait ScalarOpConstants {$/;"	t
Scatter	src/main/scala/util/ScatterGather.scala	/^object Scatter {$/;"	c
ScatterGatherTestConfig	src/main/scala/unittest/Configs.scala	/^class ScatterGatherTestConfig extends Config(new WithScatterGatherTests)$/;"	c
ScatterTest	src/main/scala/util/ScatterGather.scala	/^class ScatterTest(size: Int, timeout: Int = 500000) extends UnitTest(timeout) {$/;"	c
Scoreboard	src/main/scala/rocket/RocketCore.scala	/^  class Scoreboard(n: Int, zero: Boolean = false)$/;"	c
ScratchpadSlavePort	src/main/scala/rocket/ScratchpadSlavePort.scala	/^class ScratchpadSlavePort(address: Seq[AddressSet], coreDataBytes: Int, usingAtomics: Boolean)(implicit p: Parameters) extends LazyModule {$/;"	c
SeededRandom	src/main/scala/util/SeededRandom.scala	/^object SeededRandom {$/;"	c
Select	src/main/scala/aop/Select.scala	/^object Select {$/;"	c
SelectDRScan	src/main/scala/jtag/JtagStateMachine.scala	/^  case object SelectDRScan extends State(7)$/;"	c
SelectIRScan	src/main/scala/jtag/JtagStateMachine.scala	/^  case object SelectIRScan extends State(4)$/;"	c
Seq	src/main/scala/devices/tilelink/BusBypass.scala	/^    val Seq((out0, edgeOut0), (out1, edgeOut1)) = node.out$/;"	l
Seq	src/main/scala/devices/tilelink/MasterMux.scala	/^    val Seq((in0, edgeIn0), (in1, edgeIn1)) = node.in$/;"	l
Seq	src/main/scala/devices/tilelink/MasterMux.scala	/^    val Seq((out, edgeOut)) = node.out$/;"	l
Seq	src/main/scala/rocket/ICache.scala	/^     val Seq(Binding(_, ResourceAddress(address, perms))) = resources("reg\/mem")$/;"	l
SeqBoolBitwiseOps	src/main/scala/util/package.scala	/^  implicit class SeqBoolBitwiseOps(private val x: Seq[Bool]) extends AnyVal {$/;"	c
SeqMemToAugmentedSeqMem	src/main/scala/util/package.scala	/^  implicit class SeqMemToAugmentedSeqMem[T <: Data](private val x: SeqMem[T]) extends AnyVal {$/;"	c
SeqPLRU	src/main/scala/util/Replacement.scala	/^class SeqPLRU(n_sets: Int, n_ways: Int) extends SeqReplacementPolicy {$/;"	c
SeqRandom	src/main/scala/util/Replacement.scala	/^class SeqRandom(n_ways: Int) extends SeqReplacementPolicy {$/;"	c
SeqReplacementPolicy	src/main/scala/util/Replacement.scala	/^abstract class SeqReplacementPolicy {$/;"	c
SeqToAugmentedSeq	src/main/scala/util/package.scala	/^  implicit class SeqToAugmentedSeq[T <: Data](private val x: Seq[T]) extends AnyVal {$/;"	c
SeqsinSequence	src/main/scala/util/Property.scala	/^  def SeqsinSequence(search: Seq[String], find: Seq[Seq[String]]): Boolean = {$/;"	m
SetAssocLRU	src/main/scala/util/Replacement.scala	/^class SetAssocLRU(n_sets: Int, n_ways: Int, policy: String) extends SetAssocReplacementPolicy {$/;"	c
SetAssocReplacementPolicy	src/main/scala/util/Replacement.scala	/^abstract class SetAssocReplacementPolicy {$/;"	c
ShiftDR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object ShiftDR extends State(2)  \/\/ shifts DR shifter from TDI towards TDO, last shift occurs on rising edge transition out of this state$/;"	c
ShiftIR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object ShiftIR extends State(10)  \/\/ shifts IR shifter from TDI towards TDO, last shift occurs on rising edge transition out of this state$/;"	c
ShiftQueue	src/main/scala/util/ShiftQueue.scala	/^class ShiftQueue[T <: Data](gen: T,$/;"	c
ShiftQueue	src/main/scala/util/ShiftQueue.scala	/^object ShiftQueue$/;"	c
ShiftRegInit	src/main/scala/util/ShiftReg.scala	/^object ShiftRegInit {$/;"	c
ShifterIO	src/main/scala/jtag/JtagShifter.scala	/^class ShifterIO extends Bundle {$/;"	c
ShouldBeRetimed	src/main/scala/util/Annotations.scala	/^trait ShouldBeRetimed { self: RawModule =>$/;"	t
Sidentity	src/main/scala/amba/axi4/Filter.scala	/^  def Sidentity: AXI4SlaveParameters  => Option[AXI4SlaveParameters]  = { s => Some(s) }$/;"	m
SimAXIMem	src/main/scala/system/SimAXIMem.scala	/^class SimAXIMem(edge: AXI4EdgeParameters, size: BigInt, base: BigInt = 0)(implicit p: Parameters) extends SimpleLazyModule {$/;"	c
SimAXIMem	src/main/scala/system/SimAXIMem.scala	/^object SimAXIMem {$/;"	c
SimDTM	src/main/resources/vsrc/SimDTM.v	/^module SimDTM($/;"	m
SimDTM	src/main/scala/devices/debug/Periphery.scala	/^class SimDTM(implicit p: Parameters) extends BlackBox with HasBlackBoxResource {$/;"	c
SimJTAG	src/main/resources/vsrc/SimJTAG.v	/^module SimJTAG #($/;"	m
SimJTAG	src/main/scala/devices/debug/Periphery.scala	/^class SimJTAG(tickDelay: Int = 50) extends BlackBox(Map("TICK_DELAY" -> IntParam(tickDelay)))$/;"	c
SimpleBundleField	src/main/scala/util/BundleMap.scala	/^abstract class SimpleBundleField[T <: Data](key: BundleKey[T])(typeT: => T, defaultT: => T) extends BundleField(key)$/;"	c
SimpleBus	src/main/scala/diplomacy/Resources.scala	/^class SimpleBus(devname: String, devcompat: Seq[String], offset: BigInt = 0) extends SimpleDevice(devname, devcompat ++ Seq("simple-bus"))$/;"	c
SimpleClockGroupSource	src/main/scala/prci/ClockGroup.scala	/^class SimpleClockGroupSource(numSources: Int = 1)(implicit p: Parameters) extends LazyModule$/;"	c
SimpleClockGroupSource	src/main/scala/prci/ClockGroup.scala	/^object SimpleClockGroupSource$/;"	c
SimpleDevice	src/main/scala/diplomacy/Resources.scala	/^class SimpleDevice(val devname: String, devcompat: Seq[String]) extends Device$/;"	c
SimpleHellaCacheIF	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^class SimpleHellaCacheIF(implicit p: Parameters) extends Module$/;"	c
SimpleHellaCacheIFReplayQueue	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^class SimpleHellaCacheIFReplayQueue(depth: Int)$/;"	c
SimpleLazyModule	src/main/scala/diplomacy/LazyModule.scala	/^class SimpleLazyModule(implicit p: Parameters) extends LazyModule {$/;"	c
SimpleNodeHandle	src/main/scala/diplomacy/package.scala	/^  type SimpleNodeHandle[D, U, E, B <: Chisel.Data] = NodeHandle[D, U, E, B, D, U, E, B]$/;"	T
SimpleNodeImp	src/main/scala/diplomacy/Nodes.scala	/^abstract class SimpleNodeImp[D, U, E, B <: Data]$/;"	c
SimpleProduct	src/main/scala/util/SimpleProduct.scala	/^trait SimpleProduct extends Product with Equals {$/;"	t
SimpleRegIO	src/main/scala/util/AsyncResetReg.scala	/^class SimpleRegIO(val w: Int) extends Bundle{$/;"	c
SimpleTimer	src/main/scala/util/Timer.scala	/^class SimpleTimer(initCount: Int) extends Module {$/;"	c
SimpleTimer	src/main/scala/util/Timer.scala	/^object SimpleTimer {$/;"	c
Simplify	src/main/scala/rocket/Decode.scala	/^object Simplify$/;"	c
SimplifyDC	src/main/scala/rocket/Decode.scala	/^object SimplifyDC$/;"	c
SingleChannelBenchmarkConfig	src/main/scala/system/Configs.scala	/^class SingleChannelBenchmarkConfig extends Config(new DefaultConfig)$/;"	c
SinkNode	src/main/scala/diplomacy/Nodes.scala	/^class SinkNode[D, U, EO, EI, B <: Data](imp: NodeImp[D, U, EO, EI, B])(pi: Seq[U])(implicit valName: ValName)$/;"	c
SinksExternalInterrupts	src/main/scala/tile/Interrupts.scala	/^trait SinksExternalInterrupts { this: BaseTile =>$/;"	t
SlaveAddressMapChiselAnnotation	src/main/scala/util/Annotations.scala	/^case class SlaveAddressMapChiselAnnotation($/;"	c
SlavePortParams	src/main/scala/subsystem/Ports.scala	/^case class SlavePortParams(beatBytes: Int, idBits: Int, sourceBits: Int)$/;"	c
SlowToFast	src/main/scala/util/RationalCrossing.scala	/^case object SlowToFast extends RationalDirection {$/;"	c
Smask	src/main/scala/amba/axi4/Filter.scala	/^  def Smask(select: AddressSet): AXI4SlaveParameters  => Option[AXI4SlaveParameters] = { s =>$/;"	m
SourceGet	src/main/scala/formal/FormalUtils.scala	/^object SourceGet {$/;"	c
SourceIdClear	src/main/scala/tilelink/FIFOFixer.scala	/^      val SourceIdClear = Wire(init = UInt(0, width = edgeIn.client.endSourceId))$/;"	l
SourceIdFIFOed	src/main/scala/tilelink/FIFOFixer.scala	/^      val SourceIdFIFOed = RegInit(UInt(0, width = edgeIn.client.endSourceId))$/;"	l
SourceIdSet	src/main/scala/tilelink/FIFOFixer.scala	/^      val SourceIdSet = Wire(init = UInt(0, width = edgeIn.client.endSourceId))$/;"	l
SourceNode	src/main/scala/diplomacy/Nodes.scala	/^class SourceNode[D, U, EO, EI, B <: Data](imp: NodeImp[D, U, EO, EI, B])(po: Seq[D])(implicit valName: ValName)$/;"	c
SourcesExternalNotifications	src/main/scala/tile/Interrupts.scala	/^trait SourcesExternalNotifications { this: BaseTile =>$/;"	t
SparsePrefixSum	src/main/scala/util/PrefixSum.scala	/^object SparsePrefixSum extends PrefixSum {$/;"	c
Split	src/main/scala/util/Misc.scala	/^object Split$/;"	c
StableNameAnnotation	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^case class StableNameAnnotation(target: IsModule) extends SingleTargetAnnotation[IsModule] {$/;"	c
StageGeneratorSpec	src/test/scala/generatorTests/StageGeneratorSpec.scala	/^class StageGeneratorSpec extends AnyFlatSpec {$/;"	c
StarCycleException	src/main/scala/diplomacy/Nodes.scala	/^case class StarCycleException(loop: Seq[String] = Nil) extends CycleException("star", loop)$/;"	c
State	src/main/scala/jtag/JtagStateMachine.scala	/^  object State {$/;"	c
State	src/main/scala/jtag/JtagStateMachine.scala	/^  sealed abstract class State(val id: Int) {$/;"	c
StateMachineIO	src/main/scala/jtag/JtagStateMachine.scala	/^  class StateMachineIO extends Bundle {$/;"	c
StoreGen	src/main/scala/rocket/AMOALU.scala	/^class StoreGen(typ: UInt, addr: UInt, dat: UInt, maxSize: Int) {$/;"	c
Str	src/main/scala/util/Misc.scala	/^object Str$/;"	c
StretchedResetCrossing	src/main/scala/prci/ResetCrossingType.scala	/^case class StretchedResetCrossing(cycles: Int) extends ResetCrossingType {$/;"	c
StringToAugmentedString	src/main/scala/util/package.scala	/^  implicit class StringToAugmentedString(private val x: String) extends AnyVal {$/;"	c
StringToProperty	src/main/scala/diplomacy/package.scala	/^  implicit class StringToProperty(x: String) {$/;"	c
StringToken	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^case class StringToken(value: String) extends Token {$/;"	c
SubProtocolType	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^sealed trait SubProtocolType extends OMEnum$/;"	t
SubsystemCrossingParams	src/main/scala/subsystem/BusTopology.scala	/^case class SubsystemCrossingParams($/;"	c
SubsystemDriveAsyncClockGroupsKey	src/main/scala/subsystem/BaseSubsystem.scala	/^case object SubsystemDriveAsyncClockGroupsKey extends Field[Option[ClockGroupDriverParameters]](Some(ClockGroupDriverParameters(1)))$/;"	c
SubsystemExternalHartIdWidthKey	src/main/scala/subsystem/HasTiles.scala	/^case object SubsystemExternalHartIdWidthKey extends Field[Option[Int]](None)$/;"	c
SubsystemExternalResetVectorKey	src/main/scala/subsystem/HasTiles.scala	/^case object SubsystemExternalResetVectorKey extends Field[Boolean](true)$/;"	c
SubsystemLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^class SubsystemLogicalTreeNode(var getOMInterruptDevice: (ResourceBindings) => Seq[OMInterrupt] = (ResourceBindings) => Nil)$/;"	c
SubsystemResetScheme	src/main/scala/subsystem/BaseSubsystem.scala	/^trait SubsystemResetScheme$/;"	t
SubsystemResetSchemeKey	src/main/scala/subsystem/BaseSubsystem.scala	/^case object SubsystemResetSchemeKey extends Field[SubsystemResetScheme](ResetSynchronous)$/;"	c
Success	src/main/scala/devices/debug/Debug.scala	/^  val Success, ErrBusy, ErrNotSupported, ErrException, ErrHaltResume = Value$/;"	l
SuperscalarEventSets	src/main/scala/rocket/Events.scala	/^class SuperscalarEventSets(val eventSets: Seq[(Seq[EventSet], (UInt, UInt) => UInt)]) {$/;"	c
SupervisorLevelISA	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^case object SupervisorLevelISA extends PrivilegedArchitectureExtension$/;"	c
SupervisorMode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val SupervisorMode = BigInt(9)$/;"	l
Sv32	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object Sv32 extends OMAddressTranslationMode$/;"	c
Sv39	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object Sv39 extends OMAddressTranslationMode$/;"	c
Sv48	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object Sv48 extends OMAddressTranslationMode$/;"	c
Sv57	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object Sv57 extends OMAddressTranslationMode$/;"	c
Symmetric	src/main/scala/util/RationalCrossing.scala	/^case object Symmetric extends RationalDirection {$/;"	c
SyncInterrupts	src/main/scala/interrupts/Bundles.scala	/^class SyncInterrupts(params: IntEdge) extends GenericParameterizedBundle(params)$/;"	c
SyncResetSynchronizerShiftReg	src/main/scala/util/SynchronizerReg.scala	/^class SyncResetSynchronizerShiftReg(w: Int = 1, sync: Int, init: Int) extends AbstractPipelineReg(w) {$/;"	c
SyncResetSynchronizerShiftReg	src/main/scala/util/SynchronizerReg.scala	/^object SyncResetSynchronizerShiftReg {$/;"	c
Synchronicity	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^trait Synchronicity extends OMEnum$/;"	t
SynchronizerPrimitiveShiftReg	src/main/scala/util/SynchronizerReg.scala	/^private class SynchronizerPrimitiveShiftReg($/;"	c
SynchronizerPrimitiveShiftReg	src/main/scala/util/SynchronizerReg.scala	/^private object SynchronizerPrimitiveShiftReg {$/;"	c
SynchronizerResetType	src/main/scala/util/SynchronizerReg.scala	/^object SynchronizerResetType extends Enumeration {$/;"	c
SynchronizerShiftReg	src/main/scala/util/SynchronizerReg.scala	/^class SynchronizerShiftReg(w: Int = 1, sync: Int = 3) extends AbstractPipelineReg(w) {$/;"	c
SynchronizerShiftReg	src/main/scala/util/SynchronizerReg.scala	/^object SynchronizerShiftReg {$/;"	c
Synchronous	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^trait Synchronous extends Synchronicity$/;"	t
SynchronousCrossing	src/main/scala/diplomacy/ClockDomain.scala	/^case class SynchronousCrossing(params: BufferParams = BufferParams.default) extends ClockCrossingType$/;"	c
SystemBus	src/main/scala/subsystem/SystemBus.scala	/^class SystemBus(params: SystemBusParams, name: String = "system_bus")(implicit p: Parameters)$/;"	c
SystemBusAccessModule	src/main/scala/devices/debug/SBA.scala	/^object SystemBusAccessModule$/;"	c
SystemBusAccessState	src/main/scala/devices/debug/SBA.scala	/^   type SystemBusAccessState = Value$/;"	T
SystemBusAccessState	src/main/scala/devices/debug/SBA.scala	/^object SystemBusAccessState extends scala.Enumeration {$/;"	c
SystemBusKey	src/main/scala/subsystem/BusTopology.scala	/^case object SystemBusKey extends Field[SystemBusParams]$/;"	c
SystemBusParams	src/main/scala/subsystem/SystemBus.scala	/^case class SystemBusParams($/;"	c
SystemJTAGIO	src/main/scala/devices/debug/DebugTransport.scala	/^class SystemJTAGIO extends Bundle {$/;"	c
SystemPort	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class SystemPort($/;"	c
SystemPortType	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object SystemPortType extends PortType$/;"	c
T	src/main/scala/diplomacy/Parameters.scala	/^  sealed trait T extends Ordered[T] {$/;"	t
T	src/main/scala/tilelink/Fragmenter.scala	/^  sealed trait T$/;"	t
TB	vsim/Makefile	/^TB ?= TestDriver$/;"	m
TCK	src/main/scala/jtag/JtagTap.scala	/^  val TCK   = Output(Clock())$/;"	l
TDI	src/main/scala/jtag/JtagTap.scala	/^  val TDI   = Output(Bool())$/;"	l
TDO	src/main/scala/jtag/JtagTap.scala	/^  val TDO   = Input(new Tristate())$/;"	l
TDOdata	src/main/scala/jtag/JtagTap.scala	/^      val TDOdata   = RegNext(next=tdo, init=false.B).suggestName("tdoReg")$/;"	l
TDOdriven	src/main/scala/jtag/JtagTap.scala	/^      val TDOdriven = RegNext(next=tdo_driven, init=false.B).suggestName("tdoeReg")$/;"	l
TExtra	src/main/scala/rocket/Breakpoint.scala	/^class TExtra(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
TICK_DELAY	src/main/resources/vsrc/SimJTAG.v	/^                 parameter TICK_DELAY = 50$/;"	c
TL	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^trait TL extends OMProtocol$/;"	t
TLAdapterNode	src/main/scala/tilelink/Nodes.scala	/^case class TLAdapterNode($/;"	c
TLAdapterNodeAndNotCancel	src/main/scala/tilelink/Nodes.scala	/^case class TLAdapterNodeAndNotCancel($/;"	c
TLAdapterNode_ACancel	src/main/scala/tilelink/Nodes.scala	/^case class TLAdapterNode_ACancel($/;"	c
TLAddrChannel	src/main/scala/tilelink/Bundles.scala	/^sealed trait TLAddrChannel extends TLDataChannel$/;"	t
TLArbiter	src/main/scala/tilelink/Arbiter.scala	/^object TLArbiter$/;"	c
TLAsyncAdapterNode	src/main/scala/tilelink/Nodes.scala	/^case class TLAsyncAdapterNode($/;"	c
TLAsyncBundle	src/main/scala/tilelink/Bundles.scala	/^class TLAsyncBundle(params: TLAsyncBundleParameters) extends TLAsyncBundleBase(params)$/;"	c
TLAsyncBundleBase	src/main/scala/tilelink/Bundles.scala	/^class TLAsyncBundleBase(params: TLAsyncBundleParameters) extends GenericParameterizedBundle(params)$/;"	c
TLAsyncBundleParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLAsyncBundleParameters(async: AsyncQueueParams, base: TLBundleParameters)$/;"	c
TLAsyncClientPortParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLAsyncClientPortParameters(base: TLMasterPortParameters) {def infoString = base.infoString}$/;"	c
TLAsyncCrossing	src/main/scala/tilelink/AsyncCrossing.scala	/^class TLAsyncCrossing(params: AsyncQueueParams = AsyncQueueParams())(implicit p: Parameters) extends LazyModule$/;"	c
TLAsyncCrossingSink	src/main/scala/tilelink/AsyncCrossing.scala	/^class TLAsyncCrossingSink(params: AsyncQueueParams = AsyncQueueParams())(implicit p: Parameters) extends LazyModule$/;"	c
TLAsyncCrossingSink	src/main/scala/tilelink/AsyncCrossing.scala	/^object TLAsyncCrossingSink$/;"	c
TLAsyncCrossingSource	src/main/scala/tilelink/AsyncCrossing.scala	/^class TLAsyncCrossingSource(sync: Option[Int])(implicit p: Parameters) extends LazyModule$/;"	c
TLAsyncCrossingSource	src/main/scala/tilelink/AsyncCrossing.scala	/^object TLAsyncCrossingSource$/;"	c
TLAsyncEdgeParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLAsyncEdgeParameters(client: TLAsyncClientPortParameters, manager: TLAsyncManagerPortParameters, params: Parameters, sourceInfo: SourceInfo) extends FormatEdge$/;"	c
TLAsyncFormatNode	src/main/scala/tilelink/Nodes.scala	/^trait TLAsyncFormatNode extends FormatNode[TLAsyncEdgeParameters, TLAsyncEdgeParameters]$/;"	t
TLAsyncIdentityNode	src/main/scala/tilelink/Nodes.scala	/^case class TLAsyncIdentityNode()(implicit valName: ValName) extends IdentityNode(TLAsyncImp)() with TLAsyncFormatNode$/;"	c
TLAsyncImp	src/main/scala/tilelink/Nodes.scala	/^object TLAsyncImp extends SimpleNodeImp[TLAsyncClientPortParameters, TLAsyncManagerPortParameters, TLAsyncEdgeParameters, TLAsyncBundle]$/;"	c
TLAsyncManagerPortParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLAsyncManagerPortParameters(async: AsyncQueueParams, base: TLSlavePortParameters) {def infoString = base.infoString}$/;"	c
TLAsyncNameNode	src/main/scala/tilelink/Nodes.scala	/^object TLAsyncNameNode {$/;"	c
TLAsyncSinkNode	src/main/scala/tilelink/Nodes.scala	/^case class TLAsyncSinkNode(async: AsyncQueueParams)(implicit valName: ValName)$/;"	c
TLAsyncSourceNode	src/main/scala/tilelink/Nodes.scala	/^case class TLAsyncSourceNode(sync: Option[Int])(implicit valName: ValName)$/;"	c
TLAtomicAutomata	src/main/scala/tilelink/AtomicAutomata.scala	/^class TLAtomicAutomata(logical: Boolean = true, arithmetic: Boolean = true, concurrency: Int = 1, passthrough: Boolean = true)(implicit p: Parameters) extends LazyModule$/;"	c
TLAtomicAutomata	src/main/scala/tilelink/AtomicAutomata.scala	/^object TLAtomicAutomata$/;"	c
TLAtomics	src/main/scala/tilelink/Bundles.scala	/^object TLAtomics$/;"	c
TLB	src/main/scala/rocket/TLB.scala	/^class TLB(instruction: Boolean, lgMaxSize: Int, cfg: TLBConfig)(implicit edge: TLEdgeOut, p: Parameters) extends CoreModule()(p) {$/;"	c
TLBConfig	src/main/scala/rocket/TLB.scala	/^case class TLBConfig($/;"	c
TLBEntry	src/main/scala/rocket/TLB.scala	/^class TLBEntry(val nSectors: Int, val superpage: Boolean, val superpageOnly: Boolean)(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
TLBEntryData	src/main/scala/rocket/TLB.scala	/^class TLBEntryData(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
TLBExceptions	src/main/scala/rocket/TLB.scala	/^class TLBExceptions(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
TLBFixedPermissions	src/main/scala/rocket/TLBPermissions.scala	/^  private case class TLBFixedPermissions($/;"	c
TLBPTWIO	src/main/scala/rocket/PTW.scala	/^class TLBPTWIO(implicit p: Parameters) extends CoreBundle()(p)$/;"	c
TLBPageLookup	src/main/scala/rocket/TLBPermissions.scala	/^object TLBPageLookup$/;"	c
TLBPermissions	src/main/scala/rocket/TLBPermissions.scala	/^case class TLBPermissions($/;"	c
TLBReq	src/main/scala/rocket/TLB.scala	/^class TLBReq(lgMaxSize: Int)(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
TLBResp	src/main/scala/rocket/TLB.scala	/^class TLBResp(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
TLBlockDuringReset	src/main/scala/tilelink/BlockDuringReset.scala	/^class TLBlockDuringReset(stretchResetCycles: Int = 0)$/;"	c
TLBlockDuringReset	src/main/scala/tilelink/BlockDuringReset.scala	/^object TLBlockDuringReset {$/;"	c
TLBroadcast	src/main/scala/tilelink/Broadcast.scala	/^class TLBroadcast(params: TLBroadcastParams)(implicit p: Parameters) extends LazyModule$/;"	c
TLBroadcast	src/main/scala/tilelink/Broadcast.scala	/^object TLBroadcast$/;"	c
TLBroadcastConstants	src/main/scala/tilelink/Broadcast.scala	/^object TLBroadcastConstants$/;"	c
TLBroadcastControlParams	src/main/scala/tilelink/Broadcast.scala	/^case class TLBroadcastControlParams($/;"	c
TLBroadcastData	src/main/scala/tilelink/Broadcast.scala	/^class TLBroadcastData(params: TLBundleParameters) extends TLBundleBase(params)$/;"	c
TLBroadcastParams	src/main/scala/tilelink/Broadcast.scala	/^case class TLBroadcastParams($/;"	c
TLBroadcastTracker	src/main/scala/tilelink/Broadcast.scala	/^class TLBroadcastTracker(id: Int, lineBytes: Int, caches: Int, bufferless: Boolean, edgeIn: TLEdgeIn, edgeOut: TLEdgeOut) extends Module$/;"	c
TLBuffer	src/main/scala/tilelink/Buffer.scala	/^class TLBuffer($/;"	c
TLBuffer	src/main/scala/tilelink/Buffer.scala	/^object TLBuffer$/;"	c
TLBufferAndNotCancel	src/main/scala/tilelink/Buffer.scala	/^class TLBufferAndNotCancel($/;"	c
TLBufferAndNotCancel	src/main/scala/tilelink/Buffer.scala	/^object TLBufferAndNotCancel$/;"	c
TLBufferNode	src/main/scala/tilelink/Buffer.scala	/^class TLBufferNode ($/;"	c
TLBufferNodeAndNotCancel	src/main/scala/tilelink/Buffer.scala	/^class TLBufferNodeAndNotCancel ($/;"	c
TLBufferParams	src/main/scala/tilelink/Parameters.scala	/^case class TLBufferParams($/;"	c
TLBundle	src/main/scala/tilelink/Bundles.scala	/^class TLBundle(val params: TLBundleParameters) extends Record$/;"	c
TLBundle	src/main/scala/tilelink/Bundles.scala	/^object TLBundle$/;"	c
TLBundleA	src/main/scala/tilelink/Bundles.scala	/^final class TLBundleA(params: TLBundleParameters)$/;"	c
TLBundleB	src/main/scala/tilelink/Bundles.scala	/^final class TLBundleB(params: TLBundleParameters)$/;"	c
TLBundleBase	src/main/scala/tilelink/Bundles.scala	/^abstract class TLBundleBase(params: TLBundleParameters) extends GenericParameterizedBundle(params)$/;"	c
TLBundleC	src/main/scala/tilelink/Bundles.scala	/^final class TLBundleC(params: TLBundleParameters)$/;"	c
TLBundleD	src/main/scala/tilelink/Bundles.scala	/^final class TLBundleD(params: TLBundleParameters)$/;"	c
TLBundleE	src/main/scala/tilelink/Bundles.scala	/^final class TLBundleE(params: TLBundleParameters)$/;"	c
TLBundleParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLBundleParameters($/;"	c
TLBundleParameters	src/main/scala/tilelink/Parameters.scala	/^object TLBundleParameters$/;"	c
TLBundle_ACancel	src/main/scala/tilelink/Bundle_ACancel.scala	/^class TLBundle_ACancel(val params: TLBundleParameters) extends Record$/;"	c
TLBundle_ACancel	src/main/scala/tilelink/Bundle_ACancel.scala	/^object TLBundle_ACancel$/;"	c
TLBusBypass	src/main/scala/devices/tilelink/BusBypass.scala	/^class TLBusBypass(beatBytes: Int, bufferError: Boolean = false, maxAtomic: Int = 16, maxTransfer: Int = 4096)(implicit p: Parameters)$/;"	c
TLBusBypassBar	src/main/scala/devices/tilelink/BusBypass.scala	/^class TLBusBypassBar(dFn: TLSlavePortParameters => TLSlavePortParameters)(implicit p: Parameters) extends LazyModule$/;"	c
TLBusBypassBase	src/main/scala/devices/tilelink/BusBypass.scala	/^abstract class TLBusBypassBase(beatBytes: Int, deadlock: Boolean = false, bufferError: Boolean = true, maxAtomic: Int = 16, maxTransfer: Int = 4096)$/;"	c
TLBusWrapper	src/main/scala/tilelink/BusWrapper.scala	/^abstract class TLBusWrapper(params: HasTLBusParams, val busName: String)(implicit p: Parameters)$/;"	c
TLBusWrapperConnection	src/main/scala/tilelink/BusWrapper.scala	/^class TLBusWrapperConnection$/;"	c
TLBusWrapperConnection	src/main/scala/tilelink/BusWrapper.scala	/^object TLBusWrapperConnection {$/;"	c
TLBusWrapperConnectionLike	src/main/scala/tilelink/BusWrapper.scala	/^trait TLBusWrapperConnectionLike {$/;"	t
TLBusWrapperInstantiationLike	src/main/scala/tilelink/BusWrapper.scala	/^trait TLBusWrapperInstantiationLike {$/;"	t
TLBusWrapperLocation	src/main/scala/subsystem/BusTopology.scala	/^class TLBusWrapperLocation(name: String) extends Location[TLBusWrapper](name)$/;"	c
TLBusWrapperTopology	src/main/scala/tilelink/BusWrapper.scala	/^class TLBusWrapperTopology($/;"	c
TLBypassNode	src/main/scala/devices/tilelink/BusBypass.scala	/^class TLBypassNode(dFn: TLSlavePortParameters => TLSlavePortParameters)(implicit valName: ValName) extends TLCustomNode$/;"	c
TLCacheCork	src/main/scala/tilelink/CacheCork.scala	/^class TLCacheCork(params: TLCacheCorkParams = TLCacheCorkParams())(implicit p: Parameters) extends LazyModule$/;"	c
TLCacheCork	src/main/scala/tilelink/CacheCork.scala	/^object TLCacheCork$/;"	c
TLCacheCorkParams	src/main/scala/tilelink/CacheCork.scala	/^case class TLCacheCorkParams($/;"	c
TLChannel	src/main/scala/tilelink/Bundles.scala	/^sealed trait TLChannel extends TLBundleBase {$/;"	t
TLChannelBeatBytes	src/main/scala/tilelink/Parameters.scala	/^case class TLChannelBeatBytes(a: Option[Int], b: Option[Int], c: Option[Int], d: Option[Int])$/;"	c
TLChannelBeatBytes	src/main/scala/tilelink/Parameters.scala	/^object TLChannelBeatBytes{$/;"	c
TLClientNode	src/main/scala/tilelink/Nodes.scala	/^case class TLClientNode(portParams: Seq[TLMasterPortParameters])(implicit valName: ValName) extends SourceNode(TLImp)(portParams) with TLFormatNode$/;"	c
TLClientNode_ACancel	src/main/scala/tilelink/Nodes.scala	/^case class TLClientNode_ACancel(portParams: Seq[TLMasterPortParameters])(implicit valName: ValName) extends SourceNode(TLImp_ACancel)(portParams) with TLFormatNode$/;"	c
TLClientParameters	src/main/scala/tilelink/Parameters.scala	/^object TLClientParameters {$/;"	c
TLClientParameters	src/main/scala/tilelink/package.scala	/^  type TLClientParameters = TLMasterParameters$/;"	T
TLClientPortParameters	src/main/scala/tilelink/Parameters.scala	/^object TLClientPortParameters {$/;"	c
TLClientPortParameters	src/main/scala/tilelink/package.scala	/^  type TLClientPortParameters = TLMasterPortParameters$/;"	T
TLClockBlocker	src/main/scala/devices/tilelink/ClockBlocker.scala	/^class TLClockBlocker(params: BasicBusBlockerParams)(implicit p: Parameters)$/;"	c
TLClockDomainCrossing	src/main/scala/tilelink/package.scala	/^  implicit class TLClockDomainCrossing(private val x: HasClockDomainCrossing) extends AnyVal {$/;"	c
TLCommonTransferSizes	src/main/scala/tilelink/Parameters.scala	/^trait TLCommonTransferSizes {$/;"	t
TLCreditedAdapterNode	src/main/scala/tilelink/Nodes.scala	/^case class TLCreditedAdapterNode($/;"	c
TLCreditedBuffer	src/main/scala/tilelink/Credited.scala	/^class TLCreditedBuffer(delay: TLCreditedDelay)(implicit p: Parameters) extends LazyModule$/;"	c
TLCreditedBuffer	src/main/scala/tilelink/Credited.scala	/^object TLCreditedBuffer {$/;"	c
TLCreditedBundle	src/main/scala/tilelink/Bundles.scala	/^class TLCreditedBundle(params: TLBundleParameters) extends TLBundleBase(params)$/;"	c
TLCreditedClientPortParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLCreditedClientPortParameters(delay: TLCreditedDelay, base: TLMasterPortParameters) {def infoString = base.infoString}$/;"	c
TLCreditedDelay	src/main/scala/tilelink/Parameters.scala	/^case class TLCreditedDelay($/;"	c
TLCreditedDelay	src/main/scala/tilelink/Parameters.scala	/^object TLCreditedDelay {$/;"	c
TLCreditedEdgeParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLCreditedEdgeParameters(client: TLCreditedClientPortParameters, manager: TLCreditedManagerPortParameters, params: Parameters, sourceInfo: SourceInfo) extends FormatEdge$/;"	c
TLCreditedFormatNode	src/main/scala/tilelink/Nodes.scala	/^trait TLCreditedFormatNode extends FormatNode[TLCreditedEdgeParameters, TLCreditedEdgeParameters]$/;"	t
TLCreditedIdentityNode	src/main/scala/tilelink/Nodes.scala	/^case class TLCreditedIdentityNode()(implicit valName: ValName) extends IdentityNode(TLCreditedImp)() with TLCreditedFormatNode$/;"	c
TLCreditedImp	src/main/scala/tilelink/Nodes.scala	/^object TLCreditedImp extends SimpleNodeImp[TLCreditedClientPortParameters, TLCreditedManagerPortParameters, TLCreditedEdgeParameters, TLCreditedBundle]$/;"	c
TLCreditedManagerPortParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLCreditedManagerPortParameters(delay: TLCreditedDelay, base: TLSlavePortParameters) {def infoString = base.infoString}$/;"	c
TLCreditedNameNode	src/main/scala/tilelink/Nodes.scala	/^object TLCreditedNameNode {$/;"	c
TLCreditedSink	src/main/scala/tilelink/Credited.scala	/^class TLCreditedSink(delay: TLCreditedDelay)(implicit p: Parameters) extends LazyModule$/;"	c
TLCreditedSink	src/main/scala/tilelink/Credited.scala	/^object TLCreditedSink {$/;"	c
TLCreditedSinkNode	src/main/scala/tilelink/Nodes.scala	/^case class TLCreditedSinkNode(delay: TLCreditedDelay)(implicit valName: ValName)$/;"	c
TLCreditedSource	src/main/scala/tilelink/Credited.scala	/^class TLCreditedSource(delay: TLCreditedDelay)(implicit p: Parameters) extends LazyModule$/;"	c
TLCreditedSource	src/main/scala/tilelink/Credited.scala	/^object TLCreditedSource {$/;"	c
TLCreditedSourceNode	src/main/scala/tilelink/Nodes.scala	/^case class TLCreditedSourceNode(delay: TLCreditedDelay)(implicit valName: ValName)$/;"	c
TLCustomNode	src/main/scala/tilelink/Nodes.scala	/^abstract class TLCustomNode(implicit valName: ValName)$/;"	c
TLDataChannel	src/main/scala/tilelink/Bundles.scala	/^sealed trait TLDataChannel extends TLChannel$/;"	t
TLDeadlock	src/main/scala/devices/tilelink/Deadlock.scala	/^class TLDeadlock(params: DevNullParams, beatBytes: Int = 4)(implicit p: Parameters)$/;"	c
TLDebugModule	src/main/scala/devices/debug/Debug.scala	/^class TLDebugModule(beatBytes: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLDebugModuleInner	src/main/scala/devices/debug/Debug.scala	/^class TLDebugModuleInner(device: Device, getNComponents: () => Int, beatBytes: Int)(implicit p: Parameters) extends LazyModule$/;"	c
TLDebugModuleInnerAsync	src/main/scala/devices/debug/Debug.scala	/^class TLDebugModuleInnerAsync(device: Device, getNComponents: () => Int, beatBytes: Int)(implicit p: Parameters) extends LazyModule{$/;"	c
TLDebugModuleOuter	src/main/scala/devices/debug/Debug.scala	/^class TLDebugModuleOuter(device: Device)(implicit p: Parameters) extends LazyModule {$/;"	c
TLDebugModuleOuterAsync	src/main/scala/devices/debug/Debug.scala	/^class TLDebugModuleOuterAsync(device: Device)(implicit p: Parameters) extends LazyModule {$/;"	c
TLDecoupledArbiterHighestTest	src/main/scala/tilelink/Arbiter.scala	/^class TLDecoupledArbiterHighestTest(txns: Int = 128, timeout: Int = 500000)(implicit p: Parameters)$/;"	c
TLDecoupledArbiterLowestTest	src/main/scala/tilelink/Arbiter.scala	/^class TLDecoupledArbiterLowestTest(txns: Int = 128, timeout: Int = 500000)(implicit p: Parameters)$/;"	c
TLDecoupledArbiterRobinTest	src/main/scala/tilelink/Arbiter.scala	/^class TLDecoupledArbiterRobinTest(txns: Int = 128, timeout: Int = 500000, print: Boolean = false)$/;"	c
TLDelayer	src/main/scala/tilelink/Delayer.scala	/^class TLDelayer(q: Double)(implicit p: Parameters) extends LazyModule$/;"	c
TLDelayer	src/main/scala/tilelink/Delayer.scala	/^object TLDelayer$/;"	c
TLEdge	src/main/scala/tilelink/Edges.scala	/^class TLEdge($/;"	c
TLEdgeIn	src/main/scala/tilelink/Edges.scala	/^class TLEdgeIn($/;"	c
TLEdgeOut	src/main/scala/tilelink/Edges.scala	/^class TLEdgeOut($/;"	c
TLEdgeParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLEdgeParameters($/;"	c
TLEphemeralNode	src/main/scala/tilelink/Nodes.scala	/^case class TLEphemeralNode()(implicit valName: ValName) extends EphemeralNode(TLImp)()$/;"	c
TLError	src/main/scala/devices/tilelink/Error.scala	/^class TLError(params: DevNullParams, buffer: Boolean = true, beatBytes: Int = 4)(implicit p: Parameters)$/;"	c
TLErrorEvaluator	src/main/scala/tilelink/ErrorEvaluator.scala	/^class TLErrorEvaluator(test: RequestPattern, testOn: Boolean, testOff: Boolean, deny: Boolean = false)(implicit p: Parameters) extends LazyModule$/;"	c
TLErrorEvaluator	src/main/scala/tilelink/ErrorEvaluator.scala	/^object TLErrorEvaluator$/;"	c
TLExampleDevice	src/main/scala/examples/ExampleDevice.scala	/^class TLExampleDevice(params: ExampleDeviceParams)(implicit p: Parameters)$/;"	c
TLFIFOFixer	src/main/scala/tilelink/FIFOFixer.scala	/^class TLFIFOFixer(policy: TLFIFOFixer.Policy = TLFIFOFixer.all)(implicit p: Parameters) extends LazyModule$/;"	c
TLFIFOFixer	src/main/scala/tilelink/FIFOFixer.scala	/^object TLFIFOFixer$/;"	c
TLFilter	src/main/scala/tilelink/Filter.scala	/^class TLFilter($/;"	c
TLFilter	src/main/scala/tilelink/Filter.scala	/^object TLFilter$/;"	c
TLFormatNode	src/main/scala/tilelink/Nodes.scala	/^trait TLFormatNode extends FormatNode[TLEdgeIn, TLEdgeOut]$/;"	t
TLFragmenter	src/main/scala/tilelink/Fragmenter.scala	/^class TLFragmenter(val minSize: Int, val maxSize: Int, val alwaysMin: Boolean = false, val earlyAck: EarlyAck.T = EarlyAck.None, val holdFirstDeny: Boolean = false)(implicit p: Parameters) extends LazyModule$/;"	c
TLFragmenter	src/main/scala/tilelink/Fragmenter.scala	/^object TLFragmenter$/;"	c
TLFuzzRAM	src/main/scala/tilelink/Fuzzer.scala	/^class TLFuzzRAM(txns: Int)(implicit p: Parameters) extends LazyModule$/;"	c
TLFuzzRAMTest	src/main/scala/tilelink/Fuzzer.scala	/^class TLFuzzRAMTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLFuzzer	src/main/scala/tilelink/Fuzzer.scala	/^class TLFuzzer($/;"	c
TLFuzzer	src/main/scala/tilelink/Fuzzer.scala	/^object TLFuzzer$/;"	c
TLHintHandler	src/main/scala/tilelink/HintHandler.scala	/^class TLHintHandler(passthrough: Boolean = true)(implicit p: Parameters) extends LazyModule$/;"	c
TLHintHandler	src/main/scala/tilelink/HintHandler.scala	/^object TLHintHandler$/;"	c
TLHints	src/main/scala/tilelink/Bundles.scala	/^object TLHints$/;"	c
TLIdentityNode	src/main/scala/tilelink/Nodes.scala	/^case class TLIdentityNode()(implicit valName: ValName) extends IdentityNode(TLImp)() with TLFormatNode$/;"	c
TLImp	src/main/scala/tilelink/Nodes.scala	/^object TLImp extends NodeImp[TLMasterPortParameters, TLSlavePortParameters, TLEdgeOut, TLEdgeIn, TLBundle]$/;"	c
TLImp_ACancel	src/main/scala/tilelink/Nodes.scala	/^object TLImp_ACancel extends NodeImp[TLMasterPortParameters, TLSlavePortParameters, TLEdgeOut, TLEdgeIn, TLBundle_ACancel]$/;"	c
TLInwardClockCrossingHelper	src/main/scala/tilelink/CrossingHelper.scala	/^case class TLInwardClockCrossingHelper(name: String, scope: LazyScope, node: TLInwardNode)$/;"	c
TLInwardCrossingHelper	src/main/scala/tilelink/CrossingHelper.scala	/^trait TLInwardCrossingHelper {$/;"	t
TLInwardNode	src/main/scala/tilelink/package.scala	/^  type TLInwardNode = InwardNodeHandle[TLMasterPortParameters, TLSlavePortParameters, TLEdgeIn, TLBundle]$/;"	T
TLInwardResetCrossingHelper	src/main/scala/tilelink/CrossingHelper.scala	/^case class TLInwardResetCrossingHelper(name: String, scope: LazyScope, node: TLInwardNode)$/;"	c
TLIsolation	src/main/scala/tilelink/Isolation.scala	/^class TLIsolation(fOut: (Bool, UInt) => UInt, fIn: (Bool, UInt) => UInt)(implicit p: Parameters) extends LazyModule$/;"	c
TLJBarWrapper	src/main/scala/tilelink/BusWrapper.scala	/^class TLJBarWrapper(params: TLJBarWrapperParams, name: String)(implicit p: Parameters) extends TLBusWrapper(params, name) {$/;"	c
TLJBarWrapperParams	src/main/scala/tilelink/BusWrapper.scala	/^case class TLJBarWrapperParams($/;"	c
TLJbar	src/main/scala/tilelink/Jbar.scala	/^class TLJbar(policy: TLArbiter.Policy = TLArbiter.roundRobin)(implicit p: Parameters) extends LazyModule$/;"	c
TLJbar	src/main/scala/tilelink/Jbar.scala	/^object TLJbar$/;"	c
TLJbarTest	src/main/scala/tilelink/Jbar.scala	/^class TLJbarTest(nClients: Int, nManagers: Int, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLJbarTestImp	src/main/scala/tilelink/Jbar.scala	/^class TLJbarTestImp(nClients: Int, nManagers: Int, txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLJunctionNode	src/main/scala/tilelink/Nodes.scala	/^case class TLJunctionNode($/;"	c
TLManagerNode	src/main/scala/tilelink/Nodes.scala	/^case class TLManagerNode(portParams: Seq[TLSlavePortParameters])(implicit valName: ValName) extends SinkNode(TLImp)(portParams) with TLFormatNode$/;"	c
TLManagerParameters	src/main/scala/tilelink/Parameters.scala	/^object TLManagerParameters {$/;"	c
TLManagerParameters	src/main/scala/tilelink/package.scala	/^  type TLManagerParameters = TLSlaveParameters$/;"	T
TLManagerPortParameters	src/main/scala/tilelink/Parameters.scala	/^object TLManagerPortParameters {$/;"	c
TLManagerPortParameters	src/main/scala/tilelink/package.scala	/^  type TLManagerPortParameters = TLSlavePortParameters$/;"	T
TLManagerViewpointLocated	src/main/scala/subsystem/BaseSubsystem.scala	/^case class TLManagerViewpointLocated(where: HierarchicalLocation) extends Field[Location[TLBusWrapper]](SBUS)$/;"	c
TLMap	src/main/scala/tilelink/Map.scala	/^class TLMap(fn: AddressSet => BigInt)(implicit p: Parameters) extends LazyModule$/;"	c
TLMap	src/main/scala/tilelink/Map.scala	/^object TLMap$/;"	c
TLMaskROM	src/main/scala/devices/tilelink/MaskROM.scala	/^class TLMaskROM(c: MaskROMParams)(implicit p: Parameters) extends LazyModule {$/;"	c
TLMasterMuxTest	src/main/scala/devices/tilelink/MasterMux.scala	/^class TLMasterMuxTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLMasterMuxTester	src/main/scala/devices/tilelink/MasterMux.scala	/^class TLMasterMuxTester(txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLMasterParameters	src/main/scala/tilelink/Parameters.scala	/^class TLMasterParameters private($/;"	c
TLMasterParameters	src/main/scala/tilelink/Parameters.scala	/^object TLMasterParameters {$/;"	c
TLMasterPortParameters	src/main/scala/tilelink/Parameters.scala	/^class TLMasterPortParameters private($/;"	c
TLMasterPortParameters	src/main/scala/tilelink/Parameters.scala	/^object TLMasterPortParameters {$/;"	c
TLMasterToSlaveTransferSizes	src/main/scala/tilelink/Parameters.scala	/^case class TLMasterToSlaveTransferSizes($/;"	c
TLMasterToSlaveTransferSizes	src/main/scala/tilelink/Parameters.scala	/^object TLMasterToSlaveTransferSizes {$/;"	c
TLMessages	src/main/scala/tilelink/Bundles.scala	/^object TLMessages$/;"	c
TLMixedNodeCancel	src/main/scala/tilelink/package.scala	/^  type TLMixedNodeCancel = NodeHandle[TLMasterPortParameters, TLSlavePortParameters, TLEdgeIn, TLBundle_ACancel, TLMasterPortParameters, TLSlavePortParameters, TLEdgeOut, TLBundle]$/;"	T
TLMonitor	src/main/scala/tilelink/Monitor.scala	/^class TLMonitor(args: TLMonitorArgs, monitorDir: MonitorDirection = MonitorDirection.Monitor) extends TLMonitorBase(args)$/;"	c
TLMonitor	src/main/scala/tilelink/Monitor.scala	/^object TLMonitor {$/;"	c
TLMonitorArgs	src/main/scala/tilelink/Monitor.scala	/^case class TLMonitorArgs(edge: TLEdge)$/;"	c
TLMonitorBase	src/main/scala/tilelink/Monitor.scala	/^abstract class TLMonitorBase(args: TLMonitorArgs) extends Module$/;"	c
TLMonitorBuilder	src/main/scala/tilelink/Nodes.scala	/^case object TLMonitorBuilder extends Field[TLMonitorArgs => TLMonitorBase](args => new TLMonitor(args))$/;"	c
TLMonitorStrictMode	src/main/scala/formal/FormalUtils.scala	/^case object TLMonitorStrictMode extends Field[Boolean](true)$/;"	c
TLMulticlientXbar	src/main/scala/tilelink/Xbar.scala	/^class TLMulticlientXbar(nManagers: Int, nClients: Int, txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLMulticlientXbarTest	src/main/scala/tilelink/Xbar.scala	/^class TLMulticlientXbarTest(nManagers: Int, nClients: Int, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLNameNode	src/main/scala/tilelink/Nodes.scala	/^object TLNameNode {$/;"	c
TLNetworkTopologyLocated	src/main/scala/subsystem/BaseSubsystem.scala	/^case class TLNetworkTopologyLocated(where: HierarchicalLocation) extends Field[Seq[CanInstantiateWithinContextThatHasTileLinkLocations with CanConnectWithinContextThatHasTileLinkLocations]]$/;"	c
TLNexusNode	src/main/scala/tilelink/Nodes.scala	/^case class TLNexusNode($/;"	c
TLNexusNode_ACancel	src/main/scala/tilelink/Nodes.scala	/^case class TLNexusNode_ACancel($/;"	c
TLNode	src/main/scala/tilelink/package.scala	/^  type TLNode = NodeHandle[TLMasterPortParameters, TLSlavePortParameters, TLEdgeIn, TLBundle, TLMasterPortParameters, TLSlavePortParameters, TLEdgeOut, TLBundle]$/;"	T
TLNode_ACancel	src/main/scala/tilelink/package.scala	/^  type TLNode_ACancel    = NodeHandle[TLMasterPortParameters, TLSlavePortParameters, TLEdgeIn, TLBundle_ACancel, TLMasterPortParameters, TLSlavePortParameters, TLEdgeOut, TLBundle_ACancel]$/;"	T
TLOutwardClockCrossingHelper	src/main/scala/tilelink/CrossingHelper.scala	/^case class TLOutwardClockCrossingHelper(name: String, scope: LazyScope, node: TLOutwardNode)$/;"	c
TLOutwardCrossingHelper	src/main/scala/tilelink/CrossingHelper.scala	/^trait TLOutwardCrossingHelper {$/;"	t
TLOutwardNode	src/main/scala/tilelink/package.scala	/^  type TLOutwardNode = OutwardNodeHandle[TLMasterPortParameters, TLSlavePortParameters, TLEdgeOut, TLBundle]$/;"	T
TLOutwardResetCrossingHelper	src/main/scala/tilelink/CrossingHelper.scala	/^case class TLOutwardResetCrossingHelper(name: String, scope: LazyScope, node: TLOutwardNode)$/;"	c
TLPLIC	src/main/scala/devices/tilelink/Plic.scala	/^class TLPLIC(params: PLICParams, beatBytes: Int)(implicit p: Parameters) extends LazyModule$/;"	c
TLPatternPusher	src/main/scala/tilelink/PatternPusher.scala	/^class TLPatternPusher(name: String, pattern: Seq[Pattern])(implicit p: Parameters) extends LazyModule$/;"	c
TLPatternPusher	src/main/scala/tilelink/PatternPusher.scala	/^object TLPatternPusher$/;"	c
TLPermissions	src/main/scala/tilelink/Bundles.scala	/^object TLPermissions$/;"	c
TLProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object TLProtocol extends ProtocolType$/;"	c
TLRAM	src/main/scala/tilelink/SRAM.scala	/^class TLRAM($/;"	c
TLRAM	src/main/scala/tilelink/SRAM.scala	/^object TLRAM$/;"	c
TLRAMAsyncCrossing	src/main/scala/tilelink/AsyncCrossing.scala	/^class TLRAMAsyncCrossing(txns: Int, params: AsynchronousCrossing = AsynchronousCrossing())(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMAsyncCrossingTest	src/main/scala/tilelink/AsyncCrossing.scala	/^class TLRAMAsyncCrossingTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRAMAtomicAutomata	src/main/scala/tilelink/AtomicAutomata.scala	/^class TLRAMAtomicAutomata(txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMAtomicAutomataTest	src/main/scala/tilelink/AtomicAutomata.scala	/^class TLRAMAtomicAutomataTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRAMCreditedCrossing	src/main/scala/tilelink/Credited.scala	/^class TLRAMCreditedCrossing(txns: Int, params: CreditedCrossing)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMCreditedCrossingTest	src/main/scala/tilelink/Credited.scala	/^class TLRAMCreditedCrossingTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRAMECC	src/main/scala/tilelink/SRAM.scala	/^class TLRAMECC(ramBeatBytes: Int, eccBytes: Int, sramReg: Boolean, txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMECCTest	src/main/scala/tilelink/SRAM.scala	/^class TLRAMECCTest(ramBeatBytes: Int, eccBytes: Int, sramReg: Boolean, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRAMErrors	src/main/scala/tilelink/SRAM.scala	/^class TLRAMErrors(val params: ECCParams, val addrBits: Int) extends Bundle with CanHaveErrors {$/;"	c
TLRAMFragmenter	src/main/scala/tilelink/Fragmenter.scala	/^class TLRAMFragmenter(ramBeatBytes: Int, maxSize: Int, txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMFragmenterTest	src/main/scala/tilelink/Fragmenter.scala	/^class TLRAMFragmenterTest(ramBeatBytes: Int, maxSize: Int, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRAMHintHandler	src/main/scala/tilelink/HintHandler.scala	/^class TLRAMHintHandler(txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMHintHandlerTest	src/main/scala/tilelink/HintHandler.scala	/^class TLRAMHintHandlerTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRAMModel	src/main/scala/tilelink/RAMModel.scala	/^class TLRAMModel(log: String = "", ignoreCorruptData: Boolean = false, ignoreDeniedData: Boolean = true)(implicit p: Parameters) extends LazyModule$/;"	c
TLRAMModel	src/main/scala/tilelink/RAMModel.scala	/^object TLRAMModel$/;"	c
TLRAMRationalCrossing	src/main/scala/tilelink/RationalCrossing.scala	/^class TLRAMRationalCrossing(txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMRationalCrossingSink	src/main/scala/tilelink/RationalCrossing.scala	/^class TLRAMRationalCrossingSink(direction: RationalDirection)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMRationalCrossingSource	src/main/scala/tilelink/RationalCrossing.scala	/^class TLRAMRationalCrossingSource(name: String, txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMRationalCrossingTest	src/main/scala/tilelink/RationalCrossing.scala	/^class TLRAMRationalCrossingTest(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRAMSimple	src/main/scala/tilelink/SRAM.scala	/^class TLRAMSimple(ramBeatBytes: Int, sramReg: Boolean, txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMSimpleTest	src/main/scala/tilelink/SRAM.scala	/^class TLRAMSimpleTest(ramBeatBytes: Int, sramReg: Boolean, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRAMWidthWidget	src/main/scala/tilelink/WidthWidget.scala	/^class TLRAMWidthWidget(first: Int, second: Int, txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMWidthWidgetTest	src/main/scala/tilelink/WidthWidget.scala	/^class TLRAMWidthWidgetTest(little: Int, big: Int, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRAMXbar	src/main/scala/tilelink/Xbar.scala	/^class TLRAMXbar(nManagers: Int, txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMXbarTest	src/main/scala/tilelink/Xbar.scala	/^class TLRAMXbarTest(nManagers: Int, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRAMZeroDelay	src/main/scala/devices/tilelink/TestRAM.scala	/^class TLRAMZeroDelay(ramBeatBytes: Int, txns: Int)(implicit p: Parameters) extends LazyModule {$/;"	c
TLRAMZeroDelayTest	src/main/scala/devices/tilelink/TestRAM.scala	/^class TLRAMZeroDelayTest(ramBeatBytes: Int, txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLROM	src/main/scala/devices/tilelink/BootROM.scala	/^class TLROM(val base: BigInt, val size: Int, contentsDelayed: => Seq[Byte], executable: Boolean = true, beatBytes: Int = 4,$/;"	c
TLRR0Test	src/main/scala/tilelink/RegisterRouterTest.scala	/^class TLRR0Test(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRR1Test	src/main/scala/tilelink/RegisterRouterTest.scala	/^class TLRR1Test(txns: Int = 5000, timeout: Int = 500000)(implicit p: Parameters) extends UnitTest(timeout) {$/;"	c
TLRRTest0	src/main/scala/tilelink/RegisterRouterTest.scala	/^class TLRRTest0(address: BigInt)(implicit p: Parameters)$/;"	c
TLRRTest1	src/main/scala/tilelink/RegisterRouterTest.scala	/^class TLRRTest1(address: BigInt)(implicit p: Parameters)$/;"	c
TLRationalAdapterNode	src/main/scala/tilelink/Nodes.scala	/^case class TLRationalAdapterNode($/;"	c
TLRationalBundle	src/main/scala/tilelink/Bundles.scala	/^class TLRationalBundle(params: TLBundleParameters) extends TLBundleBase(params)$/;"	c
TLRationalClientPortParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLRationalClientPortParameters(base: TLMasterPortParameters) {def infoString = base.infoString}$/;"	c
TLRationalCrossing	src/main/scala/tilelink/RationalCrossing.scala	/^class TLRationalCrossing(direction: RationalDirection = Symmetric)(implicit p: Parameters) extends LazyModule$/;"	c
TLRationalCrossingSink	src/main/scala/tilelink/RationalCrossing.scala	/^class TLRationalCrossingSink(direction: RationalDirection = Symmetric)(implicit p: Parameters) extends LazyModule$/;"	c
TLRationalCrossingSink	src/main/scala/tilelink/RationalCrossing.scala	/^object TLRationalCrossingSink$/;"	c
TLRationalCrossingSource	src/main/scala/tilelink/RationalCrossing.scala	/^class TLRationalCrossingSource(implicit p: Parameters) extends LazyModule$/;"	c
TLRationalCrossingSource	src/main/scala/tilelink/RationalCrossing.scala	/^object TLRationalCrossingSource$/;"	c
TLRationalEdgeParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLRationalEdgeParameters(client: TLRationalClientPortParameters, manager: TLRationalManagerPortParameters, params: Parameters, sourceInfo: SourceInfo) extends FormatEdge$/;"	c
TLRationalFormatNode	src/main/scala/tilelink/Nodes.scala	/^trait TLRationalFormatNode extends FormatNode[TLRationalEdgeParameters, TLRationalEdgeParameters]$/;"	t
TLRationalIdentityNode	src/main/scala/tilelink/Nodes.scala	/^case class TLRationalIdentityNode()(implicit valName: ValName) extends IdentityNode(TLRationalImp)() with TLRationalFormatNode$/;"	c
TLRationalImp	src/main/scala/tilelink/Nodes.scala	/^object TLRationalImp extends SimpleNodeImp[TLRationalClientPortParameters, TLRationalManagerPortParameters, TLRationalEdgeParameters, TLRationalBundle]$/;"	c
TLRationalManagerPortParameters	src/main/scala/tilelink/Parameters.scala	/^case class TLRationalManagerPortParameters(direction: RationalDirection, base: TLSlavePortParameters) {def infoString = base.infoString}$/;"	c
TLRationalNameNode	src/main/scala/tilelink/Nodes.scala	/^object TLRationalNameNode {$/;"	c
TLRationalSinkNode	src/main/scala/tilelink/Nodes.scala	/^case class TLRationalSinkNode(direction: RationalDirection)(implicit valName: ValName)$/;"	c
TLRationalSourceNode	src/main/scala/tilelink/Nodes.scala	/^case class TLRationalSourceNode()(implicit valName: ValName)$/;"	c
TLRegBundle	src/main/scala/tilelink/RegisterRouter.scala	/^class TLRegBundle[P](val params: P, val arg: TLRegBundleArg) extends TLRegBundleBase(arg)$/;"	c
TLRegBundleArg	src/main/scala/tilelink/RegisterRouter.scala	/^case class TLRegBundleArg()(implicit val p: Parameters)$/;"	c
TLRegBundleBase	src/main/scala/tilelink/RegisterRouter.scala	/^class TLRegBundleBase(arg: TLRegBundleArg) extends Bundle$/;"	c
TLRegModule	src/main/scala/tilelink/RegisterRouter.scala	/^class TLRegModule[P, B <: TLRegBundleBase](val params: P, bundleBuilder: => B, router: TLRegisterRouterBase)$/;"	c
TLRegisterNode	src/main/scala/tilelink/RegisterRouter.scala	/^case class TLRegisterNode($/;"	c
TLRegisterRouter	src/main/scala/tilelink/RegisterRouter.scala	/^class TLRegisterRouter[B <: TLRegBundleBase, M <: LazyModuleImp]($/;"	c
TLRegisterRouterBase	src/main/scala/tilelink/RegisterRouter.scala	/^abstract class TLRegisterRouterBase(devname: String, devcompat: Seq[String], val address: AddressSet, interrupts: Int, concurrency: Int, beatBytes: Int, undefZero: Boolean, executable: Boolean)(implicit p: Parameters) extends LazyModule$/;"	c
TLRegisterRouterExtra	src/main/scala/tilelink/RegisterRouter.scala	/^case object TLRegisterRouterExtra extends ControlKey[TLRegisterRouterExtraBundle]("tlrr_extra")$/;"	c
TLRegisterRouterExtraBundle	src/main/scala/tilelink/RegisterRouter.scala	/^class TLRegisterRouterExtraBundle(val sourceBits: Int, val sizeBits: Int) extends Bundle {$/;"	c
TLRegisterRouterExtraField	src/main/scala/tilelink/RegisterRouter.scala	/^case class TLRegisterRouterExtraField(sourceBits: Int, sizeBits: Int) extends BundleField(TLRegisterRouterExtra) {$/;"	c
TLResetDomainCrossing	src/main/scala/tilelink/package.scala	/^  implicit class TLResetDomainCrossing(private val x: HasResetDomainCrossing) extends AnyVal {$/;"	c
TLSimpleUnitTestConfig	src/main/scala/unittest/Configs.scala	/^class TLSimpleUnitTestConfig extends Config(new WithTLSimpleUnitTests ++ new WithTestDuration(10) ++ new BaseSubsystemConfig)$/;"	c
TLSlaveParameters	src/main/scala/tilelink/Parameters.scala	/^class TLSlaveParameters private($/;"	c
TLSlaveParameters	src/main/scala/tilelink/Parameters.scala	/^object TLSlaveParameters {$/;"	c
TLSlavePortParameters	src/main/scala/tilelink/Parameters.scala	/^class TLSlavePortParameters private($/;"	c
TLSlavePortParameters	src/main/scala/tilelink/Parameters.scala	/^object TLSlavePortParameters {$/;"	c
TLSlaveToMasterTransferSizes	src/main/scala/tilelink/Parameters.scala	/^case class TLSlaveToMasterTransferSizes($/;"	c
TLSlaveToMasterTransferSizes	src/main/scala/tilelink/Parameters.scala	/^object TLSlaveToMasterTransferSizes {$/;"	c
TLSourceIdMap	src/main/scala/tilelink/Parameters.scala	/^class TLSourceIdMap(tl: TLMasterPortParameters) extends IdMap[TLSourceIdMapEntry] {$/;"	c
TLSourceIdMapEntry	src/main/scala/tilelink/Parameters.scala	/^case class TLSourceIdMapEntry(tlId: IdRange, name: String, isCache: Boolean, requestFifo: Boolean)$/;"	c
TLSourceShrinker	src/main/scala/tilelink/SourceShrinker.scala	/^class TLSourceShrinker(maxInFlight: Int)(implicit p: Parameters) extends LazyModule$/;"	c
TLSourceShrinker	src/main/scala/tilelink/SourceShrinker.scala	/^object TLSourceShrinker$/;"	c
TLSubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^trait TLSubProtocol extends SubProtocolType$/;"	t
TLTempNode	src/main/scala/tilelink/Nodes.scala	/^object TLTempNode {$/;"	c
TLTestRAM	src/main/scala/devices/tilelink/TestRAM.scala	/^class TLTestRAM(address: AddressSet, executable: Boolean = true, beatBytes: Int = 4, trackCorruption: Boolean = true)(implicit p: Parameters) extends LazyModule$/;"	c
TLToAHB	src/main/scala/tilelink/ToAHB.scala	/^class TLToAHB(val aFlow: Boolean = false, val supportHints: Boolean = true, val supportsRETRY: Boolean = true)(implicit p: Parameters) extends LazyModule$/;"	c
TLToAHB	src/main/scala/tilelink/ToAHB.scala	/^object TLToAHB$/;"	c
TLToAHBNode	src/main/scala/tilelink/ToAHB.scala	/^case class TLToAHBNode(supportHints: Boolean)(implicit valName: ValName) extends MixedAdapterNode(TLImp, AHBImpMaster)($/;"	c
TLToAPB	src/main/scala/tilelink/ToAPB.scala	/^class TLToAPB(val aFlow: Boolean = true)(implicit p: Parameters) extends LazyModule$/;"	c
TLToAPB	src/main/scala/tilelink/ToAPB.scala	/^object TLToAPB$/;"	c
TLToAPBNode	src/main/scala/tilelink/ToAPB.scala	/^case class TLToAPBNode()(implicit valName: ValName) extends MixedAdapterNode(TLImp, APBImp)($/;"	c
TLToAXI4	src/main/scala/tilelink/ToAXI4.scala	/^class TLToAXI4(val combinational: Boolean = true, val adapterName: Option[String] = None, val stripBits: Int = 0, val wcorrupt: Boolean = true)(implicit p: Parameters) extends LazyModule$/;"	c
TLToAXI4	src/main/scala/tilelink/ToAXI4.scala	/^object TLToAXI4$/;"	c
TLToAXI4IdMapEntry	src/main/scala/tilelink/ToAXI4.scala	/^case class TLToAXI4IdMapEntry(axi4Id: IdRange, tlId: IdRange, name: String, isCache: Boolean, requestFifo: Boolean)$/;"	c
TLToAXI4Node	src/main/scala/tilelink/ToAXI4.scala	/^case class TLToAXI4Node(wcorrupt: Boolean = true)(implicit valName: ValName) extends MixedAdapterNode(TLImp, AXI4Imp)($/;"	c
TLWidthUnitTestConfig	src/main/scala/unittest/Configs.scala	/^class TLWidthUnitTestConfig extends Config(new WithTLWidthUnitTests ++ new WithTestDuration(10) ++ new BaseSubsystemConfig)$/;"	c
TLWidthWidget	src/main/scala/tilelink/WidthWidget.scala	/^class TLWidthWidget(innerBeatBytes: Int)(implicit p: Parameters) extends LazyModule$/;"	c
TLWidthWidget	src/main/scala/tilelink/WidthWidget.scala	/^object TLWidthWidget$/;"	c
TLXbar	src/main/scala/tilelink/Xbar.scala	/^class TLXbar(policy: TLArbiter.Policy = TLArbiter.roundRobin)(implicit p: Parameters) extends LazyModule$/;"	c
TLXbar	src/main/scala/tilelink/Xbar.scala	/^object TLXbar$/;"	c
TLXbarUnitTestConfig	src/main/scala/unittest/Configs.scala	/^class TLXbarUnitTestConfig extends Config(new WithTLXbarUnitTests ++ new WithTestDuration(10) ++ new BaseSubsystemConfig)$/;"	c
TLXbar_ACancel	src/main/scala/tilelink/Xbar.scala	/^class TLXbar_ACancel(policy: TLArbiter.Policy = TLArbiter.roundRobin)(implicit p: Parameters) extends LazyModule$/;"	c
TLXbar_ACancel	src/main/scala/tilelink/Xbar.scala	/^object TLXbar_ACancel$/;"	c
TLZero	src/main/scala/devices/tilelink/Zero.scala	/^class TLZero(address: AddressSet, beatBytes: Int = 4)(implicit p: Parameters)$/;"	c
TL_C	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class TL_C($/;"	c
TL_CSubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object TL_CSubProtocol extends TLSubProtocol$/;"	c
TL_UH	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class TL_UH($/;"	c
TL_UHSubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object TL_UHSubProtocol extends TLSubProtocol$/;"	c
TL_UL	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case class TL_UL($/;"	c
TL_ULSubProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^case object TL_ULSubProtocol extends TLSubProtocol$/;"	c
TLtoAXI4IdMap	src/main/scala/tilelink/ToAXI4.scala	/^class TLtoAXI4IdMap(tlPort: TLMasterPortParameters) extends IdMap[TLToAXI4IdMapEntry]$/;"	c
TMS	src/main/scala/jtag/JtagTap.scala	/^  val TMS   = Output(Bool())$/;"	l
TODO	src/main/scala/formal/FormalUtils.scala	/^  object TODO extends PropertyClass("TODO")$/;"	c
TODO_RTL	src/main/scala/formal/FormalUtils.scala	/^  object TODO_RTL extends PropertyClass("TODO_RTL")$/;"	c
TOOLS_HASH	regression/Makefile	/^TOOLS_HASH ?= $(shell cat $(TOP)\/riscv-tools.hash)$/;"	m
TOP	regression/Makefile	/^TOP ?= ..$/;"	m
TORTURE_CONFIG	regression/Makefile	/^TORTURE_CONFIG ?= default$/;"	m
TORTURE_SAVE_DIR	regression/Makefile	/^TORTURE_SAVE_DIR ?= torture-failures$/;"	m
TRACKED	src/main/scala/diplomacy/Parameters.scala	/^  case object TRACKED     extends T \/\/ the region may have been cached by another master, but coherence is being provided$/;"	c
TRANSFORM_B	src/main/scala/tilelink/Broadcast.scala	/^  def TRANSFORM_B = 2.U$/;"	m
TRANSFORM_T	src/main/scala/tilelink/Broadcast.scala	/^  def TRANSFORM_T = 3.U$/;"	m
TRANS_BUSY	src/main/scala/amba/ahb/Protocol.scala	/^  def TRANS_BUSY   = UInt(1, width = transBits) \/\/ No transfer requested, in a burst$/;"	m
TRANS_IDLE	src/main/scala/amba/ahb/Protocol.scala	/^  def TRANS_IDLE   = UInt(0, width = transBits) \/\/ No transfer requested, not in a burst$/;"	m
TRANS_NONSEQ	src/main/scala/amba/ahb/Protocol.scala	/^  def TRANS_NONSEQ = UInt(2, width = transBits) \/\/ First (potentially only) request in a burst$/;"	m
TRANS_SEQ	src/main/scala/amba/ahb/Protocol.scala	/^  def TRANS_SEQ    = UInt(3, width = transBits) \/\/ Following requests in a burst$/;"	m
TRSTn	src/main/scala/jtag/JtagTap.scala	/^  val TRSTn = if (hasTRSTn) Some(Output(Bool())) else None$/;"	l
TagMan	src/main/scala/groundtest/TraceGen.scala	/^class TagMan(val logNumTags : Int) extends Module {$/;"	c
TargetDirKey	src/main/scala/stage/phases/PreElaboration.scala	/^case object TargetDirKey extends Field[String](".")$/;"	c
Term	src/main/scala/rocket/Decode.scala	/^class Term(val value: BigInt, val mask: BigInt = 0)$/;"	c
TernaryIf	src/main/scala/formal/FormalUtils.scala	/^object TernaryIf {$/;"	c
TestCase	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^  case class TestCase($/;"	c
TestClockSource	src/main/scala/prci/TestClockSource.scala	/^class TestClockSource(freqs: Seq[Option[Double]])(implicit p: Parameters) extends LazyModule {$/;"	c
TestDriver	src/main/resources/vsrc/TestDriver.v	/^module TestDriver;$/;"	m
TestDurationMultiplier	src/main/scala/unittest/Configs.scala	/^case object TestDurationMultiplier extends Field[Int]$/;"	c
TestGeneration	src/main/scala/system/RocketTestSuite.scala	/^object TestGeneration {$/;"	c
TestGenerator	src/main/scala/unittest/TestGenerator.scala	/^class TestGenerator(gen: LazyModule => Seq[LazyUnitTest])$/;"	c
TestGenerator	src/main/scala/unittest/TestGenerator.scala	/^object TestGenerator$/;"	c
TestHarness	src/main/scala/groundtest/TestHarness.scala	/^class TestHarness(implicit p: Parameters) extends Module {$/;"	c
TestHarness	src/main/scala/system/TestHarness.scala	/^class TestHarness()(implicit p: Parameters) extends Module {$/;"	c
TestHarness	src/main/scala/unittest/TestHarness.scala	/^class TestHarness(implicit val p: Parameters) extends Module {$/;"	c
TestImplType	src/main/scala/formal/FormalUtils.scala	/^case class TestImplType($/;"	c
TestLogicReset	src/main/scala/jtag/JtagStateMachine.scala	/^  case object TestLogicReset extends State(15)  \/\/ no effect on system logic, entered when TMS high for 5 TCK rising edges$/;"	c
TestPrefixSums	src/main/scala/util/PrefixSum.scala	/^object TestPrefixSums {$/;"	c
TestplanTestType	src/main/scala/formal/FormalUtils.scala	/^case object TestplanTestType extends Field[TestImplType](TestImplType())$/;"	c
TileContextType	src/main/scala/subsystem/HasTiles.scala	/^  type TileContextType <: DefaultTileContextType$/;"	T
TileCrossingParamsLike	src/main/scala/subsystem/HasTiles.scala	/^trait TileCrossingParamsLike {$/;"	t
TileInterrupts	src/main/scala/tile/Interrupts.scala	/^class TileInterrupts(implicit p: Parameters) extends CoreBundle()(p) {$/;"	c
TileKey	src/main/scala/tile/BaseTile.scala	/^case object TileKey extends Field[TileParams]$/;"	c
TileMasterPortParams	src/main/scala/subsystem/HasTiles.scala	/^case class TileMasterPortParams($/;"	c
TilePRCIDomain	src/main/scala/tile/TilePRCIDomain.scala	/^abstract class TilePRCIDomain[T <: BaseTile]($/;"	c
TileParams	src/main/scala/tile/BaseTile.scala	/^trait TileParams {$/;"	t
TilePortParamsLike	src/main/scala/subsystem/HasTiles.scala	/^trait TilePortParamsLike {$/;"	t
TileResetDomain	src/main/scala/tile/TilePRCIDomain.scala	/^class TileResetDomain(clockSinkParams: ClockSinkParameters, resetCrossingType: ResetCrossingType)$/;"	c
TileSlavePortParams	src/main/scala/subsystem/HasTiles.scala	/^case class TileSlavePortParams($/;"	c
TileType	src/main/scala/groundtest/TraceGen.scala	/^  type TileType = TraceGenTile$/;"	T
TileType	src/main/scala/subsystem/HasTiles.scala	/^  type TileType <: BaseTile$/;"	T
TileVisibilityNodeKey	src/main/scala/tile/BaseTile.scala	/^case object TileVisibilityNodeKey extends Field[TLEphemeralNode]$/;"	c
TilesLocated	src/main/scala/subsystem/HasTiles.scala	/^case class TilesLocated(loc: HierarchicalLocation) extends Field[Seq[CanAttachTile]](Nil)$/;"	c
Timeout	src/main/scala/devices/debug/SBA.scala	/^  val Timeout    = Value(1)$/;"	l
Timer	src/main/scala/util/Timer.scala	/^class Timer(initCount: Int, maxInflight: Int) extends Module {$/;"	c
TinyConfig	src/main/scala/system/Configs.scala	/^class TinyConfig extends Config($/;"	c
ToAsyncBundle	src/main/scala/util/AsyncQueue.scala	/^object ToAsyncBundle$/;"	c
ToRational	src/main/scala/util/RationalCrossing.scala	/^object ToRational$/;"	c
Token	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^object Token {$/;"	c
Token	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^sealed trait Token {$/;"	t
Tokenizer	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^object Tokenizer {$/;"	c
Tokenizer	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^sealed trait Tokenizer[T] {$/;"	t
TokensInterpolator	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  implicit class TokensInterpolator(private val sc: StringContext) extends AnyVal {$/;"	c
TopLevelPortAnnotation	src/main/scala/util/Annotations.scala	/^case class TopLevelPortAnnotation($/;"	c
TopModuleAnnotation	src/main/scala/stage/RocketChipAnnotations.scala	/^case class TopModuleAnnotation(clazz: Class[_ <: Any]) extends NoTargetAnnotation with RocketChipOption$/;"	c
TraceAux	src/main/scala/rocket/CSR.scala	/^class TraceAux extends Bundle {$/;"	c
TraceCoreGroup	src/main/scala/util/TraceCoreInterface.scala	/^class TraceCoreGroup (val params: TraceCoreParams) extends Bundle {$/;"	c
TraceCoreInterface	src/main/scala/util/TraceCoreInterface.scala	/^class TraceCoreInterface (val params: TraceCoreParams) extends Bundle {$/;"	c
TraceCoreParams	src/main/scala/util/TraceCoreInterface.scala	/^class TraceCoreParams ($/;"	c
TraceGenBufferlessConfig	src/main/scala/groundtest/Configs.scala	/^class TraceGenBufferlessConfig extends Config($/;"	c
TraceGenConfig	src/main/scala/groundtest/Configs.scala	/^class TraceGenConfig extends Config($/;"	c
TraceGenParams	src/main/scala/groundtest/TraceGen.scala	/^case class TraceGenParams($/;"	c
TraceGenTile	src/main/scala/groundtest/TraceGen.scala	/^class TraceGenTile private($/;"	c
TraceGenTileAttachParams	src/main/scala/groundtest/TraceGen.scala	/^case class TraceGenTileAttachParams($/;"	c
TraceGenTileModuleImp	src/main/scala/groundtest/TraceGen.scala	/^class TraceGenTileModuleImp(outer: TraceGenTile) extends GroundTestTileModuleImp(outer) {$/;"	c
TraceGenerator	src/main/scala/groundtest/TraceGen.scala	/^class TraceGenerator(val params: TraceGenParams)(implicit val p: Parameters) extends Module$/;"	c
TraceItype	src/main/scala/util/TraceCoreInterface.scala	/^object TraceItype extends ChiselEnum {$/;"	c
TracedInstruction	src/main/scala/rocket/CSR.scala	/^class TracedInstruction(implicit p: Parameters) extends CoreBundle {$/;"	c
TransferSizes	src/main/scala/diplomacy/Parameters.scala	/^case class TransferSizes(min: Int, max: Int)$/;"	c
TransferSizes	src/main/scala/diplomacy/Parameters.scala	/^object TransferSizes {$/;"	c
TransformAnnotations	src/main/scala/stage/phases/TransformAnnotations.scala	/^class TransformAnnotations extends Phase with PreservesAll[Phase] with HasRocketChipStageUtils {$/;"	c
TranslatorExample	src/main/scala/tile/LazyRoCC.scala	/^class  TranslatorExample(opcodes: OpcodeSet)(implicit p: Parameters) extends LazyRoCC(opcodes, nPTWPorts = 1) {$/;"	c
TranslatorExampleModuleImp	src/main/scala/tile/LazyRoCC.scala	/^class TranslatorExampleModuleImp(outer: TranslatorExample)(implicit p: Parameters) extends LazyRoCCModuleImp(outer)$/;"	c
TriStateValue	src/main/scala/diplomacy/Parameters.scala	/^case class TriStateValue(value: Boolean, set: Boolean)$/;"	c
TriStateValue	src/main/scala/diplomacy/Parameters.scala	/^object TriStateValue$/;"	c
Tristate	src/main/scala/jtag/Utils.scala	/^class Tristate extends Bundle {$/;"	c
TrueLRU	src/main/scala/util/Replacement.scala	/^class TrueLRU(n_ways: Int) extends ReplacementPolicy {$/;"	c
Trunk	src/main/scala/tilelink/Metadata.scala	/^  def Trunk   = UInt(2, width)$/;"	m
TtoB	src/main/scala/tilelink/Bundles.scala	/^  def TtoB = UInt(0, cWidth)$/;"	m
TtoN	src/main/scala/tilelink/Bundles.scala	/^  def TtoN = UInt(1, cWidth)$/;"	m
TtoT	src/main/scala/tilelink/Bundles.scala	/^  def TtoT = UInt(3, cWidth)$/;"	m
TwoWayCounter	src/main/scala/util/Counters.scala	/^object TwoWayCounter {$/;"	c
U	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^case object U extends OMExtensionType$/;"	c
U	src/main/scala/jtag/JtagStateMachine.scala	/^    def U: UInt = id.U(State.width.W)$/;"	m
U	src/main/scala/rocket/CSR.scala	/^  val U = 0$/;"	l
UIntFromHexSubstring	src/main/resources/csrc/float_fix.cc	/^uint64_t UIntFromHexSubstring(std::string s, int index) {$/;"	f
UIntIsOneOf	src/main/scala/util/package.scala	/^  implicit class UIntIsOneOf(private val x: UInt) extends AnyVal {$/;"	c
UIntToAugmentedUInt	src/main/scala/util/package.scala	/^  implicit class UIntToAugmentedUInt(private val x: UInt) extends AnyVal {$/;"	c
UIntToOH1	src/main/scala/util/package.scala	/^  def UIntToOH1(x: UInt): UInt = UIntToOH1(x, (1 << x.getWidth) - 1)$/;"	m
UIntToOH1	src/main/scala/util/package.scala	/^  def UIntToOH1(x: UInt, width: Int): UInt = ~(SInt(-1, width=width).asUInt << x)(width-1, 0)$/;"	m
UNCACHED	src/main/scala/diplomacy/Parameters.scala	/^  case object UNCACHED    extends T \/\/ the region has not been cached yet, but should be cached when possible$/;"	c
UNSHFL	src/main/scala/rocket/Instructions.scala	/^  def UNSHFL             = BitPat("b0000100??????????101?????0110011")$/;"	m
UNSHFLI	src/main/scala/rocket/Instructions.scala	/^  def UNSHFLI            = BitPat("b0000100??????????101?????0010011")$/;"	m
UNSHFLW	src/main/scala/rocket/Instructions.scala	/^  def UNSHFLW            = BitPat("b0000100??????????101?????0111011")$/;"	m
URET	src/main/scala/rocket/Instructions.scala	/^  def URET               = BitPat("b00000000001000000000000001110011")$/;"	m
UTLBLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^class UTLBLogicalTreeNode(coreParams: CoreParams, memories: Seq[OMSRAM]) extends LogicalTreeNode(() => None) {$/;"	c
UnitTest	src/main/scala/unittest/UnitTest.scala	/^abstract class UnitTest(val timeout: Int = 4096) extends Module with UnitTestLegacyModule {$/;"	c
UnitTestIO	src/main/scala/unittest/UnitTest.scala	/^trait UnitTestIO {$/;"	t
UnitTestLegacyModule	src/main/scala/unittest/UnitTest.scala	/^trait UnitTestLegacyModule extends HasUnitTestIO {$/;"	t
UnitTestModule	src/main/scala/unittest/UnitTest.scala	/^trait UnitTestModule extends MultiIOModule with HasUnitTestIO {$/;"	t
UnitTestSuite	src/main/scala/unittest/UnitTest.scala	/^class UnitTestSuite(implicit p: Parameters) extends Module {$/;"	c
UnitTests	src/main/scala/unittest/UnitTest.scala	/^case object UnitTests extends Field[Parameters => Seq[UnitTest]]$/;"	c
Unreachable	src/main/scala/diplomacy/Unreachable.scala	/^case object Unreachable {$/;"	c
UnrecodeFloatFromDouble	src/main/resources/csrc/float_fix.cc	/^uint64_t UnrecodeFloatFromDouble(uint64_t raw_input) {$/;"	f
UnstableNameAnnotation	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^case class UnstableNameAnnotation(target: IsModule) extends SingleTargetAnnotation[IsModule] {$/;"	c
UnzippableOption	src/main/scala/util/package.scala	/^  implicit class UnzippableOption[S, T](val x: Option[(S, T)]) {$/;"	c
UpdateDR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object UpdateDR extends State(5)  \/\/ parallel-load output from DR shifter on TCK falling edge while in this state (not a rule?)$/;"	c
UpdateIR	src/main/scala/jtag/JtagStateMachine.scala	/^  case object UpdateIR extends State(13)  \/\/ latch IR shifter into IR (changes to IR may only occur while in this state, latch on TCK falling edge)$/;"	c
UpwardCycleException	src/main/scala/diplomacy/Nodes.scala	/^case class UpwardCycleException(loop: Seq[String] = Nil) extends CycleException("upward", loop)$/;"	c
UserMode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val UserMode = BigInt(8)$/;"	l
VAADDU_VV	src/main/scala/rocket/Instructions.scala	/^  def VAADDU_VV          = BitPat("b001000???????????010?????1010111")$/;"	m
VAADDU_VX	src/main/scala/rocket/Instructions.scala	/^  def VAADDU_VX          = BitPat("b001000???????????110?????1010111")$/;"	m
VAADD_VV	src/main/scala/rocket/Instructions.scala	/^  def VAADD_VV           = BitPat("b001001???????????010?????1010111")$/;"	m
VAADD_VX	src/main/scala/rocket/Instructions.scala	/^  def VAADD_VX           = BitPat("b001001???????????110?????1010111")$/;"	m
VADC_VIM	src/main/scala/rocket/Instructions.scala	/^  def VADC_VIM           = BitPat("b0100000??????????011?????1010111")$/;"	m
VADC_VVM	src/main/scala/rocket/Instructions.scala	/^  def VADC_VVM           = BitPat("b0100000??????????000?????1010111")$/;"	m
VADC_VXM	src/main/scala/rocket/Instructions.scala	/^  def VADC_VXM           = BitPat("b0100000??????????100?????1010111")$/;"	m
VADD_VI	src/main/scala/rocket/Instructions.scala	/^  def VADD_VI            = BitPat("b000000???????????011?????1010111")$/;"	m
VADD_VV	src/main/scala/rocket/Instructions.scala	/^  def VADD_VV            = BitPat("b000000???????????000?????1010111")$/;"	m
VADD_VX	src/main/scala/rocket/Instructions.scala	/^  def VADD_VX            = BitPat("b000000???????????100?????1010111")$/;"	m
VAMOADDEI16_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOADDEI16_V      = BitPat("b00000????????????101?????0101111")$/;"	m
VAMOADDEI32_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOADDEI32_V      = BitPat("b00000????????????110?????0101111")$/;"	m
VAMOADDEI64_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOADDEI64_V      = BitPat("b00000????????????111?????0101111")$/;"	m
VAMOADDEI8_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOADDEI8_V       = BitPat("b00000????????????000?????0101111")$/;"	m
VAMOANDEI16_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOANDEI16_V      = BitPat("b01100????????????101?????0101111")$/;"	m
VAMOANDEI32_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOANDEI32_V      = BitPat("b01100????????????110?????0101111")$/;"	m
VAMOANDEI64_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOANDEI64_V      = BitPat("b01100????????????111?????0101111")$/;"	m
VAMOANDEI8_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOANDEI8_V       = BitPat("b01100????????????000?????0101111")$/;"	m
VAMOMAXEI16_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMAXEI16_V      = BitPat("b10100????????????101?????0101111")$/;"	m
VAMOMAXEI32_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMAXEI32_V      = BitPat("b10100????????????110?????0101111")$/;"	m
VAMOMAXEI64_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMAXEI64_V      = BitPat("b10100????????????111?????0101111")$/;"	m
VAMOMAXEI8_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMAXEI8_V       = BitPat("b10100????????????000?????0101111")$/;"	m
VAMOMAXUEI16_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMAXUEI16_V     = BitPat("b11100????????????101?????0101111")$/;"	m
VAMOMAXUEI32_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMAXUEI32_V     = BitPat("b11100????????????110?????0101111")$/;"	m
VAMOMAXUEI64_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMAXUEI64_V     = BitPat("b11100????????????111?????0101111")$/;"	m
VAMOMAXUEI8_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMAXUEI8_V      = BitPat("b11100????????????000?????0101111")$/;"	m
VAMOMINEI16_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMINEI16_V      = BitPat("b10000????????????101?????0101111")$/;"	m
VAMOMINEI32_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMINEI32_V      = BitPat("b10000????????????110?????0101111")$/;"	m
VAMOMINEI64_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMINEI64_V      = BitPat("b10000????????????111?????0101111")$/;"	m
VAMOMINEI8_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMINEI8_V       = BitPat("b10000????????????000?????0101111")$/;"	m
VAMOMINUEI16_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMINUEI16_V     = BitPat("b11000????????????101?????0101111")$/;"	m
VAMOMINUEI32_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMINUEI32_V     = BitPat("b11000????????????110?????0101111")$/;"	m
VAMOMINUEI64_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMINUEI64_V     = BitPat("b11000????????????111?????0101111")$/;"	m
VAMOMINUEI8_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOMINUEI8_V      = BitPat("b11000????????????000?????0101111")$/;"	m
VAMOOREI16_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOOREI16_V       = BitPat("b01000????????????101?????0101111")$/;"	m
VAMOOREI32_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOOREI32_V       = BitPat("b01000????????????110?????0101111")$/;"	m
VAMOOREI64_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOOREI64_V       = BitPat("b01000????????????111?????0101111")$/;"	m
VAMOOREI8_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOOREI8_V        = BitPat("b01000????????????000?????0101111")$/;"	m
VAMOSWAPEI16_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOSWAPEI16_V     = BitPat("b00001????????????101?????0101111")$/;"	m
VAMOSWAPEI32_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOSWAPEI32_V     = BitPat("b00001????????????110?????0101111")$/;"	m
VAMOSWAPEI64_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOSWAPEI64_V     = BitPat("b00001????????????111?????0101111")$/;"	m
VAMOSWAPEI8_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOSWAPEI8_V      = BitPat("b00001????????????000?????0101111")$/;"	m
VAMOXOREI16_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOXOREI16_V      = BitPat("b00100????????????101?????0101111")$/;"	m
VAMOXOREI32_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOXOREI32_V      = BitPat("b00100????????????110?????0101111")$/;"	m
VAMOXOREI64_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOXOREI64_V      = BitPat("b00100????????????111?????0101111")$/;"	m
VAMOXOREI8_V	src/main/scala/rocket/Instructions.scala	/^  def VAMOXOREI8_V       = BitPat("b00100????????????000?????0101111")$/;"	m
VAND_VI	src/main/scala/rocket/Instructions.scala	/^  def VAND_VI            = BitPat("b001001???????????011?????1010111")$/;"	m
VAND_VV	src/main/scala/rocket/Instructions.scala	/^  def VAND_VV            = BitPat("b001001???????????000?????1010111")$/;"	m
VAND_VX	src/main/scala/rocket/Instructions.scala	/^  def VAND_VX            = BitPat("b001001???????????100?????1010111")$/;"	m
VASUBU_VV	src/main/scala/rocket/Instructions.scala	/^  def VASUBU_VV          = BitPat("b001010???????????010?????1010111")$/;"	m
VASUBU_VX	src/main/scala/rocket/Instructions.scala	/^  def VASUBU_VX          = BitPat("b001010???????????110?????1010111")$/;"	m
VASUB_VV	src/main/scala/rocket/Instructions.scala	/^  def VASUB_VV           = BitPat("b001011???????????010?????1010111")$/;"	m
VASUB_VX	src/main/scala/rocket/Instructions.scala	/^  def VASUB_VX           = BitPat("b001011???????????110?????1010111")$/;"	m
VCDPLUSCLOSE	src/main/resources/vsrc/TestDriver.v	/^`define VCDPLUSCLOSE $dumpoff;$/;"	c
VCDPLUSCLOSE	src/main/resources/vsrc/TestDriver.v	/^`define VCDPLUSCLOSE $fsdbDumpoff;$/;"	c
VCDPLUSCLOSE	src/main/resources/vsrc/TestDriver.v	/^`define VCDPLUSCLOSE $vcdplusclose; $dumpoff;$/;"	c
VCDPLUSCLOSE	src/main/resources/vsrc/TestDriver.v	/^`define VCDPLUSCLOSE$/;"	c
VCDPLUSON	src/main/resources/vsrc/TestDriver.v	/^`define VCDPLUSON $dumpon;$/;"	c
VCDPLUSON	src/main/resources/vsrc/TestDriver.v	/^`define VCDPLUSON $fsdbDumpon;$/;"	c
VCDPLUSON	src/main/resources/vsrc/TestDriver.v	/^`define VCDPLUSON $vcdpluson(0); $vcdplusmemon(0);$/;"	c
VCDPLUSON	src/main/resources/vsrc/TestDriver.v	/^`define VCDPLUSON$/;"	c
VCOMPRESS_VM	src/main/scala/rocket/Instructions.scala	/^  def VCOMPRESS_VM       = BitPat("b0101111??????????010?????1010111")$/;"	m
VConfig	src/main/scala/rocket/CSR.scala	/^class VConfig(implicit p: Parameters) extends CoreBundle {$/;"	c
VDIVU_VV	src/main/scala/rocket/Instructions.scala	/^  def VDIVU_VV           = BitPat("b100000???????????010?????1010111")$/;"	m
VDIVU_VX	src/main/scala/rocket/Instructions.scala	/^  def VDIVU_VX           = BitPat("b100000???????????110?????1010111")$/;"	m
VDIV_VV	src/main/scala/rocket/Instructions.scala	/^  def VDIV_VV            = BitPat("b100001???????????010?????1010111")$/;"	m
VDIV_VX	src/main/scala/rocket/Instructions.scala	/^  def VDIV_VX            = BitPat("b100001???????????110?????1010111")$/;"	m
VDOTU_VV	src/main/scala/rocket/Instructions.scala	/^  def VDOTU_VV           = BitPat("b111000???????????000?????1010111")$/;"	m
VDOT_VV	src/main/scala/rocket/Instructions.scala	/^  def VDOT_VV            = BitPat("b111001???????????000?????1010111")$/;"	m
VFADD_VF	src/main/scala/rocket/Instructions.scala	/^  def VFADD_VF           = BitPat("b000000???????????101?????1010111")$/;"	m
VFADD_VV	src/main/scala/rocket/Instructions.scala	/^  def VFADD_VV           = BitPat("b000000???????????001?????1010111")$/;"	m
VFCLASS_V	src/main/scala/rocket/Instructions.scala	/^  def VFCLASS_V          = BitPat("b010011??????10000001?????1010111")$/;"	m
VFCVT_F_XU_V	src/main/scala/rocket/Instructions.scala	/^  def VFCVT_F_XU_V       = BitPat("b010010??????00010001?????1010111")$/;"	m
VFCVT_F_X_V	src/main/scala/rocket/Instructions.scala	/^  def VFCVT_F_X_V        = BitPat("b010010??????00011001?????1010111")$/;"	m
VFCVT_RTZ_XU_F_V	src/main/scala/rocket/Instructions.scala	/^  def VFCVT_RTZ_XU_F_V   = BitPat("b010010??????00110001?????1010111")$/;"	m
VFCVT_RTZ_X_F_V	src/main/scala/rocket/Instructions.scala	/^  def VFCVT_RTZ_X_F_V    = BitPat("b010010??????00111001?????1010111")$/;"	m
VFCVT_XU_F_V	src/main/scala/rocket/Instructions.scala	/^  def VFCVT_XU_F_V       = BitPat("b010010??????00000001?????1010111")$/;"	m
VFCVT_X_F_V	src/main/scala/rocket/Instructions.scala	/^  def VFCVT_X_F_V        = BitPat("b010010??????00001001?????1010111")$/;"	m
VFDIV_VF	src/main/scala/rocket/Instructions.scala	/^  def VFDIV_VF           = BitPat("b100000???????????101?????1010111")$/;"	m
VFDIV_VV	src/main/scala/rocket/Instructions.scala	/^  def VFDIV_VV           = BitPat("b100000???????????001?????1010111")$/;"	m
VFDOT_VV	src/main/scala/rocket/Instructions.scala	/^  def VFDOT_VV           = BitPat("b111001???????????001?????1010111")$/;"	m
VFIRST_M	src/main/scala/rocket/Instructions.scala	/^  def VFIRST_M           = BitPat("b010000??????10001010?????1010111")$/;"	m
VFMACC_VF	src/main/scala/rocket/Instructions.scala	/^  def VFMACC_VF          = BitPat("b101100???????????101?????1010111")$/;"	m
VFMACC_VV	src/main/scala/rocket/Instructions.scala	/^  def VFMACC_VV          = BitPat("b101100???????????001?????1010111")$/;"	m
VFMADD_VF	src/main/scala/rocket/Instructions.scala	/^  def VFMADD_VF          = BitPat("b101000???????????101?????1010111")$/;"	m
VFMADD_VV	src/main/scala/rocket/Instructions.scala	/^  def VFMADD_VV          = BitPat("b101000???????????001?????1010111")$/;"	m
VFMAX_VF	src/main/scala/rocket/Instructions.scala	/^  def VFMAX_VF           = BitPat("b000110???????????101?????1010111")$/;"	m
VFMAX_VV	src/main/scala/rocket/Instructions.scala	/^  def VFMAX_VV           = BitPat("b000110???????????001?????1010111")$/;"	m
VFMERGE_VFM	src/main/scala/rocket/Instructions.scala	/^  def VFMERGE_VFM        = BitPat("b0101110??????????101?????1010111")$/;"	m
VFMIN_VF	src/main/scala/rocket/Instructions.scala	/^  def VFMIN_VF           = BitPat("b000100???????????101?????1010111")$/;"	m
VFMIN_VV	src/main/scala/rocket/Instructions.scala	/^  def VFMIN_VV           = BitPat("b000100???????????001?????1010111")$/;"	m
VFMSAC_VF	src/main/scala/rocket/Instructions.scala	/^  def VFMSAC_VF          = BitPat("b101110???????????101?????1010111")$/;"	m
VFMSAC_VV	src/main/scala/rocket/Instructions.scala	/^  def VFMSAC_VV          = BitPat("b101110???????????001?????1010111")$/;"	m
VFMSUB_VF	src/main/scala/rocket/Instructions.scala	/^  def VFMSUB_VF          = BitPat("b101010???????????101?????1010111")$/;"	m
VFMSUB_VV	src/main/scala/rocket/Instructions.scala	/^  def VFMSUB_VV          = BitPat("b101010???????????001?????1010111")$/;"	m
VFMUL_VF	src/main/scala/rocket/Instructions.scala	/^  def VFMUL_VF           = BitPat("b100100???????????101?????1010111")$/;"	m
VFMUL_VV	src/main/scala/rocket/Instructions.scala	/^  def VFMUL_VV           = BitPat("b100100???????????001?????1010111")$/;"	m
VFMV_F_S	src/main/scala/rocket/Instructions.scala	/^  def VFMV_F_S           = BitPat("b0100001?????00000001?????1010111")$/;"	m
VFMV_S_F	src/main/scala/rocket/Instructions.scala	/^  def VFMV_S_F           = BitPat("b010000100000?????101?????1010111")$/;"	m
VFMV_V_F	src/main/scala/rocket/Instructions.scala	/^  def VFMV_V_F           = BitPat("b010111100000?????101?????1010111")$/;"	m
VFNCVT_F_F_W	src/main/scala/rocket/Instructions.scala	/^  def VFNCVT_F_F_W       = BitPat("b010010??????10100001?????1010111")$/;"	m
VFNCVT_F_XU_W	src/main/scala/rocket/Instructions.scala	/^  def VFNCVT_F_XU_W      = BitPat("b010010??????10010001?????1010111")$/;"	m
VFNCVT_F_X_W	src/main/scala/rocket/Instructions.scala	/^  def VFNCVT_F_X_W       = BitPat("b010010??????10011001?????1010111")$/;"	m
VFNCVT_ROD_F_F_W	src/main/scala/rocket/Instructions.scala	/^  def VFNCVT_ROD_F_F_W   = BitPat("b010010??????10101001?????1010111")$/;"	m
VFNCVT_RTZ_XU_F_W	src/main/scala/rocket/Instructions.scala	/^  def VFNCVT_RTZ_XU_F_W  = BitPat("b010010??????10110001?????1010111")$/;"	m
VFNCVT_RTZ_X_F_W	src/main/scala/rocket/Instructions.scala	/^  def VFNCVT_RTZ_X_F_W   = BitPat("b010010??????10111001?????1010111")$/;"	m
VFNCVT_XU_F_W	src/main/scala/rocket/Instructions.scala	/^  def VFNCVT_XU_F_W      = BitPat("b010010??????10000001?????1010111")$/;"	m
VFNCVT_X_F_W	src/main/scala/rocket/Instructions.scala	/^  def VFNCVT_X_F_W       = BitPat("b010010??????10001001?????1010111")$/;"	m
VFNMACC_VF	src/main/scala/rocket/Instructions.scala	/^  def VFNMACC_VF         = BitPat("b101101???????????101?????1010111")$/;"	m
VFNMACC_VV	src/main/scala/rocket/Instructions.scala	/^  def VFNMACC_VV         = BitPat("b101101???????????001?????1010111")$/;"	m
VFNMADD_VF	src/main/scala/rocket/Instructions.scala	/^  def VFNMADD_VF         = BitPat("b101001???????????101?????1010111")$/;"	m
VFNMADD_VV	src/main/scala/rocket/Instructions.scala	/^  def VFNMADD_VV         = BitPat("b101001???????????001?????1010111")$/;"	m
VFNMSAC_VF	src/main/scala/rocket/Instructions.scala	/^  def VFNMSAC_VF         = BitPat("b101111???????????101?????1010111")$/;"	m
VFNMSAC_VV	src/main/scala/rocket/Instructions.scala	/^  def VFNMSAC_VV         = BitPat("b101111???????????001?????1010111")$/;"	m
VFNMSUB_VF	src/main/scala/rocket/Instructions.scala	/^  def VFNMSUB_VF         = BitPat("b101011???????????101?????1010111")$/;"	m
VFNMSUB_VV	src/main/scala/rocket/Instructions.scala	/^  def VFNMSUB_VV         = BitPat("b101011???????????001?????1010111")$/;"	m
VFRDIV_VF	src/main/scala/rocket/Instructions.scala	/^  def VFRDIV_VF          = BitPat("b100001???????????101?????1010111")$/;"	m
VFREDMAX_VS	src/main/scala/rocket/Instructions.scala	/^  def VFREDMAX_VS        = BitPat("b000111???????????001?????1010111")$/;"	m
VFREDMIN_VS	src/main/scala/rocket/Instructions.scala	/^  def VFREDMIN_VS        = BitPat("b000101???????????001?????1010111")$/;"	m
VFREDOSUM_VS	src/main/scala/rocket/Instructions.scala	/^  def VFREDOSUM_VS       = BitPat("b000011???????????001?????1010111")$/;"	m
VFREDSUM_VS	src/main/scala/rocket/Instructions.scala	/^  def VFREDSUM_VS        = BitPat("b000001???????????001?????1010111")$/;"	m
VFRSUB_VF	src/main/scala/rocket/Instructions.scala	/^  def VFRSUB_VF          = BitPat("b100111???????????101?????1010111")$/;"	m
VFSGNJN_VF	src/main/scala/rocket/Instructions.scala	/^  def VFSGNJN_VF         = BitPat("b001001???????????101?????1010111")$/;"	m
VFSGNJN_VV	src/main/scala/rocket/Instructions.scala	/^  def VFSGNJN_VV         = BitPat("b001001???????????001?????1010111")$/;"	m
VFSGNJX_VF	src/main/scala/rocket/Instructions.scala	/^  def VFSGNJX_VF         = BitPat("b001010???????????101?????1010111")$/;"	m
VFSGNJX_VV	src/main/scala/rocket/Instructions.scala	/^  def VFSGNJX_VV         = BitPat("b001010???????????001?????1010111")$/;"	m
VFSGNJ_VF	src/main/scala/rocket/Instructions.scala	/^  def VFSGNJ_VF          = BitPat("b001000???????????101?????1010111")$/;"	m
VFSGNJ_VV	src/main/scala/rocket/Instructions.scala	/^  def VFSGNJ_VV          = BitPat("b001000???????????001?????1010111")$/;"	m
VFSLIDE1DOWN_VF	src/main/scala/rocket/Instructions.scala	/^  def VFSLIDE1DOWN_VF    = BitPat("b001111???????????101?????1010111")$/;"	m
VFSLIDE1UP_VF	src/main/scala/rocket/Instructions.scala	/^  def VFSLIDE1UP_VF      = BitPat("b001110???????????101?????1010111")$/;"	m
VFSQRT_V	src/main/scala/rocket/Instructions.scala	/^  def VFSQRT_V           = BitPat("b010011??????00000001?????1010111")$/;"	m
VFSUB_VF	src/main/scala/rocket/Instructions.scala	/^  def VFSUB_VF           = BitPat("b000010???????????101?????1010111")$/;"	m
VFSUB_VV	src/main/scala/rocket/Instructions.scala	/^  def VFSUB_VV           = BitPat("b000010???????????001?????1010111")$/;"	m
VFWADD_VF	src/main/scala/rocket/Instructions.scala	/^  def VFWADD_VF          = BitPat("b110000???????????101?????1010111")$/;"	m
VFWADD_VV	src/main/scala/rocket/Instructions.scala	/^  def VFWADD_VV          = BitPat("b110000???????????001?????1010111")$/;"	m
VFWADD_WF	src/main/scala/rocket/Instructions.scala	/^  def VFWADD_WF          = BitPat("b110100???????????101?????1010111")$/;"	m
VFWADD_WV	src/main/scala/rocket/Instructions.scala	/^  def VFWADD_WV          = BitPat("b110100???????????001?????1010111")$/;"	m
VFWCVT_F_F_V	src/main/scala/rocket/Instructions.scala	/^  def VFWCVT_F_F_V       = BitPat("b010010??????01100001?????1010111")$/;"	m
VFWCVT_F_XU_V	src/main/scala/rocket/Instructions.scala	/^  def VFWCVT_F_XU_V      = BitPat("b010010??????01010001?????1010111")$/;"	m
VFWCVT_F_X_V	src/main/scala/rocket/Instructions.scala	/^  def VFWCVT_F_X_V       = BitPat("b010010??????01011001?????1010111")$/;"	m
VFWCVT_RTZ_XU_F_V	src/main/scala/rocket/Instructions.scala	/^  def VFWCVT_RTZ_XU_F_V  = BitPat("b010010??????01110001?????1010111")$/;"	m
VFWCVT_RTZ_X_F_V	src/main/scala/rocket/Instructions.scala	/^  def VFWCVT_RTZ_X_F_V   = BitPat("b010010??????01111001?????1010111")$/;"	m
VFWCVT_XU_F_V	src/main/scala/rocket/Instructions.scala	/^  def VFWCVT_XU_F_V      = BitPat("b010010??????01000001?????1010111")$/;"	m
VFWCVT_X_F_V	src/main/scala/rocket/Instructions.scala	/^  def VFWCVT_X_F_V       = BitPat("b010010??????01001001?????1010111")$/;"	m
VFWMACC_VF	src/main/scala/rocket/Instructions.scala	/^  def VFWMACC_VF         = BitPat("b111100???????????101?????1010111")$/;"	m
VFWMACC_VV	src/main/scala/rocket/Instructions.scala	/^  def VFWMACC_VV         = BitPat("b111100???????????001?????1010111")$/;"	m
VFWMSAC_VF	src/main/scala/rocket/Instructions.scala	/^  def VFWMSAC_VF         = BitPat("b111110???????????101?????1010111")$/;"	m
VFWMSAC_VV	src/main/scala/rocket/Instructions.scala	/^  def VFWMSAC_VV         = BitPat("b111110???????????001?????1010111")$/;"	m
VFWMUL_VF	src/main/scala/rocket/Instructions.scala	/^  def VFWMUL_VF          = BitPat("b111000???????????101?????1010111")$/;"	m
VFWMUL_VV	src/main/scala/rocket/Instructions.scala	/^  def VFWMUL_VV          = BitPat("b111000???????????001?????1010111")$/;"	m
VFWNMACC_VF	src/main/scala/rocket/Instructions.scala	/^  def VFWNMACC_VF        = BitPat("b111101???????????101?????1010111")$/;"	m
VFWNMACC_VV	src/main/scala/rocket/Instructions.scala	/^  def VFWNMACC_VV        = BitPat("b111101???????????001?????1010111")$/;"	m
VFWNMSAC_VF	src/main/scala/rocket/Instructions.scala	/^  def VFWNMSAC_VF        = BitPat("b111111???????????101?????1010111")$/;"	m
VFWNMSAC_VV	src/main/scala/rocket/Instructions.scala	/^  def VFWNMSAC_VV        = BitPat("b111111???????????001?????1010111")$/;"	m
VFWREDOSUM_VS	src/main/scala/rocket/Instructions.scala	/^  def VFWREDOSUM_VS      = BitPat("b110011???????????001?????1010111")$/;"	m
VFWREDSUM_VS	src/main/scala/rocket/Instructions.scala	/^  def VFWREDSUM_VS       = BitPat("b110001???????????001?????1010111")$/;"	m
VFWSUB_VF	src/main/scala/rocket/Instructions.scala	/^  def VFWSUB_VF          = BitPat("b110010???????????101?????1010111")$/;"	m
VFWSUB_VV	src/main/scala/rocket/Instructions.scala	/^  def VFWSUB_VV          = BitPat("b110010???????????001?????1010111")$/;"	m
VFWSUB_WF	src/main/scala/rocket/Instructions.scala	/^  def VFWSUB_WF          = BitPat("b110110???????????101?????1010111")$/;"	m
VFWSUB_WV	src/main/scala/rocket/Instructions.scala	/^  def VFWSUB_WV          = BitPat("b110110???????????001?????1010111")$/;"	m
VID_V	src/main/scala/rocket/Instructions.scala	/^  def VID_V              = BitPat("b010100?0000010001010?????1010111")$/;"	m
VIOTA_M	src/main/scala/rocket/Instructions.scala	/^  def VIOTA_M            = BitPat("b010100??????10000010?????1010111")$/;"	m
VL1RE16_V	src/main/scala/rocket/Instructions.scala	/^  def VL1RE16_V          = BitPat("b000000101000?????101?????0000111")$/;"	m
VL1RE32_V	src/main/scala/rocket/Instructions.scala	/^  def VL1RE32_V          = BitPat("b000000101000?????110?????0000111")$/;"	m
VL1RE64_V	src/main/scala/rocket/Instructions.scala	/^  def VL1RE64_V          = BitPat("b000000101000?????111?????0000111")$/;"	m
VL1RE8_V	src/main/scala/rocket/Instructions.scala	/^  def VL1RE8_V           = BitPat("b000000101000?????000?????0000111")$/;"	m
VL2RE16_V	src/main/scala/rocket/Instructions.scala	/^  def VL2RE16_V          = BitPat("b001000101000?????101?????0000111")$/;"	m
VL2RE32_V	src/main/scala/rocket/Instructions.scala	/^  def VL2RE32_V          = BitPat("b001000101000?????110?????0000111")$/;"	m
VL2RE64_V	src/main/scala/rocket/Instructions.scala	/^  def VL2RE64_V          = BitPat("b001000101000?????111?????0000111")$/;"	m
VL2RE8_V	src/main/scala/rocket/Instructions.scala	/^  def VL2RE8_V           = BitPat("b001000101000?????000?????0000111")$/;"	m
VL4RE16_V	src/main/scala/rocket/Instructions.scala	/^  def VL4RE16_V          = BitPat("b011000101000?????101?????0000111")$/;"	m
VL4RE32_V	src/main/scala/rocket/Instructions.scala	/^  def VL4RE32_V          = BitPat("b011000101000?????110?????0000111")$/;"	m
VL4RE64_V	src/main/scala/rocket/Instructions.scala	/^  def VL4RE64_V          = BitPat("b011000101000?????111?????0000111")$/;"	m
VL4RE8_V	src/main/scala/rocket/Instructions.scala	/^  def VL4RE8_V           = BitPat("b011000101000?????000?????0000111")$/;"	m
VL8RE16_V	src/main/scala/rocket/Instructions.scala	/^  def VL8RE16_V          = BitPat("b111000101000?????101?????0000111")$/;"	m
VL8RE32_V	src/main/scala/rocket/Instructions.scala	/^  def VL8RE32_V          = BitPat("b111000101000?????110?????0000111")$/;"	m
VL8RE64_V	src/main/scala/rocket/Instructions.scala	/^  def VL8RE64_V          = BitPat("b111000101000?????111?????0000111")$/;"	m
VL8RE8_V	src/main/scala/rocket/Instructions.scala	/^  def VL8RE8_V           = BitPat("b111000101000?????000?????0000111")$/;"	m
VLE16FF_V	src/main/scala/rocket/Instructions.scala	/^  def VLE16FF_V          = BitPat("b???000?10000?????101?????0000111")$/;"	m
VLE16_V	src/main/scala/rocket/Instructions.scala	/^  def VLE16_V            = BitPat("b???000?00000?????101?????0000111")$/;"	m
VLE32FF_V	src/main/scala/rocket/Instructions.scala	/^  def VLE32FF_V          = BitPat("b???000?10000?????110?????0000111")$/;"	m
VLE32_V	src/main/scala/rocket/Instructions.scala	/^  def VLE32_V            = BitPat("b???000?00000?????110?????0000111")$/;"	m
VLE64FF_V	src/main/scala/rocket/Instructions.scala	/^  def VLE64FF_V          = BitPat("b???000?10000?????111?????0000111")$/;"	m
VLE64_V	src/main/scala/rocket/Instructions.scala	/^  def VLE64_V            = BitPat("b???000?00000?????111?????0000111")$/;"	m
VLE8FF_V	src/main/scala/rocket/Instructions.scala	/^  def VLE8FF_V           = BitPat("b???000?10000?????000?????0000111")$/;"	m
VLE8_V	src/main/scala/rocket/Instructions.scala	/^  def VLE8_V             = BitPat("b???000?00000?????000?????0000111")$/;"	m
VLSE16_V	src/main/scala/rocket/Instructions.scala	/^  def VLSE16_V           = BitPat("b???010???????????101?????0000111")$/;"	m
VLSE32_V	src/main/scala/rocket/Instructions.scala	/^  def VLSE32_V           = BitPat("b???010???????????110?????0000111")$/;"	m
VLSE64_V	src/main/scala/rocket/Instructions.scala	/^  def VLSE64_V           = BitPat("b???010???????????111?????0000111")$/;"	m
VLSE8_V	src/main/scala/rocket/Instructions.scala	/^  def VLSE8_V            = BitPat("b???010???????????000?????0000111")$/;"	m
VLXEI16_V	src/main/scala/rocket/Instructions.scala	/^  def VLXEI16_V          = BitPat("b???011???????????101?????0000111")$/;"	m
VLXEI32_V	src/main/scala/rocket/Instructions.scala	/^  def VLXEI32_V          = BitPat("b???011???????????110?????0000111")$/;"	m
VLXEI64_V	src/main/scala/rocket/Instructions.scala	/^  def VLXEI64_V          = BitPat("b???011???????????111?????0000111")$/;"	m
VLXEI8_V	src/main/scala/rocket/Instructions.scala	/^  def VLXEI8_V           = BitPat("b???011???????????000?????0000111")$/;"	m
VMACC_VV	src/main/scala/rocket/Instructions.scala	/^  def VMACC_VV           = BitPat("b101101???????????010?????1010111")$/;"	m
VMACC_VX	src/main/scala/rocket/Instructions.scala	/^  def VMACC_VX           = BitPat("b101101???????????110?????1010111")$/;"	m
VMADC_VIM	src/main/scala/rocket/Instructions.scala	/^  def VMADC_VIM          = BitPat("b010001???????????011?????1010111")$/;"	m
VMADC_VVM	src/main/scala/rocket/Instructions.scala	/^  def VMADC_VVM          = BitPat("b010001???????????000?????1010111")$/;"	m
VMADC_VXM	src/main/scala/rocket/Instructions.scala	/^  def VMADC_VXM          = BitPat("b010001???????????100?????1010111")$/;"	m
VMADD_VV	src/main/scala/rocket/Instructions.scala	/^  def VMADD_VV           = BitPat("b101001???????????010?????1010111")$/;"	m
VMADD_VX	src/main/scala/rocket/Instructions.scala	/^  def VMADD_VX           = BitPat("b101001???????????110?????1010111")$/;"	m
VMANDNOT_MM	src/main/scala/rocket/Instructions.scala	/^  def VMANDNOT_MM        = BitPat("b011000???????????010?????1010111")$/;"	m
VMAND_MM	src/main/scala/rocket/Instructions.scala	/^  def VMAND_MM           = BitPat("b011001???????????010?????1010111")$/;"	m
VMAXU_VV	src/main/scala/rocket/Instructions.scala	/^  def VMAXU_VV           = BitPat("b000110???????????000?????1010111")$/;"	m
VMAXU_VX	src/main/scala/rocket/Instructions.scala	/^  def VMAXU_VX           = BitPat("b000110???????????100?????1010111")$/;"	m
VMAX_VV	src/main/scala/rocket/Instructions.scala	/^  def VMAX_VV            = BitPat("b000111???????????000?????1010111")$/;"	m
VMAX_VX	src/main/scala/rocket/Instructions.scala	/^  def VMAX_VX            = BitPat("b000111???????????100?????1010111")$/;"	m
VMERGE_VIM	src/main/scala/rocket/Instructions.scala	/^  def VMERGE_VIM         = BitPat("b0101110??????????011?????1010111")$/;"	m
VMERGE_VVM	src/main/scala/rocket/Instructions.scala	/^  def VMERGE_VVM         = BitPat("b0101110??????????000?????1010111")$/;"	m
VMERGE_VXM	src/main/scala/rocket/Instructions.scala	/^  def VMERGE_VXM         = BitPat("b0101110??????????100?????1010111")$/;"	m
VMFEQ_VF	src/main/scala/rocket/Instructions.scala	/^  def VMFEQ_VF           = BitPat("b011000???????????101?????1010111")$/;"	m
VMFEQ_VV	src/main/scala/rocket/Instructions.scala	/^  def VMFEQ_VV           = BitPat("b011000???????????001?????1010111")$/;"	m
VMFGE_VF	src/main/scala/rocket/Instructions.scala	/^  def VMFGE_VF           = BitPat("b011111???????????101?????1010111")$/;"	m
VMFGT_VF	src/main/scala/rocket/Instructions.scala	/^  def VMFGT_VF           = BitPat("b011101???????????101?????1010111")$/;"	m
VMFLE_VF	src/main/scala/rocket/Instructions.scala	/^  def VMFLE_VF           = BitPat("b011001???????????101?????1010111")$/;"	m
VMFLE_VV	src/main/scala/rocket/Instructions.scala	/^  def VMFLE_VV           = BitPat("b011001???????????001?????1010111")$/;"	m
VMFLT_VF	src/main/scala/rocket/Instructions.scala	/^  def VMFLT_VF           = BitPat("b011011???????????101?????1010111")$/;"	m
VMFLT_VV	src/main/scala/rocket/Instructions.scala	/^  def VMFLT_VV           = BitPat("b011011???????????001?????1010111")$/;"	m
VMFNE_VF	src/main/scala/rocket/Instructions.scala	/^  def VMFNE_VF           = BitPat("b011100???????????101?????1010111")$/;"	m
VMFNE_VV	src/main/scala/rocket/Instructions.scala	/^  def VMFNE_VV           = BitPat("b011100???????????001?????1010111")$/;"	m
VMINU_VV	src/main/scala/rocket/Instructions.scala	/^  def VMINU_VV           = BitPat("b000100???????????000?????1010111")$/;"	m
VMINU_VX	src/main/scala/rocket/Instructions.scala	/^  def VMINU_VX           = BitPat("b000100???????????100?????1010111")$/;"	m
VMIN_VV	src/main/scala/rocket/Instructions.scala	/^  def VMIN_VV            = BitPat("b000101???????????000?????1010111")$/;"	m
VMIN_VX	src/main/scala/rocket/Instructions.scala	/^  def VMIN_VX            = BitPat("b000101???????????100?????1010111")$/;"	m
VMIdBits	src/main/scala/rocket/TLB.scala	/^case object VMIdBits extends Field[Int](0)$/;"	c
VMNAND_MM	src/main/scala/rocket/Instructions.scala	/^  def VMNAND_MM          = BitPat("b011101???????????010?????1010111")$/;"	m
VMNOR_MM	src/main/scala/rocket/Instructions.scala	/^  def VMNOR_MM           = BitPat("b011110???????????010?????1010111")$/;"	m
VMORNOT_MM	src/main/scala/rocket/Instructions.scala	/^  def VMORNOT_MM         = BitPat("b011100???????????010?????1010111")$/;"	m
VMOR_MM	src/main/scala/rocket/Instructions.scala	/^  def VMOR_MM            = BitPat("b011010???????????010?????1010111")$/;"	m
VMSBC_VVM	src/main/scala/rocket/Instructions.scala	/^  def VMSBC_VVM          = BitPat("b010011???????????000?????1010111")$/;"	m
VMSBC_VXM	src/main/scala/rocket/Instructions.scala	/^  def VMSBC_VXM          = BitPat("b010011???????????100?????1010111")$/;"	m
VMSBF_M	src/main/scala/rocket/Instructions.scala	/^  def VMSBF_M            = BitPat("b010100??????00001010?????1010111")$/;"	m
VMSEQ_VI	src/main/scala/rocket/Instructions.scala	/^  def VMSEQ_VI           = BitPat("b011000???????????011?????1010111")$/;"	m
VMSEQ_VV	src/main/scala/rocket/Instructions.scala	/^  def VMSEQ_VV           = BitPat("b011000???????????000?????1010111")$/;"	m
VMSEQ_VX	src/main/scala/rocket/Instructions.scala	/^  def VMSEQ_VX           = BitPat("b011000???????????100?????1010111")$/;"	m
VMSGTU_VI	src/main/scala/rocket/Instructions.scala	/^  def VMSGTU_VI          = BitPat("b011110???????????011?????1010111")$/;"	m
VMSGTU_VX	src/main/scala/rocket/Instructions.scala	/^  def VMSGTU_VX          = BitPat("b011110???????????100?????1010111")$/;"	m
VMSGT_VI	src/main/scala/rocket/Instructions.scala	/^  def VMSGT_VI           = BitPat("b011111???????????011?????1010111")$/;"	m
VMSGT_VX	src/main/scala/rocket/Instructions.scala	/^  def VMSGT_VX           = BitPat("b011111???????????100?????1010111")$/;"	m
VMSIF_M	src/main/scala/rocket/Instructions.scala	/^  def VMSIF_M            = BitPat("b010100??????00011010?????1010111")$/;"	m
VMSLEU_VI	src/main/scala/rocket/Instructions.scala	/^  def VMSLEU_VI          = BitPat("b011100???????????011?????1010111")$/;"	m
VMSLEU_VV	src/main/scala/rocket/Instructions.scala	/^  def VMSLEU_VV          = BitPat("b011100???????????000?????1010111")$/;"	m
VMSLEU_VX	src/main/scala/rocket/Instructions.scala	/^  def VMSLEU_VX          = BitPat("b011100???????????100?????1010111")$/;"	m
VMSLE_VI	src/main/scala/rocket/Instructions.scala	/^  def VMSLE_VI           = BitPat("b011101???????????011?????1010111")$/;"	m
VMSLE_VV	src/main/scala/rocket/Instructions.scala	/^  def VMSLE_VV           = BitPat("b011101???????????000?????1010111")$/;"	m
VMSLE_VX	src/main/scala/rocket/Instructions.scala	/^  def VMSLE_VX           = BitPat("b011101???????????100?????1010111")$/;"	m
VMSLTU_VV	src/main/scala/rocket/Instructions.scala	/^  def VMSLTU_VV          = BitPat("b011010???????????000?????1010111")$/;"	m
VMSLTU_VX	src/main/scala/rocket/Instructions.scala	/^  def VMSLTU_VX          = BitPat("b011010???????????100?????1010111")$/;"	m
VMSLT_VV	src/main/scala/rocket/Instructions.scala	/^  def VMSLT_VV           = BitPat("b011011???????????000?????1010111")$/;"	m
VMSLT_VX	src/main/scala/rocket/Instructions.scala	/^  def VMSLT_VX           = BitPat("b011011???????????100?????1010111")$/;"	m
VMSNE_VI	src/main/scala/rocket/Instructions.scala	/^  def VMSNE_VI           = BitPat("b011001???????????011?????1010111")$/;"	m
VMSNE_VV	src/main/scala/rocket/Instructions.scala	/^  def VMSNE_VV           = BitPat("b011001???????????000?????1010111")$/;"	m
VMSNE_VX	src/main/scala/rocket/Instructions.scala	/^  def VMSNE_VX           = BitPat("b011001???????????100?????1010111")$/;"	m
VMSOF_M	src/main/scala/rocket/Instructions.scala	/^  def VMSOF_M            = BitPat("b010100??????00010010?????1010111")$/;"	m
VMULHSU_VV	src/main/scala/rocket/Instructions.scala	/^  def VMULHSU_VV         = BitPat("b100110???????????010?????1010111")$/;"	m
VMULHSU_VX	src/main/scala/rocket/Instructions.scala	/^  def VMULHSU_VX         = BitPat("b100110???????????110?????1010111")$/;"	m
VMULHU_VV	src/main/scala/rocket/Instructions.scala	/^  def VMULHU_VV          = BitPat("b100100???????????010?????1010111")$/;"	m
VMULHU_VX	src/main/scala/rocket/Instructions.scala	/^  def VMULHU_VX          = BitPat("b100100???????????110?????1010111")$/;"	m
VMULH_VV	src/main/scala/rocket/Instructions.scala	/^  def VMULH_VV           = BitPat("b100111???????????010?????1010111")$/;"	m
VMULH_VX	src/main/scala/rocket/Instructions.scala	/^  def VMULH_VX           = BitPat("b100111???????????110?????1010111")$/;"	m
VMUL_VV	src/main/scala/rocket/Instructions.scala	/^  def VMUL_VV            = BitPat("b100101???????????010?????1010111")$/;"	m
VMUL_VX	src/main/scala/rocket/Instructions.scala	/^  def VMUL_VX            = BitPat("b100101???????????110?????1010111")$/;"	m
VMV1R_V	src/main/scala/rocket/Instructions.scala	/^  def VMV1R_V            = BitPat("b1001111?????00000011?????1010111")$/;"	m
VMV2R_V	src/main/scala/rocket/Instructions.scala	/^  def VMV2R_V            = BitPat("b1001111?????00001011?????1010111")$/;"	m
VMV4R_V	src/main/scala/rocket/Instructions.scala	/^  def VMV4R_V            = BitPat("b1001111?????00011011?????1010111")$/;"	m
VMV8R_V	src/main/scala/rocket/Instructions.scala	/^  def VMV8R_V            = BitPat("b1001111?????00111011?????1010111")$/;"	m
VMVNFR_V	src/main/scala/rocket/Instructions.scala	/^  def VMVNFR_V           = BitPat("b1001111??????????011?????1010111")$/;"	m
VMV_S_X	src/main/scala/rocket/Instructions.scala	/^  def VMV_S_X            = BitPat("b010000100000?????110?????1010111")$/;"	m
VMV_V_I	src/main/scala/rocket/Instructions.scala	/^  def VMV_V_I            = BitPat("b010111100000?????011?????1010111")$/;"	m
VMV_V_V	src/main/scala/rocket/Instructions.scala	/^  def VMV_V_V            = BitPat("b010111100000?????000?????1010111")$/;"	m
VMV_V_X	src/main/scala/rocket/Instructions.scala	/^  def VMV_V_X            = BitPat("b010111100000?????100?????1010111")$/;"	m
VMV_X_S	src/main/scala/rocket/Instructions.scala	/^  def VMV_X_S            = BitPat("b0100001?????00000010?????1010111")$/;"	m
VMXNOR_MM	src/main/scala/rocket/Instructions.scala	/^  def VMXNOR_MM          = BitPat("b011111???????????010?????1010111")$/;"	m
VMXOR_MM	src/main/scala/rocket/Instructions.scala	/^  def VMXOR_MM           = BitPat("b011011???????????010?????1010111")$/;"	m
VNCLIPU_WI	src/main/scala/rocket/Instructions.scala	/^  def VNCLIPU_WI         = BitPat("b101110???????????011?????1010111")$/;"	m
VNCLIPU_WV	src/main/scala/rocket/Instructions.scala	/^  def VNCLIPU_WV         = BitPat("b101110???????????000?????1010111")$/;"	m
VNCLIPU_WX	src/main/scala/rocket/Instructions.scala	/^  def VNCLIPU_WX         = BitPat("b101110???????????100?????1010111")$/;"	m
VNCLIP_WI	src/main/scala/rocket/Instructions.scala	/^  def VNCLIP_WI          = BitPat("b101111???????????011?????1010111")$/;"	m
VNCLIP_WV	src/main/scala/rocket/Instructions.scala	/^  def VNCLIP_WV          = BitPat("b101111???????????000?????1010111")$/;"	m
VNCLIP_WX	src/main/scala/rocket/Instructions.scala	/^  def VNCLIP_WX          = BitPat("b101111???????????100?????1010111")$/;"	m
VNMSAC_VV	src/main/scala/rocket/Instructions.scala	/^  def VNMSAC_VV          = BitPat("b101111???????????010?????1010111")$/;"	m
VNMSAC_VX	src/main/scala/rocket/Instructions.scala	/^  def VNMSAC_VX          = BitPat("b101111???????????110?????1010111")$/;"	m
VNMSUB_VV	src/main/scala/rocket/Instructions.scala	/^  def VNMSUB_VV          = BitPat("b101011???????????010?????1010111")$/;"	m
VNMSUB_VX	src/main/scala/rocket/Instructions.scala	/^  def VNMSUB_VX          = BitPat("b101011???????????110?????1010111")$/;"	m
VNSRA_WI	src/main/scala/rocket/Instructions.scala	/^  def VNSRA_WI           = BitPat("b101101???????????011?????1010111")$/;"	m
VNSRA_WV	src/main/scala/rocket/Instructions.scala	/^  def VNSRA_WV           = BitPat("b101101???????????000?????1010111")$/;"	m
VNSRA_WX	src/main/scala/rocket/Instructions.scala	/^  def VNSRA_WX           = BitPat("b101101???????????100?????1010111")$/;"	m
VNSRL_WI	src/main/scala/rocket/Instructions.scala	/^  def VNSRL_WI           = BitPat("b101100???????????011?????1010111")$/;"	m
VNSRL_WV	src/main/scala/rocket/Instructions.scala	/^  def VNSRL_WV           = BitPat("b101100???????????000?????1010111")$/;"	m
VNSRL_WX	src/main/scala/rocket/Instructions.scala	/^  def VNSRL_WX           = BitPat("b101100???????????100?????1010111")$/;"	m
VOLATILE	src/main/scala/diplomacy/Parameters.scala	/^  case object VOLATILE    extends T \/\/ content may change without a put, but puts and gets have no side effects$/;"	c
VOR_VI	src/main/scala/rocket/Instructions.scala	/^  def VOR_VI             = BitPat("b001010???????????011?????1010111")$/;"	m
VOR_VV	src/main/scala/rocket/Instructions.scala	/^  def VOR_VV             = BitPat("b001010???????????000?????1010111")$/;"	m
VOR_VX	src/main/scala/rocket/Instructions.scala	/^  def VOR_VX             = BitPat("b001010???????????100?????1010111")$/;"	m
VPOPC_M	src/main/scala/rocket/Instructions.scala	/^  def VPOPC_M            = BitPat("b010000??????10000010?????1010111")$/;"	m
VQMACCSU_VV	src/main/scala/rocket/Instructions.scala	/^  def VQMACCSU_VV        = BitPat("b111111???????????000?????1010111")$/;"	m
VQMACCSU_VX	src/main/scala/rocket/Instructions.scala	/^  def VQMACCSU_VX        = BitPat("b111111???????????100?????1010111")$/;"	m
VQMACCUS_VX	src/main/scala/rocket/Instructions.scala	/^  def VQMACCUS_VX        = BitPat("b111110???????????100?????1010111")$/;"	m
VQMACCU_VV	src/main/scala/rocket/Instructions.scala	/^  def VQMACCU_VV         = BitPat("b111100???????????000?????1010111")$/;"	m
VQMACCU_VX	src/main/scala/rocket/Instructions.scala	/^  def VQMACCU_VX         = BitPat("b111100???????????100?????1010111")$/;"	m
VQMACC_VV	src/main/scala/rocket/Instructions.scala	/^  def VQMACC_VV          = BitPat("b111101???????????000?????1010111")$/;"	m
VQMACC_VX	src/main/scala/rocket/Instructions.scala	/^  def VQMACC_VX          = BitPat("b111101???????????100?????1010111")$/;"	m
VREDAND_VS	src/main/scala/rocket/Instructions.scala	/^  def VREDAND_VS         = BitPat("b000001???????????010?????1010111")$/;"	m
VREDMAXU_VS	src/main/scala/rocket/Instructions.scala	/^  def VREDMAXU_VS        = BitPat("b000110???????????010?????1010111")$/;"	m
VREDMAX_VS	src/main/scala/rocket/Instructions.scala	/^  def VREDMAX_VS         = BitPat("b000111???????????010?????1010111")$/;"	m
VREDMINU_VS	src/main/scala/rocket/Instructions.scala	/^  def VREDMINU_VS        = BitPat("b000100???????????010?????1010111")$/;"	m
VREDMIN_VS	src/main/scala/rocket/Instructions.scala	/^  def VREDMIN_VS         = BitPat("b000101???????????010?????1010111")$/;"	m
VREDOR_VS	src/main/scala/rocket/Instructions.scala	/^  def VREDOR_VS          = BitPat("b000010???????????010?????1010111")$/;"	m
VREDSUM_VS	src/main/scala/rocket/Instructions.scala	/^  def VREDSUM_VS         = BitPat("b000000???????????010?????1010111")$/;"	m
VREDXOR_VS	src/main/scala/rocket/Instructions.scala	/^  def VREDXOR_VS         = BitPat("b000011???????????010?????1010111")$/;"	m
VREMU_VV	src/main/scala/rocket/Instructions.scala	/^  def VREMU_VV           = BitPat("b100010???????????010?????1010111")$/;"	m
VREMU_VX	src/main/scala/rocket/Instructions.scala	/^  def VREMU_VX           = BitPat("b100010???????????110?????1010111")$/;"	m
VREM_VV	src/main/scala/rocket/Instructions.scala	/^  def VREM_VV            = BitPat("b100011???????????010?????1010111")$/;"	m
VREM_VX	src/main/scala/rocket/Instructions.scala	/^  def VREM_VX            = BitPat("b100011???????????110?????1010111")$/;"	m
VRGATHEREI16_VV	src/main/scala/rocket/Instructions.scala	/^  def VRGATHEREI16_VV    = BitPat("b001110???????????000?????1010111")$/;"	m
VRGATHER_VI	src/main/scala/rocket/Instructions.scala	/^  def VRGATHER_VI        = BitPat("b001100???????????011?????1010111")$/;"	m
VRGATHER_VV	src/main/scala/rocket/Instructions.scala	/^  def VRGATHER_VV        = BitPat("b001100???????????000?????1010111")$/;"	m
VRGATHER_VX	src/main/scala/rocket/Instructions.scala	/^  def VRGATHER_VX        = BitPat("b001100???????????100?????1010111")$/;"	m
VRSUB_VI	src/main/scala/rocket/Instructions.scala	/^  def VRSUB_VI           = BitPat("b000011???????????011?????1010111")$/;"	m
VRSUB_VX	src/main/scala/rocket/Instructions.scala	/^  def VRSUB_VX           = BitPat("b000011???????????100?????1010111")$/;"	m
VS1R_V	src/main/scala/rocket/Instructions.scala	/^  def VS1R_V             = BitPat("b000000101000?????000?????0100111")$/;"	m
VS2R_V	src/main/scala/rocket/Instructions.scala	/^  def VS2R_V             = BitPat("b001000101000?????000?????0100111")$/;"	m
VS4R_V	src/main/scala/rocket/Instructions.scala	/^  def VS4R_V             = BitPat("b011000101000?????000?????0100111")$/;"	m
VS8R_V	src/main/scala/rocket/Instructions.scala	/^  def VS8R_V             = BitPat("b111000101000?????000?????0100111")$/;"	m
VSADDU_VI	src/main/scala/rocket/Instructions.scala	/^  def VSADDU_VI          = BitPat("b100000???????????011?????1010111")$/;"	m
VSADDU_VV	src/main/scala/rocket/Instructions.scala	/^  def VSADDU_VV          = BitPat("b100000???????????000?????1010111")$/;"	m
VSADDU_VX	src/main/scala/rocket/Instructions.scala	/^  def VSADDU_VX          = BitPat("b100000???????????100?????1010111")$/;"	m
VSADD_VI	src/main/scala/rocket/Instructions.scala	/^  def VSADD_VI           = BitPat("b100001???????????011?????1010111")$/;"	m
VSADD_VV	src/main/scala/rocket/Instructions.scala	/^  def VSADD_VV           = BitPat("b100001???????????000?????1010111")$/;"	m
VSADD_VX	src/main/scala/rocket/Instructions.scala	/^  def VSADD_VX           = BitPat("b100001???????????100?????1010111")$/;"	m
VSBC_VVM	src/main/scala/rocket/Instructions.scala	/^  def VSBC_VVM           = BitPat("b0100100??????????000?????1010111")$/;"	m
VSBC_VXM	src/main/scala/rocket/Instructions.scala	/^  def VSBC_VXM           = BitPat("b0100100??????????100?????1010111")$/;"	m
VSE16_V	src/main/scala/rocket/Instructions.scala	/^  def VSE16_V            = BitPat("b???000?00000?????101?????0100111")$/;"	m
VSE32_V	src/main/scala/rocket/Instructions.scala	/^  def VSE32_V            = BitPat("b???000?00000?????110?????0100111")$/;"	m
VSE64_V	src/main/scala/rocket/Instructions.scala	/^  def VSE64_V            = BitPat("b???000?00000?????111?????0100111")$/;"	m
VSE8_V	src/main/scala/rocket/Instructions.scala	/^  def VSE8_V             = BitPat("b???000?00000?????000?????0100111")$/;"	m
VSETVL	src/main/scala/rocket/Instructions.scala	/^  def VSETVL             = BitPat("b1000000??????????111?????1010111")$/;"	m
VSETVLI	src/main/scala/rocket/Instructions.scala	/^  def VSETVLI            = BitPat("b0????????????????111?????1010111")$/;"	m
VSEXT_VF2	src/main/scala/rocket/Instructions.scala	/^  def VSEXT_VF2          = BitPat("b010010??????00111010?????1010111")$/;"	m
VSEXT_VF4	src/main/scala/rocket/Instructions.scala	/^  def VSEXT_VF4          = BitPat("b010010??????00101010?????1010111")$/;"	m
VSEXT_VF8	src/main/scala/rocket/Instructions.scala	/^  def VSEXT_VF8          = BitPat("b010010??????00011010?????1010111")$/;"	m
VSIM_ASM_TEST_STAMPS	regression/Makefile	/^VSIM_ASM_TEST_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/vsim-asm-tests.stamp)$/;"	m
VSIM_BMARK_TEST_STAMPS	regression/Makefile	/^VSIM_BMARK_TEST_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/vsim-bmark-tests.stamp)$/;"	m
VSIM_DEBUG_STAMPS	regression/Makefile	/^VSIM_DEBUG_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/vsim-debug.stamp)$/;"	m
VSIM_JTAG_DTM_32_TEST_STAMPS	regression/Makefile	/^VSIM_JTAG_DTM_32_TEST_STAMPS=$(foreach config,$(CONFIGS_32),stamps\/$(config)\/vsim-jtag-dtm-32-$(JTAG_DTM_TEST).stamp)$/;"	m
VSIM_JTAG_DTM_64_TEST_STAMPS	regression/Makefile	/^VSIM_JTAG_DTM_64_TEST_STAMPS=$(foreach config,$(CONFIGS_64),stamps\/$(config)\/vsim-jtag-dtm-64-$(JTAG_DTM_TEST).stamp)$/;"	m
VSIM_JTAG_VCDPLUS_32	regression/Makefile	/^VSIM_JTAG_VCDPLUS_32= +vcdplusfile=regression32.vcd$/;"	m
VSIM_JTAG_VCDPLUS_64	regression/Makefile	/^VSIM_JTAG_VCDPLUS_64= +vcdplusfile=regression64.vcd$/;"	m
VSIM_NDEBUG_STAMPS	regression/Makefile	/^VSIM_NDEBUG_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/vsim-ndebug.stamp)$/;"	m
VSIM_REGRESSION_TEST_STAMPS	regression/Makefile	/^VSIM_REGRESSION_TEST_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/vsim-regression-tests.stamp)$/;"	m
VSIM_TORTURE_STAMPS	regression/Makefile	/^VSIM_TORTURE_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/vsim-torture-$(TORTURE_CONFIG).stamp)$/;"	m
VSIM_VERILOG_STAMPS	regression/Makefile	/^VSIM_VERILOG_STAMPS=$(foreach config,$(CONFIGS),stamps\/$(config)\/vsim-verilog.stamp)$/;"	m
VSLIDE1DOWN_VX	src/main/scala/rocket/Instructions.scala	/^  def VSLIDE1DOWN_VX     = BitPat("b001111???????????110?????1010111")$/;"	m
VSLIDE1UP_VX	src/main/scala/rocket/Instructions.scala	/^  def VSLIDE1UP_VX       = BitPat("b001110???????????110?????1010111")$/;"	m
VSLIDEDOWN_VI	src/main/scala/rocket/Instructions.scala	/^  def VSLIDEDOWN_VI      = BitPat("b001111???????????011?????1010111")$/;"	m
VSLIDEDOWN_VX	src/main/scala/rocket/Instructions.scala	/^  def VSLIDEDOWN_VX      = BitPat("b001111???????????100?????1010111")$/;"	m
VSLIDEUP_VI	src/main/scala/rocket/Instructions.scala	/^  def VSLIDEUP_VI        = BitPat("b001110???????????011?????1010111")$/;"	m
VSLIDEUP_VX	src/main/scala/rocket/Instructions.scala	/^  def VSLIDEUP_VX        = BitPat("b001110???????????100?????1010111")$/;"	m
VSLL_VI	src/main/scala/rocket/Instructions.scala	/^  def VSLL_VI            = BitPat("b100101???????????011?????1010111")$/;"	m
VSLL_VV	src/main/scala/rocket/Instructions.scala	/^  def VSLL_VV            = BitPat("b100101???????????000?????1010111")$/;"	m
VSLL_VX	src/main/scala/rocket/Instructions.scala	/^  def VSLL_VX            = BitPat("b100101???????????100?????1010111")$/;"	m
VSMUL_VV	src/main/scala/rocket/Instructions.scala	/^  def VSMUL_VV           = BitPat("b100111???????????000?????1010111")$/;"	m
VSMUL_VX	src/main/scala/rocket/Instructions.scala	/^  def VSMUL_VX           = BitPat("b100111???????????100?????1010111")$/;"	m
VSRA_VI	src/main/scala/rocket/Instructions.scala	/^  def VSRA_VI            = BitPat("b101001???????????011?????1010111")$/;"	m
VSRA_VV	src/main/scala/rocket/Instructions.scala	/^  def VSRA_VV            = BitPat("b101001???????????000?????1010111")$/;"	m
VSRA_VX	src/main/scala/rocket/Instructions.scala	/^  def VSRA_VX            = BitPat("b101001???????????100?????1010111")$/;"	m
VSRL_VI	src/main/scala/rocket/Instructions.scala	/^  def VSRL_VI            = BitPat("b101000???????????011?????1010111")$/;"	m
VSRL_VV	src/main/scala/rocket/Instructions.scala	/^  def VSRL_VV            = BitPat("b101000???????????000?????1010111")$/;"	m
VSRL_VX	src/main/scala/rocket/Instructions.scala	/^  def VSRL_VX            = BitPat("b101000???????????100?????1010111")$/;"	m
VSSE16_V	src/main/scala/rocket/Instructions.scala	/^  def VSSE16_V           = BitPat("b???010???????????101?????0100111")$/;"	m
VSSE32_V	src/main/scala/rocket/Instructions.scala	/^  def VSSE32_V           = BitPat("b???010???????????110?????0100111")$/;"	m
VSSE64_V	src/main/scala/rocket/Instructions.scala	/^  def VSSE64_V           = BitPat("b???010???????????111?????0100111")$/;"	m
VSSE8_V	src/main/scala/rocket/Instructions.scala	/^  def VSSE8_V            = BitPat("b???010???????????000?????0100111")$/;"	m
VSSRA_VI	src/main/scala/rocket/Instructions.scala	/^  def VSSRA_VI           = BitPat("b101011???????????011?????1010111")$/;"	m
VSSRA_VV	src/main/scala/rocket/Instructions.scala	/^  def VSSRA_VV           = BitPat("b101011???????????000?????1010111")$/;"	m
VSSRA_VX	src/main/scala/rocket/Instructions.scala	/^  def VSSRA_VX           = BitPat("b101011???????????100?????1010111")$/;"	m
VSSRL_VI	src/main/scala/rocket/Instructions.scala	/^  def VSSRL_VI           = BitPat("b101010???????????011?????1010111")$/;"	m
VSSRL_VV	src/main/scala/rocket/Instructions.scala	/^  def VSSRL_VV           = BitPat("b101010???????????000?????1010111")$/;"	m
VSSRL_VX	src/main/scala/rocket/Instructions.scala	/^  def VSSRL_VX           = BitPat("b101010???????????100?????1010111")$/;"	m
VSSUBU_VV	src/main/scala/rocket/Instructions.scala	/^  def VSSUBU_VV          = BitPat("b100010???????????000?????1010111")$/;"	m
VSSUBU_VX	src/main/scala/rocket/Instructions.scala	/^  def VSSUBU_VX          = BitPat("b100010???????????100?????1010111")$/;"	m
VSSUB_VV	src/main/scala/rocket/Instructions.scala	/^  def VSSUB_VV           = BitPat("b100011???????????000?????1010111")$/;"	m
VSSUB_VX	src/main/scala/rocket/Instructions.scala	/^  def VSSUB_VX           = BitPat("b100011???????????100?????1010111")$/;"	m
VSUB_VV	src/main/scala/rocket/Instructions.scala	/^  def VSUB_VV            = BitPat("b000010???????????000?????1010111")$/;"	m
VSUB_VX	src/main/scala/rocket/Instructions.scala	/^  def VSUB_VX            = BitPat("b000010???????????100?????1010111")$/;"	m
VSUXEI16_V	src/main/scala/rocket/Instructions.scala	/^  def VSUXEI16_V         = BitPat("b000001???????????101?????0100111")$/;"	m
VSUXEI32_V	src/main/scala/rocket/Instructions.scala	/^  def VSUXEI32_V         = BitPat("b000001???????????110?????0100111")$/;"	m
VSUXEI64_V	src/main/scala/rocket/Instructions.scala	/^  def VSUXEI64_V         = BitPat("b000001???????????111?????0100111")$/;"	m
VSUXEI8_V	src/main/scala/rocket/Instructions.scala	/^  def VSUXEI8_V          = BitPat("b000001???????????000?????0100111")$/;"	m
VSXEI16_V	src/main/scala/rocket/Instructions.scala	/^  def VSXEI16_V          = BitPat("b???011???????????101?????0100111")$/;"	m
VSXEI32_V	src/main/scala/rocket/Instructions.scala	/^  def VSXEI32_V          = BitPat("b???011???????????110?????0100111")$/;"	m
VSXEI64_V	src/main/scala/rocket/Instructions.scala	/^  def VSXEI64_V          = BitPat("b???011???????????111?????0100111")$/;"	m
VSXEI8_V	src/main/scala/rocket/Instructions.scala	/^  def VSXEI8_V           = BitPat("b???011???????????000?????0100111")$/;"	m
VType	src/main/scala/rocket/CSR.scala	/^class VType(implicit p: Parameters) extends CoreBundle {$/;"	c
VType	src/main/scala/rocket/CSR.scala	/^object VType {$/;"	c
VWADDU_VV	src/main/scala/rocket/Instructions.scala	/^  def VWADDU_VV          = BitPat("b110000???????????010?????1010111")$/;"	m
VWADDU_VX	src/main/scala/rocket/Instructions.scala	/^  def VWADDU_VX          = BitPat("b110000???????????110?????1010111")$/;"	m
VWADDU_WV	src/main/scala/rocket/Instructions.scala	/^  def VWADDU_WV          = BitPat("b110100???????????010?????1010111")$/;"	m
VWADDU_WX	src/main/scala/rocket/Instructions.scala	/^  def VWADDU_WX          = BitPat("b110100???????????110?????1010111")$/;"	m
VWADD_VV	src/main/scala/rocket/Instructions.scala	/^  def VWADD_VV           = BitPat("b110001???????????010?????1010111")$/;"	m
VWADD_VX	src/main/scala/rocket/Instructions.scala	/^  def VWADD_VX           = BitPat("b110001???????????110?????1010111")$/;"	m
VWADD_WV	src/main/scala/rocket/Instructions.scala	/^  def VWADD_WV           = BitPat("b110101???????????010?????1010111")$/;"	m
VWADD_WX	src/main/scala/rocket/Instructions.scala	/^  def VWADD_WX           = BitPat("b110101???????????110?????1010111")$/;"	m
VWMACCSU_VV	src/main/scala/rocket/Instructions.scala	/^  def VWMACCSU_VV        = BitPat("b111111???????????010?????1010111")$/;"	m
VWMACCSU_VX	src/main/scala/rocket/Instructions.scala	/^  def VWMACCSU_VX        = BitPat("b111111???????????110?????1010111")$/;"	m
VWMACCUS_VX	src/main/scala/rocket/Instructions.scala	/^  def VWMACCUS_VX        = BitPat("b111110???????????110?????1010111")$/;"	m
VWMACCU_VV	src/main/scala/rocket/Instructions.scala	/^  def VWMACCU_VV         = BitPat("b111100???????????010?????1010111")$/;"	m
VWMACCU_VX	src/main/scala/rocket/Instructions.scala	/^  def VWMACCU_VX         = BitPat("b111100???????????110?????1010111")$/;"	m
VWMACC_VV	src/main/scala/rocket/Instructions.scala	/^  def VWMACC_VV          = BitPat("b111101???????????010?????1010111")$/;"	m
VWMACC_VX	src/main/scala/rocket/Instructions.scala	/^  def VWMACC_VX          = BitPat("b111101???????????110?????1010111")$/;"	m
VWMULSU_VV	src/main/scala/rocket/Instructions.scala	/^  def VWMULSU_VV         = BitPat("b111010???????????010?????1010111")$/;"	m
VWMULSU_VX	src/main/scala/rocket/Instructions.scala	/^  def VWMULSU_VX         = BitPat("b111010???????????110?????1010111")$/;"	m
VWMULU_VV	src/main/scala/rocket/Instructions.scala	/^  def VWMULU_VV          = BitPat("b111000???????????010?????1010111")$/;"	m
VWMULU_VX	src/main/scala/rocket/Instructions.scala	/^  def VWMULU_VX          = BitPat("b111000???????????110?????1010111")$/;"	m
VWMUL_VV	src/main/scala/rocket/Instructions.scala	/^  def VWMUL_VV           = BitPat("b111011???????????010?????1010111")$/;"	m
VWMUL_VX	src/main/scala/rocket/Instructions.scala	/^  def VWMUL_VX           = BitPat("b111011???????????110?????1010111")$/;"	m
VWREDSUMU_VS	src/main/scala/rocket/Instructions.scala	/^  def VWREDSUMU_VS       = BitPat("b110000???????????000?????1010111")$/;"	m
VWREDSUM_VS	src/main/scala/rocket/Instructions.scala	/^  def VWREDSUM_VS        = BitPat("b110001???????????000?????1010111")$/;"	m
VWSUBU_VV	src/main/scala/rocket/Instructions.scala	/^  def VWSUBU_VV          = BitPat("b110010???????????010?????1010111")$/;"	m
VWSUBU_VX	src/main/scala/rocket/Instructions.scala	/^  def VWSUBU_VX          = BitPat("b110010???????????110?????1010111")$/;"	m
VWSUBU_WV	src/main/scala/rocket/Instructions.scala	/^  def VWSUBU_WV          = BitPat("b110110???????????010?????1010111")$/;"	m
VWSUBU_WX	src/main/scala/rocket/Instructions.scala	/^  def VWSUBU_WX          = BitPat("b110110???????????110?????1010111")$/;"	m
VWSUB_VV	src/main/scala/rocket/Instructions.scala	/^  def VWSUB_VV           = BitPat("b110011???????????010?????1010111")$/;"	m
VWSUB_VX	src/main/scala/rocket/Instructions.scala	/^  def VWSUB_VX           = BitPat("b110011???????????110?????1010111")$/;"	m
VWSUB_WV	src/main/scala/rocket/Instructions.scala	/^  def VWSUB_WV           = BitPat("b110111???????????010?????1010111")$/;"	m
VWSUB_WX	src/main/scala/rocket/Instructions.scala	/^  def VWSUB_WX           = BitPat("b110111???????????110?????1010111")$/;"	m
VXOR_VI	src/main/scala/rocket/Instructions.scala	/^  def VXOR_VI            = BitPat("b001011???????????011?????1010111")$/;"	m
VXOR_VV	src/main/scala/rocket/Instructions.scala	/^  def VXOR_VV            = BitPat("b001011???????????000?????1010111")$/;"	m
VXOR_VX	src/main/scala/rocket/Instructions.scala	/^  def VXOR_VX            = BitPat("b001011???????????100?????1010111")$/;"	m
VZEXT_VF2	src/main/scala/rocket/Instructions.scala	/^  def VZEXT_VF2          = BitPat("b010010??????00110010?????1010111")$/;"	m
VZEXT_VF4	src/main/scala/rocket/Instructions.scala	/^  def VZEXT_VF4          = BitPat("b010010??????00100010?????1010111")$/;"	m
VZEXT_VF8	src/main/scala/rocket/Instructions.scala	/^  def VZEXT_VF8          = BitPat("b010010??????00010010?????1010111")$/;"	m
ValName	src/main/scala/diplomacy/ValName.scala	/^case class ValName(name: String)$/;"	c
ValName	src/main/scala/diplomacy/ValName.scala	/^object ValName$/;"	c
ValNameImpl	macros/src/main/scala/ValName.scala	/^case class ValNameImpl(name: String)$/;"	c
ValNameImpl	macros/src/main/scala/ValName.scala	/^object ValNameImpl$/;"	c
ValidCancel	src/main/scala/util/ReadyValidCancel.scala	/^class ValidCancel[+T <: Data](gen: T) extends Bundle {$/;"	c
ValidCancel	src/main/scala/util/ReadyValidCancel.scala	/^object ValidCancel {$/;"	c
ValidMux	src/main/scala/util/Misc.scala	/^object ValidMux {$/;"	c
VerilatedVcdFILE	src/main/resources/csrc/verilator.h	/^  VerilatedVcdFILE(FILE* file) : file(file) {}$/;"	f	class:VerilatedVcdFILE
VerilatedVcdFILE	src/main/resources/csrc/verilator.h	/^class VerilatedVcdFILE : public VerilatedVcdFile {$/;"	c
Violation	src/main/scala/linting/LintAnnotation.scala	/^case class Violation(linter: rule.LintRule, info: Info, message: String, modules: Set[String]) extends LintAnnotation {$/;"	c
W	src/main/scala/diplomaticobjectmodel/model/OMRegFieldAccessType.scala	/^case object W  extends OMRegFieldAccessType$/;"	c
W	src/main/scala/rocket/CSR.scala	/^  def W = UInt(5,SZ)$/;"	m
WBInfo	src/main/scala/tile/FPU.scala	/^  class WBInfo extends Bundle {$/;"	c
WFI	src/main/scala/rocket/Instructions.scala	/^  def WFI                = BitPat("b00010000010100000000000001110011")$/;"	m
WHERETO	src/main/scala/devices/debug/Debug.scala	/^  def WHERETO      = 0x300$/;"	m
WNotifyVal	src/main/scala/devices/debug/Debug.scala	/^object WNotifyVal {$/;"	c
WNotifyWire	src/main/scala/devices/debug/Debug.scala	/^object WNotifyWire {$/;"	c
Waiting	src/main/scala/devices/debug/Debug.scala	/^      val Waiting, CheckGenerate, Exec, Custom = Value$/;"	l
Whitelist	src/main/scala/linting/LintAnnotation.scala	/^case class Whitelist(lintName: String, whiteList: Set[String]) extends LintAnnotation$/;"	c
WideCounter	src/main/scala/util/Counters.scala	/^case class WideCounter(width: Int, inc: UInt = UInt(1), reset: Boolean = true, inhibit: Bool = false.B)$/;"	c
With1TinyCore	src/main/scala/subsystem/Configs.scala	/^class With1TinyCore extends Config((site, here, up) => {$/;"	c
WithAMBAUnitTests	src/main/scala/unittest/Configs.scala	/^class WithAMBAUnitTests extends Config((site, here, up) => {$/;"	c
WithAsynchronousRocketTiles	src/main/scala/subsystem/Configs.scala	/^class WithAsynchronousRocketTiles(depth: Int, sync: Int) extends Config((site, here, up) => {$/;"	c
WithBootROMFile	src/main/scala/subsystem/Configs.scala	/^class WithBootROMFile(bootROMFile: String) extends Config((site, here, up) => {$/;"	c
WithBufferlessBroadcastHub	src/main/scala/subsystem/Configs.scala	/^class WithBufferlessBroadcastHub extends Config((site, here, up) => {$/;"	c
WithCacheBlockBytes	src/main/scala/subsystem/Configs.scala	/^class WithCacheBlockBytes(linesize: Int) extends Config((site, here, up) => {$/;"	c
WithCbusToPbusCrossingType	src/main/scala/subsystem/Configs.scala	/^class WithCbusToPbusCrossingType(xType: ClockCrossingType) extends Config((site, here, up) => {$/;"	c
WithCoherentBusTopology	src/main/scala/subsystem/Configs.scala	/^class WithCoherentBusTopology extends Config((site, here, up) => {$/;"	c
WithControlBusFrequency	src/main/scala/subsystem/Configs.scala	/^class WithControlBusFrequency(freqMHz: Double) extends Config((site, here, up) => {$/;"	c
WithDTS	src/main/scala/subsystem/Configs.scala	/^class WithDTS(model: String, compat: Seq[String]) extends Config((site, here, up) => {$/;"	c
WithDebugAPB	src/main/scala/subsystem/Configs.scala	/^class WithDebugAPB extends Config ((site, here, up) => {$/;"	c
WithDebugAPB	src/main/scala/system/Configs.scala	/^class WithDebugAPB extends freechips.rocketchip.subsystem.WithDebugAPB$/;"	c
WithDebugSBA	src/main/scala/subsystem/Configs.scala	/^class WithDebugSBA extends Config ((site, here, up) => {$/;"	c
WithDebugSBASystem	src/main/scala/system/Configs.scala	/^class WithDebugSBASystem extends freechips.rocketchip.subsystem.WithDebugSBA$/;"	c
WithDefaultBtb	src/main/scala/subsystem/Configs.scala	/^class WithDefaultBtb extends Config((site, here, up) => {$/;"	c
WithDefaultMMIOPort	src/main/scala/subsystem/Configs.scala	/^class WithDefaultMMIOPort extends Config((site, here, up) => {$/;"	c
WithDefaultMemPort	src/main/scala/subsystem/Configs.scala	/^class WithDefaultMemPort extends Config((site, here, up) => {$/;"	c
WithDefaultSlavePort	src/main/scala/subsystem/Configs.scala	/^class WithDefaultSlavePort extends Config((site, here, up) => {$/;"	c
WithDontDriveBusClocksFromSBus	src/main/scala/subsystem/Configs.scala	/^class WithDontDriveBusClocksFromSBus extends Config((site, here, up) => {$/;"	c
WithECCTests	src/main/scala/unittest/Configs.scala	/^class WithECCTests extends Config((site, here, up) => {$/;"	c
WithEdgeDataBits	src/main/scala/subsystem/Configs.scala	/^class WithEdgeDataBits(dataBits: Int) extends Config((site, here, up) => {$/;"	c
WithExtMemSize	src/main/scala/subsystem/Configs.scala	/^class WithExtMemSize(n: BigInt) extends Config((site, here, up) => {$/;"	c
WithFPUWithoutDivSqrt	src/main/scala/subsystem/Configs.scala	/^class WithFPUWithoutDivSqrt extends Config((site, here, up) => {$/;"	c
WithFastMulDiv	src/main/scala/subsystem/Configs.scala	/^class WithFastMulDiv extends Config((site, here, up) => {$/;"	c
WithFbusToSbusCrossingType	src/main/scala/subsystem/Configs.scala	/^class WithFbusToSbusCrossingType(xType: ClockCrossingType) extends Config((site, here, up) => {$/;"	c
WithFrontBusFrequency	src/main/scala/subsystem/Configs.scala	/^class WithFrontBusFrequency(freqMHz: Double) extends Config((site, here, up) => {$/;"	c
WithIncoherentBusTopology	src/main/scala/subsystem/Configs.scala	/^class WithIncoherentBusTopology extends Config((site, here, up) => {$/;"	c
WithIncoherentTiles	src/main/scala/subsystem/Configs.scala	/^class WithIncoherentTiles extends Config((site, here, up) => {$/;"	c
WithJtagDTM	src/main/scala/subsystem/Configs.scala	/^class WithJtagDTM extends Config ((site, here, up) => {$/;"	c
WithJtagDTMSystem	src/main/scala/system/Configs.scala	/^class WithJtagDTMSystem extends freechips.rocketchip.subsystem.WithJtagDTM$/;"	c
WithJustOneBus	src/main/scala/subsystem/Configs.scala	/^class WithJustOneBus extends Config((site, here, up) => {$/;"	c
WithL1DCacheSets	src/main/scala/subsystem/Configs.scala	/^class WithL1DCacheSets(sets: Int) extends Config((site, here, up) => {$/;"	c
WithL1DCacheWays	src/main/scala/subsystem/Configs.scala	/^class WithL1DCacheWays(ways: Int) extends Config((site, here, up) => {$/;"	c
WithL1ICacheSets	src/main/scala/subsystem/Configs.scala	/^class WithL1ICacheSets(sets: Int) extends Config((site, here, up) => {$/;"	c
WithL1ICacheWays	src/main/scala/subsystem/Configs.scala	/^class WithL1ICacheWays(ways: Int) extends Config((site, here, up) => {$/;"	c
WithMemoryBusFrequency	src/main/scala/subsystem/Configs.scala	/^class WithMemoryBusFrequency(freqMHz: Double) extends Config((site, here, up) => {$/;"	c
WithNBanks	src/main/scala/subsystem/Configs.scala	/^class WithNBanks(n: Int) extends Config((site, here, up) => {$/;"	c
WithNBigCores	src/main/scala/subsystem/Configs.scala	/^class WithNBigCores(n: Int, overrideIdOffset: Option[Int] = None) extends Config((site, here, up) => {$/;"	c
WithNBitPeripheryBus	src/main/scala/subsystem/Configs.scala	/^class WithNBitPeripheryBus(nBits: Int) extends Config ((site, here, up) => {$/;"	c
WithNBreakpoints	src/main/scala/subsystem/Configs.scala	/^class WithNBreakpoints(hwbp: Int) extends Config ((site, here, up) => {$/;"	c
WithNExtTopInterrupts	src/main/scala/subsystem/Configs.scala	/^class WithNExtTopInterrupts(nExtInts: Int) extends Config((site, here, up) => {$/;"	c
WithNMedCores	src/main/scala/subsystem/Configs.scala	/^class WithNMedCores(n: Int, overrideIdOffset: Option[Int] = None) extends Config((site, here, up) => {$/;"	c
WithNMemoryChannels	src/main/scala/subsystem/Configs.scala	/^class WithNMemoryChannels(n: Int) extends Config((site, here, up) => {$/;"	c
WithNSmallCores	src/main/scala/subsystem/Configs.scala	/^class WithNSmallCores(n: Int, overrideIdOffset: Option[Int] = None) extends Config((site, here, up) => {$/;"	c
WithNTrackersPerBank	src/main/scala/subsystem/Configs.scala	/^class WithNTrackersPerBank(n: Int) extends Config((site, here, up) => {$/;"	c
WithNoMMIOPort	src/main/scala/subsystem/Configs.scala	/^class WithNoMMIOPort extends Config((site, here, up) => {$/;"	c
WithNoMemPort	src/main/scala/subsystem/Configs.scala	/^class WithNoMemPort extends Config((site, here, up) => {$/;"	c
WithNoSlavePort	src/main/scala/subsystem/Configs.scala	/^class WithNoSlavePort extends Config((site, here, up) => {$/;"	c
WithNonblockingL1	src/main/scala/subsystem/Configs.scala	/^class WithNonblockingL1(nMSHRs: Int) extends Config((site, here, up) => {$/;"	c
WithPLRUTests	src/main/scala/unittest/Configs.scala	/^class WithPLRUTests extends Config((site, here, up) => {$/;"	c
WithPeripheryBusFrequency	src/main/scala/subsystem/Configs.scala	/^class WithPeripheryBusFrequency(freqMHz: Double) extends Config((site, here, up) => {$/;"	c
WithPowerQueueTests	src/main/scala/unittest/Configs.scala	/^class WithPowerQueueTests extends Config((site, here, up) => {$/;"	c
WithRV32	src/main/scala/subsystem/Configs.scala	/^class WithRV32 extends Config((site, here, up) => {$/;"	c
WithRationalRocketTiles	src/main/scala/subsystem/Configs.scala	/^class WithRationalRocketTiles extends Config((site, here, up) => {$/;"	c
WithRoccExample	src/main/scala/subsystem/Configs.scala	/^class WithRoccExample extends Config((site, here, up) => {$/;"	c
WithSbusToCbusCrossingType	src/main/scala/subsystem/Configs.scala	/^class WithSbusToCbusCrossingType(xType: ClockCrossingType) extends Config((site, here, up) => {$/;"	c
WithSbusToMbusCrossingType	src/main/scala/subsystem/Configs.scala	/^class WithSbusToMbusCrossingType(xType: ClockCrossingType) extends Config((site, here, up) => {$/;"	c
WithScatterGatherTests	src/main/scala/unittest/Configs.scala	/^class WithScatterGatherTests extends Config((site, here, up) => {$/;"	c
WithScratchpadsOnly	src/main/scala/subsystem/Configs.scala	/^class WithScratchpadsOnly extends Config((site, here, up) => {$/;"	c
WithSynchronousRocketTiles	src/main/scala/subsystem/Configs.scala	/^class WithSynchronousRocketTiles extends Config((site, here, up) => {$/;"	c
WithSystemBusFrequency	src/main/scala/subsystem/Configs.scala	/^class WithSystemBusFrequency(freqMHz: Double) extends Config((site, here, up) => {$/;"	c
WithTLSimpleUnitTests	src/main/scala/unittest/Configs.scala	/^class WithTLSimpleUnitTests extends Config((site, here, up) => {$/;"	c
WithTLWidthUnitTests	src/main/scala/unittest/Configs.scala	/^class WithTLWidthUnitTests extends Config((site, here, up) => {$/;"	c
WithTLXbarUnitTests	src/main/scala/unittest/Configs.scala	/^class WithTLXbarUnitTests extends Config((site, here, up) => {$/;"	c
WithTestDuration	src/main/scala/unittest/Configs.scala	/^class WithTestDuration(x: Int) extends Config((site, here, up) => {$/;"	c
WithTimebase	src/main/scala/subsystem/Configs.scala	/^class WithTimebase(hertz: BigInt) extends Config((site, here, up) => {$/;"	c
WithTraceGen	src/main/scala/groundtest/Configs.scala	/^class WithTraceGen($/;"	c
WithoutFPU	src/main/scala/subsystem/Configs.scala	/^class WithoutFPU extends Config((site, here, up) => {$/;"	c
WithoutMulDiv	src/main/scala/subsystem/Configs.scala	/^class WithoutMulDiv extends Config((site, here, up) => {$/;"	c
WithoutTLMonitors	src/main/scala/subsystem/Configs.scala	/^class WithoutTLMonitors extends Config ((site, here, up) => {$/;"	c
WritePattern	src/main/scala/tilelink/PatternPusher.scala	/^case class WritePattern(address: BigInt, size: Int, data: BigInt) extends Pattern$/;"	c
WritebackReq	src/main/scala/rocket/NBDcache.scala	/^class WritebackReq(params: TLBundleParameters)(implicit p: Parameters) extends L1HellaCacheBundle()(p) {$/;"	c
WritebackUnit	src/main/scala/rocket/NBDcache.scala	/^class WritebackUnit(implicit edge: TLEdgeOut, p: Parameters) extends L1HellaCacheModule()(p) {$/;"	c
X	src/main/scala/rocket/CSR.scala	/^  def X = BitPat.dontCare(SZ)$/;"	m
X	src/main/scala/rocket/Consts.scala	/^  def X = BitPat("b?")$/;"	m
XLen	src/main/scala/tile/Core.scala	/^case object XLen extends Field[Int]$/;"	c
XNOR	src/main/scala/rocket/Instructions.scala	/^  def XNOR               = BitPat("b0100000??????????100?????0110011")$/;"	m
XOR	src/main/scala/rocket/Instructions.scala	/^  def XOR                = BitPat("b0000000??????????100?????0110011")$/;"	m
XOR	src/main/scala/tilelink/Bundles.scala	/^  def XOR  = UInt(0, width)$/;"	m
XORI	src/main/scala/rocket/Instructions.scala	/^  def XORI               = BitPat("b?????????????????100?????0010011")$/;"	m
Xsifivecflushdlone	src/main/scala/diplomaticobjectmodel/model/CustomISAExtensions.scala	/^case class Xsifivecflushdlone($/;"	c
Y	src/main/scala/rocket/Consts.scala	/^  def Y = BitPat("b1")$/;"	m
ZCounter	src/main/scala/util/Counters.scala	/^class ZCounter(val n: Int) {$/;"	c
ZCounter	src/main/scala/util/Counters.scala	/^object ZCounter {$/;"	c
ZEXT_H	src/main/scala/rocket/Instructions.scala	/^  def ZEXT_H             = BitPat("b000010000000?????100?????0111011")$/;"	m
ZEXT_H_RV32	src/main/scala/rocket/Instructions.scala	/^  def ZEXT_H_RV32        = BitPat("b000010000000?????100?????0110011")$/;"	m
_	src/main/scala/rocket/CSR.scala	/^    val _ :: is_break :: is_ret :: _ :: is_wfi :: is_sfence :: is_hfence_vvma :: is_hfence_gvma :: is_hlsv :: Nil =$/;"	l
_RAND	src/main/resources/vsrc/AsyncResetReg.v	/^    reg [31:0] _RAND;$/;"	r
_ROCKET_VERILATOR_H	src/main/resources/csrc/verilator.h	2;"	d
__debug_req_ready	src/main/resources/vsrc/SimDTM.v	/^  wire __debug_req_ready = debug_req_ready;$/;"	n
__debug_resp_bits_data	src/main/resources/vsrc/SimDTM.v	/^  wire [31:0] __debug_resp_bits_data = debug_resp_bits_data;$/;"	n
__debug_resp_bits_resp	src/main/resources/vsrc/SimDTM.v	/^  wire [31:0] __debug_resp_bits_resp = {30'b0, debug_resp_bits_resp};$/;"	n
__debug_resp_valid	src/main/resources/vsrc/SimDTM.v	/^  wire __debug_resp_valid = debug_resp_valid;$/;"	n
_dtb	bootrom/bootrom.S	/^_dtb:$/;"	l
_entry	scripts/debug_rom/debug_rom.S	/^_entry:$/;"	l
_entry	scripts/debug_rom/debug_rom_nonzero.S	/^_entry:$/;"	l
_exception	scripts/debug_rom/debug_rom.S	/^_exception:$/;"	l
_hang	bootrom/bootrom.S	/^_hang:$/;"	l
_resume	scripts/debug_rom/debug_rom.S	/^_resume:$/;"	l
_resume	scripts/debug_rom/debug_rom_nonzero.S	/^_resume:$/;"	l
_start	bootrom/bootrom.S	/^_start:$/;"	l
_types	src/main/scala/diplomaticobjectmodel/model/CustomISAExtensions.scala	/^  def _types: Seq[String] = Seq("OMCustomExtensionSpecification", "OMSpecification")$/;"	m
_types	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^                   val _types: Seq[String] = Seq("OMIDMapEntry", "OMCompoundType"))$/;"	l
_types	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^                 val _types: Seq[String] = Seq("OMIDRange", "OMCompundType"))$/;"	l
_types	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  val _types: Seq[String] = Seq("AHB", "AMBA",  "OMProtocol")$/;"	l
_types	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  val _types: Seq[String] = Seq("AHB_Lite", "AMBA",  "OMProtocol")$/;"	l
_types	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  val _types: Seq[String] = Seq("APB", "AMBA",  "OMProtocol")$/;"	l
_types	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  val _types: Seq[String] = Seq("AXI4_Lite", "AMBA",  "OMProtocol")$/;"	l
_types	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  val _types: Seq[String] = Seq("TL_C", "TL",  "OMProtocol")$/;"	l
_types	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  val _types: Seq[String] = Seq("TL_UH", "TL",  "OMProtocol")$/;"	l
_types	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  val _types: Seq[String] = Seq("TL_UL", "TL",  "OMProtocol")$/;"	l
a	src/main/scala/devices/tilelink/Error.scala	/^    val a = if (buffer) {Queue(in.a, 1)} else in.a$/;"	l
a	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val a = UInt(width = 1) \/\/ LSB of A (0=disabled, 1=TOR)$/;"	l
a	src/main/scala/devices/tilelink/Zero.scala	/^    val a = Queue(in.a, 2)$/;"	l
a	src/main/scala/rocket/ICache.scala	/^          val a = tl.a.bits$/;"	l
a	src/main/scala/rocket/PMP.scala	/^  val a = UInt(2.W)$/;"	l
a	src/main/scala/rocket/PTW.scala	/^  val a = Bool()$/;"	l
a	src/main/scala/rocket/RocketCore.scala	/^    val a = a0.asSInt >> vaddrBits$/;"	l
a	src/main/scala/tile/BaseTile.scala	/^    val a = if (tileParams.core.useAtomics) "a" else ""$/;"	l
a	src/main/scala/tile/FPU.scala	/^        val a = Bits(INPUT, expWidth + sigWidth + 1)$/;"	l
a	src/main/scala/tilelink/Atomics.scala	/^    val a        = new TLBundleA(params).flip$/;"	l
a	src/main/scala/tilelink/Bundle_ACancel.scala	/^  val a =  ReadyValidCancel(new TLBundleA(params))$/;"	l
a	src/main/scala/tilelink/Bundles.scala	/^  def a = Seq( ("PutFullData",TLPermissions.PermMsgReserved),$/;"	m
a	src/main/scala/tilelink/Bundles.scala	/^  def a: DecoupledIO[TLBundleA] = optA.getOrElse(Wire(Decoupled(new TLBundleA(params))))$/;"	m
a	src/main/scala/tilelink/Bundles.scala	/^  val a = CreditedIO(new TLBundleA(params))$/;"	l
a	src/main/scala/tilelink/Bundles.scala	/^  val a = RationalIO(new TLBundleA(params))$/;"	l
a	src/main/scala/tilelink/Bundles.scala	/^  val a = new AsyncBundle(new TLBundleA(params.base), params.async)$/;"	l
a	src/main/scala/tilelink/Edges.scala	/^    val a = Wire(new TLBundleA(bundle))$/;"	l
a	src/main/scala/tilelink/Fuzzer.scala	/^    val a = out.a.bits$/;"	l
a	src/main/scala/tilelink/HintHandler.scala	/^      val a = if (!needRepeater) in.a else {$/;"	l
a	src/main/scala/tilelink/PatternPusher.scala	/^    val a = tl_out.a$/;"	l
a	src/main/scala/tilelink/RAMModel.scala	/^      val a = Reg(next = in.a.bits)$/;"	l
a	src/main/scala/tilelink/RegisterRouter.scala	/^    val a = bundleIn.a$/;"	l
a	src/main/scala/tilelink/ToAPB.scala	/^      val a = Queue(in.a, 1, flow = aFlow, pipe = !aFlow)$/;"	l
aDataNo	src/main/scala/tilelink/Edges.scala	/^        val aDataNo  = manager.anySupportAcquireB || manager.anySupportGet || manager.anySupportHint$/;"	l
aDataYes	src/main/scala/tilelink/Edges.scala	/^        val aDataYes = manager.anySupportArithmetic || manager.anySupportLogical || manager.anySupportPutFull || manager.anySupportPutPartial$/;"	l
aDesc	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val aDesc = RegFieldDesc("a", "Address match mode. When clear, this PMP does not match any address. When set, Top-of-Range (TOR) matching is applied by this PMP. Cannot be modified if lock bit is set.",$/;"	l
aFirst	src/main/scala/tilelink/Fragmenter.scala	/^        val aFirst = gennum === UInt(0)$/;"	l
aFrag	src/main/scala/tilelink/Fragmenter.scala	/^        val aFrag = Mux(aOrig > limit, limit, aOrig)$/;"	l
aFragOH1	src/main/scala/tilelink/Fragmenter.scala	/^        val aFragOH1 = UIntToOH1(aFrag, log2Up(maxDownSize))$/;"	l
aFragnum	src/main/scala/tilelink/Fragmenter.scala	/^        val aFragnum = ~(~(old_gennum1 >> log2Ceil(minSize\/beatBytes)) | (aFragOH1 >> log2Ceil(minSize)))$/;"	l
aFull	src/main/scala/tilelink/Fragmenter.scala	/^        val aFull = if (earlyAck == EarlyAck.PutFulls) Some(in_a.bits.opcode === TLMessages.PutFullData) else None$/;"	l
aHasData	src/main/scala/tilelink/Fragmenter.scala	/^        val aHasData = edgeIn.hasData(in_a.bits)$/;"	l
aLast	src/main/scala/tilelink/Fragmenter.scala	/^        val aLast = aFragnum === UInt(0)$/;"	l
aMask	src/main/scala/tilelink/Fragmenter.scala	/^        val aMask = Mux(aHasData, UInt(0), aFragOH1)$/;"	l
aOrig	src/main/scala/tilelink/Fragmenter.scala	/^        val aOrig = in_a.bits.size$/;"	l
aOrigOH1	src/main/scala/tilelink/Fragmenter.scala	/^        val aOrigOH1 = UIntToOH1(aOrig, log2Ceil(maxSize))$/;"	l
aToggle	src/main/scala/tilelink/Fragmenter.scala	/^        val aToggle = !Mux(aFirst, dToggle, RegEnable(dToggle, aFirst))$/;"	l
aWOk	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^        val aWOk = PriorityMux(sel, pmps.map(_.w(0)))$/;"	l
aWOk	src/main/scala/tilelink/CacheCork.scala	/^        val aWOk = edgeIn.manager.fastProperty(in.a.bits.address, !_.supportsPutFull.none, (b:Boolean) => Bool(b))$/;"	l
aWidth	src/main/scala/tilelink/Bundles.scala	/^  val aWidth = 2$/;"	l
a_a	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_a = a_cam_a.bits.data$/;"	l
a_a	src/main/scala/tilelink/CacheCork.scala	/^        val a_a = Wire(out.a)$/;"	l
a_a_ext	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_a_ext = (a_a & wide_mask) | signext_a$/;"	l
a_accept	src/main/scala/amba/ahb/ToTL.scala	/^      val a_accept = in.hready && in.hsel && a_access$/;"	l
a_access	src/main/scala/amba/ahb/SRAM.scala	/^    val a_access    = in.htrans === AHBParameters.TRANS_NONSEQ || in.htrans === AHBParameters.TRANS_SEQ$/;"	l
a_access	src/main/scala/amba/ahb/ToTL.scala	/^      val a_access = in.htrans === AHBParameters.TRANS_NONSEQ || in.htrans === AHBParameters.TRANS_SEQ$/;"	l
a_addr	src/main/scala/tilelink/RegionReplication.scala	/^      val a_addr = in.a.bits.address$/;"	l
a_addr_hi	src/main/scala/tilelink/RAMModel.scala	/^      val a_addr_hi = edge.addr_hi(a_address)$/;"	l
a_address	src/main/scala/amba/ahb/SRAM.scala	/^    val a_address   = Cat((mask zip (in.haddr >> log2Ceil(beatBytes)).asBools).filter(_._1).map(_._2).reverse)$/;"	l
a_address	src/main/scala/rocket/NBDcache.scala	/^  val a_address = req.addr$/;"	l
a_address	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_address = edgeIn.address(in.a.bits)$/;"	l
a_address	src/main/scala/tilelink/RAMModel.scala	/^      val a_address = a.address | a_address_inc$/;"	l
a_address	src/main/scala/tilelink/ToAXI4.scala	/^      val a_address = edgeIn.address(in.a.bits)$/;"	l
a_adjustable	src/main/scala/tilelink/AddressAdjuster.scala	/^      val a_adjustable = isAdjustable(parent.a.bits.address)$/;"	l
a_allow	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_allow = !a_cam_busy && (a_isSupported || a_cam_any_free)$/;"	l
a_atomic	src/main/scala/tilelink/SRAM.scala	/^    val a_atomic = if (!atomics) false.B else$/;"	l
a_base	src/main/scala/tilelink/RAMModel.scala	/^      val a_base = edge.address(a)$/;"	l
a_bigger	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_bigger = Mux(a_a_ext(h) === a_d_ext(h), !adder_out(h), a_bigger_uneq)$/;"	l
a_bigger	src/main/scala/tilelink/Atomics.scala	/^  val a_bigger = Mux(sign_a === sign_d, !sign_s, a_bigger_uneq)$/;"	l
a_bigger_uneq	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_bigger_uneq = unsigned === a_a_ext(h) \/\/ result if high bits are unequal$/;"	l
a_bigger_uneq	src/main/scala/tilelink/Atomics.scala	/^  val a_bigger_uneq = unsigned === sign_a \/\/ result if high bits are unequal$/;"	l
a_burst_mask	src/main/scala/amba/ahb/ToTL.scala	/^      val a_burst_mask = Vec(burst_sizes.map(beats => UInt(beats * beatBytes - 1)))(in.hburst)$/;"	l
a_burst_ok	src/main/scala/amba/ahb/ToTL.scala	/^      val a_burst_ok =$/;"	l
a_burst_size	src/main/scala/amba/ahb/ToTL.scala	/^      val a_burst_size = Vec(burst_sizes.map(beats => UInt(log2Ceil(beats * beatBytes))))(in.hburst)$/;"	l
a_bypass	src/main/scala/amba/ahb/SRAM.scala	/^    val a_bypass = a_address === p_address && p_valid$/;"	l
a_cache	src/main/scala/tilelink/Broadcast.scala	/^      val a_cache = if (caches.size == 0) 0.U else VecInit(caches.map(_.contains(in.a.bits.source))).asUInt$/;"	l
a_cam_a	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_cam_a = PriorityMux(cam_amo, cam_a)$/;"	l
a_cam_any_free	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_cam_any_free = cam_free.reduce(_ || _)$/;"	l
a_cam_any_put	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_cam_any_put = cam_amo.reduce(_ || _)$/;"	l
a_cam_busy	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_cam_busy = (cam_abusy zip cam_a.map(_.fifoId === a_fifoId)) map { case (a,b) => a&&b } reduce (_||_)$/;"	l
a_cam_d	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_cam_d = PriorityMux(cam_amo, cam_d)$/;"	l
a_cam_por_free	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_cam_por_free = cam_free.scanLeft(Bool(false))(_||_).init$/;"	l
a_cam_por_put	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_cam_por_put = cam_amo.scanLeft(Bool(false))(_||_).init$/;"	l
a_cam_sel_free	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_cam_sel_free = (cam_free zip a_cam_por_free) map { case (a,b) => a && !b }$/;"	l
a_cam_sel_put	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_cam_sel_put = (cam_amo zip a_cam_por_put) map { case (a, b) => a && !b }$/;"	l
a_canArithmetic	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_canArithmetic = Bool(passthrough) && edgeOut.manager.supportsArithmeticFast(a_address, a_size)$/;"	l
a_canLogical	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_canLogical    = Bool(passthrough) && edgeOut.manager.supportsLogicalFast   (a_address, a_size)$/;"	l
a_commit	src/main/scala/tilelink/ToAHB.scala	/^      val a_commit = Wire(Bool())$/;"	l
a_contained	src/main/scala/tilelink/RegionReplication.scala	/^      val a_contained = params.region.contains(a_addr) || totalContainment.B$/;"	l
a_count	src/main/scala/amba/ahb/ToTL.scala	/^      val a_count  = RegInit(UInt(0, width = 4))$/;"	l
a_crc	src/main/scala/tilelink/RAMModel.scala	/^      val a_crc = CRC(divisor, Cat(a_crc_acc, a_crc_new), 16 + beatBytes*8)$/;"	l
a_crc_acc	src/main/scala/tilelink/RAMModel.scala	/^      val a_crc_acc = Mux(a_first, UInt(0), crc(a.source))$/;"	l
a_crc_new	src/main/scala/tilelink/RAMModel.scala	/^      val a_crc_new = Cat(a_shadow.zipWithIndex.map { case (z, i) => Mux(a_mask(i), z.value, UInt(0)) }.reverse)$/;"	l
a_crc_valid	src/main/scala/tilelink/RAMModel.scala	/^      val a_crc_valid = a_known_old && Mux(a_first, Bool(true), crc_valid(a.source))$/;"	l
a_d	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_d = a_cam_d.data$/;"	l
a_d	src/main/scala/tilelink/CacheCork.scala	/^        val a_d = Wire(in.d)$/;"	l
a_d_ext	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_d_ext = (a_d & wide_mask) | signext_d$/;"	l
a_d_inv	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_d_inv = Mux(adder, a_d_ext, ~a_d_ext)$/;"	l
a_data	src/main/scala/rocket/DCache.scala	/^  val a_data = Fill(beatWords, pstore1_data)$/;"	l
a_data	src/main/scala/rocket/NBDcache.scala	/^  val a_data = Fill(beatWords, req.data)$/;"	l
a_data	src/main/scala/tilelink/SRAM.scala	/^    val a_data = VecInit(Seq.tabulate(lanes) { i => in.a.bits.data(eccBytes*8*(i+1)-1, eccBytes*8*i) })$/;"	l
a_dec	src/main/scala/tilelink/Edges.scala	/^    val a_dec = x.a.fire() && a_last && a_response$/;"	l
a_dec	src/main/scala/tilelink/RAMModel.scala	/^      val a_dec = a_dec_bytes.map(_ + a_dec_tree)$/;"	l
a_dec_bytes	src/main/scala/tilelink/RAMModel.scala	/^      val a_dec_bytes = dec_bytes.map(_.read(a_addr_hi))$/;"	l
a_dec_tree	src/main/scala/tilelink/RAMModel.scala	/^      val a_dec_tree = a_dec_trees.fold(UInt(0))(_ + _)$/;"	l
a_dec_trees	src/main/scala/tilelink/RAMModel.scala	/^      val a_dec_trees = dec_trees.zipWithIndex.map{ case (m, i) => m.read(a_addr_hi >> (i+1)) }$/;"	l
a_dynamic_local	src/main/scala/tilelink/AddressAdjuster.scala	/^      val a_dynamic_local = isDynamicallyLocal(parent.a.bits.address)$/;"	l
a_enable	src/main/scala/tilelink/ToAPB.scala	/^      val a_enable = RegInit(Bool(false))$/;"	l
a_extra	src/main/scala/tilelink/RegisterRouter.scala	/^    val a_extra = in.bits.extra(TLRegisterRouterExtra)$/;"	l
a_extra	src/main/scala/tilelink/ToAXI4.scala	/^      val a_extra = arw.echo(AXI4TLState)$/;"	l
a_fifo	src/main/scala/tilelink/RAMModel.scala	/^      val a_fifo = edge.manager.hasFifoIdFast(a_base) && edge.client.requestFifo(a.source)$/;"	l
a_fifoId	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_fifoId  = edgeOut.manager.fastProperty(a_address, camFifoId _, (i:Int) => UInt(i))$/;"	l
a_fire	src/main/scala/tilelink/RAMModel.scala	/^      val a_fire = Reg(next = in.a.fire(), init = Bool(false))$/;"	l
a_fire	src/main/scala/tilelink/SRAM.scala	/^    val a_fire = in.a.fire()$/;"	l
a_first	src/main/scala/amba/ahb/ToTL.scala	/^      val a_first  = a_count === UInt(0)$/;"	l
a_first	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val a_first = edgeIn.first(in.a)$/;"	l
a_first	src/main/scala/tilelink/AddressAdjuster.scala	/^        val a_first = parentEdge.first(parent.a)$/;"	l
a_first	src/main/scala/tilelink/Broadcast.scala	/^      val a_first = edgeIn.first(in.a)$/;"	l
a_first	src/main/scala/tilelink/FIFOFixer.scala	/^      val a_first = edgeIn.first(in.a)$/;"	l
a_first	src/main/scala/tilelink/Monitor.scala	/^    val a_first = bundle.a.valid && edge.first(bundle.a.bits, bundle.a.fire())$/;"	l
a_first	src/main/scala/tilelink/Monitor.scala	/^    val a_first = edge.first(a.bits, a.fire())$/;"	l
a_first	src/main/scala/tilelink/Monitor.scala	/^    val a_first = edge.first(bundle.a.bits, bundle.a.fire())$/;"	l
a_first	src/main/scala/tilelink/SourceShrinker.scala	/^        val a_first = edgeIn.first(in.a)$/;"	l
a_flight	src/main/scala/tilelink/RAMModel.scala	/^      val a_flight = Wire(new TLRAMModel.FlightMonitor(params))$/;"	l
a_flow	src/main/scala/tilelink/ToAHB.scala	/^      val a_flow = Wire(Bool())$/;"	l
a_gen	src/main/scala/tilelink/Fuzzer.scala	/^    val a_gen = if (nOperations>0) num_reqs =\/= UInt(0) else Bool(true)$/;"	l
a_hint	src/main/scala/tilelink/ToAHB.scala	/^      val a_hint = in.a.bits.opcode === TLMessages.Hint && Bool(supportHints)$/;"	l
a_id	src/main/scala/tilelink/FIFOFixer.scala	/^      val a_id = if (compacted.isEmpty) UInt(0) else$/;"	l
a_inc	src/main/scala/tilelink/Edges.scala	/^    val a_inc = x.a.fire() && a_first && a_request$/;"	l
a_inc	src/main/scala/tilelink/RAMModel.scala	/^      val a_inc = a_inc_bytes.map(_ + a_inc_tree)$/;"	l
a_inc_bytes	src/main/scala/tilelink/RAMModel.scala	/^      val a_inc_bytes = inc_bytes.map(_.read(a_addr_hi))$/;"	l
a_inc_tree	src/main/scala/tilelink/RAMModel.scala	/^      val a_inc_tree = a_inc_trees.fold(UInt(0))(_ + _)$/;"	l
a_inc_trees	src/main/scala/tilelink/RAMModel.scala	/^      val a_inc_trees = inc_trees.zipWithIndex.map{ case (m, i) => m.read(a_addr_hi >> (i+1)) }$/;"	l
a_isArithmetic	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_isArithmetic = in.a.bits.opcode === TLMessages.ArithmeticData$/;"	l
a_isLogical	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_isLogical    = in.a.bits.opcode === TLMessages.LogicalData$/;"	l
a_isPut	src/main/scala/tilelink/ToAXI4.scala	/^      val a_isPut   = edgeIn.hasData(in.a.bits)$/;"	l
a_isSupported	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_isSupported = Mux(a_isLogical, a_canLogical, Mux(a_isArithmetic, a_canArithmetic, Bool(true)))$/;"	l
a_known_old	src/main/scala/tilelink/RAMModel.scala	/^      val a_known_old = !(Cat(a_shadow.map(!_.valid).reverse) & a_mask).orR$/;"	l
a_lanes	src/main/scala/tilelink/SRAM.scala	/^    val a_lanes = Cat(Seq.tabulate(lanes) { i => in.a.bits.mask(eccBytes*(i+1)-1, eccBytes*i).orR }.reverse)$/;"	l
a_last	src/main/scala/devices/tilelink/Error.scala	/^    val a_last = edge.last(a)$/;"	l
a_legal	src/main/scala/amba/ahb/SRAM.scala	/^    val a_legal     = address.contains(in.haddr)$/;"	l
a_legal	src/main/scala/amba/ahb/ToTL.scala	/^      val a_legal = \/\/ Is the single-beat access allowed?$/;"	l
a_legal	src/main/scala/amba/apb/ToTL.scala	/^      val a_legal =$/;"	l
a_legal	src/main/scala/tilelink/AddressAdjuster.scala	/^      val a_legal = containsAddress(dynamicLocal, parent.a.bits.address) || holes.isEmpty.B$/;"	l
a_local	src/main/scala/tilelink/AddressAdjuster.scala	/^      val a_local = Mux(a_adjustable, a_dynamic_local, isStaticallyLocal(parent.a.bits.address))$/;"	l
a_logBeats1	src/main/scala/tilelink/ToAHB.scala	/^      val a_logBeats1 = a_sizeDelta(edgeIn.bundle.sizeBits-1, 0)$/;"	l
a_mask	src/main/scala/amba/ahb/SRAM.scala	/^    val a_mask      = MaskGen(in.haddr, in.hsize, beatBytes)$/;"	l
a_mask	src/main/scala/rocket/DCache.scala	/^  val a_mask = pstore1_mask << (access_address.extract(beatBytes.log2-1, wordBytes.log2) << 3)$/;"	l
a_mask	src/main/scala/tilelink/RAMModel.scala	/^      val a_mask = edge.mask(a_base, a_size)$/;"	l
a_noDomain	src/main/scala/tilelink/FIFOFixer.scala	/^      val a_noDomain = a_id === UInt(0)$/;"	l
a_notFIFO	src/main/scala/tilelink/FIFOFixer.scala	/^      val a_notFIFO = edgeIn.manager.fastProperty(in.a.bits.address, _.fifoId != Some(0), (b:Boolean) => Bool(b))$/;"	l
a_ok	src/main/scala/tilelink/AddressAdjuster.scala	/^        val a_ok = !isAdjustable(parent.a.bits.address) || (a_legal && a_support)$/;"	l
a_opcode_bus_size	src/main/scala/tilelink/Monitor.scala	/^    val a_opcode_bus_size     = 3 + 1 \/\/opcode size is 3, but add so that 0 is not mapped to anything$/;"	l
a_opcode_lookup	src/main/scala/tilelink/Monitor.scala	/^    val a_opcode_lookup = WireInit(0.U((1 << log_a_opcode_bus_size).W))$/;"	l
a_opcodes_set	src/main/scala/tilelink/Monitor.scala	/^    val a_opcodes_set = WireInit(0.U((edge.client.endSourceId << log_a_opcode_bus_size).W))$/;"	l
a_opcodes_set_interm	src/main/scala/tilelink/Monitor.scala	/^    val a_opcodes_set_interm = WireInit(0.U(a_opcode_bus_size.W))$/;"	l
a_poisonv	src/main/scala/tilelink/SRAM.scala	/^    val a_poisonv = VecInit(Seq.fill(lanes) { in.a.bits.corrupt })$/;"	l
a_queue_depth	src/main/scala/rocket/DCache.scala	/^    val a_queue_depth = outer.crossing match {$/;"	l
a_read	src/main/scala/tilelink/SRAM.scala	/^    val a_read = in.a.bits.opcode === TLMessages.Get$/;"	l
a_ren	src/main/scala/tilelink/SRAM.scala	/^    val a_ren = a_read || a_atomic || a_sublane$/;"	l
a_request	src/main/scala/amba/ahb/SRAM.scala	/^    val a_request   = in.hready && in.hsel && a_access$/;"	l
a_sel	src/main/scala/amba/ahb/Xbar.scala	/^      val a_sel = Vec(route_addrs.map(seq => seq.map(_.contains(in.haddr)).reduce(_ || _)))$/;"	l
a_sel	src/main/scala/rocket/DCache.scala	/^  val a_sel = UIntToOH(a_source, maxUncachedInFlight+mmioOffset) >> mmioOffset$/;"	l
a_sel	src/main/scala/tilelink/AddressAdjuster.scala	/^          val a_sel = c.sourceId.contains(parent.a.bits.source)$/;"	l
a_sel	src/main/scala/tilelink/FIFOFixer.scala	/^        val a_sel = c.sourceId.contains(in.a.bits.source)$/;"	l
a_sel	src/main/scala/tilelink/ToAPB.scala	/^      val a_sel    = a.valid && RegNext(!in.d.valid || in.d.ready)$/;"	l
a_sel	src/main/scala/tilelink/ToAXI4.scala	/^      val a_sel = UIntToOH(arw.id, edgeOut.master.endId).asBools$/;"	l
a_sel	src/main/scala/tilelink/WidthWidget.scala	/^        val a_sel = in.a.bits.address(keepBits-1, dropBits)$/;"	l
a_set	src/main/scala/tilelink/Monitor.scala	/^    val a_set          = WireInit(0.U(edge.client.endSourceId.W))$/;"	l
a_set	src/main/scala/tilelink/Monitor.scala	/^    val a_set = WireInit(0.U(edge.client.endSourceId.W))$/;"	l
a_set_wo_ready	src/main/scala/tilelink/Monitor.scala	/^    val a_set_wo_ready = WireInit(0.U(edge.client.endSourceId.W))$/;"	l
a_shadow	src/main/scala/tilelink/RAMModel.scala	/^      val a_shadow = shadow.map(_.read(a_waddr))$/;"	l
a_singleBeat	src/main/scala/tilelink/ToAHB.scala	/^      val a_singleBeat = a_hint || Bool(lgBytes >= lgMax) || a_sizeDelta(edgeIn.bundle.sizeBits)$/;"	l
a_size	src/main/scala/rocket/DCache.scala	/^  val a_size = s2_req.size$/;"	l
a_size	src/main/scala/rocket/NBDcache.scala	/^  val a_size = req.size$/;"	l
a_size	src/main/scala/tilelink/AtomicAutomata.scala	/^        val a_size = edgeIn.size(in.a.bits)$/;"	l
a_size	src/main/scala/tilelink/RAMModel.scala	/^      val a_size = edge.size(a)$/;"	l
a_size	src/main/scala/tilelink/ToAXI4.scala	/^      val a_size    = edgeIn.size(in.a.bits)$/;"	l
a_sizeDelta	src/main/scala/tilelink/ToAHB.scala	/^      val a_sizeDelta = Cat(UInt(0, width = 1), in.a.bits.size) - UInt(lgBytes+1)$/;"	l
a_sizeOH	src/main/scala/tilelink/RAMModel.scala	/^      val a_sizeOH = UIntToOH(a_size)$/;"	l
a_size_bus_size	src/main/scala/tilelink/Monitor.scala	/^    val a_size_bus_size       = edge.bundle.sizeBits + 1 \/\/add one so that 0 is not mapped to anything (size 0 -> size 1 in map, size 0 in map means unset)$/;"	l
a_size_lookup	src/main/scala/tilelink/Monitor.scala	/^    val a_size_lookup = WireInit(0.U((1 << log_a_size_bus_size).W))$/;"	l
a_sizes_set	src/main/scala/tilelink/Monitor.scala	/^    val a_sizes_set = WireInit(0.U((edge.client.endSourceId << log_a_size_bus_size).W))$/;"	l
a_sizes_set_interm	src/main/scala/tilelink/Monitor.scala	/^    val a_sizes_set_interm = WireInit(0.U(a_size_bus_size.W))$/;"	l
a_source	src/main/scala/rocket/DCache.scala	/^  val a_source = PriorityEncoder(~uncachedInFlight.asUInt << mmioOffset) \/\/ skip the MSHR$/;"	l
a_source	src/main/scala/rocket/NBDcache.scala	/^  val a_source = UInt(id)$/;"	l
a_source	src/main/scala/tilelink/ToAXI4.scala	/^      val a_source  = in.a.bits.source$/;"	l
a_stall	src/main/scala/tilelink/AddressAdjuster.scala	/^      val a_stall = Wire(Bool())$/;"	l
a_sublane	src/main/scala/tilelink/SRAM.scala	/^    val a_sublane = if (eccBytes == 1) false.B else$/;"	l
a_support	src/main/scala/tilelink/AddressAdjuster.scala	/^      val a_support = VecInit($/;"	l
a_type_sel	src/main/scala/tilelink/Fuzzer.scala	/^    val a_type_sel  = noiseMaker(3, inc, 0)$/;"	l
a_waddr	src/main/scala/tilelink/RAMModel.scala	/^      val a_waddr = Mux(wipe, wipeIndex, a_addr_hi)$/;"	l
a_write	src/main/scala/amba/ahb/SRAM.scala	/^    val a_write     = in.hwrite$/;"	l
a_write	src/main/scala/tilelink/ToAPB.scala	/^      val a_write  = edgeIn.hasData(a.bits)$/;"	l
aa	src/main/scala/regmapper/Test.scala	/^  def aa(bits: Int) = combo(bits, always, always)$/;"	m
aaWrapper	src/main/scala/tilelink/BusWrapper.scala	/^    val aaWrapper = LazyModule(new AddressAdjusterWrapper(this, loc.name))$/;"	l
abase	src/main/scala/tilelink/ErrorEvaluator.scala	/^    val abase = a.address$/;"	l
abort	src/main/scala/util/LanePositionedQueue.scala	/^  val abort = if (args.abort) Some(Input(Bool())) else None$/;"	l
abortSize	src/main/scala/util/LanePositionedQueue.scala	/^  val abortSize    = nCommit - committed$/;"	l
abort_bypass	src/main/scala/util/LanePositionedQueue.scala	/^  val abort_bypass = if (abort) { wen && write_row === read_row } else { false.B }$/;"	l
abs	src/main/scala/util/Misc.scala	/^    val abs = x.abs.asUInt$/;"	l
abstractCommandBusy	src/main/scala/devices/debug/Debug.scala	/^    val abstractCommandBusy = WireInit(true.B)$/;"	l
abstractDataMem	src/main/scala/devices/debug/Debug.scala	/^    val abstractDataMem       = Reg(Vec(cfg.nAbstractDataWords*4, UInt(8.W)))$/;"	l
abstractDataNxt	src/main/scala/devices/debug/Debug.scala	/^    val abstractDataNxt       = WireInit(abstractDataMem)$/;"	l
abstractGeneratedCSR	src/main/scala/devices/debug/Debug.scala	/^    def abstractGeneratedCSR: UInt = {$/;"	m
abstractGeneratedI	src/main/scala/devices/debug/Debug.scala	/^    def abstractGeneratedI(cfg: DebugModuleParams): UInt = {$/;"	m
abstractGeneratedMem	src/main/scala/devices/debug/Debug.scala	/^    val abstractGeneratedMem = Reg(Vec(cfg.nAbstractInstructions, (UInt(32.W))))$/;"	l
abstractGeneratedS	src/main/scala/devices/debug/Debug.scala	/^    def abstractGeneratedS(cfg: DebugModuleParams): UInt = {$/;"	m
abstractcsRegFields	src/main/scala/devices/debug/Debug.scala	/^    val abstractcsRegFields = RegFieldGroup("dmi_abstractcs", Some("abstract command control\/status"), Seq($/;"	l
abt	src/main/scala/util/LanePositionedQueue.scala	/^  val abt = RegInit(0.U(bits.W))$/;"	l
acc	src/main/resources/vsrc/RoccBlackBox.v	/^  reg [xLen-1:0] acc;$/;"	r
acc	src/main/scala/util/Misc.scala	/^          val acc = sub_acc || (size && eq)$/;"	l
accept	src/main/resources/csrc/remote_bitbang.cc	/^void remote_bitbang_t::accept()$/;"	f	class:remote_bitbang_t
accept	src/main/scala/util/BundleMap.scala	/^  def accept(fields: Seq[BundleFieldBase], keys: Seq[BundleKeyBase]): Seq[BundleFieldBase] = {$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(set: UInt) = { }$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(set: UInt) = {$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(set: UInt): Unit$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(set: UInt, touch_way: UInt) = {$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(set: UInt, touch_way: UInt): Unit$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(sets: Seq[UInt], touch_ways: Seq[Valid[UInt]]) = {$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(sets: Seq[UInt], touch_ways: Seq[Valid[UInt]]): Unit$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(touch_way: UInt) = {}$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(touch_way: UInt): Unit = {$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(touch_way: UInt): Unit$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(touch_ways: Seq[Valid[UInt]]) = {}$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(touch_ways: Seq[Valid[UInt]]): Unit = {$/;"	m
access	src/main/scala/util/Replacement.scala	/^  def access(touch_ways: Seq[Valid[UInt]]): Unit$/;"	m
accessRegIsCustom	src/main/scala/devices/debug/Debug.scala	/^    val accessRegIsCustom = if (needCustom) {$/;"	l
accessRegIsGPR	src/main/scala/devices/debug/Debug.scala	/^    val accessRegIsGPR = (accessRegisterCommandReg.regno >= 0x1000.U && accessRegisterCommandReg.regno <= 0x101F.U) && accessRegIsLegalSize$/;"	l
accessRegIsLegalSize	src/main/scala/devices/debug/Debug.scala	/^    val accessRegIsLegalSize = (accessRegisterCommandReg.size === 2.U) || (accessRegisterCommandReg.size === 3.U)$/;"	l
accessRegisterCommandReg	src/main/scala/devices/debug/Debug.scala	/^    val accessRegisterCommandReg = WireInit(COMMANDReg.asUInt().asTypeOf(new ACCESS_REGISTERFields()))$/;"	l
accessRegisterCommandWr	src/main/scala/devices/debug/Debug.scala	/^    val accessRegisterCommandWr  = WireInit(COMMANDWrData.asUInt().asTypeOf(new ACCESS_REGISTERFields()))$/;"	l
access_address	src/main/scala/rocket/DCache.scala	/^  val access_address = s2_req.addr$/;"	l
accrued	src/main/scala/tile/BusErrorUnit.scala	/^    val accrued = Reg(init = Vec.fill(sources.size)(false.B))$/;"	l
accruedRefillError	src/main/scala/rocket/ICache.scala	/^  val accruedRefillError = Reg(Bool())$/;"	l
accrued_desc	src/main/scala/tile/BusErrorUnit.scala	/^    val accrued_desc = sources.zipWithIndex.map { case (s, i) =>$/;"	l
accum	src/main/scala/rocket/Multiplier.scala	/^    val accum = mulReg(2*mulw,mulw).asSInt$/;"	l
accum	src/main/scala/tile/LazyRoCC.scala	/^  val accum = regfile(addr)$/;"	l
accumulated	src/main/scala/amba/axi4/IdIndexer.scala	/^          val accumulated = masters(j)$/;"	l
accumulator	src/main/scala/subsystem/Configs.scala	/^        val accumulator = LazyModule(new AccumulatorExample(OpcodeSet.custom0, n = 4)(p))$/;"	l
ack	src/main/scala/devices/debug/Debug.scala	/^  val ack = Input(UInt(nExtTriggers.W))$/;"	l
ack	src/main/scala/devices/debug/Debug.scala	/^  val ack = Output(UInt(nExtTriggers.W))$/;"	l
ack_decrement	src/main/scala/tilelink/Fragmenter.scala	/^        val ack_decrement = Mux(dHasData, UInt(1), dsizeOH >> log2Ceil(beatBytes))$/;"	l
acked	src/main/scala/rocket/NBDcache.scala	/^  val acked = Reg(Bool())$/;"	l
ackhavereset	src/main/scala/devices/debug/Debug.scala	/^  val ackhavereset = Bool()$/;"	l
ackhavereset	src/main/scala/devices/debug/dm_registers.scala	/^  val ackhavereset = Bool()$/;"	l
ackhaveresetWrEn	src/main/scala/devices/debug/Debug.scala	/^    val ackhaveresetWrEn    = WireInit(false.B)$/;"	l
acknum	src/main/scala/tilelink/Fragmenter.scala	/^        val acknum = RegInit(UInt(0, width = counterBits))$/;"	l
acknum_fragment	src/main/scala/tilelink/Fragmenter.scala	/^        val acknum_fragment = dFragnum << log2Ceil(minSize\/beatBytes)$/;"	l
acknum_size	src/main/scala/tilelink/Fragmenter.scala	/^        val acknum_size = dsizeOH1 >> log2Ceil(beatBytes)$/;"	l
acq	src/main/scala/devices/tilelink/DevNull.scala	/^  val acq  = if (params.acquire) xfer else TransferSizes.none$/;"	l
acq	src/main/scala/rocket/ScratchpadSlavePort.scala	/^    val acq = Reg(tl_in.a.bits)$/;"	l
acq_needT	src/main/scala/tilelink/Edges.scala	/^    val acq_needT = MuxLookup(a.param, Wire(Bool()), Array($/;"	l
acquire	src/main/scala/devices/tilelink/DevNull.scala	/^  def acquire: Boolean = region == RegionType.TRACKED$/;"	m
acquire	src/main/scala/rocket/DCache.scala	/^  def acquire(vaddr: UInt, paddr: UInt, param: UInt): TLBundleA = {$/;"	m
acquire	src/main/scala/rocket/Frontend.scala	/^  val acquire = Bool()$/;"	l
acquire	src/main/scala/rocket/HellaCache.scala	/^  val acquire = Bool()$/;"	l
acquire	src/main/scala/rocket/ICache.scala	/^  val acquire = Bool()$/;"	l
acquire	src/main/scala/tilelink/Broadcast.scala	/^  val acquire = opcode === TLMessages.AcquireBlock || opcode === TLMessages.AcquirePerm$/;"	l
acquire_address	src/main/scala/rocket/DCache.scala	/^  val acquire_address = (s2_req.addr >> idxLSB) << idxLSB$/;"	l
acquire_ok	src/main/scala/tilelink/AddressAdjuster.scala	/^      val acquire_ok =$/;"	l
action	src/main/scala/rocket/Breakpoint.scala	/^    val action = bp.control.action$/;"	l
action	src/main/scala/rocket/Breakpoint.scala	/^  val action = UInt((if (coreParams.useBPWatch) 3 else 1).W)$/;"	l
action	src/main/scala/rocket/Breakpoint.scala	/^  val action = UInt(3.W)$/;"	l
active	src/main/scala/rocket/NBDcache.scala	/^  val active = Reg(init=Bool(false))$/;"	l
active	src/main/scala/util/Timer.scala	/^  val active = Reg(init = Bool(false))$/;"	l
active	src/main/scala/util/Timer.scala	/^  val active = inflight.reduce(_ || _)$/;"	l
activeInstruction	src/main/scala/jtag/JtagTap.scala	/^    val activeInstruction = RegInit(initialInstruction.U(irLength.W))$/;"	l
actualSize	src/main/scala/util/ReorderQueue.scala	/^  val actualSize = size.getOrElse(tagSpaceSize)$/;"	l
ad	src/main/scala/regmapper/Test.scala	/^  def ad(bits: Int) = combo(bits, always, delay(11))$/;"	m
adResponse	src/main/scala/tilelink/Bundles.scala	/^  def adResponse = Vec(AccessAck, AccessAck, AccessAckData, AccessAckData, AccessAckData, HintAck, Grant, Grant)$/;"	m
add	src/main/scala/diplomacy/Resources.scala	/^  def add(bs: BindingScope) = BindingScope.bindingScopes.+=:(bs)$/;"	m
add	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^  def add(parent: LogicalTreeNode, child: => LogicalTreeNode): Unit = {$/;"	m
add	src/main/scala/rocket/AMOALU.scala	/^  val add = io.cmd === M_XA_ADD$/;"	l
add	src/main/scala/rocket/RVC.scala	/^      val add = inst(Cat(rs2, rd, 0.U(3.W), rd, 0x33.U(7.W)), rd, rd, rs2)$/;"	l
add	src/main/scala/util/GeneratorUtils.scala	/^  def add(extension: String, contents: => String): Unit = {$/;"	m
addIntsToPlic	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^  def addIntsToPlic(resourceBindings: ResourceBindings, components: Seq[OMComponent]): Seq[OMComponent] = {$/;"	m
addLogicalTreeNode	src/main/scala/diplomaticobjectmodel/HasLogicalTreeNode.scala	/^  def addLogicalTreeNode(childLogicalTreeNode: LogicalTreeNode): Unit = LogicalModuleTree.add(logicalTreeNode, childLogicalTreeNode)$/;"	m
addSuite	src/main/scala/system/RocketTestSuite.scala	/^  def addSuite(s: RocketTestSuite): Unit = { suites += (s.makeTargetName -> s) }$/;"	m
addSuites	src/main/scala/system/RocketTestSuite.scala	/^  def addSuites(s: Seq[RocketTestSuite]): Unit = { s.foreach(addSuite) }$/;"	m
addTypes	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def addTypes(json: Any): String = {$/;"	m
addWrap	src/main/scala/util/package.scala	/^    def addWrap(y: UInt, n: Int): UInt = {$/;"	m
addedBits	src/main/scala/amba/axi4/ToTL.scala	/^      val addedBits = logFlight + 1 \/\/ +1 for read vs. write source ID$/;"	l
addedBits	src/main/scala/tilelink/Fragmenter.scala	/^  val addedBits = fragmentBits + toggleBits + fullBits$/;"	l
addend	src/main/scala/tile/LazyRoCC.scala	/^  val addend = cmd.bits.rs1$/;"	l
adder	src/main/scala/tilelink/AtomicAutomata.scala	/^        val adder = a_cam_a.bits.param(2)$/;"	l
adder	src/main/scala/tilelink/Atomics.scala	/^  val adder    = io.a.param(2)$/;"	l
adder_out	src/main/scala/rocket/ALU.scala	/^    val adder_out = UInt(OUTPUT, xLen)$/;"	l
adder_out	src/main/scala/rocket/AMOALU.scala	/^  val adder_out = {$/;"	l
adder_out	src/main/scala/tilelink/AtomicAutomata.scala	/^        val adder_out = a_a_ext + a_d_inv$/;"	l
addi	src/main/scala/rocket/RVC.scala	/^    def addi = inst(Cat(addiImm, rd, 0.U(3.W), rd, 0x13.U(7.W)), rd, rd, rs2p)$/;"	m
addi16sp	src/main/scala/rocket/RVC.scala	/^    def addi16sp = {$/;"	m
addi16spImm	src/main/scala/rocket/RVC.scala	/^  def addi16spImm = Cat(Fill(3, x(12)), x(4,3), x(5), x(2), x(6), 0.U(4.W))$/;"	m
addi4spn	src/main/scala/rocket/RVC.scala	/^    def addi4spn = {$/;"	m
addi4spnImm	src/main/scala/rocket/RVC.scala	/^  def addi4spnImm = Cat(x(10,7), x(12,11), x(5), x(6), 0.U(2.W))$/;"	m
addiImm	src/main/scala/rocket/RVC.scala	/^  def addiImm = Cat(Fill(7, x(12)), x(6,2))$/;"	m
additionalPgLevels	src/main/scala/rocket/CSR.scala	/^  def additionalPgLevels = mode.extract(log2Ceil(pgLevels-minPgLevels+1)-1, 0)$/;"	m
additionalPgLevels	src/main/scala/rocket/TLB.scala	/^    val additionalPgLevels = (if (guestPA) io.ptw.hgatp else satp).additionalPgLevels$/;"	l
addiw	src/main/scala/rocket/RVC.scala	/^    def addiw = {$/;"	m
addr	src/main/scala/amba/axi4/Bundles.scala	/^  val addr   = UInt(width = params.addrBits)$/;"	l
addr	src/main/scala/amba/axi4/Fragmenter.scala	/^        val addr = Mux(busy, r_addr, a.bits.addr)$/;"	l
addr	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val addr = Mux(ar.valid, ar.bits.addr, aw.bits.addr)$/;"	l
addr	src/main/scala/devices/debug/Custom.scala	/^  val addr = Input(UInt(log2Up(p.addrs.foldLeft(0){_ max _}).W))$/;"	l
addr	src/main/scala/devices/debug/DMI.scala	/^    val addr = WireInit(io.dmi.req.bits.addr << 2)$/;"	l
addr	src/main/scala/devices/debug/DMI.scala	/^  val addr = UInt(addrBits.W)$/;"	l
addr	src/main/scala/devices/debug/DebugTransport.scala	/^  val addr = UInt(addrBits.W)$/;"	l
addr	src/main/scala/devices/debug/dm_registers.scala	/^  val addr = UInt(32.W)$/;"	l
addr	src/main/scala/groundtest/TraceGen.scala	/^    val addr = io.mem.req.bits.addr$/;"	l
addr	src/main/scala/rocket/BTB.scala	/^   val addr = UInt(width = vaddrBits)$/;"	l
addr	src/main/scala/rocket/CSR.scala	/^    val addr = Cat(io.status.v, io.rw.addr)$/;"	l
addr	src/main/scala/rocket/CSR.scala	/^    val addr = UInt(INPUT, CSR.ADDRSZ)$/;"	l
addr	src/main/scala/rocket/CSR.scala	/^    val addr = io_dec.inst(31, 20)$/;"	l
addr	src/main/scala/rocket/DCache.scala	/^  val addr = Bits(width = untagBits)$/;"	l
addr	src/main/scala/rocket/DCache.scala	/^  val addr = UInt(width = vaddrBitsExtended)$/;"	l
addr	src/main/scala/rocket/DCache.scala	/^  val addr = io.req.bits.addr >> rowOffBits$/;"	l
addr	src/main/scala/rocket/HellaCache.scala	/^  val addr = UInt(width = coreMaxAddrBits)$/;"	l
addr	src/main/scala/rocket/ICache.scala	/^  val addr = UInt(width = vaddrBits)$/;"	l
addr	src/main/scala/rocket/NBDcache.scala	/^  val addr   = Bits(width = untagBits)$/;"	l
addr	src/main/scala/rocket/PMP.scala	/^    val addr = Input(UInt(paddrBits.W))$/;"	l
addr	src/main/scala/rocket/PMP.scala	/^  val addr = UInt((paddrBits - PMP.lgAlign).W)$/;"	l
addr	src/main/scala/rocket/PTW.scala	/^  val addr = UInt(width = vpnBits)$/;"	l
addr	src/main/scala/rocket/TLB.scala	/^  val addr = UInt(width = vaddrBits)$/;"	l
addr	src/main/scala/tile/LazyRoCC.scala	/^  val addr = Reg(UInt(coreMaxAddrBits.W))$/;"	l
addr	src/main/scala/tile/LazyRoCC.scala	/^  val addr = cmd.bits.rs2(log2Up(outer.n)-1,0)$/;"	l
addr	src/main/scala/tilelink/AddressAdjuster.scala	/^    val addr = prefix0(m.address)$/;"	l
addr	src/main/scala/tilelink/Fuzzer.scala	/^    val addr      = overrideAddress.map(_.legalize(rawAddr)).getOrElse(rawAddr) & ~UIntToOH1(size, addressBits)$/;"	l
addr	src/main/scala/tilelink/SRAM.scala	/^    val addr   = Mux(d_wb, d_address, Mux(r_replay, r_address, in.a.bits.address))$/;"	l
addr	src/main/scala/tilelink/ToAHB.scala	/^  val addr   = UInt(width = params.bundle.addressBits)$/;"	l
addrBagIndices	src/main/scala/groundtest/TraceGen.scala	/^  val addrBagIndices = (0 to addressBagLen-1).$/;"	l
addrBits	src/main/scala/devices/tilelink/TestRAM.scala	/^    val addrBits = (mask zip edge.addr_hi(in.a.bits).asBools).filter(_._1).map(_._2)$/;"	l
addrHiDesc	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val addrHiDesc = RegFieldDesc("addr_hi", "Page address. Specifies top-of-range page address for this PMP and bottom-of-range address for following PMP. Cannot be modified if lock bit is set, or if address match mode is TOR and lock bit is set on the subsequent PMP.",$/;"	l
addrIn	src/main/scala/devices/debug/SBA.scala	/^      val addrIn       = Input(UInt(128.W)) \/\/ TODO: Parameterize these widths$/;"	l
addrInScratchpad	src/main/scala/rocket/ICache.scala	/^  def addrInScratchpad(addr: UInt) = addrMaybeInScratchpad(addr) && lineInScratchpad(addr(untagBits+log2Ceil(nWays)-1, blockOffBits))$/;"	m
addrLoBits	src/main/scala/tilelink/Parameters.scala	/^  val addrLoBits = log2Up(dataBits\/8)$/;"	l
addrLocked	src/main/scala/rocket/PMP.scala	/^  def addrLocked(next: PMPReg) = cfgLocked || next.cfgLocked && next.tor$/;"	m
addrMaybeInScratchpad	src/main/scala/rocket/ICache.scala	/^  def addrMaybeInScratchpad(addr: UInt) = scratchpadBase.map(base => addr >= base && addr < base + outer.size).getOrElse(false.B)$/;"	m
addrWidth	src/main/scala/rocket/Decode.scala	/^    val addrWidth = keys.map(_.getWidth).max$/;"	l
addr_a	src/main/scala/diplomacy/AddressDecoder.scala	/^    val addr_a = AddressSet(0, ~bit)$/;"	l
addr_b	src/main/scala/diplomacy/AddressDecoder.scala	/^    val addr_b = AddressSet(bit, ~bit)$/;"	l
addr_block	src/main/scala/tile/LazyRoCC.scala	/^  val addr_block = addr(coreMaxAddrBits - 1, blockOffset)$/;"	l
addr_hi	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val addr_hi = initial.map { i =>$/;"	l
addr_hi	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val addr_hi = UInt(width = params.addressBits-params.pageBits)$/;"	l
addr_hi	src/main/scala/tilelink/Edges.scala	/^  def addr_hi(x: TLAddrChannel): UInt = addr_hi(address(x))$/;"	m
addr_hi	src/main/scala/tilelink/Edges.scala	/^  def addr_hi(x: UInt): UInt = x >> log2Ceil(manager.beatBytes)$/;"	m
addr_inc	src/main/scala/tilelink/Edges.scala	/^  def addr_inc(bits: TLChannel, fire: Bool): (Bool, Bool, Bool, UInt) = {$/;"	m
addr_inc	src/main/scala/tilelink/Edges.scala	/^  def addr_inc(x: DecoupledIO[TLChannel]): (Bool, Bool, Bool, UInt) = addr_inc(x.bits, x.fire())$/;"	m
addr_inc	src/main/scala/tilelink/Edges.scala	/^  def addr_inc(x: ValidIO[TLChannel]): (Bool, Bool, Bool, UInt) = addr_inc(x.bits, x.valid)$/;"	m
addr_lo	src/main/scala/tilelink/Edges.scala	/^  def addr_lo(x: TLAddrChannel): UInt = addr_lo(address(x))$/;"	m
addr_lo	src/main/scala/tilelink/Edges.scala	/^  def addr_lo(x: UInt): UInt =$/;"	m
addr_m	src/main/scala/rocket/CSR.scala	/^      val addr_m = addr | (PRV.M << CSR.modeLSB)$/;"	l
addr_match	src/main/scala/rocket/DCache.scala	/^      val addr_match = (c._2.addr ^ s1_paddr)(pgIdxBits+pgLevelBits-1, wordBytes.log2) === 0$/;"	l
address	src/main/scala/amba/ahb/SRAM.scala	/^    val address = outer.address$/;"	l
address	src/main/scala/amba/apb/SRAM.scala	/^    val address = outer.address$/;"	l
address	src/main/scala/amba/axi4/SRAM.scala	/^    val address = outer.address$/;"	l
address	src/main/scala/devices/debug/Debug.scala	/^  def address = AddressSet(baseAddress, 0xFFF)$/;"	m
address	src/main/scala/devices/debug/dm_registers.scala	/^  val address = UInt(32.W)$/;"	l
address	src/main/scala/devices/tilelink/CLINT.scala	/^  def address = AddressSet(baseAddress, CLINTConsts.size-1)$/;"	m
address	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  def address = Cat(addr_hi, UInt(0, width=params.pageBits))$/;"	m
address	src/main/scala/devices/tilelink/Plic.scala	/^  def address = AddressSet(baseAddress, PLICConsts.size(maxHarts)-1)$/;"	m
address	src/main/scala/diplomacy/SRAM.scala	/^    val address: AddressSet,$/;"	l
address	src/main/scala/diplomacy/SRAM.scala	/^  def address: AddressSet$/;"	m
address	src/main/scala/regmapper/RegisterRouter.scala	/^  val address = Seq(AddressSet(devParams.base, devParams.size-1))$/;"	l
address	src/main/scala/rocket/Breakpoint.scala	/^  val address = UInt(vaddrBits.W)$/;"	l
address	src/main/scala/tilelink/Broadcast.scala	/^  val address = RegInit((id << lineShift).U(io.in_a.bits.address.getWidth.W))$/;"	l
address	src/main/scala/tilelink/Broadcast.scala	/^  val address = UInt(params.addressBits.W)$/;"	l
address	src/main/scala/tilelink/Bundles.scala	/^  val address = UInt(width = params.addressBits) \/\/ from$/;"	l
address	src/main/scala/tilelink/Bundles.scala	/^  val address = UInt(width = params.addressBits) \/\/ to$/;"	l
address	src/main/scala/tilelink/Edges.scala	/^  def address(x: TLAddrChannel): UInt = {$/;"	m
address	src/main/scala/tilelink/Monitor.scala	/^    val address = Reg(UInt())$/;"	l
address	src/main/scala/tilelink/Parameters.scala	/^  val address:            Seq[AddressSet],$/;"	l
address	src/main/scala/tilelink/PatternPusher.scala	/^  def address: BigInt$/;"	m
address	src/main/scala/tilelink/RegisterRouter.scala	/^  val address = router.address$/;"	l
address	src/main/scala/tilelink/SRAM.scala	/^    val address = outer.address$/;"	l
address	src/main/scala/util/ROMGenerator.scala	/^    val address = UInt(INPUT, log2Ceil(c.depth))$/;"	l
addressA	src/main/scala/tilelink/Xbar.scala	/^    val addressA = (in zip edgesIn) map { case (i, e) => e.address(i.a.bits) }$/;"	l
addressBag	src/main/scala/groundtest/TraceGen.scala	/^  val addressBag          = params.addrBag$/;"	l
addressBagLen	src/main/scala/groundtest/TraceGen.scala	/^  val addressBagLen       = addressBag.length$/;"	l
addressBits	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val addressBits = log2Ceil(node.edges.out.map(_.manager.maxAddress).max+1+1)$/;"	l
addressBits	src/main/scala/tilelink/Broadcast.scala	/^  val addressBits = log2Ceil(maxAddress)$/;"	l
addressBits	src/main/scala/tilelink/Fuzzer.scala	/^    val addressBits  = log2Up(overrideAddress.map(_.max).getOrElse(edge.manager.maxAddress))$/;"	l
addressBits	src/main/scala/tilelink/RAMModel.scala	/^      val addressBits  = log2Up(endAddress)$/;"	l
addressBlocks	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^    val addressBlocks = for {$/;"	l
addressC	src/main/scala/tilelink/Xbar.scala	/^    val addressC = (in zip edgesIn) map { case (i, e) => e.address(i.c.bits) }$/;"	l
addressMapping	src/main/scala/util/Annotations.scala	/^  def addressMapping(component: InstanceId, mapping: Seq[AddressMapEntry]): Seq[AddressMapEntry] = {$/;"	m
addressMask	src/main/scala/tilelink/Broadcast.scala	/^      val addressMask = AddressDecoder(flatAddresses.map(Seq(_)), flatAddresses.map(_.mask).reduce(_|_))$/;"	l
addressMaskBitList	src/main/scala/tilelink/Broadcast.scala	/^  val addressMaskBitList: List[Boolean] = bigBits(addressMask)$/;"	l
addressMaskBits	src/main/scala/tilelink/Broadcast.scala	/^  val addressMaskBits: Int = addressMaskBitList.filter(x => x).size$/;"	l
addressMatch	src/main/scala/rocket/Breakpoint.scala	/^  def addressMatch(x: UInt) =$/;"	m
addressOrder	src/main/scala/diplomacy/AddressDecoder.scala	/^  val addressOrder = Ordering.ordered[AddressSet]$/;"	l
addressSets	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val addressSets = dmOuter().dmOuter.dmiNode.address$/;"	l
addressToProbe	src/main/scala/rocket/DCache.scala	/^  def addressToProbe(vaddr: UInt, paddr: UInt): TLBundleB = {$/;"	m
addressTranslationModes	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^    val addressTranslationModes = xLen match {$/;"	l
address_ok	src/main/scala/tilelink/Monitor.scala	/^    val address_ok = edge.manager.containsSafe(edge.address(bundle))$/;"	l
addresses	scripts/check_comparator_trace.py	/^addresses = {}$/;"	v
addresses	src/main/scala/diplomacy/Resources.scala	/^    val addresses: List[(String, ResourceAddress)] = map.value.toList.flatMap { case (_, seq) => seq.collect {$/;"	l
addresses	src/main/scala/tilelink/BankBinder.scala	/^      val addresses = m.address.flatMap(a => a.intersect(AddressSet(id, ~mask)))$/;"	l
adjust	src/main/scala/amba/ahb/ToTL.scala	/^      def adjust(x: TransferSizes) = {$/;"	m
adjustableLocalManagers	src/main/scala/tilelink/AddressAdjuster.scala	/^      val adjustableLocalManagers  = local.managers.filter(m =>  isDeviceContainedBy(Seq(params.region), m))$/;"	l
adjustableLocalManagers	src/main/scala/tilelink/AddressAdjuster.scala	/^      val adjustableLocalManagers  = localEdge.manager.managers.filter(m =>  isDeviceContainedBy(Seq(params.region), m))$/;"	l
adjustableRemoteManagers	src/main/scala/tilelink/AddressAdjuster.scala	/^      val adjustableRemoteManagers = remote.managers.flatMap { m =>$/;"	l
adjustableRemoteManagers	src/main/scala/tilelink/AddressAdjuster.scala	/^      val adjustableRemoteManagers = remoteEdge.manager.managers.flatMap { m =>$/;"	l
advanceHistory	src/main/scala/rocket/BTB.scala	/^  def advanceHistory(taken: Bool): Unit = {$/;"	m
advance_pstore1	src/main/scala/rocket/DCache.scala	/^  val advance_pstore1 = (pstore1_valid || s2_valid_correct) && (pstore2_valid === pstore_drain)$/;"	l
ae	src/main/scala/regmapper/Test.scala	/^  def ae(bits: Int) = combo(bits, always, delay(5))$/;"	m
ae	src/main/scala/rocket/Frontend.scala	/^  val ae = new Bundle {$/;"	l
ae	src/main/scala/rocket/HellaCache.scala	/^  val ae = new AlignmentExceptions$/;"	l
ae	src/main/scala/rocket/ICache.scala	/^  val ae = Bool()$/;"	l
ae	src/main/scala/rocket/PTW.scala	/^      val ae = pte.v && invalid_paddr$/;"	l
ae	src/main/scala/rocket/TLB.scala	/^  val ae = new TLBExceptions$/;"	l
ae_array	src/main/scala/rocket/TLB.scala	/^  val ae_array =$/;"	l
ae_final	src/main/scala/rocket/PTW.scala	/^  val ae_final = Bool()$/;"	l
ae_final	src/main/scala/rocket/TLB.scala	/^  val ae_final = Bool()$/;"	l
ae_ld_array	src/main/scala/rocket/TLB.scala	/^  val ae_ld_array = Mux(cmd_read, ae_array | ~pr_array, 0.U)$/;"	l
ae_ptw	src/main/scala/rocket/PTW.scala	/^  val ae_ptw = Bool()$/;"	l
ae_ptw	src/main/scala/rocket/TLB.scala	/^  val ae_ptw = Bool()$/;"	l
ae_st_array	src/main/scala/rocket/TLB.scala	/^  val ae_st_array =$/;"	l
afn	src/main/scala/rocket/TLBPermissions.scala	/^    val afn = lowCostProperty(_.a)$/;"	l
after_idx	src/main/scala/rocket/Frontend.scala	/^    val after_idx = Wire(UInt())$/;"	l
agree	src/main/scala/tilelink/Parameters.scala	/^      val agree = seq.forall(_.fifoId == seq.head.fifoId)$/;"	l
ahb2tl	src/main/scala/amba/ahb/ToTL.scala	/^    val ahb2tl = LazyModule(new AHBToTL)$/;"	l
ahblite	src/main/scala/amba/ahb/AHBLite.scala	/^    val ahblite = LazyModule(new AHBLite)$/;"	l
aliases	src/main/scala/diplomacy/Resources.scala	/^  val aliases = new Device {$/;"	l
align	src/main/scala/rocket/Multiplier.scala	/^      val align = 1 << log2Floor(cfg.divUnroll max cfg.divEarlyOutGranularity)$/;"	l
align1	src/main/scala/amba/axi4/Fragmenter.scala	/^        val align1   = ~leftOR(alignment)  \/\/ transfer size limited by address alignment$/;"	l
alignMask	src/main/scala/rocket/Multiplier.scala	/^      val alignMask = ~((align-1).U(log2Ceil(w).W))$/;"	l
alignPC	src/main/scala/rocket/Frontend.scala	/^  def alignPC(pc: UInt) = ~(~pc | (coreInstBytes - 1))$/;"	m
aligned	src/main/scala/amba/axis/Parameters.scala	/^  val aligned:     Boolean)$/;"	l
aligned	src/main/scala/rocket/PMP.scala	/^    val aligned = pmp.aligned(io.addr, io.size, lgMaxSize, prevPMP)$/;"	l
aligned	src/main/scala/rocket/PMP.scala	/^  def aligned(x: UInt, lgSize: UInt, lgMaxSize: Int, prev: PMP): Bool = if (lgMaxSize <= pmpGranularity.log2) true.B else {$/;"	m
aligned_addr	src/main/scala/amba/apb/ToTL.scala	/^      val aligned_addr =  ~(~in.paddr | (beatBytes-1).U)$/;"	l
alignment	src/main/scala/amba/axi4/Filter.scala	/^    val alignment = select.alignment \/* alignment 0 means 'select' selected everything *\/$/;"	l
alignment	src/main/scala/amba/axi4/Fragmenter.scala	/^        val alignment = addr((a.bits.params.addrBits min cutoff)-1, lgBytes)$/;"	l
alignment	src/main/scala/diplomacy/Parameters.scala	/^  def alignment = ((mask + 1) & ~mask)$/;"	m
alignment	src/main/scala/tilelink/Filter.scala	/^    val alignment = select.alignment \/* alignment 0 means 'select' selected everything *\/$/;"	l
alignment	src/main/scala/tilelink/Filter.scala	/^    val alignment: BigInt = if (filtered.isEmpty) 0 else filtered.map(_.alignment).min$/;"	l
all	src/main/scala/jtag/JtagStateMachine.scala	/^    val all: Set[State] = Set($/;"	l
all	src/main/scala/rocket/Decode.scala	/^      val all = cover.tail.foldLeft(cover.head.map(Set(_)))((c0, c1) => c0.flatMap(a => c1.map(a + _)))$/;"	l
all	src/main/scala/rocket/Instructions.scala	/^  val all = {$/;"	l
all	src/main/scala/tile/FPU.scala	/^  val all = List(H, S, D)$/;"	l
all	src/main/scala/tile/LazyRoCC.scala	/^  def all = custom0 | custom1 | custom2 | custom3$/;"	m
all	src/main/scala/tilelink/FIFOFixer.scala	/^  val all:            Policy = m => true$/;"	l
all32	src/main/scala/rocket/Instructions.scala	/^  val all32 = {$/;"	l
allAddrIndices	src/main/scala/groundtest/TraceGen.scala	/^  val allAddrIndices = (0 until totalNumAddrs)$/;"	l
allAddrs	src/main/scala/groundtest/TraceGen.scala	/^  val allAddrs = extraAddrs ++ bagOfAddrs$/;"	l
allDangles	src/main/scala/diplomacy/LazyModule.scala	/^    val allDangles = nodeDangles ++ childDangles$/;"	l
allEmitClaims	src/main/scala/tilelink/Parameters.scala	/^  val allEmitClaims = masters.map(_.emits).reduce( _ intersect _)$/;"	l
allEmitClaims	src/main/scala/tilelink/Parameters.scala	/^  val allEmitClaims = slaves.map(_.emits).reduce( _ intersect _)$/;"	l
allFIFO	src/main/scala/tilelink/FIFOFixer.scala	/^  val allFIFO:        Policy = m => m.fifoId.isDefined$/;"	l
allIDs_FIFOed	src/main/scala/tilelink/FIFOFixer.scala	/^      val allIDs_FIFOed = SourceIdFIFOed===Fill(SourceIdFIFOed.getWidth, 1.U)$/;"	l
allInstructions	src/main/scala/jtag/JtagTap.scala	/^    val allInstructions = icode match {$/;"	l
allOwners	macros/src/main/scala/ValName.scala	/^    def allOwners(s: c.Symbol): Seq[c.Symbol] =$/;"	m
allSame	src/main/scala/tilelink/Parameters.scala	/^    val allSame = masters.map(member(_) == member(masters(0))).reduce(_ && _)$/;"	l
allSink	src/main/scala/diplomacy/Nodes.scala	/^    val allSink   = flexSet.map(_.sinkCard).sum$/;"	l
allSizes	src/main/scala/rocket/TLBPermissions.scala	/^    val allSizes = TransferSizes(1, cacheBlockBytes)$/;"	l
allSource	src/main/scala/diplomacy/Nodes.scala	/^    val allSource = flexSet.map(_.sourceCard).sum$/;"	l
allSupportAcquireB	src/main/scala/tilelink/Parameters.scala	/^  val allSupportAcquireB   = allSupportClaims.acquireB$/;"	l
allSupportAcquireT	src/main/scala/tilelink/Parameters.scala	/^  val allSupportAcquireT   = allSupportClaims.acquireT$/;"	l
allSupportArithmetic	src/main/scala/tilelink/Parameters.scala	/^  val allSupportArithmetic = allSupportClaims.arithmetic$/;"	l
allSupportArithmetic	src/main/scala/tilelink/Parameters.scala	/^  val allSupportArithmetic = masters.map(_.supports.arithmetic).reduce(_ intersect _)$/;"	l
allSupportClaims	src/main/scala/tilelink/Parameters.scala	/^  val allSupportClaims = slaves.map(_.supports).reduce( _ intersect _)$/;"	l
allSupportGet	src/main/scala/tilelink/Parameters.scala	/^  val allSupportGet        = allSupportClaims.get$/;"	l
allSupportGet	src/main/scala/tilelink/Parameters.scala	/^  val allSupportGet        = masters.map(_.supports.get)       .reduce(_ intersect _)$/;"	l
allSupportHint	src/main/scala/tilelink/Parameters.scala	/^  val allSupportHint       = allSupportClaims.hint$/;"	l
allSupportHint	src/main/scala/tilelink/Parameters.scala	/^  val allSupportHint       = masters.map(_.supports.hint)      .reduce(_ intersect _)$/;"	l
allSupportLogical	src/main/scala/tilelink/Parameters.scala	/^  val allSupportLogical    = allSupportClaims.logical$/;"	l
allSupportLogical	src/main/scala/tilelink/Parameters.scala	/^  val allSupportLogical    = masters.map(_.supports.logical)   .reduce(_ intersect _)$/;"	l
allSupportProbe	src/main/scala/tilelink/Parameters.scala	/^  val allSupportProbe      = masters.map(_.supports.probe)     .reduce(_ intersect _)$/;"	l
allSupportPutFull	src/main/scala/tilelink/Parameters.scala	/^  val allSupportPutFull    = allSupportClaims.putFull$/;"	l
allSupportPutFull	src/main/scala/tilelink/Parameters.scala	/^  val allSupportPutFull    = masters.map(_.supports.putFull)   .reduce(_ intersect _)$/;"	l
allSupportPutPartial	src/main/scala/tilelink/Parameters.scala	/^  val allSupportPutPartial = allSupportClaims.putPartial$/;"	l
allSupportPutPartial	src/main/scala/tilelink/Parameters.scala	/^  val allSupportPutPartial = masters.map(_.supports.putPartial).reduce(_ intersect _)$/;"	l
allVolatile	src/main/scala/tilelink/FIFOFixer.scala	/^  val allVolatile:    Policy = m => m.regionType <= VOLATILE$/;"	l
all_addrs	src/main/scala/devices/debug/Custom.scala	/^        val all_addrs = seq.map{_.addrs}.flatten$/;"	l
all_entries	src/main/scala/rocket/TLB.scala	/^  def all_entries = ordinary_entries ++ special_entry$/;"	m
all_real_entries	src/main/scala/rocket/TLB.scala	/^  def all_real_entries = sectored_entries.flatten ++ superpage_entries ++ special_entry$/;"	m
allhalted	src/main/scala/devices/debug/dm_registers.scala	/^  val allhalted = Bool()$/;"	l
allhavereset	src/main/scala/devices/debug/dm_registers.scala	/^  val allhavereset = Bool()$/;"	l
allnonexistent	src/main/scala/devices/debug/dm_registers.scala	/^  val allnonexistent = Bool()$/;"	l
alloc	src/main/scala/tilelink/Fuzzer.scala	/^    val alloc = Decoupled(UInt(width = w))$/;"	l
alloc	src/main/scala/tilelink/SourceShrinker.scala	/^        val alloc = a_first && in.a.fire()$/;"	l
alloc	src/main/scala/util/IDPool.scala	/^    val alloc = if (revocableSelect) Decoupled(UInt(idWidth.W)) else Irrevocable(UInt(idWidth.W))$/;"	l
allocOH	src/main/scala/tilelink/Broadcast.scala	/^  val allocOH = UInt(params.caches.W)$/;"	l
allocTracker	src/main/scala/tilelink/Broadcast.scala	/^      val allocTracker = freeTrackers & ~(leftOR(freeTrackers) << 1)$/;"	l
alloc_arb	src/main/scala/rocket/NBDcache.scala	/^  val alloc_arb = Module(new Arbiter(Bool(), cfg.nMSHRs))$/;"	l
alloc_id	src/main/scala/tilelink/SourceShrinker.scala	/^        val alloc_id = Mux(alloc, nextFreeOH, UInt(0))$/;"	l
allocated	src/main/scala/tilelink/SourceShrinker.scala	/^        val allocated = RegInit(UInt(0, width = maxInFlight))$/;"	l
allow	src/main/scala/amba/axi4/Delayer.scala	/^      val allow = hold || UInt((q * 65535.0).toInt) <= LFSRNoiseMaker(16, source.valid)$/;"	l
allow	src/main/scala/devices/tilelink/BusBlocker.scala	/^    val allow = RegInit(true.B)$/;"	l
allow	src/main/scala/devices/tilelink/ClockBlocker.scala	/^    val allow = RegInit(true.B)$/;"	l
allow	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val allow = allowFirst holdUnless a_first \/\/ don't change our mind mid-transaction$/;"	l
allow	src/main/scala/tilelink/Delayer.scala	/^      val allow = UInt((q * 65535.0).toInt) <= LFSRNoiseMaker(16, source.valid)$/;"	l
allowAR	src/main/scala/amba/axi4/Xbar.scala	/^        val allowAR = arFIFOMap(io_in(i).ar.bits.id)$/;"	l
allowAW	src/main/scala/amba/axi4/Xbar.scala	/^        val allowAW = awFIFOMap(io_in(i).aw.bits.id)$/;"	l
allowFirst	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val allowFirst = PriorityMux(sel :+ Bool(true), ok :+ Bool(false)) \/\/ deny if no match$/;"	l
allow_counter	src/main/scala/rocket/CSR.scala	/^    val allow_counter = (reg_mstatus.prv > PRV.S || read_mcounteren(counter_addr)) &&$/;"	l
allow_hfence_vvma	src/main/scala/rocket/CSR.scala	/^    val allow_hfence_vvma = Bool(!usingHypervisor) || !reg_mstatus.v && (reg_mstatus.prv >= PRV.S)$/;"	l
allow_hlsv	src/main/scala/rocket/CSR.scala	/^    val allow_hlsv = Bool(!usingHypervisor) || !reg_mstatus.v && (reg_mstatus.prv >= PRV.S || reg_hstatus.hu)$/;"	l
allow_sfence_vma	src/main/scala/rocket/CSR.scala	/^    val allow_sfence_vma = Bool(!usingVM) || reg_mstatus.prv > PRV.S || !Mux(reg_mstatus.v, reg_hstatus.vtvm, reg_mstatus.tvm)$/;"	l
allow_sret	src/main/scala/rocket/CSR.scala	/^    val allow_sret = Bool(!usingSupervisor) || reg_mstatus.prv > PRV.S || !Mux(reg_mstatus.v, reg_hstatus.vtsr, reg_mstatus.tsr)$/;"	l
allow_wfi	src/main/scala/rocket/CSR.scala	/^    val allow_wfi = Bool(!usingSupervisor) || reg_mstatus.prv > PRV.S || !reg_mstatus.tw && (!reg_mstatus.v || !reg_hstatus.vtw)$/;"	l
allowed	src/main/scala/amba/axi4/Xbar.scala	/^      val allowed = Mux(idle, readys, state)$/;"	l
allowed	src/main/scala/amba/axis/Xbar.scala	/^      val allowed = Mux(idle, readys, state)$/;"	l
allowed	src/main/scala/tilelink/Arbiter.scala	/^      val allowed = Mux(idle, readys, state)$/;"	l
allresumeack	src/main/scala/devices/debug/dm_registers.scala	/^  val allresumeack = Bool()$/;"	l
allrunning	src/main/scala/devices/debug/dm_registers.scala	/^  val allrunning = Bool()$/;"	l
allunavail	src/main/scala/devices/debug/dm_registers.scala	/^  val allunavail = Bool()$/;"	l
alt	src/main/scala/rocket/CSR.scala	/^      val alt = CSR.mode(k) match {$/;"	l
alu	src/main/scala/rocket/RocketCore.scala	/^  val alu = Module(new ALU)$/;"	l
alu	src/main/scala/tilelink/RAMModel.scala	/^      val alu = Module(new Atomics(a.params))$/;"	l
alu	src/main/scala/tilelink/SRAM.scala	/^      val alu = Module(new Atomics(edge.bundle))$/;"	l
alu_dw	src/main/scala/rocket/IDecode.scala	/^  val alu_dw = Bool()$/;"	l
alu_fn	src/main/scala/rocket/IDecode.scala	/^  val alu_fn = Bits(width = FN_X.getWidth)$/;"	l
always	src/main/scala/regmapper/Test.scala	/^  def always: Bool => Bool = _ => Bool(true)$/;"	m
always	src/main/scala/rocket/CSR.scala	/^    val always = Wire(new MIP().fromBits(0.U))$/;"	l
always1	src/main/scala/jtag/JtagUtils.scala	/^  val always1 = UInt(1.W)$/;"	l
alwaysExtended	src/main/scala/diplomacy/Resources.scala	/^  val alwaysExtended = false$/;"	l
alwaysGrantsT	src/main/scala/tilelink/Parameters.scala	/^  val alwaysGrantsT:      Boolean, \/\/ typically only true for CacheCork'd read-write devices; dual: neverReleaseData$/;"	l
amask	src/main/scala/tilelink/ErrorEvaluator.scala	/^    val amask = UIntToOH1(a.size, a.params.addressBits)$/;"	l
amo	src/main/scala/rocket/IDecode.scala	/^  val amo = Bool()$/;"	l
amo	src/main/scala/tilelink/RAMModel.scala	/^        val amo = a.opcode === TLMessages.ArithmeticData || a.opcode === TLMessages.LogicalData$/;"	l
amoSizes	src/main/scala/rocket/TLBPermissions.scala	/^    val amoSizes = TransferSizes(4, xLen\/8)$/;"	l
amo_data	src/main/scala/tilelink/AtomicAutomata.scala	/^        val amo_data =$/;"	l
amo_size	src/main/scala/tilelink/Fuzzer.scala	/^    val amo_size  = UInt(2) + noiseMaker(1, inc, 0) \/\/ word or dword$/;"	l
amoalu	src/main/scala/rocket/DCache.scala	/^      val amoalu = Module(new AMOALU(xLen))$/;"	l
amoalu	src/main/scala/rocket/NBDcache.scala	/^  val amoalu = Module(new AMOALU(xLen))$/;"	l
amoalus	src/main/scala/rocket/DCache.scala	/^    val amoalus = (0 until coreDataBits \/ xLen).map { i =>$/;"	l
amt	src/main/scala/util/package.scala	/^        val amt = n.padTo(log2Ceil(x.getWidth))$/;"	l
amt	src/main/scala/util/package.scala	/^        val amt = n.padTo(log2Ceil(x.size))$/;"	l
ancestors	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^      val ancestors = for {parent <- parents; ancestor <- getSuperClasses(parent)}$/;"	l
andNot	src/main/scala/util/package.scala	/^    def andNot(y: UInt): UInt = x & ~(y | (x & 0.U))$/;"	m
andNotCancel	src/main/scala/util/ReadyValidCancel.scala	/^  def andNotCancel(): Valid[T] = {$/;"	m
andR	src/main/scala/util/package.scala	/^    def andR: Bool = if (x.isEmpty) true.B else x.reduce(_&&_)$/;"	m
andi	src/main/scala/rocket/RVC.scala	/^      def andi = Cat(addiImm, rs1p, 7.U(3.W), rs1p, 0x13.U(7.W))$/;"	m
anno	src/main/scala/util/Annotations.scala	/^  def anno($/;"	m
annos	src/main/scala/stage/phases/GenerateFirrtlAnnos.scala	/^    val annos = annotations.view.flatMap {$/;"	l
annos	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^    val annos = Seq($/;"	l
annotate	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  def annotate(filename: String, tokens: => Seq[Token]): Unit = {$/;"	m
anoise	src/main/scala/amba/axi4/Delayer.scala	/^    def anoise[T <: AXI4BundleA](bits: T): Unit = {$/;"	m
anoise	src/main/scala/tilelink/Delayer.scala	/^      val anoise = Wire(in.a.bits)$/;"	l
anonName	src/main/scala/util/Annotations.scala	/^        val anonName = s"unnamedRegField${byte.toHexString}_${bit}"$/;"	l
anonRegFieldName	src/main/scala/util/Annotations.scala	/^    val anonRegFieldName = s"unnamedRegField${byteOffset.toHexString}_${bitOffset}"$/;"	l
any	src/main/scala/rocket/CSR.scala	/^    val any = masks.flatMap(m => priority.filter(_ < m.getWidth).map(i => m(i))).reduce(_||_)$/;"	l
anyAddressWrEn	src/main/scala/devices/debug/SBA.scala	/^    val anyAddressWrEn = WireInit(false.B).suggestName("anyAddressWrEn")$/;"	l
anyDataRdEn	src/main/scala/devices/debug/SBA.scala	/^    val anyDataRdEn    = WireInit(false.B).suggestName("anyDataRdEn")$/;"	l
anyDataWrEn	src/main/scala/devices/debug/SBA.scala	/^    val anyDataWrEn    = WireInit(false.B).suggestName("anyDataWrEn")$/;"	l
anyEmitClaims	src/main/scala/tilelink/Parameters.scala	/^  val anyEmitClaims = masters.map(_.emits).reduce(_ mincover _)$/;"	l
anyEmitClaims	src/main/scala/tilelink/Parameters.scala	/^  val anyEmitClaims = slaves.map(_.emits).reduce(_ mincover _)$/;"	l
anyLocationMap	src/main/scala/subsystem/Attachable.scala	/^  val anyLocationMap = LocationMap.empty[Any]$/;"	l
anySupportAcquireB	src/main/scala/tilelink/Parameters.scala	/^  val anySupportAcquireB   = !anySupportClaims.acquireB.none$/;"	l
anySupportAcquireT	src/main/scala/tilelink/Parameters.scala	/^  val anySupportAcquireT   = !anySupportClaims.acquireT.none$/;"	l
anySupportArithmetic	src/main/scala/tilelink/Parameters.scala	/^  val anySupportArithmetic = !anySupportClaims.arithmetic.none$/;"	l
anySupportArithmetic	src/main/scala/tilelink/Parameters.scala	/^  val anySupportArithmetic = masters.map(!_.supports.arithmetic.none).reduce(_ || _)$/;"	l
anySupportClaims	src/main/scala/tilelink/Parameters.scala	/^  val anySupportClaims = slaves.map(_.supports).reduce(_ mincover _)$/;"	l
anySupportGet	src/main/scala/tilelink/Parameters.scala	/^  val anySupportGet        = !anySupportClaims.get.none$/;"	l
anySupportGet	src/main/scala/tilelink/Parameters.scala	/^  val anySupportGet        = masters.map(!_.supports.get.none)       .reduce(_ || _)$/;"	l
anySupportHint	src/main/scala/tilelink/Parameters.scala	/^  val anySupportHint       = !anySupportClaims.hint.none$/;"	l
anySupportHint	src/main/scala/tilelink/Parameters.scala	/^  val anySupportHint       = masters.map(!_.supports.hint.none)      .reduce(_ || _)$/;"	l
anySupportLogical	src/main/scala/tilelink/Parameters.scala	/^  val anySupportLogical    = !anySupportClaims.logical.none$/;"	l
anySupportLogical	src/main/scala/tilelink/Parameters.scala	/^  val anySupportLogical    = masters.map(!_.supports.logical.none)   .reduce(_ || _)$/;"	l
anySupportProbe	src/main/scala/tilelink/Parameters.scala	/^  val anySupportProbe      = masters.map(!_.supports.probe.none)     .reduce(_ || _)$/;"	l
anySupportPutFull	src/main/scala/tilelink/Parameters.scala	/^  val anySupportPutFull    = !anySupportClaims.putFull.none$/;"	l
anySupportPutFull	src/main/scala/tilelink/Parameters.scala	/^  val anySupportPutFull    = masters.map(!_.supports.putFull.none)   .reduce(_ || _)$/;"	l
anySupportPutPartial	src/main/scala/tilelink/Parameters.scala	/^  val anySupportPutPartial = !anySupportClaims.putPartial.none$/;"	l
anySupportPutPartial	src/main/scala/tilelink/Parameters.scala	/^  val anySupportPutPartial = masters.map(!_.supports.putPartial.none).reduce(_ || _)$/;"	l
anyValid	src/main/scala/amba/axi4/Xbar.scala	/^    val anyValid = valids.reduce(_ || _)$/;"	l
any_in	src/main/scala/tilelink/AddressAdjuster.scala	/^    val any_in  = region.exists { f => addr.exists { a => f.overlaps(a) } }$/;"	l
any_no_alloc_in_flight	src/main/scala/rocket/DCache.scala	/^    val any_no_alloc_in_flight = Reg(Bool())$/;"	l
any_out	src/main/scala/tilelink/AddressAdjuster.scala	/^    val any_out = region.exists { f => addr.exists { a => !f.contains(a) } }$/;"	l
any_pstore_valid	src/main/scala/rocket/DCache.scala	/^  val any_pstore_valid = Wire(Bool())$/;"	l
anyhalted	src/main/scala/devices/debug/dm_registers.scala	/^  val anyhalted = Bool()$/;"	l
anyhavereset	src/main/scala/devices/debug/dm_registers.scala	/^  val anyhavereset = Bool()$/;"	l
anynonexistent	src/main/scala/devices/debug/dm_registers.scala	/^  val anynonexistent = Bool()$/;"	l
anyresumeack	src/main/scala/devices/debug/dm_registers.scala	/^  val anyresumeack = Bool()$/;"	l
anyrunning	src/main/scala/devices/debug/dm_registers.scala	/^  val anyrunning = Bool()$/;"	l
anyunavail	src/main/scala/devices/debug/dm_registers.scala	/^  val anyunavail = Bool()$/;"	l
apb	src/main/scala/devices/debug/Periphery.scala	/^  def apb   = protocols.contains(APB)$/;"	m
apb	src/main/scala/devices/debug/Periphery.scala	/^  val apb = p(ExportDebug).apb.option(Flipped(new ClockedAPBBundle(APBBundleParameters(addrBits=12, dataBits=32))))$/;"	l
apb2tl	src/main/scala/amba/apb/ToTL.scala	/^    val apb2tl = LazyModule(new APBToTL)$/;"	l
apb2tl	src/main/scala/devices/debug/Debug.scala	/^    val apb2tl = LazyModule(new APBToTL())$/;"	l
apb2tlBuffer	src/main/scala/devices/debug/Debug.scala	/^    val apb2tlBuffer = LazyModule(new TLBuffer(BufferParams.pipe))$/;"	l
apbDebugNodeOpt	src/main/scala/devices/debug/Periphery.scala	/^  val apbDebugNodeOpt = p(ExportDebug).apb.option(APBMasterNode(Seq(APBMasterPortParameters(Seq(APBMasterParameters("debugAPB"))))))$/;"	l
apbDebugRegBase	src/main/scala/devices/debug/APB.scala	/^  def apbDebugRegBase = 0xF00$/;"	m
apbDebugRegSize	src/main/scala/devices/debug/APB.scala	/^  def apbDebugRegSize = 0x100$/;"	m
apbNodeOpt	src/main/scala/devices/debug/Debug.scala	/^  val apbNodeOpt = dmOuter.apbNodeOpt$/;"	l
apbNodeOpt	src/main/scala/devices/debug/Debug.scala	/^  val apbNodeOpt = p(ExportDebug).apb.option({$/;"	l
apbRegs	src/main/scala/devices/debug/Debug.scala	/^    val apbRegs  = LazyModule(new APBDebugRegisters())$/;"	l
apbXbar	src/main/scala/devices/debug/Debug.scala	/^    val apbXbar  = LazyModule(new APBFanout())$/;"	l
apb_clock	src/main/scala/devices/debug/Debug.scala	/^      val apb_clock = p(ExportDebug).apb.option(Input(Clock()))$/;"	l
apb_reset	src/main/scala/devices/debug/Debug.scala	/^      val apb_reset = p(ExportDebug).apb.option(Input(Reset()))$/;"	l
append	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^      def append(any: Any): Unit = {$/;"	m
append	src/main/scala/util/PlusArg.scala	/^  def append(name: String, default: BigInt, docstring: String): Unit = append(name, Some(default), docstring)$/;"	m
append	src/main/scala/util/PlusArg.scala	/^  def append[A : Doctypeable](name: String, default: Option[A], docstring: String): Unit =$/;"	m
apply	src/main/scala/amba/ahb/AHBLite.scala	/^  def apply()(implicit p: Parameters) = {$/;"	m
apply	src/main/scala/amba/ahb/Bundles.scala	/^  def apply(params: AHBBundleParameters) = new AHBMasterBundle(params)$/;"	m
apply	src/main/scala/amba/ahb/Bundles.scala	/^  def apply(params: AHBBundleParameters) = new AHBSlaveBundle(params)$/;"	m
apply	src/main/scala/amba/ahb/Parameters.scala	/^  def apply(master: AHBMasterPortParameters, slave: AHBSlavePortParameters) =$/;"	m
apply	src/main/scala/amba/ahb/ToTL.scala	/^  def apply()(implicit p: Parameters) =$/;"	m
apply	src/main/scala/amba/apb/Bundles.scala	/^  def apply(params: APBBundleParameters) = new APBBundle(params)$/;"	m
apply	src/main/scala/amba/apb/Parameters.scala	/^  def apply(master: APBMasterPortParameters, slave: APBSlavePortParameters) =$/;"	m
apply	src/main/scala/amba/apb/ToTL.scala	/^  def apply()(implicit p: Parameters) =$/;"	m
apply	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  def apply()(implicit p: Parameters): AXI4AsyncSourceNode = apply(None)$/;"	m
apply	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  def apply(params: AsyncQueueParams = AsyncQueueParams())(implicit p: Parameters) = {$/;"	m
apply	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  def apply(sync: Int)(implicit p: Parameters): AXI4AsyncSourceNode = apply(Some(sync))$/;"	m
apply	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  def apply(sync: Option[Int])(implicit p: Parameters): AXI4AsyncSourceNode = {$/;"	m
apply	src/main/scala/amba/axi4/Buffer.scala	/^  def apply($/;"	m
apply	src/main/scala/amba/axi4/Buffer.scala	/^  def apply()                                  (implicit p: Parameters): AXI4Node = apply(BufferParams.default)$/;"	m
apply	src/main/scala/amba/axi4/Buffer.scala	/^  def apply(aw: BufferParams, br: BufferParams)(implicit p: Parameters): AXI4Node = apply(aw, aw, br, aw, br)$/;"	m
apply	src/main/scala/amba/axi4/Buffer.scala	/^  def apply(z: BufferParams)                   (implicit p: Parameters): AXI4Node = apply(z, z)$/;"	m
apply	src/main/scala/amba/axi4/Bundles.scala	/^  def apply(params: AXI4BundleParameters) = new AXI4Bundle(params)$/;"	m
apply	src/main/scala/amba/axi4/Credited.scala	/^  def apply()(implicit p: Parameters): AXI4CreditedAdapterNode = apply(CreditedDelay(1, 1))$/;"	m
apply	src/main/scala/amba/axi4/Credited.scala	/^  def apply()(implicit p: Parameters): AXI4CreditedSinkNode = apply(CreditedDelay(1, 1))$/;"	m
apply	src/main/scala/amba/axi4/Credited.scala	/^  def apply()(implicit p: Parameters): AXI4CreditedSourceNode = apply(CreditedDelay(1, 1))$/;"	m
apply	src/main/scala/amba/axi4/Credited.scala	/^  def apply(delay: AXI4CreditedDelay)(implicit p: Parameters): AXI4CreditedAdapterNode = {$/;"	m
apply	src/main/scala/amba/axi4/Credited.scala	/^  def apply(delay: AXI4CreditedDelay)(implicit p: Parameters): AXI4CreditedSinkNode = {$/;"	m
apply	src/main/scala/amba/axi4/Credited.scala	/^  def apply(delay: AXI4CreditedDelay)(implicit p: Parameters): AXI4CreditedSourceNode = {$/;"	m
apply	src/main/scala/amba/axi4/Credited.scala	/^  def apply(delay: CreditedDelay)(implicit p: Parameters): AXI4CreditedAdapterNode = apply(AXI4CreditedDelay(delay))$/;"	m
apply	src/main/scala/amba/axi4/Credited.scala	/^  def apply(delay: CreditedDelay)(implicit p: Parameters): AXI4CreditedSinkNode = apply(AXI4CreditedDelay(delay))$/;"	m
apply	src/main/scala/amba/axi4/Credited.scala	/^  def apply(delay: CreditedDelay)(implicit p: Parameters): AXI4CreditedSourceNode = apply(AXI4CreditedDelay(delay))$/;"	m
apply	src/main/scala/amba/axi4/CrossingHelper.scala	/^  def apply(xing: ClockCrossingType = NoCrossing)(implicit p: Parameters): AXI4InwardNode = {$/;"	m
apply	src/main/scala/amba/axi4/CrossingHelper.scala	/^  def apply(xing: ClockCrossingType = NoCrossing)(implicit p: Parameters): AXI4OutwardNode = {$/;"	m
apply	src/main/scala/amba/axi4/CrossingHelper.scala	/^  def apply(xing: HelperCrossingType)(implicit p: Parameters): AXI4InwardNode$/;"	m
apply	src/main/scala/amba/axi4/CrossingHelper.scala	/^  def apply(xing: HelperCrossingType)(implicit p: Parameters): AXI4OutwardNode$/;"	m
apply	src/main/scala/amba/axi4/CrossingHelper.scala	/^  def apply(xing: ResetCrossingType)(implicit p: Parameters): AXI4InwardNode = {$/;"	m
apply	src/main/scala/amba/axi4/CrossingHelper.scala	/^  def apply(xing: ResetCrossingType)(implicit p: Parameters): AXI4OutwardNode = {$/;"	m
apply	src/main/scala/amba/axi4/Deinterleaver.scala	/^  def apply(maxReadBytes: Int, buffer: BufferParams = BufferParams.default)(implicit p: Parameters): AXI4Node =$/;"	m
apply	src/main/scala/amba/axi4/Delayer.scala	/^  def apply(q: Double)(implicit p: Parameters): AXI4Node =$/;"	m
apply	src/main/scala/amba/axi4/Filter.scala	/^  def apply($/;"	m
apply	src/main/scala/amba/axi4/Fragmenter.scala	/^  def apply()(implicit p: Parameters): AXI4Node =$/;"	m
apply	src/main/scala/amba/axi4/IdIndexer.scala	/^  def apply(idBits: Int)(implicit p: Parameters): AXI4Node =$/;"	m
apply	src/main/scala/amba/axi4/Nodes.scala	/^  def apply(name: Option[String]): AXI4AsyncIdentityNode = apply((ValName(name.getOrElse("with_no_name"))))$/;"	m
apply	src/main/scala/amba/axi4/Nodes.scala	/^  def apply(name: Option[String]): AXI4CreditedIdentityNode = apply((ValName(name.getOrElse("with_no_name"))))$/;"	m
apply	src/main/scala/amba/axi4/Nodes.scala	/^  def apply(name: Option[String]): AXI4IdentityNode = apply((ValName(name.getOrElse("with_no_name"))))$/;"	m
apply	src/main/scala/amba/axi4/Nodes.scala	/^  def apply(name: String): AXI4AsyncIdentityNode = apply(Some(name))$/;"	m
apply	src/main/scala/amba/axi4/Nodes.scala	/^  def apply(name: String): AXI4CreditedIdentityNode = apply(Some(name))$/;"	m
apply	src/main/scala/amba/axi4/Nodes.scala	/^  def apply(name: String): AXI4IdentityNode = apply(Some(name))$/;"	m
apply	src/main/scala/amba/axi4/Nodes.scala	/^  def apply(name: ValName) = AXI4AsyncIdentityNode()(name)$/;"	m
apply	src/main/scala/amba/axi4/Nodes.scala	/^  def apply(name: ValName) = AXI4CreditedIdentityNode()(name)$/;"	m
apply	src/main/scala/amba/axi4/Nodes.scala	/^  def apply(name: ValName) = AXI4IdentityNode()(name)$/;"	m
apply	src/main/scala/amba/axi4/Parameters.scala	/^  def apply(delay: CreditedDelay): AXI4CreditedDelay = apply(delay, delay, delay.flip, delay, delay.flip)$/;"	m
apply	src/main/scala/amba/axi4/Parameters.scala	/^  def apply(master: AXI4MasterPortParameters, slave: AXI4SlavePortParameters) =$/;"	m
apply	src/main/scala/amba/axi4/SRAM.scala	/^  def apply($/;"	m
apply	src/main/scala/amba/axi4/ToTL.scala	/^  def apply(wcorrupt: Boolean = true)(implicit p: Parameters) =$/;"	m
apply	src/main/scala/amba/axi4/UserYanker.scala	/^  def apply(capMaxFlight: Option[Int] = None)(implicit p: Parameters): AXI4Node =$/;"	m
apply	src/main/scala/amba/axi4/Xbar.scala	/^  def apply($/;"	m
apply	src/main/scala/amba/axi4/Xbar.scala	/^  def apply[T <: Data](policy: TLArbiter.Policy)(sink: IrrevocableIO[T], sources: IrrevocableIO[T]*): Unit = {$/;"	m
apply	src/main/scala/amba/axis/Buffer.scala	/^  def apply(params: BufferParams = BufferParams.default)(implicit p: Parameters) = {$/;"	m
apply	src/main/scala/amba/axis/Bundles.scala	/^  def apply(params: AXISBundleParameters) = new AXISBundle(params)$/;"	m
apply	src/main/scala/amba/axis/Xbar.scala	/^  def apply(beatBytes: Int, policy: TLArbiter.Policy = TLArbiter.roundRobin)(implicit p: Parameters): AXISNode =$/;"	m
apply	src/main/scala/devices/debug/Debug.scala	/^      def apply( t : Value) : UInt = {$/;"	m
apply	src/main/scala/devices/debug/Debug.scala	/^    def apply (n: Int, rVal: UInt, wVal: UInt, rNotify: Bool, wNotify: Bool, desc: Option[RegFieldDesc] = None): RegField = {$/;"	m
apply	src/main/scala/devices/debug/Debug.scala	/^  def apply(n: Int, rVal: UInt, wVal: UInt, wNotify: Bool, desc: RegFieldDesc): RegField = {$/;"	m
apply	src/main/scala/devices/debug/Debug.scala	/^  def apply(n: Int, value: UInt, set: Bool, name: String, desc: String) : RegField = {$/;"	m
apply	src/main/scala/devices/debug/Debug.scala	/^  def apply(xlen:Int \/*TODO , val configStringAddr: Int*\/): DebugModuleParams = {$/;"	m
apply	src/main/scala/devices/debug/DebugRomContents.scala	/^  def apply() : Array[Byte] = { Array ($/;"	m
apply	src/main/scala/devices/debug/DebugRomNonzeroContents.scala	/^  def apply() : Array[Byte] = { Array ($/;"	m
apply	src/main/scala/devices/debug/SBA.scala	/^  def apply(sb2tl: SBToTL, dmactive: Bool, dmAuthenticated: Bool)(implicit p: Parameters):$/;"	m
apply	src/main/scala/devices/tilelink/BusBlocker.scala	/^  def apply(blockerAddr: BigInt, controlBus: TLBusWrapper, beatBytes: Int, name: String)(implicit p: Parameters): TLNode = {$/;"	m
apply	src/main/scala/devices/tilelink/BusBlocker.scala	/^  def apply(blockerAddrOpt: Option[BigInt], controlBus: TLBusWrapper, beatBytes: Int, name: String)(implicit p: Parameters): TLNode = {$/;"	m
apply	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  def apply(addressBits: Int, pageBits: Int, initial: Option[PMPInitialValue] = None): DevicePMP = {$/;"	m
apply	src/main/scala/diplomacy/AddressDecoder.scala	/^  def apply(keys: Seq[Int]): Int = {$/;"	m
apply	src/main/scala/diplomacy/AddressDecoder.scala	/^  def apply(ports: Ports, givenBits: BigInt = BigInt(0)): BigInt = {$/;"	m
apply	src/main/scala/diplomacy/BundleBridge.scala	/^  def apply[T <: Data]($/;"	m
apply	src/main/scala/diplomacy/BundleBridge.scala	/^  def apply[T <: Data]()(implicit valName: ValName): BundleBridgeSink[T] = {$/;"	m
apply	src/main/scala/diplomacy/BundleBridge.scala	/^  def apply[T <: Data]()(implicit valName: ValName): BundleBridgeSource[T] = {$/;"	m
apply	src/main/scala/diplomacy/BundleBridge.scala	/^  def apply[T <: Data](gen: () => T)(implicit valName: ValName): BundleBridgeSource[T] = {$/;"	m
apply	src/main/scala/diplomacy/BundleBridge.scala	/^  def apply[T <: Data](gen: () => T): BundleBridgeParams[T] = BundleBridgeParams(Some(gen))$/;"	m
apply	src/main/scala/diplomacy/BundleBridge.scala	/^  def apply[T <: Data](name: String) = BundleBridgeIdentityNode[T]()(ValName(name))$/;"	m
apply	src/main/scala/diplomacy/ClockDomain.scala	/^  def apply(): CreditedCrossing = CreditedCrossing(CreditedDelay(1, 1))$/;"	m
apply	src/main/scala/diplomacy/ClockDomain.scala	/^  def apply(delay: CreditedDelay): CreditedCrossing = CreditedCrossing(delay, delay.flip)$/;"	m
apply	src/main/scala/diplomacy/Clone.scala	/^  def apply(base: LazyModule) = new CloneLazyModule(base)$/;"	m
apply	src/main/scala/diplomacy/CloneModule.scala	/^  def apply(field: String) = elements(field)$/;"	m
apply	src/main/scala/diplomacy/CloneModule.scala	/^  def apply(model: BaseModule): ClonePorts = {$/;"	m
apply	src/main/scala/diplomacy/DeviceTree.scala	/^  def apply(dts: String): DTB = {$/;"	m
apply	src/main/scala/diplomacy/DeviceTree.scala	/^  def apply(res: ResourceValue): String = "\/dts-v1\/;\\n\\n" + helper(res, "", defaultCells).mkString("")$/;"	m
apply	src/main/scala/diplomacy/JSON.scala	/^  def apply(res: ResourceValue): String = {$/;"	m
apply	src/main/scala/diplomacy/LazyModule.scala	/^  def apply[T <: LazyModule](bc: T)(implicit valName: ValName, sourceInfo: SourceInfo): T = {$/;"	m
apply	src/main/scala/diplomacy/LazyModule.scala	/^  def apply[T]($/;"	m
apply	src/main/scala/diplomacy/LazyModule.scala	/^  def apply[T](body: => T)(implicit valName: ValName, p: Parameters): T = {$/;"	m
apply	src/main/scala/diplomacy/LazyModule.scala	/^  def apply[T](body: => T): ModuleValue[T] = {$/;"	m
apply	src/main/scala/diplomacy/LazyModule.scala	/^  def apply[T](body: => T): T = {$/;"	m
apply	src/main/scala/diplomacy/LazyModule.scala	/^  def apply[T](name: String)(body: => T)(implicit p: Parameters): T = {$/;"	m
apply	src/main/scala/diplomacy/Nodes.scala	/^  def apply[DI, UI, EI, BI <: Data, DO, UO, EO, BO <: Data](i: InwardNodeHandle[DI, UI, EI, BI], o: OutwardNodeHandle[DO, UO, EO, BO]) = new NodeHandlePair(i, o)$/;"	m
apply	src/main/scala/diplomacy/Parameters.scala	/^  def apply(x: Int) = new TransferSizes(x)$/;"	m
apply	src/main/scala/diplomacy/Parameters.scala	/^  def apply[T <: Data](x: DecoupledIO[T]) =$/;"	m
apply	src/main/scala/diplomacy/Parameters.scala	/^  implicit def apply(depth: Int): BufferParams = BufferParams(depth, false, false)$/;"	m
apply	src/main/scala/diplomacy/Parameters.scala	/^  implicit def apply(value: Boolean): TriStateValue = TriStateValue(value, true)$/;"	m
apply	src/main/scala/diplomacy/Resources.scala	/^  def apply(block: => Unit): Unit = {$/;"	m
apply	src/main/scala/diplomacy/Resources.scala	/^  def apply(key: String): Seq[Binding] = map.getOrElse(key, Nil)$/;"	m
apply	src/main/scala/diplomacy/Resources.scala	/^  def apply(x: Double) = new ResourceInt(x)$/;"	m
apply	src/main/scala/diplomacy/Resources.scala	/^  def apply(x: Int) = new ResourceAddress(x)$/;"	m
apply	src/main/scala/diplomacy/Unreachable.scala	/^  def apply(): Nothing = throw new AssertionError("unreachable code")$/;"	m
apply	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  def apply(i: IdRange): OMIDRange = {$/;"	m
apply	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  def apply[T <: IdMapEntry](i: T): OMIDMapEntry = {$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply(cond: Bool)(implicit sourceInfo: SourceInfo): Unit ={$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply(dir: MonitorDirection, cond: Bool, message: String,$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply(dir: MonitorDirection, cond: Seq[Seq[Bool]], crosscond: Bool, message: String,$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply(dir: MonitorDirection, cond: Seq[Seq[Bool]], crosscond: Bool,$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply(if_clause: Bool, then_clause: Bool): Bool = {$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply(in: Bits): Bits = {$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply(in: Bits): Bool = {$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply(in: Seq[Bool]): Bool = {$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply(in: Vec[Bool]): Bool = {$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply(in: Vec[Bool]): Vec[Bool] = {$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply[T <: Data, R <: Data](case_var: T, sel_ret: Seq[Tuple2[T,R]]): R = {$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply[T <: Data](data: T, set: Seq[T]): Bool = {$/;"	m
apply	src/main/scala/formal/FormalUtils.scala	/^  def apply[T <: Data](if_clause: Bool, then_clause: T, else_clause: T): T = {$/;"	m
apply	src/main/scala/groundtest/Status.scala	/^  def apply(debugs: Seq[GroundTestStatus]): GroundTestStatus = {$/;"	m
apply	src/main/scala/interrupts/BlockDuringReset.scala	/^  def apply(stretchResetCycles: Int = 0)(implicit p: Parameters): IntNode = {$/;"	m
apply	src/main/scala/interrupts/Crossing.scala	/^  def apply()(implicit p: Parameters) =$/;"	m
apply	src/main/scala/interrupts/Crossing.scala	/^  def apply(alreadyRegistered: Boolean = false)(implicit p: Parameters) =$/;"	m
apply	src/main/scala/interrupts/Crossing.scala	/^  def apply(sync: Int = 3)(implicit p: Parameters) =$/;"	m
apply	src/main/scala/interrupts/CrossingHelper.scala	/^  def apply(xing: ClockCrossingType = NoCrossing, alreadyRegistered: Boolean = false)(implicit p: Parameters): IntInwardNode = {$/;"	m
apply	src/main/scala/interrupts/CrossingHelper.scala	/^  def apply(xing: ClockCrossingType = NoCrossing, alreadyRegistered: Boolean = false)(implicit p: Parameters): IntOutwardNode = {$/;"	m
apply	src/main/scala/interrupts/CrossingHelper.scala	/^  def apply(xing: ClockCrossingType)(implicit p: Parameters): IntInwardNode = apply(xing, false)$/;"	m
apply	src/main/scala/interrupts/CrossingHelper.scala	/^  def apply(xing: ClockCrossingType)(implicit p: Parameters): IntOutwardNode = apply(xing, false)$/;"	m
apply	src/main/scala/interrupts/CrossingHelper.scala	/^  def apply(xing: HelperCrossingType)(implicit p: Parameters): IntInwardNode$/;"	m
apply	src/main/scala/interrupts/CrossingHelper.scala	/^  def apply(xing: HelperCrossingType)(implicit p: Parameters): IntOutwardNode$/;"	m
apply	src/main/scala/interrupts/CrossingHelper.scala	/^  def apply(xing: ResetCrossingType)(implicit p: Parameters): IntInwardNode = {$/;"	m
apply	src/main/scala/interrupts/CrossingHelper.scala	/^  def apply(xing: ResetCrossingType)(implicit p: Parameters): IntOutwardNode = {$/;"	m
apply	src/main/scala/interrupts/Nodes.scala	/^  def apply(): IntEphemeralNode = IntEphemeralNode()(ValName("temp"))$/;"	m
apply	src/main/scala/interrupts/Nodes.scala	/^  def apply(name: Option[String]): IntIdentityNode = apply((ValName(name.getOrElse("with_no_name"))))$/;"	m
apply	src/main/scala/interrupts/Nodes.scala	/^  def apply(name: Option[String]): IntSyncIdentityNode = apply((ValName(name.getOrElse("with_no_name"))))$/;"	m
apply	src/main/scala/interrupts/Nodes.scala	/^  def apply(name: String): IntIdentityNode = apply(Some(name))$/;"	m
apply	src/main/scala/interrupts/Nodes.scala	/^  def apply(name: String): IntSyncIdentityNode = apply(Some(name))$/;"	m
apply	src/main/scala/interrupts/Nodes.scala	/^  def apply(name: ValName) = IntIdentityNode()(name)$/;"	m
apply	src/main/scala/interrupts/Nodes.scala	/^  def apply(name: ValName) = IntSyncIdentityNode()(name)$/;"	m
apply	src/main/scala/interrupts/NullIntSource.scala	/^  def apply(num: Int = 1, ports: Int = 1, sources: Int = 1)(implicit p: Parameters): IntNode = {$/;"	m
apply	src/main/scala/interrupts/Parameters.scala	/^  def apply(num: Int = 1, ports: Int = 1, sources: Int = 1, resources: Seq[Resource] = Nil) =$/;"	m
apply	src/main/scala/interrupts/Parameters.scala	/^  def apply(ports: Int = 1, sinks: Int = 1) =$/;"	m
apply	src/main/scala/interrupts/Parameters.scala	/^  implicit def apply(end: Int): IntRange = apply(0, end)$/;"	m
apply	src/main/scala/interrupts/Xbar.scala	/^  def apply(implicit p: Parameters): IntNode = {$/;"	m
apply	src/main/scala/jtag/JtagShifter.scala	/^  def apply()(implicit p: Parameters) = new JtagBypassChain$/;"	m
apply	src/main/scala/jtag/JtagShifter.scala	/^  def apply[T <: Data, V <: Data](genCapture: T, genUpdate: V)(implicit p: Parameters) =$/;"	m
apply	src/main/scala/jtag/JtagShifter.scala	/^  def apply[T <: Data](gen: T)(implicit p: Parameters) = new CaptureChain(gen)$/;"	m
apply	src/main/scala/jtag/JtagShifter.scala	/^  def apply[T <: Data](gen: T)(implicit p: Parameters) = new CaptureUpdateChain(gen, gen)$/;"	m
apply	src/main/scala/jtag/JtagShifter.scala	/^  def apply[T <: Data](gen: T): Capture[T] = new Capture(gen)$/;"	m
apply	src/main/scala/jtag/JtagTap.scala	/^  def apply(irLength: Int, instructions: Map[BigInt, Chain], icode: Option[BigInt] = None)(implicit p: Parameters): JtagBlockIO = {$/;"	m
apply	src/main/scala/jtag/JtagUtils.scala	/^  def apply(version: Int, partNumber: Int, mfrId: Int): BigInt = {$/;"	m
apply	src/main/scala/jtag/Utils.scala	/^  def apply (data: Bool, counts: BigInt): UInt = {$/;"	m
apply	src/main/scala/jtag/Utils.scala	/^  def apply (data: Bool, counts: BigInt, init: BigInt): UInt = {$/;"	m
apply	src/main/scala/prci/BundleBridgeBlockDuringReset.scala	/^  def apply[T <: Data : Blockable]($/;"	m
apply	src/main/scala/prci/ClockGroup.scala	/^  def apply()(implicit p: Parameters, valName: ValName) = LazyModule(new ClockGroup(valName.name)).node$/;"	m
apply	src/main/scala/prci/ClockGroup.scala	/^  def apply()(implicit p: Parameters, valName: ValName) = LazyModule(new ClockGroupAggregator(valName.name)).node$/;"	m
apply	src/main/scala/prci/ClockGroup.scala	/^  def apply(fixedClockOpt: Option[ClockParameters])(implicit p: Parameters, valName: ValName) = LazyModule(new FixedClockBroadcast(fixedClockOpt)).node$/;"	m
apply	src/main/scala/prci/ClockGroup.scala	/^  def apply(num: Int = 1)(implicit p: Parameters, valName: ValName) = LazyModule(new SimpleClockGroupSource(num)).node$/;"	m
apply	src/main/scala/prci/ClockNodes.scala	/^  def apply($/;"	m
apply	src/main/scala/prci/ClockNodes.scala	/^  def apply(): ClockEphemeralNode = ClockEphemeralNode()(ValName("temp"))$/;"	m
apply	src/main/scala/prci/ClockNodes.scala	/^  def apply(name: Option[String]): ClockIdentityNode = apply(ValName(name.getOrElse("with_no_name")))$/;"	m
apply	src/main/scala/prci/ClockNodes.scala	/^  def apply(name: String): ClockIdentityNode = apply(Some(name))$/;"	m
apply	src/main/scala/prci/ClockNodes.scala	/^  def apply(name: ValName) = ClockIdentityNode()(name)$/;"	m
apply	src/main/scala/prci/ResetSynchronizer.scala	/^  def apply()(implicit p: Parameters, valName: ValName) = LazyModule(new ClockGroupResetSynchronizer()).node$/;"	m
apply	src/main/scala/prci/ResetSynchronizer.scala	/^  def apply()(implicit p: Parameters, valName: ValName) = LazyModule(new ResetSynchronizer()).node$/;"	m
apply	src/main/scala/regmapper/DescribedReg.scala	/^  def apply[T <: Data]($/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  def apply(n: Int)                                                             : RegField = apply(n, (), (), Some(RegFieldDesc.reserved))$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  def apply(n: Int, desc: RegFieldDesc)                                         : RegField = apply(n, (), (), Some(desc))$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  def apply(n: Int, r: RegReadFn, w: RegWriteFn)                                : RegField = apply(n, r,  w,  None)$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  def apply(n: Int, r: RegReadFn, w: RegWriteFn, desc: RegFieldDesc)            : RegField = apply(n, r,  w,  Some(desc))$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  def apply(n: Int, rw: UInt)                                                   : RegField = apply(n, rw, rw, None)$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  def apply(n: Int, rw: UInt, desc: RegFieldDesc)                               : RegField = apply(n, rw, rw, Some(desc))$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: (Bool, Bool) => (Bool, Bool, UInt)) =$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: (Bool, Bool, UInt) => (Bool, Bool)) =$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: (Bool, UInt) => Bool) =$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: Bool => (Bool, UInt)) =$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: DecoupledIO[UInt]): RegWriteFn = RegWriteFn((valid, data) => { x.valid := valid; x.bits := data; x.ready })$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: ReadyValidIO[UInt]):RegReadFn = RegReadFn(ready => { x.ready := ready; (x.valid, x.bits) })$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: RegisterReadIO[UInt]): RegReadFn =$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: RegisterWriteIO[UInt]): RegWriteFn =$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: UInt): RegWriteFn = RegWriteFn((valid, data) => { when (valid) { x := data }; Bool(true) })$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: UInt):RegReadFn = RegReadFn(ready => (Bool(true), x))$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: Unit): RegWriteFn = RegWriteFn((valid, data) => { Bool(true) })$/;"	m
apply	src/main/scala/regmapper/RegField.scala	/^  implicit def apply(x: Unit):RegReadFn = RegReadFn(UInt(0))$/;"	m
apply	src/main/scala/regmapper/RegFieldDesc.scala	/^  def apply (name: String, desc: Option[String], regs: Seq[RegField], descFirstOnly: Boolean = true): Seq[RegField] = {$/;"	m
apply	src/main/scala/regmapper/RegFieldDesc.scala	/^  def apply(addressBlockInfo: AddressBlockInfo,$/;"	m
apply	src/main/scala/regmapper/RegMapper.scala	/^  def apply(bytes: Int, concurrency: Int, undefZero: Boolean, in: DecoupledIO[RegMapperInput], mapping: RegField.Map*)(implicit sourceInfo: SourceInfo) = {$/;"	m
apply	src/main/scala/regmapper/RegisterCrossing.scala	/^  def apply($/;"	m
apply	src/main/scala/regmapper/Test.scala	/^  def apply(seed: Int): UInt =$/;"	m
apply	src/main/scala/rocket/BTB.scala	/^  def apply() = UInt(width = SZ)$/;"	m
apply	src/main/scala/rocket/Decode.scala	/^	def apply(addr: UInt, default: BitPat, mapping: Iterable[(BitPat, BitPat)]): UInt = {$/;"	m
apply	src/main/scala/rocket/Decode.scala	/^  def apply(addr: UInt, default: Seq[BitPat], mappingIn: Iterable[(BitPat, Seq[BitPat])]): Seq[UInt] = {$/;"	m
apply	src/main/scala/rocket/Decode.scala	/^  def apply(addr: UInt, default: Seq[BitPat], mappingIn: List[(UInt, Seq[BitPat])]): Seq[UInt] =$/;"	m
apply	src/main/scala/rocket/Decode.scala	/^  def apply(addr: UInt, trues: Iterable[UInt], falses: Iterable[UInt]): Bool =$/;"	m
apply	src/main/scala/rocket/Decode.scala	/^  def apply(minterms: Seq[Term], dontcares: Seq[Term], bits: Int) = {$/;"	m
apply	src/main/scala/rocket/Decode.scala	/^  def apply(minterms: Seq[Term], maxterms: Seq[Term], bits: Int) = {$/;"	m
apply	src/main/scala/rocket/HellaCache.scala	/^  def apply(tag: Bits, coh: ClientMetadata)(implicit p: Parameters) = {$/;"	m
apply	src/main/scala/rocket/HellaCache.scala	/^  def apply(tile: BaseTile)(p: Parameters): HellaCache = {$/;"	m
apply	src/main/scala/rocket/PMP.scala	/^  def apply(addr: UInt, pgLevel: UInt): Bool = {$/;"	m
apply	src/main/scala/rocket/PMP.scala	/^  def apply(reg: PMPReg): PMP = {$/;"	m
apply	src/main/scala/rocket/RocketCore.scala	/^  def apply(sel: UInt, inst: UInt) = {$/;"	m
apply	src/main/scala/rocket/TLBPermissions.scala	/^  def apply(managers: Seq[TLManagerParameters], xLen: Int, cacheBlockBytes: Int, pageSize: BigInt): UInt => TLBPermissions = {$/;"	m
apply	src/main/scala/subsystem/Configs.scala	/^  def apply[TPT <: InstantiableTileParams[_], TCT <: TileCrossingParamsLike, TAP <: CanAttachTile]($/;"	m
apply	src/main/scala/tile/LookupByHartId.scala	/^  def apply[T <: Data](f: TileParams => Option[T], hartId: UInt): T = f(t).get$/;"	m
apply	src/main/scala/tile/LookupByHartId.scala	/^  def apply[T <: Data](f: TileParams => Option[T], hartId: UInt): T =$/;"	m
apply	src/main/scala/tile/LookupByHartId.scala	/^  def apply[T <: Data](f: TileParams => Option[T], hartId: UInt): T$/;"	m
apply	src/main/scala/tilelink/Arbiter.scala	/^  def apply[T <: Data](policy: Policy)(sink: DecoupledIO[T], sources: (UInt, DecoupledIO[T])*): Unit = {$/;"	m
apply	src/main/scala/tilelink/AsyncCrossing.scala	/^  def apply()(implicit p: Parameters): TLAsyncSourceNode = apply(None)$/;"	m
apply	src/main/scala/tilelink/AsyncCrossing.scala	/^  def apply(params: AsyncQueueParams = AsyncQueueParams())(implicit p: Parameters) =$/;"	m
apply	src/main/scala/tilelink/AsyncCrossing.scala	/^  def apply(sync: Int)(implicit p: Parameters): TLAsyncSourceNode = apply(Some(sync))$/;"	m
apply	src/main/scala/tilelink/AsyncCrossing.scala	/^  def apply(sync: Option[Int])(implicit p: Parameters): TLAsyncSourceNode =$/;"	m
apply	src/main/scala/tilelink/AtomicAutomata.scala	/^  def apply(logical: Boolean = true, arithmetic: Boolean = true, concurrency: Int = 1, passthrough: Boolean = true)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/BankBinder.scala	/^  def apply(mask: BigInt)(implicit p: Parameters): TLNode = {$/;"	m
apply	src/main/scala/tilelink/BankBinder.scala	/^  def apply(nBanks: Int, granularity: Int)(implicit p: Parameters): TLNode = {$/;"	m
apply	src/main/scala/tilelink/BlockDuringReset.scala	/^  def apply(stretchCycles: Int = 0)(implicit p: Parameters): TLNode = {$/;"	m
apply	src/main/scala/tilelink/Broadcast.scala	/^  def apply(lineBytes: Int, numTrackers: Int = 4, bufferless: Boolean = false, filterFactory: TLBroadcast.ProbeFilterFactory = BroadcastFilter.factory)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/Broadcast.scala	/^  def apply(params: TLBroadcastParams)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/Buffer.scala	/^  def apply($/;"	m
apply	src/main/scala/tilelink/Buffer.scala	/^  def apply()                                   (implicit p: Parameters): TLMixedNodeCancel = apply(BufferParams.default)$/;"	m
apply	src/main/scala/tilelink/Buffer.scala	/^  def apply()                                   (implicit p: Parameters): TLNode = apply(BufferParams.default)$/;"	m
apply	src/main/scala/tilelink/Buffer.scala	/^  def apply(abcde: BufferParams)                (implicit p: Parameters): TLMixedNodeCancel = apply(abcde, abcde)$/;"	m
apply	src/main/scala/tilelink/Buffer.scala	/^  def apply(abcde: BufferParams)                (implicit p: Parameters): TLNode = apply(abcde, abcde)$/;"	m
apply	src/main/scala/tilelink/Buffer.scala	/^  def apply(ace: BufferParams, bd: BufferParams)(implicit p: Parameters): TLMixedNodeCancel = apply(ace, bd, ace, bd, ace)$/;"	m
apply	src/main/scala/tilelink/Buffer.scala	/^  def apply(ace: BufferParams, bd: BufferParams)(implicit p: Parameters): TLNode = apply(ace, bd, ace, bd, ace)$/;"	m
apply	src/main/scala/tilelink/Bundle_ACancel.scala	/^  def apply(in: TLBundle) = {$/;"	m
apply	src/main/scala/tilelink/Bundle_ACancel.scala	/^  def apply(params: TLBundleParameters) = new TLBundle_ACancel(params)$/;"	m
apply	src/main/scala/tilelink/Bundles.scala	/^  def apply(params: TLBundleParameters) = new TLBundle(params)$/;"	m
apply	src/main/scala/tilelink/BusWrapper.scala	/^  def apply$/;"	m
apply	src/main/scala/tilelink/CacheCork.scala	/^  def apply(params: TLCacheCorkParams)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/CacheCork.scala	/^  def apply(unsafe: Boolean = false, sinkIds: Int = 8)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/Credited.scala	/^  def apply()(implicit p: Parameters): TLCreditedAdapterNode = apply(CreditedDelay(1, 1))$/;"	m
apply	src/main/scala/tilelink/Credited.scala	/^  def apply()(implicit p: Parameters): TLCreditedSinkNode = apply(CreditedDelay(1, 1))$/;"	m
apply	src/main/scala/tilelink/Credited.scala	/^  def apply()(implicit p: Parameters): TLCreditedSourceNode = apply(CreditedDelay(1, 1))$/;"	m
apply	src/main/scala/tilelink/Credited.scala	/^  def apply(delay: CreditedDelay)(implicit p: Parameters): TLCreditedAdapterNode = apply(TLCreditedDelay(delay))$/;"	m
apply	src/main/scala/tilelink/Credited.scala	/^  def apply(delay: CreditedDelay)(implicit p: Parameters): TLCreditedSinkNode = apply(TLCreditedDelay(delay))$/;"	m
apply	src/main/scala/tilelink/Credited.scala	/^  def apply(delay: CreditedDelay)(implicit p: Parameters): TLCreditedSourceNode = apply(TLCreditedDelay(delay))$/;"	m
apply	src/main/scala/tilelink/Credited.scala	/^  def apply(delay: TLCreditedDelay)(implicit p: Parameters): TLCreditedAdapterNode = {$/;"	m
apply	src/main/scala/tilelink/Credited.scala	/^  def apply(delay: TLCreditedDelay)(implicit p: Parameters): TLCreditedSinkNode = {$/;"	m
apply	src/main/scala/tilelink/Credited.scala	/^  def apply(delay: TLCreditedDelay)(implicit p: Parameters): TLCreditedSourceNode = {$/;"	m
apply	src/main/scala/tilelink/CrossingHelper.scala	/^  def apply(xing: ClockCrossingType = NoCrossing)(implicit p: Parameters): TLInwardNode = {$/;"	m
apply	src/main/scala/tilelink/CrossingHelper.scala	/^  def apply(xing: ClockCrossingType = NoCrossing)(implicit p: Parameters): TLOutwardNode = {$/;"	m
apply	src/main/scala/tilelink/CrossingHelper.scala	/^  def apply(xing: HelperCrossingType)(implicit p: Parameters): TLInwardNode$/;"	m
apply	src/main/scala/tilelink/CrossingHelper.scala	/^  def apply(xing: HelperCrossingType)(implicit p: Parameters): TLOutwardNode$/;"	m
apply	src/main/scala/tilelink/CrossingHelper.scala	/^  def apply(xing: ResetCrossingType)(implicit p: Parameters): TLInwardNode = {$/;"	m
apply	src/main/scala/tilelink/CrossingHelper.scala	/^  def apply(xing: ResetCrossingType)(implicit p: Parameters): TLOutwardNode = {$/;"	m
apply	src/main/scala/tilelink/Delayer.scala	/^  def apply(q: Double)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/ErrorEvaluator.scala	/^  def apply(a: TLBundleA) = test(a)$/;"	m
apply	src/main/scala/tilelink/ErrorEvaluator.scala	/^  def apply(test: RequestPattern, testOn: Boolean = false, testOff: Boolean = false, deny: Boolean = false)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/ErrorEvaluator.scala	/^  implicit def apply(pattern: Seq[AddressSet]): RequestPattern = new RequestPattern(overlaps(pattern) _)$/;"	m
apply	src/main/scala/tilelink/FIFOFixer.scala	/^  def apply(policy: Policy = all)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/Filter.scala	/^  def apply($/;"	m
apply	src/main/scala/tilelink/Fragmenter.scala	/^  def apply(minSize: Int, maxSize: Int, alwaysMin: Boolean = false, earlyAck: EarlyAck.T = EarlyAck.None, holdFirstDeny: Boolean = false)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/Fragmenter.scala	/^  def apply(wrapper: TLBusWrapper)(implicit p: Parameters): TLNode = apply(wrapper.beatBytes, wrapper.blockBytes)$/;"	m
apply	src/main/scala/tilelink/Fuzzer.scala	/^  def apply($/;"	m
apply	src/main/scala/tilelink/Fuzzer.scala	/^  def apply(increment: Bool = Bool(true)): UInt =$/;"	m
apply	src/main/scala/tilelink/Fuzzer.scala	/^  def apply(wide: Int, increment: Bool = Bool(true)): UInt = {$/;"	m
apply	src/main/scala/tilelink/HintHandler.scala	/^  def apply(passthrough: Boolean = true)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/Jbar.scala	/^  def apply(policy: TLArbiter.Policy = TLArbiter.roundRobin)(implicit p: Parameters) = {$/;"	m
apply	src/main/scala/tilelink/Map.scala	/^  def apply(fn: AddressSet => BigInt)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/Metadata.scala	/^  def apply(perm: UInt) = {$/;"	m
apply	src/main/scala/tilelink/Monitor.scala	/^  def apply(enable: Boolean, node: TLNode)(implicit p: Parameters): TLNode = {$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(): TLEphemeralNode = TLEphemeralNode()(ValName("temp"))$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: Option[String]): TLAsyncIdentityNode = apply(ValName(name.getOrElse("with_no_name")))$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: Option[String]): TLCreditedIdentityNode = apply(ValName(name.getOrElse("with_no_name")))$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: Option[String]): TLIdentityNode = apply(ValName(name.getOrElse("with_no_name")))$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: Option[String]): TLRationalIdentityNode = apply(ValName(name.getOrElse("with_no_name")))$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: String): TLAsyncIdentityNode = apply(Some(name))$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: String): TLCreditedIdentityNode = apply(Some(name))$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: String): TLIdentityNode = apply(Some(name))$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: String): TLRationalIdentityNode = apply(Some(name))$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: ValName) = TLAsyncIdentityNode()(name)$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: ValName) = TLCreditedIdentityNode()(name)$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: ValName) = TLIdentityNode()(name)$/;"	m
apply	src/main/scala/tilelink/Nodes.scala	/^  def apply(name: ValName) = TLRationalIdentityNode()(name)$/;"	m
apply	src/main/scala/tilelink/Parameters.scala	/^  def apply($/;"	m
apply	src/main/scala/tilelink/Parameters.scala	/^  def apply(): TLChannelBeatBytes = TLChannelBeatBytes($/;"	m
apply	src/main/scala/tilelink/Parameters.scala	/^  def apply(beatBytes: Int): TLChannelBeatBytes = TLChannelBeatBytes($/;"	m
apply	src/main/scala/tilelink/Parameters.scala	/^  def apply(delay: CreditedDelay): TLCreditedDelay = apply(delay, delay.flip, delay, delay.flip, delay)$/;"	m
apply	src/main/scala/tilelink/Parameters.scala	/^  def apply(master: TLMasterPortParameters, slave: TLSlavePortParameters) =$/;"	m
apply	src/main/scala/tilelink/Parameters.scala	/^  def apply(slaves: Seq[TLSlaveParameters]): List[TLSlaveParameters] = {$/;"	m
apply	src/main/scala/tilelink/Parameters.scala	/^  def apply(x: TLSlaveParameters): ManagerUnificationKey = ManagerUnificationKey($/;"	m
apply	src/main/scala/tilelink/PatternPusher.scala	/^  def apply(name: String, pattern: Seq[Pattern])(implicit p: Parameters): TLOutwardNode =$/;"	m
apply	src/main/scala/tilelink/ProbePicker.scala	/^  def apply()(implicit p: Parameters): TLNode = {$/;"	m
apply	src/main/scala/tilelink/RAMModel.scala	/^  def apply(log: String = "", ignoreCorruptData: Boolean = false, ignoreDeniedData: Boolean = true)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/RationalCrossing.scala	/^  def apply()(implicit p: Parameters) =$/;"	m
apply	src/main/scala/tilelink/RationalCrossing.scala	/^  def apply(direction: RationalDirection = Symmetric)(implicit p: Parameters) =$/;"	m
apply	src/main/scala/tilelink/SRAM.scala	/^  def apply($/;"	m
apply	src/main/scala/tilelink/SourceShrinker.scala	/^  def apply(maxInFlight: Int)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/ToAHB.scala	/^  def apply(aFlow: Boolean = true, supportHints: Boolean = true, supportsRETRY: Boolean = true)(implicit p: Parameters) =$/;"	m
apply	src/main/scala/tilelink/ToAPB.scala	/^  def apply(aFlow: Boolean = true)(implicit p: Parameters) =$/;"	m
apply	src/main/scala/tilelink/ToAXI4.scala	/^  def apply(combinational: Boolean = true, adapterName: Option[String] = None, stripBits: Int = 0, wcorrupt: Boolean = true)(implicit p: Parameters) =$/;"	m
apply	src/main/scala/tilelink/WidthWidget.scala	/^  def apply(innerBeatBytes: Int)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/WidthWidget.scala	/^  def apply(wrapper: TLBusWrapper)(implicit p: Parameters): TLNode = apply(wrapper.beatBytes)$/;"	m
apply	src/main/scala/tilelink/Xbar.scala	/^  def apply(policy: TLArbiter.Policy = TLArbiter.roundRobin)(implicit p: Parameters): TLNode =$/;"	m
apply	src/main/scala/tilelink/Xbar.scala	/^  def apply(policy: TLArbiter.Policy = TLArbiter.roundRobin)(implicit p: Parameters): TLNode_ACancel =$/;"	m
apply	src/main/scala/tilelink/Xbar.scala	/^  def apply[T]($/;"	m
apply	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^  def apply(nameMappings: Map[String, String], circuit: Circuit): Circuit = {$/;"	m
apply	src/main/scala/unittest/TestGenerator.scala	/^  def apply(lm: LazyModule) = gen(lm)$/;"	m
apply	src/main/scala/unittest/TestGenerator.scala	/^  def apply(matcher: PartialFunction[LazyModule, Seq[LazyUnitTest]]): TestGenerator =$/;"	m
apply	src/main/scala/util/AsyncQueue.scala	/^  def apply(bits: Int, increment: Bool = true.B, clear: Bool = false.B, name: String = "binary"): UInt = {$/;"	m
apply	src/main/scala/util/AsyncQueue.scala	/^  def apply[T <: Data](x: AsyncBundle[T]): DecoupledIO[T] = apply(x, x.params.sync)$/;"	m
apply	src/main/scala/util/AsyncQueue.scala	/^  def apply[T <: Data](x: AsyncBundle[T], sync: Int): DecoupledIO[T] = {$/;"	m
apply	src/main/scala/util/AsyncQueue.scala	/^  def apply[T <: Data](x: ReadyValidIO[T], params: AsyncQueueParams = AsyncQueueParams()): AsyncBundle[T] = {$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(d: Bool, clk: Clock, rst: Bool): Bool = apply(d, clk, rst, false, None)$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(d: Bool, clk: Clock, rst: Bool, init: Boolean, name: Option[String]): Bool = {$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(d: Bool, clk: Clock, rst: Bool, name: String): Bool = apply(d, clk, rst, false, Some(name))$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(updateData: UInt): UInt = apply(updateData, resetData=BigInt(0), enable=Bool(true))$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(updateData: UInt, enable: Bool): UInt = apply(updateData, resetData=BigInt(0), enable)$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(updateData: UInt, enable: Bool, name: String): UInt = apply(updateData, resetData=BigInt(0), enable, Some(name))$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(updateData: UInt, name:String): UInt = apply(updateData, resetData=BigInt(0), enable=Bool(true), Some(name))$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(updateData: UInt, resetData: BigInt): UInt = apply(updateData, resetData, enable=Bool(true))$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(updateData: UInt, resetData: BigInt, enable: Bool, name: Option[String] = None): UInt = {$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(updateData: UInt, resetData: BigInt, enable: Bool, name: String): UInt = apply(updateData,$/;"	m
apply	src/main/scala/util/AsyncResetReg.scala	/^  def apply(updateData: UInt, resetData: BigInt, name: String): UInt = apply(updateData, resetData, enable=Bool(true), Some(name))$/;"	m
apply	src/main/scala/util/BlockDuringReset.scala	/^  def apply[T <: Data : Blockable](data: T, stretchCycles: Int = 0): T = {$/;"	m
apply	src/main/scala/util/Broadcaster.scala	/^  def apply[T <: Data](in: DecoupledIO[T], n: Int): Vec[DecoupledIO[T]] = {$/;"	m
apply	src/main/scala/util/BundleMap.scala	/^  def apply(fields: Seq[BundleFieldBase] = Nil) = new BundleMap(fields)$/;"	m
apply	src/main/scala/util/BundleMap.scala	/^  def apply(key: BundleKeyBase): Data         = elements(key.name)$/;"	m
apply	src/main/scala/util/BundleMap.scala	/^  def apply[T <: Data](key: BundleKey[T]): T = elements(key.name).asInstanceOf[T]$/;"	m
apply	src/main/scala/util/CRC.scala	/^  def apply(divisor: BigInt, coefficient: UInt, width: Integer): UInt = {$/;"	m
apply	src/main/scala/util/ClockDivider.scala	/^  def apply(clock_in: Clock, pow2: Int): Clock = withClock(clock_in) { apply(pow2) }$/;"	m
apply	src/main/scala/util/ClockDivider.scala	/^  def apply(pow2: Int): Clock = Module(new Pow2ClockDivider(pow2)).io.clock_out$/;"	m
apply	src/main/scala/util/ClockGate.scala	/^  def apply[T <: ClockGate]($/;"	m
apply	src/main/scala/util/Counters.scala	/^  def apply(cond: Bool, n: Int): (UInt, Bool) = {$/;"	m
apply	src/main/scala/util/Counters.scala	/^  def apply(n: Int) = new ZCounter(n)$/;"	m
apply	src/main/scala/util/Counters.scala	/^  def apply(up: Bool, down: Bool, max: Int): UInt = {$/;"	m
apply	src/main/scala/util/CreditedIO.scala	/^  def apply[T <: Data](genType: T) = new CreditedIO(genType)$/;"	m
apply	src/main/scala/util/DescribedSRAM.scala	/^  def apply[T <: Data]($/;"	m
apply	src/main/scala/util/ECC.scala	/^  def apply(width: Int, f: Int): UInt = {$/;"	m
apply	src/main/scala/util/ECC.scala	/^  def apply(x: UInt, f: Int): UInt = x ^ apply(x.getWidth, f)$/;"	m
apply	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  def apply[T: Tokenizer] = implicitly[Tokenizer[T]]$/;"	m
apply	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  def apply[T: Tokenizer](t: T): Token = Tokenizer[T].toToken(t)$/;"	m
apply	src/main/scala/util/Frequency.scala	/^  def apply(dist : List[(Int, Bits)]) : Bits = {$/;"	m
apply	src/main/scala/util/HellaQueue.scala	/^  def apply[T <: Data](enq: DecoupledIO[T], entries: Int) = {$/;"	m
apply	src/main/scala/util/HeterogeneousBag.scala	/^  def apply(x: Int) = elts(x)$/;"	m
apply	src/main/scala/util/IdentityModule.scala	/^  def apply[T <: Data](x: T): T = {$/;"	m
apply	src/main/scala/util/LCG.scala	/^  def apply(inc: Bool = Bool(true)): UInt = {$/;"	m
apply	src/main/scala/util/LCG.scala	/^  def apply(w: Int, inc: Bool = Bool(true)): UInt = {$/;"	m
apply	src/main/scala/util/LanePositionedQueue.scala	/^  def apply[T <: Data]($/;"	m
apply	src/main/scala/util/LanePositionedQueue.scala	/^  def apply[T <: Data](gen: T, args: LanePositionedQueueArgs) =$/;"	m
apply	src/main/scala/util/LanePositionedQueue.scala	/^  def apply[T <: Data](gen: T, args: LanePositionedQueueArgs): LanePositionedQueueModule[T]$/;"	m
apply	src/main/scala/util/LatencyPipe.scala	/^  def apply[T <: Data](in: DecoupledIO[T], latency: Int): DecoupledIO[T] = {$/;"	m
apply	src/main/scala/util/Location.scala	/^  def apply[T](lm: Map[String, T]): LocationMap[T] = new LocationMap(lm)$/;"	m
apply	src/main/scala/util/Location.scala	/^  def apply[T](name: String): Location[T] = new Location[T](name)$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(addr_lo: UInt, lgSize: UInt, beatBytes: Int, groupBy: Int = 1): UInt = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(in: Seq[Bool]): Bool = apply(in.toSet)$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(in: Set[Bool]): Bool = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(in: UInt): Bool = apply(in.asBools.toSet)$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(mod: Int): UInt = apply(mod, randomizer)$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(mod: Int, random: UInt): UInt = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(rvs: Bool*) = new DecoupledHelper(rvs)$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(s: String): UInt = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(x: Char): UInt = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(x: SInt): UInt = apply(x, 10)$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(x: SInt, radix: Int): UInt = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(x: UInt): UInt = apply(x, 10)$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(x: UInt, n0: Int) = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(x: UInt, n1: Int, n0: Int) = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(x: UInt, n2: Int, n1: Int, n0: Int) = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(x: UInt, n: Int): Bool = n match {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply(x: UInt, radix: Int): UInt = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply[S <: UInt, T <: Data, U <: Data, W <: Data](key: S, default: (T, U, W), mapping: Seq[(S, (T, U, W))]): (T, U, W) = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply[S <: UInt, T <: Data, U <: Data](key: S, default: (T, U), mapping: Seq[(S, (T, U))]): (T, U) = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply[T <: Data, U <: Data, W <: Data, X <: Data](cond: Bool, con: (T, U, W, X), alt: (T, U, W, X)): (T, U, W, X) =$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply[T <: Data, U <: Data, W <: Data](cond: Bool, con: (T, U, W), alt: (T, U, W)): (T, U, W) =$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply[T <: Data, U <: Data](cond: Bool, con: (T, U), alt: (T, U)): (T, U) =$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply[T <: Data](v1: ValidIO[T], v2: ValidIO[T]*): ValidIO[T] = {$/;"	m
apply	src/main/scala/util/Misc.scala	/^  def apply[T <: Data](valids: Seq[ValidIO[T]]): ValidIO[T] = {$/;"	m
apply	src/main/scala/util/MuxLiteral.scala	/^  def apply[T <: Data:ClassTag](index: UInt, default: T, cases: Seq[(BigInt, T)]): T = {$/;"	m
apply	src/main/scala/util/MuxLiteral.scala	/^  def apply[T <: Data:ClassTag](index: UInt, default: T, cases: Seq[(UInt, T)]): T =$/;"	m
apply	src/main/scala/util/MuxLiteral.scala	/^  def apply[T <: Data:ClassTag](index: UInt, default: T, cases: Seq[T]): T =$/;"	m
apply	src/main/scala/util/MuxLiteral.scala	/^  def apply[T <: Data:ClassTag](index: UInt, default: T, first: (BigInt, T), rest: (BigInt, T)*): T =$/;"	m
apply	src/main/scala/util/MuxLiteral.scala	/^  def apply[T <: Data:ClassTag](index: UInt, default: T, first: (UInt, T), rest: (UInt, T)*): T = $/;"	m
apply	src/main/scala/util/MuxLiteral.scala	/^  def apply[T <: Data:ClassTag](index: UInt, default: T, first: T, rest: T*): T =$/;"	m
apply	src/main/scala/util/PlusArg.scala	/^  def apply(name: String, default: BigInt = 0, docstring: String = "", width: Int = 32): UInt = {$/;"	m
apply	src/main/scala/util/PrefixSum.scala	/^  def apply[T](summands: Seq[T])(associativeOp: (T, T) => T, layerOp: (Int, Vector[T]) => Vector[T] = idLayer[T] _): Vector[T]$/;"	m
apply	src/main/scala/util/PrefixSum.scala	/^  def apply[T](summands: Seq[T])(associativeOp: (T, T) => T, layerOp: (Int, Vector[T]) => Vector[T]): Vector[T] = {$/;"	m
apply	src/main/scala/util/Property.scala	/^  def apply(cond: Bool)(implicit sourceInfo: SourceInfo): Unit = {$/;"	m
apply	src/main/scala/util/Property.scala	/^  def apply(cond: Bool, label: String)(implicit sourceInfo: SourceInfo): Unit = {$/;"	m
apply	src/main/scala/util/Property.scala	/^  def apply(cond: Bool, label: String, message: String)(implicit sourceInfo: SourceInfo): Unit = {$/;"	m
apply	src/main/scala/util/Property.scala	/^  def apply(prop: BaseProperty)(implicit sourceInfo: SourceInfo): Unit = {$/;"	m
apply	src/main/scala/util/Property.scala	/^  def apply[T <: Data](rv: ReadyValidIO[T], label: String, message: String)(implicit sourceInfo: SourceInfo): Unit = {$/;"	m
apply	src/main/scala/util/ROMGenerator.scala	/^  def apply(c: ROMConfig): BlackBoxedROM = {$/;"	m
apply	src/main/scala/util/RationalCrossing.scala	/^  def apply[T <: Data](gen: T) = new RationalIO(gen)$/;"	m
apply	src/main/scala/util/RationalCrossing.scala	/^  def apply[T <: Data](x: DecoupledIO[T], direction: RationalDirection = Symmetric): RationalIO[T] = {$/;"	m
apply	src/main/scala/util/RationalCrossing.scala	/^  def apply[T <: Data](x: RationalIO[T], direction: RationalDirection = Symmetric): DecoupledIO[T] = {$/;"	m
apply	src/main/scala/util/ReadyValidCancel.scala	/^  def apply[T <: Data](gen: T): ReadyValidCancel[T] = new ReadyValidCancel(gen)$/;"	m
apply	src/main/scala/util/ReadyValidCancel.scala	/^  def apply[T <: Data](gen: T): ValidCancel[T] = new ValidCancel(gen)$/;"	m
apply	src/main/scala/util/ReadyValidCancel.scala	/^  def apply[T <: Data](in: ReadyValidIO[T]): ReadyValidCancel[T] = {$/;"	m
apply	src/main/scala/util/RecordMap.scala	/^  def apply(x: Int) = elements.values.toSeq(x)$/;"	m
apply	src/main/scala/util/RecordMap.scala	/^  def apply(x: String) = elements.get(x)$/;"	m
apply	src/main/scala/util/RecordMap.scala	/^  def apply[T <: Data](elements: (String, T)*): RecordMap[T] = {$/;"	m
apply	src/main/scala/util/RecordMap.scala	/^  def apply[T <: Data](eltMap: ListMap[String, T]) = new RecordMap(eltMap)$/;"	m
apply	src/main/scala/util/ReduceOthers.scala	/^  def apply(x: Seq[(Bool, Bool)]): Unit = {$/;"	m
apply	src/main/scala/util/ReduceOthers.scala	/^  def apply(x: Seq[Bool]): Seq[Bool] = {$/;"	m
apply	src/main/scala/util/Repeater.scala	/^  def apply[T <: Data](enq: DecoupledIO[T], repeat: Bool): DecoupledIO[T] = {$/;"	m
apply	src/main/scala/util/ResetCatchAndSync.scala	/^  def apply(clk: Clock, rst: Bool, name: String): Bool = apply(clk, rst, name = Some(name))$/;"	m
apply	src/main/scala/util/ResetCatchAndSync.scala	/^  def apply(clk: Clock, rst: Bool, name: String, psd: PSDTestMode): Bool =$/;"	m
apply	src/main/scala/util/ResetCatchAndSync.scala	/^  def apply(clk: Clock, rst: Bool, sync: Int = 3, name: Option[String] = None,$/;"	m
apply	src/main/scala/util/ResetCatchAndSync.scala	/^  def apply(clk: Clock, rst: Bool, sync: Int, name: String): Bool = apply(clk, rst, sync, Some(name))$/;"	m
apply	src/main/scala/util/ResetCatchAndSync.scala	/^  def apply(clk: Clock, rst: Bool, sync: Int, name: String, psd: PSDTestMode): Bool =$/;"	m
apply	src/main/scala/util/ScatterGather.scala	/^  def apply[T <: Data](data: Seq[T], holeSum: Seq[UInt], layerOp: (Int, Seq[T], Seq[UInt]) => (Seq[T], Seq[UInt]) = idLayer[T] _): Vec[T] = {$/;"	m
apply	src/main/scala/util/ScatterGather.scala	/^  def apply[T <: Data](data: Seq[ValidIO[T]]): Vec[T] = apply(data, DensePrefixSum)$/;"	m
apply	src/main/scala/util/ScatterGather.scala	/^  def apply[T <: Data](data: Seq[ValidIO[T]], prefixSum: PrefixSum): Vec[T] = {$/;"	m
apply	src/main/scala/util/ShiftQueue.scala	/^  def apply[T <: Data](enq: DecoupledIO[T], entries: Int = 2, pipe: Boolean = false, flow: Boolean = false): DecoupledIO[T] = {$/;"	m
apply	src/main/scala/util/ShiftReg.scala	/^  def apply [T <: Chisel.Data](gen: => AbstractPipelineReg, in: T, name: Option[String] = None): T = {$/;"	m
apply	src/main/scala/util/ShiftReg.scala	/^  def apply [T <: Chisel.Data](in: T, depth: Int, init: Int  = 0, name: Option[String] = None): T =$/;"	m
apply	src/main/scala/util/ShiftReg.scala	/^  def apply [T <: Chisel.Data](in: T, depth: Int, init: T): T =$/;"	m
apply	src/main/scala/util/ShiftReg.scala	/^  def apply [T <: Chisel.Data](in: T, depth: Int, init: T, name: Option[String]): T =$/;"	m
apply	src/main/scala/util/ShiftReg.scala	/^  def apply [T <: Chisel.Data](in: T, depth: Int, name: Option[String]): T =$/;"	m
apply	src/main/scala/util/ShiftReg.scala	/^  def apply[T <: Data](in: T, n: Int, init: T, name: Option[String] = None): T =$/;"	m
apply	src/main/scala/util/SynchronizerReg.scala	/^  def apply (in: Bool, sync: Int, init: Boolean, resetType: SynchronizerResetType.Value): Bool = {$/;"	m
apply	src/main/scala/util/SynchronizerReg.scala	/^  def apply [T <: Chisel.Data](in: T): T =$/;"	m
apply	src/main/scala/util/SynchronizerReg.scala	/^  def apply [T <: Chisel.Data](in: T, en: Bool, doInit: Boolean, name: Option[String] = None): T = {$/;"	m
apply	src/main/scala/util/SynchronizerReg.scala	/^  def apply [T <: Chisel.Data](in: T, sync: Int): T =$/;"	m
apply	src/main/scala/util/SynchronizerReg.scala	/^  def apply [T <: Chisel.Data](in: T, sync: Int, init: Int, name: Option[String] = None): T =$/;"	m
apply	src/main/scala/util/SynchronizerReg.scala	/^  def apply [T <: Chisel.Data](in: T, sync: Int, init: T): T =$/;"	m
apply	src/main/scala/util/SynchronizerReg.scala	/^  def apply [T <: Chisel.Data](in: T, sync: Int, init: T, name: Option[String]): T =$/;"	m
apply	src/main/scala/util/SynchronizerReg.scala	/^  def apply [T <: Chisel.Data](in: T, sync: Int, name: Option[String] = None): T =$/;"	m
apply	src/main/scala/util/SynchronizerReg.scala	/^  def apply [T <: Chisel.Data](in: T, sync: Int, name: Option[String]): T =$/;"	m
apply	src/main/scala/util/Timer.scala	/^  def apply(initCount: Int, start: Bool, stop: Bool): Bool = {$/;"	m
apply	src/main/scala/util/package.scala	/^    def apply(idx: UInt): T = {$/;"	m
applyCancel	src/main/scala/tilelink/Arbiter.scala	/^  def applyCancel[T <: Data](policy: Policy)(sink: ReadyValidCancel[T], sources: (UInt, ReadyValidCancel[T])*): Unit = {$/;"	m
applyDynamic	src/main/scala/util/Location.scala	/^  def applyDynamic[A](portname: String)(args: A*): (Location[A], A) = {$/;"	m
ar	src/main/scala/amba/axi4/Bundles.scala	/^  val ar = CreditedIO(new AXI4BundleAR(params))$/;"	l
ar	src/main/scala/amba/axi4/Bundles.scala	/^  val ar = Irrevocable(new AXI4BundleAR(params))$/;"	l
ar	src/main/scala/amba/axi4/Bundles.scala	/^  val ar = new AsyncBundle(new AXI4BundleAR(params.base), params.async)$/;"	l
ar	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val ar = io.ar$/;"	l
ar	src/main/scala/regmapper/Test.scala	/^  def ar(bits: Int) = combo(bits, always, random)$/;"	m
arFIFOMap	src/main/scala/amba/axi4/Xbar.scala	/^        val arFIFOMap = Wire(init = Vec.fill(endId) { Bool(true) })$/;"	l
arSel	src/main/scala/amba/axi4/Xbar.scala	/^        val arSel = UIntToOH(io_in(i).ar.bits.id, endId)$/;"	l
arTag	src/main/scala/amba/axi4/Xbar.scala	/^        val arTag = OHToUInt(requestARIO(i).asUInt, io_out.size)$/;"	l
ar_extra	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val ar_extra = Wire(in.bits.extra)$/;"	l
ar_ready	src/main/scala/amba/axi4/UserYanker.scala	/^      val ar_ready = Vec(rqueues.map(_.enq.ready))(arid)$/;"	l
arb	src/main/scala/amba/ahb/Test.scala	/^  val arb   = LazyModule(new AHBArbiter)$/;"	l
arb	src/main/scala/rocket/PTW.scala	/^  val arb = Module(new Arbiter(Valid(new PTWReq), n))$/;"	l
arbitrate	src/main/scala/amba/axis/Xbar.scala	/^  def arbitrate(policy: TLArbiter.Policy)(sink: AXISBundle, sources: Seq[AXISBundle]): Unit = {$/;"	m
arg	src/main/scala/linting/rule/LintRule.scala	/^    val arg = files.mkString(",")$/;"	l
args	scripts/vlsi_mem_gen	/^  args = parser.parse_args()$/;"	v
arid	src/main/scala/amba/axi4/UserYanker.scala	/^      val arid = in.ar.bits.id$/;"	l
arith	src/main/scala/rocket/RVC.scala	/^    def arith = {$/;"	m
arith_out	src/main/scala/tilelink/AtomicAutomata.scala	/^        val arith_out = Mux(adder, adder_out, Mux(pick_a, a_a, a_d))$/;"	l
arithmetic	src/main/scala/tilelink/Parameters.scala	/^  def arithmetic: TransferSizes$/;"	m
arnoise	src/main/scala/amba/axi4/Delayer.scala	/^      val arnoise = Wire(in.ar.bits)$/;"	l
array	src/main/scala/util/CRC.scala	/^    val array = Array.tabulate(m) { BigInt(1) << _ }$/;"	l
arsel	src/main/scala/amba/axi4/UserYanker.scala	/^      val arsel = UIntToOH(arid, edgeIn.master.endId).asBools$/;"	l
arth_op	src/main/scala/tilelink/Fuzzer.scala	/^    val arth_op   = Mux(arth_op_3 > UInt(4), UInt(4), arth_op_3)$/;"	l
arth_op_3	src/main/scala/tilelink/Fuzzer.scala	/^    val arth_op_3 = noiseMaker(3, inc, 0)$/;"	l
arw	src/main/scala/tilelink/ToAXI4.scala	/^      val arw = out_arw.bits$/;"	l
asBool	src/main/scala/diplomacy/Parameters.scala	/^  implicit def asBool(x: TransferSizes) = !x.none$/;"	m
asDecoupled	src/main/scala/tilelink/Bundle_ACancel.scala	/^  def asDecoupled(): TLBundle = {$/;"	m
asDecoupled	src/main/scala/util/ReadyValidCancel.scala	/^  def asDecoupled(): DecoupledIO[T] = {$/;"	m
asIdBits	src/main/scala/tile/BaseTile.scala	/^  def asIdBits: Int = p(ASIdBits)$/;"	m
asProperty	src/main/scala/diplomacy/package.scala	/^    def asProperty: Seq[ResourceValue] = Seq(ResourceInt(BigInt(x)))$/;"	m
asProperty	src/main/scala/diplomacy/package.scala	/^    def asProperty: Seq[ResourceValue] = Seq(ResourceInt(x))$/;"	m
asProperty	src/main/scala/diplomacy/package.scala	/^    def asProperty: Seq[ResourceValue] = Seq(ResourceReference(x.label))$/;"	m
asProperty	src/main/scala/diplomacy/package.scala	/^    def asProperty: Seq[ResourceValue] = Seq(ResourceString(x))$/;"	m
asSinkParams	src/main/scala/diplomacy/ClockDomain.scala	/^  def asSinkParams = AsyncQueueParams(depth, sinkSync, safe, narrow)$/;"	m
asUInt	src/main/scala/util/package.scala	/^    def asUInt(): UInt = Cat(x.map(_.asUInt).reverse)$/;"	m
asid	src/main/scala/rocket/CSR.scala	/^  val asid = UInt(width = maxASIdBits)$/;"	l
asid	src/main/scala/rocket/TLB.scala	/^  val asid = UInt(width = asIdBits max 1) \/\/ TODO zero-width$/;"	l
asink	src/main/scala/tilelink/AsyncCrossing.scala	/^    val asink = LazyModule(new TLAsyncCrossingSink(params))$/;"	l
asource	src/main/scala/tilelink/AsyncCrossing.scala	/^    val asource = LazyModule(new TLAsyncCrossingSource(sync))$/;"	l
assertHighest	src/main/scala/tilelink/Arbiter.scala	/^  def assertHighest(id: Int): Unit = {$/;"	m
assertLowest	src/main/scala/tilelink/Arbiter.scala	/^  def assertLowest(id: Int): Unit = {$/;"	m
assertion	src/main/scala/regmapper/RegisterCrossing.scala	/^  val assertion = Module(new RegisterCrossingAssertion)$/;"	l
assignL	src/main/scala/util/BundleMap.scala	/^  def assignL(that: CustomBulkAssignable): Unit = { \/\/ this\/bx :<= that\/by$/;"	m
assignL	src/main/scala/util/BundleMap.scala	/^  def assignL(that: CustomBulkAssignable): Unit \/\/ Custom implementation of :<=$/;"	m
assignL	src/main/scala/util/BundleMap.scala	/^  def assignL(x: Data, y: Data): Unit = {$/;"	m
assignR	src/main/scala/util/BundleMap.scala	/^  def assignR(that: CustomBulkAssignable): Unit = { \/\/ this\/bx :=> that\/by$/;"	m
assignR	src/main/scala/util/BundleMap.scala	/^  def assignR(that: CustomBulkAssignable): Unit \/\/ Custom implementaiton of :=>$/;"	m
assignR	src/main/scala/util/BundleMap.scala	/^  def assignR(x: Data, y: Data) = {$/;"	m
assignRanges	src/main/scala/tilelink/Xbar.scala	/^  def assignRanges(sizes: Seq[Int]) = {$/;"	m
assume	src/main/scala/tilelink/Monitor.scala	/^  def assume(cond: Bool, message: String): Unit =$/;"	m
async	src/main/scala/regmapper/DescribedReg.scala	/^  def async($/;"	m
async	src/main/scala/util/AsyncQueue.scala	/^    val async = Flipped(new AsyncBundle(gen, params))$/;"	l
async	src/main/scala/util/AsyncQueue.scala	/^    val async = new AsyncBundle(gen, params)$/;"	l
asyncClockGroupsNode	src/main/scala/subsystem/Attachable.scala	/^  implicit val asyncClockGroupsNode: ClockGroupEphemeralNode$/;"	l
asyncClockGroupsNode	src/main/scala/subsystem/BaseSubsystem.scala	/^  implicit val asyncClockGroupsNode = p(AsyncClockGroupsKey)$/;"	l
asyncMux	src/main/scala/prci/package.scala	/^  def asyncMux[T](xType: ClockCrossingType, async: T, notasync: T): T = xType match {$/;"	m
async_ips	src/main/scala/tile/Interrupts.scala	/^    val async_ips = Seq(core.debug)$/;"	l
async_slave_reg	src/main/scala/regmapper/RegisterCrossing.scala	/^    val async_slave_reg = Module(new AsyncResetRegVec(width, init))$/;"	l
atLeastMaxVLMax	src/main/scala/rocket/CSR.scala	/^    val atLeastMaxVLMax = useMax || Mux(useCurrentVL, currentVL >= maxVLMax, avl >= maxVLMax)$/;"	l
atLeastTwo	src/main/scala/util/HellaQueue.scala	/^  val atLeastTwo = full || enq_ptr - deq_ptr >= UInt(2)$/;"	l
atLeastVLMax	src/main/scala/rocket/CSR.scala	/^    val atLeastVLMax = atLeastMaxVLMax || (avl_lsbs & (-maxVLMax.S >> (this.vsew +& Cat(this.vlmul_sign, ~this.vlmul_mag))).asUInt.andNot(minVLMax-1)).orR$/;"	l
atlNode	src/main/scala/tile/LazyRoCC.scala	/^  val atlNode: TLNode = TLIdentityNode()$/;"	l
atom	src/main/scala/devices/tilelink/DevNull.scala	/^  val atom = if (params.maxAtomic > 0) TransferSizes(1, params.maxAtomic) else TransferSizes.none$/;"	l
atomics	src/main/scala/rocket/DCache.scala	/^  val atomics = if (edge.manager.anySupportLogical) {$/;"	l
atomics	src/main/scala/rocket/NBDcache.scala	/^  val atomics = if (edge.manager.anySupportLogical) {$/;"	l
atomics	src/main/scala/tilelink/AtomicAutomata.scala	/^    val atomics = LazyModule(new TLAtomicAutomata(logical, arithmetic, concurrency, passthrough))$/;"	l
attach	src/main/scala/devices/debug/Debug.scala	/^      val attach = Map($/;"	l
attach	src/main/scala/devices/tilelink/BootROM.scala	/^  def attach(params: BootROMParams, subsystem: BaseSubsystem with HasTiles, where: TLBusWrapperLocation)$/;"	m
attach	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^  def attach($/;"	m
attach	src/main/scala/devices/tilelink/MaskROM.scala	/^  def attach(params: MaskROMParams, subsystem: Attachable, where: TLBusWrapperLocation)$/;"	m
atzero	src/main/scala/devices/debug/Debug.scala	/^  def atzero = (baseAddress == 0)$/;"	m
auth	src/main/scala/devices/debug/Debug.scala	/^      val auth = cfg.hasAuthentication.option(new DebugAuthenticationIO())$/;"	l
auth	src/main/scala/devices/debug/Debug.scala	/^      val auth = p(DebugModuleKey).get.hasAuthentication.option(new DebugAuthenticationIO())$/;"	l
authRdEnMaybe	src/main/scala/devices/debug/Debug.scala	/^    val authRdEnMaybe = WireInit(false.B)$/;"	l
authWrEnMaybe	src/main/scala/devices/debug/Debug.scala	/^    val authWrEnMaybe = WireInit(false.B)$/;"	l
authbusy	src/main/scala/devices/debug/dm_registers.scala	/^  val authbusy = Bool()$/;"	l
authenticated	src/main/scala/devices/debug/dm_registers.scala	/^  val authenticated = Bool()$/;"	l
auto	src/main/scala/diplomacy/LazyModule.scala	/^    val auto = IO(new AutoBundle(forward.map { d => (d.name, d.data, d.flipped) }: _*))$/;"	l
auto	src/main/scala/diplomacy/LazyModule.scala	/^  val auto: AutoBundle$/;"	l
autoIncrementedAddr	src/main/scala/devices/debug/SBA.scala	/^    val autoIncrementedAddr = WireInit(0.U(128.W))$/;"	l
autoexec	src/main/scala/devices/debug/Debug.scala	/^    val autoexec = autoexecData.reduce(_ || _) || autoexecProg.reduce(_ || _)$/;"	l
autoexecData	src/main/scala/devices/debug/Debug.scala	/^    val autoexecData  = WireInit(VecInit(Seq.fill(cfg.nAbstractDataWords) {false.B} ))$/;"	l
autoexecProg	src/main/scala/devices/debug/Debug.scala	/^    val autoexecProg  = WireInit(VecInit(Seq.fill(cfg.nProgramBufferWords) {false.B} ))$/;"	l
autoexecdata	src/main/scala/devices/debug/dm_registers.scala	/^  val autoexecdata = UInt(12.W)$/;"	l
autoexecdataWrEnMaybe	src/main/scala/devices/debug/Debug.scala	/^    val autoexecdataWrEnMaybe = WireInit(false.B)$/;"	l
autoexecprogbuf	src/main/scala/devices/debug/dm_registers.scala	/^  val autoexecprogbuf = UInt(16.W)$/;"	l
autoexecprogbufWrEnMaybe	src/main/scala/devices/debug/Debug.scala	/^    val autoexecprogbufWrEnMaybe = WireInit(false.B)$/;"	l
aux	src/main/scala/tile/BaseTile.scala	/^    val aux = Wire(new TraceAux)$/;"	l
aux_count	src/main/scala/rocket/PTW.scala	/^  val aux_count = Reg(UInt(log2Ceil(pgLevels).W))$/;"	l
aux_pte	src/main/scala/rocket/PTW.scala	/^  val aux_pte = Reg(new PTE)$/;"	l
available	src/main/scala/groundtest/TraceGen.scala	/^    val available = Bool(OUTPUT)$/;"	l
avl_lsbs	src/main/scala/rocket/CSR.scala	/^    val avl_lsbs = Mux(useCurrentVL, currentVL, avl)(maxVLMax.log2 - 1, 0)$/;"	l
aw	src/main/scala/amba/axi4/Bundles.scala	/^  val aw = CreditedIO(new AXI4BundleAW(params))$/;"	l
aw	src/main/scala/amba/axi4/Bundles.scala	/^  val aw = Irrevocable(new AXI4BundleAW(params))$/;"	l
aw	src/main/scala/amba/axi4/Bundles.scala	/^  val aw = new AsyncBundle(new AXI4BundleAW(params.base), params.async)$/;"	l
aw	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val aw = io.aw$/;"	l
awFIFOMap	src/main/scala/amba/axi4/Xbar.scala	/^        val awFIFOMap = Wire(init = Vec.fill(endId) { Bool(true) })$/;"	l
awIn	src/main/scala/amba/axi4/Xbar.scala	/^    val awIn  = Seq.fill(io_in .size) { Module(new Queue(UInt(width = io_out.size), awQueueDepth, flow = true)) }$/;"	l
awOut	src/main/scala/amba/axi4/Xbar.scala	/^    val awOut = Seq.fill(io_out.size) { Module(new Queue(UInt(width = io_in .size), awQueueDepth, flow = true)) }$/;"	l
awSel	src/main/scala/amba/axi4/Xbar.scala	/^        val awSel = UIntToOH(io_in(i).aw.bits.id, endId)$/;"	l
awTag	src/main/scala/amba/axi4/Xbar.scala	/^        val awTag = OHToUInt(requestAWIO(i).asUInt, io_out.size)$/;"	l
aw_extra	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val aw_extra = Wire(in.bits.extra)$/;"	l
aw_ready	src/main/scala/amba/axi4/UserYanker.scala	/^      val aw_ready = Vec(wqueues.map(_.enq.ready))(awid)$/;"	l
awid	src/main/scala/amba/axi4/UserYanker.scala	/^      val awid = in.aw.bits.id$/;"	l
awnoise	src/main/scala/amba/axi4/Delayer.scala	/^      val awnoise = Wire(in.aw.bits)$/;"	l
awsel	src/main/scala/amba/axi4/UserYanker.scala	/^      val awsel = UIntToOH(awid, edgeIn.master.endId).asBools$/;"	l
axi42tl	src/main/scala/amba/axi4/ToTL.scala	/^    val axi42tl = LazyModule(new AXI4ToTL(wcorrupt))$/;"	l
axi4InXing	src/main/scala/subsystem/CrossingWrapper.scala	/^    val axi4InXing = this.crossIn(n)$/;"	l
axi4Masters	src/main/scala/tilelink/ToAXI4.scala	/^  val axi4Masters = axi4IdStart.zip(axi4IdSize).zip(tlMasters).map { case ((start, size), tl) =>$/;"	l
axi4OutXing	src/main/scala/subsystem/CrossingWrapper.scala	/^    val axi4OutXing = this.crossOut(n)$/;"	l
axi4asink	src/main/scala/amba/axi4/AsyncCrossing.scala	/^    val axi4asink = LazyModule(new AXI4AsyncCrossingSink(params))$/;"	l
axi4asource	src/main/scala/amba/axi4/AsyncCrossing.scala	/^    val axi4asource = LazyModule(new AXI4AsyncCrossingSource(sync))$/;"	l
axi4buf	src/main/scala/amba/axi4/Buffer.scala	/^    val axi4buf = LazyModule(new AXI4Buffer(aw, w, b, ar, r))$/;"	l
axi4deint	src/main/scala/amba/axi4/Deinterleaver.scala	/^    val axi4deint = LazyModule(new AXI4Deinterleaver(maxReadBytes, buffer))$/;"	l
axi4delay	src/main/scala/amba/axi4/Delayer.scala	/^    val axi4delay = LazyModule(new AXI4Delayer(q))$/;"	l
axi4filt	src/main/scala/amba/axi4/Filter.scala	/^    val axi4filt = LazyModule(new AXI4Filter(Sfilter, Mfilter))$/;"	l
axi4frag	src/main/scala/amba/axi4/Fragmenter.scala	/^    val axi4frag = LazyModule(new AXI4Fragmenter)$/;"	l
axi4index	src/main/scala/amba/axi4/IdIndexer.scala	/^    val axi4index = LazyModule(new AXI4IdIndexer(idBits))$/;"	l
axi4ram	src/main/scala/amba/axi4/SRAM.scala	/^    val axi4ram = LazyModule(new AXI4RAM($/;"	l
axi4xbar	src/main/scala/amba/axi4/Xbar.scala	/^    val axi4xbar = LazyModule(new AXI4Xbar(arbitrationPolicy, maxFlightPerId, awQueueDepth))$/;"	l
axi4yank	src/main/scala/amba/axi4/UserYanker.scala	/^    val axi4yank = LazyModule(new AXI4UserYanker(capMaxFlight))$/;"	l
b	src/main/scala/amba/axi4/Bundles.scala	/^  val b  = CreditedIO(new AXI4BundleB (params)).flip$/;"	l
b	src/main/scala/amba/axi4/Bundles.scala	/^  val b  = Irrevocable(new AXI4BundleB (params)).flip$/;"	l
b	src/main/scala/amba/axi4/Bundles.scala	/^  val b  = new AsyncBundle(new AXI4BundleB (params.base), params.async).flip$/;"	l
b	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val b  = io.b$/;"	l
b	src/main/scala/tile/BaseTile.scala	/^    val b = if (tileParams.core.useBitManip) "b" else ""$/;"	l
b	src/main/scala/tile/FPU.scala	/^        val b = Bits(INPUT, expWidth + sigWidth + 1)$/;"	l
b	src/main/scala/tilelink/Bundle_ACancel.scala	/^  val b = Flipped(Decoupled(new TLBundleB(params)))$/;"	l
b	src/main/scala/tilelink/Bundles.scala	/^  def b = Seq( ("PutFullData",TLPermissions.PermMsgReserved),$/;"	m
b	src/main/scala/tilelink/Bundles.scala	/^  def b: DecoupledIO[TLBundleB] = optB.getOrElse(Wire(Decoupled(new TLBundleB(params))))$/;"	m
b	src/main/scala/tilelink/Bundles.scala	/^  val b = CreditedIO(new TLBundleB(params)).flip$/;"	l
b	src/main/scala/tilelink/Bundles.scala	/^  val b = RationalIO(new TLBundleB(params)).flip$/;"	l
b	src/main/scala/tilelink/Bundles.scala	/^  val b = new AsyncBundle(new TLBundleB(params.base), params.async).flip$/;"	l
b	src/main/scala/tilelink/Edges.scala	/^    val b = Wire(new TLBundleB(bundle))$/;"	l
b	src/main/scala/util/SimpleProduct.scala	/^    val b = new StringBuilder(productPrefix)$/;"	l
b0	src/main/scala/rocket/RocketCore.scala	/^    val b0 = Mux(sel === IMM_S, inst(7),$/;"	l
b0_mask	src/main/scala/util/LanePositionedQueue.scala	/^  val b0_mask = Mux(enq_row(0), hi_mask, lo_mask).asBools$/;"	l
b0_out	src/main/scala/util/LanePositionedQueue.scala	/^  val b0_out = bank(0).read(deq_row1 >> 1)$/;"	l
b0_row	src/main/scala/util/LanePositionedQueue.scala	/^  val b0_row  = enq_row1 >> 1$/;"	l
b10_5	src/main/scala/rocket/RocketCore.scala	/^    val b10_5 = Mux(sel === IMM_U || sel === IMM_Z, Bits(0), inst(30,25))$/;"	l
b11	src/main/scala/rocket/RocketCore.scala	/^    val b11 = Mux(sel === IMM_U || sel === IMM_Z, SInt(0),$/;"	l
b19_12	src/main/scala/rocket/RocketCore.scala	/^    val b19_12 = Mux(sel =\/= IMM_U && sel =\/= IMM_UJ, sign, inst(19,12).asSInt)$/;"	l
b1_mask	src/main/scala/util/LanePositionedQueue.scala	/^  val b1_mask = Mux(enq_row(0), lo_mask, hi_mask).asBools$/;"	l
b1_out	src/main/scala/util/LanePositionedQueue.scala	/^  val b1_out = bank(1).read(deq_row  >> 1)$/;"	l
b1_row	src/main/scala/util/LanePositionedQueue.scala	/^  val b1_row  = enq_row  >> 1$/;"	l
b30_20	src/main/scala/rocket/RocketCore.scala	/^    val b30_20 = Mux(sel === IMM_U, inst(30,20).asSInt, sign)$/;"	l
b4_1	src/main/scala/rocket/RocketCore.scala	/^    val b4_1 = Mux(sel === IMM_U, Bits(0),$/;"	l
bDataNo	src/main/scala/tilelink/Edges.scala	/^        val bDataNo  = client.anySupportProbe || client.anySupportGet || client.anySupportHint$/;"	l
bDataYes	src/main/scala/tilelink/Edges.scala	/^        val bDataYes = client.anySupportArithmetic || client.anySupportLogical || client.anySupportPutFull || client.anySupportPutPartial$/;"	l
bImm	src/main/scala/rocket/RVC.scala	/^  def bImm = Cat(Fill(5, x(12)), x(6,5), x(2), x(11,10), x(4,3), 0.U(1.W))$/;"	m
bSel	src/main/scala/amba/axi4/Xbar.scala	/^        val bSel  = UIntToOH(io_in(i).b .bits.id, endId)$/;"	l
b_addr	src/main/scala/tilelink/RegionReplication.scala	/^      val b_addr = out.b.bits.address$/;"	l
b_allow	src/main/scala/amba/axi4/ToTL.scala	/^      val b_allow = b_count(in.b.bits.id) =\/= w_count(in.b.bits.id)$/;"	l
b_bits	src/main/scala/amba/axi4/UserYanker.scala	/^      val b_bits = Vec(wqueues.map(_.deq.bits))(bid)$/;"	l
b_contained	src/main/scala/tilelink/RegionReplication.scala	/^      val b_contained = params.region.contains(b_addr) || totalContainment.B$/;"	l
b_count	src/main/scala/amba/axi4/ToTL.scala	/^      val b_count = RegInit(Vec.fill(numIds) { UInt(0, width = txnCountBits) })$/;"	l
b_d	src/main/scala/tilelink/ToAXI4.scala	/^      val b_d = edgeIn.AccessAck(b_source, b_size, denied = b_denied)$/;"	l
b_dec	src/main/scala/tilelink/Edges.scala	/^    val b_dec = x.b.fire() && b_last && b_response$/;"	l
b_delay	src/main/scala/tilelink/ToAXI4.scala	/^      val b_delay = Reg(UInt(width=3))$/;"	l
b_denied	src/main/scala/tilelink/ToAXI4.scala	/^      val b_denied  = out.b.bits.resp =\/= AXI4Parameters.RESP_OKAY$/;"	l
b_first	src/main/scala/tilelink/Monitor.scala	/^    val b_first = edge.first(b.bits, b.fire())$/;"	l
b_inc	src/main/scala/tilelink/Edges.scala	/^    val b_inc = x.b.fire() && b_first && b_request$/;"	l
b_last	src/main/scala/amba/axi4/Fragmenter.scala	/^      val b_last = out.b.bits.echo(AXI4FragLast)$/;"	l
b_sel	src/main/scala/amba/axi4/ToTL.scala	/^      val b_sel = UIntToOH(in.b.bits.id, numIds)$/;"	l
b_size	src/main/scala/tilelink/ToAXI4.scala	/^      val b_size    = b_state.size$/;"	l
b_source	src/main/scala/tilelink/ToAXI4.scala	/^      val b_source  = b_state.source$/;"	l
b_state	src/main/scala/tilelink/ToAXI4.scala	/^      val b_state = out.b.bits.echo(AXI4TLState)$/;"	l
b_valid	src/main/scala/amba/axi4/UserYanker.scala	/^      val b_valid = Vec(wqueues.map(_.deq.valid))(bid)$/;"	l
back	src/main/scala/regmapper/RegMapper.scala	/^    val back = if (depth > 0) Queue(front, depth) else front$/;"	l
backMask	src/main/scala/regmapper/RegMapper.scala	/^    val backMask  = FillInterleaved(8, back .bits.mask)$/;"	l
backSel	src/main/scala/regmapper/RegMapper.scala	/^    val backSel  = UIntToOH(oindex).asBools$/;"	l
backward	src/main/scala/tilelink/Map.scala	/^      def backward(x: UInt) =$/;"	m
bad	src/main/scala/amba/axi4/Fragmenter.scala	/^        val bad = fixed || narrow$/;"	l
bad	src/main/scala/devices/tilelink/TestRAM.scala	/^    val bad = Mem(1 << addrBits.size, Bool())$/;"	l
badVA	src/main/scala/rocket/TLB.scala	/^  def badVA(guestPA: Boolean): Bool = {$/;"	m
bad_gpa	src/main/scala/rocket/TLB.scala	/^  val bad_gpa =$/;"	l
bad_va	src/main/scala/rocket/TLB.scala	/^  val bad_va =$/;"	l
bagOfAddrs	src/main/scala/groundtest/TraceGen.scala	/^  val bagOfAddrs = addressBag.map(x => UInt(memStart + x, pAddrBits))$/;"	l
bank	src/main/scala/util/LanePositionedQueue.scala	/^  val bank = Seq.fill(2) { Mem(rows\/2, Vec(lanes, gen)) }$/;"	l
banks	src/main/scala/tilelink/ProbePicker.scala	/^            val banks = edgeIn.client.clients.filter(c.sourceId contains _.sourceId)$/;"	l
barrier	src/main/scala/util/package.scala	/^    val barrier = Module(new Module {$/;"	l
base	src/main/scala/devices/debug/Debug.scala	/^      val base = Mux(accessRegisterCommandReg.regno(0), 8.U, 9.U)     \/\/ use s0 as base for odd regs, s1 as base for even regs$/;"	l
base	src/main/scala/devices/debug/Debug.scala	/^      val base = if (cfg.atzero) 0.U else Mux(accessRegisterCommandReg.regno(0), 8.U, 9.U)$/;"	l
base	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^  def base: BigInt$/;"	m
base	src/main/scala/rocket/CSR.scala	/^    val base = Mux(delegate, Mux(delegateVS, read_vstvec, read_stvec), read_mtvec)$/;"	l
base	src/main/scala/rocket/PMP.scala	/^    val base = Cat(addr, cfg.a(0)) | ((pmpGranularity - 1) >> lgAlign)$/;"	l
base	src/main/scala/rocket/TLB.scala	/^        val base = (pgLevels - 1 - j) * pgLevelBits$/;"	l
base	src/main/scala/subsystem/Ports.scala	/^      val base = AddressSet.misaligned(memPortParams.base, memPortParams.size)$/;"	l
base	src/main/scala/tilelink/RAMModel.scala	/^    val base    = UInt(width = params.addressBits)$/;"	l
base	src/main/scala/tilelink/RegisterRouter.scala	/^     val base:        BigInt,$/;"	l
base	src/main/scala/tilelink/RegisterRouter.scala	/^    val base = address.head.base$/;"	l
baseAddr	src/main/scala/rocket/DCache.scala	/^      val baseAddr = p(LookupByHartId)(_.dcache.flatMap(_.scratch.map(_.U)), io_hartid.get) | io_mmio_address_prefix.get$/;"	l
baseAddressBytes	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val baseAddressBytes = addressSets.map(_.base).reduceLeft(_ min _)$/;"	l
baseHex	src/main/scala/tilelink/RegisterRouter.scala	/^    val baseHex = s"0x${base.toInt.toHexString}"$/;"	l
baseHex	src/main/scala/util/Annotations.scala	/^    val baseHex = s"0x${baseAddress.toInt.toHexString}"$/;"	l
baseISAVersion	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^    val baseISAVersion = baseInstructionSet match {$/;"	l
baseInstructionSet	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^    val baseInstructionSet = xLen match {$/;"	l
baseSpec	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^    val baseSpec = BaseExtensions.specVersion _$/;"	l
base_address	src/main/scala/rocket/ICache.scala	/^     val base_address = address.head.base$/;"	l
base_dir	emulator/Makefile	/^base_dir = $(abspath ..)$/;"	m
base_dir	regression/Makefile	/^base_dir = $(abspath ..)$/;"	m
base_dir	scripts/Makefile	/^base_dir = $(abspath ..)$/;"	m
base_dir	vsim/Makefile	/^base_dir = $(abspath ..)$/;"	m
bb	src/main/scala/regmapper/Test.scala	/^  def bb(bits: Int) = request(bits, busy, busy)$/;"	m
bcResponse	src/main/scala/tilelink/Bundles.scala	/^  def bcResponse = Vec(AccessAck, AccessAck, AccessAckData, AccessAckData, AccessAckData, HintAck, ProbeAck, ProbeAck)$/;"	m
bce	src/main/scala/tilelink/AsyncCrossing.scala	/^      val bce = edgeIn.manager.anySupportAcquireB && edgeIn.client.anySupportProbe$/;"	l
bce	src/main/scala/tilelink/AsyncCrossing.scala	/^      val bce = edgeOut.manager.anySupportAcquireB && edgeOut.client.anySupportProbe$/;"	l
bce	src/main/scala/tilelink/Edges.scala	/^    val bce = manager.anySupportAcquireB && client.anySupportProbe$/;"	l
bce	src/main/scala/tilelink/RationalCrossing.scala	/^      val bce = edgeIn.manager.anySupportAcquireB && edgeIn.client.anySupportProbe$/;"	l
bce	src/main/scala/tilelink/RationalCrossing.scala	/^      val bce = edgeOut.manager.anySupportAcquireB && edgeOut.client.anySupportProbe$/;"	l
bdWidth	src/main/scala/tilelink/Bundles.scala	/^  val bdWidth = 2$/;"	l
beat	src/main/scala/amba/ahb/ToTL.scala	/^      val beat = TransferSizes(1, beatBytes)$/;"	l
beat	src/main/scala/amba/apb/ToTL.scala	/^      val beat = TransferSizes(beatBytes, beatBytes)$/;"	l
beatBits	src/main/scala/tilelink/BusWrapper.scala	/^  def beatBits: Int = beatBytes * 8$/;"	m
beatBytes	src/main/scala/amba/ahb/ToTL.scala	/^      val beatBytes = edgeOut.manager.beatBytes$/;"	l
beatBytes	src/main/scala/amba/apb/ToTL.scala	/^      val beatBytes = edgeOut.manager.beatBytes$/;"	l
beatBytes	src/main/scala/amba/axi4/Fragmenter.scala	/^      val beatBytes = slave.beatBytes$/;"	l
beatBytes	src/main/scala/amba/axi4/ToTL.scala	/^      val beatBytes = edgeOut.manager.beatBytes$/;"	l
beatBytes	src/main/scala/amba/axis/Parameters.scala	/^  val beatBytes = slave.beatBytes.getOrElse(master.beatBytes.get)$/;"	l
beatBytes	src/main/scala/amba/axis/Parameters.scala	/^  val beatBytes:     Option[Int])$/;"	l
beatBytes	src/main/scala/amba/axis/Parameters.scala	/^  val beatBytes:    Option[Int])$/;"	l
beatBytes	src/main/scala/devices/tilelink/MaskROM.scala	/^  val beatBytes = c.width\/8$/;"	l
beatBytes	src/main/scala/regmapper/RegisterRouter.scala	/^  val beatBytes = devParams.beatBytes$/;"	l
beatBytes	src/main/scala/rocket/HellaCache.scala	/^  def beatBytes = cacheBlockBytes \/ cacheDataBeats$/;"	m
beatBytes	src/main/scala/tilelink/AtomicAutomata.scala	/^      val beatBytes = edgeOut.manager.beatBytes$/;"	l
beatBytes	src/main/scala/tilelink/BusWrapper.scala	/^  def beatBytes = params.beatBytes$/;"	m
beatBytes	src/main/scala/tilelink/BusWrapper.scala	/^  def beatBytes: Int$/;"	m
beatBytes	src/main/scala/tilelink/Fragmenter.scala	/^        val beatBytes = manager.beatBytes$/;"	l
beatBytes	src/main/scala/tilelink/Fuzzer.scala	/^    val beatBytes    = edge.manager.beatBytes$/;"	l
beatBytes	src/main/scala/tilelink/Parameters.scala	/^  def beatBytes = {$/;"	m
beatBytes	src/main/scala/tilelink/RAMModel.scala	/^      val beatBytes    = edge.manager.beatBytes$/;"	l
beatBytes	src/main/scala/tilelink/RegisterRouter.scala	/^     val beatBytes:   Int     = 4,$/;"	l
beatBytes	src/main/scala/tilelink/ToAHB.scala	/^      val beatBytes = edgeOut.slave.beatBytes$/;"	l
beatBytes	src/main/scala/tilelink/ToAPB.scala	/^      val beatBytes = edgeOut.slave.beatBytes$/;"	l
beatBytes	src/main/scala/tilelink/ToAXI4.scala	/^      val beatBytes = edgeIn.manager.beatBytes$/;"	l
beatCountBits	src/main/scala/amba/axi4/ToTL.scala	/^      val beatCountBits = AXI4Parameters.lenBits + (1 << AXI4Parameters.sizeBits) - 1$/;"	l
beatOffBits	src/main/scala/rocket/HellaCache.scala	/^  def beatOffBits = log2Up(beatBytes)$/;"	m
beatOffset	src/main/scala/rocket/NBDcache.scala	/^  def beatOffset(addr: UInt) = addr.extract(beatOffBits - 1, wordOffBits)$/;"	m
beatWords	src/main/scala/rocket/HellaCache.scala	/^  def beatWords = beatBytes \/ wordBytes$/;"	m
beat_amo	src/main/scala/tilelink/RAMModel.scala	/^        val beat_amo = a.size <= UInt(log2Ceil(beatBytes))$/;"	l
beats	src/main/scala/amba/axi4/Deinterleaver.scala	/^      val beats = maxBeats(edgeOut.slave)$/;"	l
beats	src/main/scala/amba/axi4/Fragmenter.scala	/^        val beats = OH1ToOH(beats1) \/\/ beats1 + 1$/;"	l
beats1	src/main/scala/amba/axi4/Fragmenter.scala	/^        val beats1 = Mux(bad, UInt(0), maxSupported1)$/;"	l
beats1	src/main/scala/tilelink/Edges.scala	/^    val beats1   = numBeats1(bits)$/;"	l
beatsAI	src/main/scala/tilelink/Xbar.scala	/^    val beatsAI = (in  zip edgesIn)  map { case (i, e) => e.numBeats1(i.a.bits) }$/;"	l
beatsBO	src/main/scala/tilelink/Xbar.scala	/^    val beatsBO = (out zip edgesOut) map { case (o, e) => e.numBeats1(o.b.bits) }$/;"	l
beatsBeforeEnd	src/main/scala/rocket/DCache.scala	/^    val beatsBeforeEnd = outer.crossing match {$/;"	l
beatsCI	src/main/scala/tilelink/Xbar.scala	/^    val beatsCI = (in  zip edgesIn)  map { case (i, e) => e.numBeats1(i.c.bits) }$/;"	l
beatsDO	src/main/scala/tilelink/Xbar.scala	/^    val beatsDO = (out zip edgesOut) map { case (o, e) => e.numBeats1(o.d.bits) }$/;"	l
beatsEI	src/main/scala/tilelink/Xbar.scala	/^    val beatsEI = (in  zip edgesIn)  map { case (i, e) => e.numBeats1(i.e.bits) }$/;"	l
beatsIn	src/main/scala/tilelink/Arbiter.scala	/^      val beatsIn = pairs.map(_._1)$/;"	l
beatsLeft	src/main/scala/tilelink/Arbiter.scala	/^      val beatsLeft = RegInit(0.U)$/;"	l
beatsLeft	src/main/scala/tilelink/Arbiter.scala	/^  val beatsLeft  = RegInit(0.U(log2Ceil(numSources).W))$/;"	l
beginsAfterLower	src/main/scala/rocket/PMP.scala	/^    val beginsAfterLower = !(x < prev.comparand)$/;"	l
beginsAfterUpper	src/main/scala/rocket/PMP.scala	/^    val beginsAfterUpper = !(x < comparand)$/;"	l
benchmarks	src/main/scala/system/RocketTestSuite.scala	/^  val benchmarks = new BenchmarkTestSuite("rvi", "$(RISCV)\/riscv64-unknown-elf\/share\/riscv-tests\/benchmarks", LinkedHashSet($/;"	l
beqz	src/main/scala/rocket/RVC.scala	/^    def beqz = inst(Cat(bImm(12), bImm(10,5), x0, rs1p, 0.U(3.W), bImm(4,1), bImm(11), 0x63.U(7.W)), rs1p, rs1p, x0)$/;"	m
beu	src/main/scala/tile/RocketTile.scala	/^    val beu = LazyModule(new BusErrorUnit(new L1BusErrors, BusErrorUnitParams(a), logicalTreeNode))$/;"	l
beuAddr	src/main/scala/groundtest/TraceGen.scala	/^  val beuAddr = None$/;"	l
beuAddr	src/main/scala/tile/BaseTile.scala	/^  val beuAddr: Option[BigInt]$/;"	l
beuProperty	src/main/scala/tile/RocketTile.scala	/^  val beuProperty = bus_error_unit.map(d => Map($/;"	l
bh	src/main/scala/subsystem/BankedL2Params.scala	/^    val bh = LazyModule(new TLBroadcast(TLBroadcastParams($/;"	l
bht	src/main/scala/rocket/BTB.scala	/^    val bht = new BHT(Annotated.params(this, btbParams.bhtParams.get))$/;"	l
bht	src/main/scala/rocket/BTB.scala	/^  val bht = new BHTResp$/;"	l
bht_advance	src/main/scala/rocket/BTB.scala	/^    val bht_advance = Valid(new BTBResp).flip$/;"	l
bht_update	src/main/scala/rocket/BTB.scala	/^    val bht_update = Valid(new BHTUpdate).flip$/;"	l
bht_update	src/main/scala/rocket/Frontend.scala	/^  val bht_update = Valid(new BHTUpdate)$/;"	l
bid	src/main/scala/amba/axi4/UserYanker.scala	/^      val bid = out.b.bits.id$/;"	l
big	src/main/scala/subsystem/Configs.scala	/^    val big = RocketTileParams($/;"	l
big2little	src/main/scala/util/MultiWidthFifo.scala	/^  val big2little = Module(new MultiWidthFifo(16, 8, 8))$/;"	l
bigBits	src/main/scala/devices/tilelink/TestRAM.scala	/^    def bigBits(x: BigInt, tail: List[Boolean] = List.empty[Boolean]): List[Boolean] =$/;"	m
bigBits	src/main/scala/diplomacy/SRAM.scala	/^  def bigBits(x: BigInt, tail: List[Boolean] = Nil): List[Boolean] =$/;"	m
bigIntToDoctype	src/main/scala/util/PlusArg.scala	/^  implicit val bigIntToDoctype = new Doctypeable[BigInt] { def toDoctype(a: Option[BigInt]) = "INT"    }$/;"	l
bigger	src/main/scala/tile/FPU.scala	/^      val bigger = box(UInt((BigInt(1) << nt.recodedWidth)-1), nt, x, t)$/;"	l
biggest_grow_param	src/main/scala/tilelink/Metadata.scala	/^    val biggest_grow_param = Mux(dirties, r2._2, r1._2)$/;"	l
bigs	src/main/scala/devices/tilelink/BootROM.scala	/^    val bigs = words.map(_.foldRight(BigInt(0)){ case (x,y) => (x.toInt & 0xff) | y << 8})$/;"	l
binary	src/main/scala/util/AsyncQueue.scala	/^    val binary = RegNext(next=incremented, init=0.U).suggestName(name)$/;"	l
bind	src/main/scala/diplomacy/FixedClockResource.scala	/^  def bind(dev: Device): Unit = {$/;"	m
bind	src/main/scala/diplomacy/Resources.scala	/^  def bind(user: Device, value: ResourceValue): Unit = {$/;"	m
bind	src/main/scala/diplomacy/Resources.scala	/^  def bind(value: ResourceValue): Unit = {$/;"	m
bind	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^  def bind(): Seq[OMComponent] = {$/;"	m
bindClocks	src/main/scala/tilelink/BusWrapper.scala	/^    def bindClocks(implicit p: Parameters) = driveClockFromMaster match {$/;"	m
bindTLNodes	src/main/scala/tilelink/BusWrapper.scala	/^    def bindTLNodes(implicit p: Parameters) = nodeBinding match {$/;"	m
binder	src/main/scala/tilelink/BankBinder.scala	/^    val binder = LazyModule(new BankBinder(mask))$/;"	l
bindex	src/main/scala/regmapper/RegMapper.scala	/^    val bindex = back .bits.index & maskMatch$/;"	l
bindingInfo	src/main/scala/diplomacy/Nodes.scala	/^  def bindingInfo: String =$/;"	m
bindingScopes	src/main/scala/diplomacy/Resources.scala	/^  var bindingScopes = new collection.mutable.ArrayBuffer[BindingScope]()$/;"	l
bindingTree	src/main/scala/diplomacy/Resources.scala	/^  def bindingTree: ResourceMap = {$/;"	m
bindings	src/main/scala/diplomacy/Resources.scala	/^        val bindings = map.lift(dev).getOrElse(ResourceBindings())$/;"	l
bindings	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^    val bindings = resources("int")$/;"	l
bit	src/main/resources/vsrc/SimDTM.v	/^  input  bit        debug_resp_valid,$/;"	p
bit	src/main/resources/vsrc/SimDTM.v	/^  input  bit     debug_req_ready,$/;"	p
bit	src/main/resources/vsrc/SimDTM.v	/^  output bit        debug_resp_ready,$/;"	p
bit	src/main/resources/vsrc/SimDTM.v	/^  output bit     debug_req_valid,$/;"	p
bit	src/main/resources/vsrc/SimJTAG.v	/^ input bit  jtag_TDO$/;"	p
bit	src/main/resources/vsrc/SimJTAG.v	/^ output bit jtag_TCK,$/;"	p
bit	src/main/resources/vsrc/SimJTAG.v	/^ output bit jtag_TDI,$/;"	p
bit	src/main/resources/vsrc/SimJTAG.v	/^ output bit jtag_TMS,$/;"	p
bit	src/main/resources/vsrc/SimJTAG.v	/^ output bit jtag_TRSTn,$/;"	p
bit	src/main/scala/diplomacy/Parameters.scala	/^        val bit = x & (-x)$/;"	l
bit	src/main/scala/rocket/Decode.scala	/^        val bit = logic(addr, addrWidth, cache, Simplify(t, dc, addrWidth))$/;"	l
bit	src/main/scala/rocket/Decode.scala	/^    val bit = value - x.value$/;"	l
bit	src/main/scala/util/ECC.scala	/^      val bit = 1 << j$/;"	l
bit	src/main/scala/util/Misc.scala	/^        val bit = addr_lo(lgBytes - i)$/;"	l
bit	src/main/scala/util/ScatterGather.scala	/^        val bit = log2Ceil(offset)$/;"	l
bitIndexes	src/main/scala/diplomacy/package.scala	/^  def bitIndexes(x: BigInt, tail: Seq[Int] = Nil): Seq[Int] = {$/;"	m
bitScore	src/main/scala/diplomacy/AddressDecoder.scala	/^  def bitScore(partitions: Partitions): Seq[Int] = {$/;"	m
bitmap	src/main/scala/regmapper/RegMapper.scala	/^    val bitmap = bytemap.map { case (byte, fields) =>$/;"	l
bitmap	src/main/scala/tilelink/Fuzzer.scala	/^  val bitmap = RegInit(UInt((BigInt(1) << numIds) -  1, width = numIds))$/;"	l
bitmap	src/main/scala/util/IDPool.scala	/^  val bitmap = RegInit(UInt(numIds.W), -1.S(numIds.W).asUInt)$/;"	l
bitmap1	src/main/scala/util/IDPool.scala	/^  val bitmap1 = (bitmap & ~taken) | given$/;"	l
bits	src/main/scala/amba/axi4/IdIndexer.scala	/^      val bits = log2Ceil(edgeIn.master.endId) - idBits$/;"	l
bits	src/main/scala/amba/axi4/IdIndexer.scala	/^      val bits = log2Ceil(mp.endId) - idBits$/;"	l
bits	src/main/scala/diplomacy/Parameters.scala	/^    val bits = bitIndexes(fragments)$/;"	l
bits	src/main/scala/diplomacy/Parameters.scala	/^    val bits = seq.map(_.base).foldLeft(BigInt(0))(_ | _)$/;"	l
bits	src/main/scala/jtag/JtagShifter.scala	/^  val bits = Input(gen)  \/\/ data to capture, should be always valid$/;"	l
bits	src/main/scala/regmapper/RegMapper.scala	/^      val bits = fields.scanLeft(byte * 8)(_ + _.width).init$/;"	l
bits	src/main/scala/rocket/Frontend.scala	/^      val bits = fq.io.enq.bits.data(coreInstBits*(idx+1)-1, coreInstBits*idx)$/;"	l
bits	src/main/scala/rocket/RVC.scala	/^  val bits = UInt(32.W)$/;"	l
bits	src/main/scala/tile/BaseTile.scala	/^    val bits = tlBundleParams.addressBits$/;"	l
bits	src/main/scala/tilelink/AddressAdjuster.scala	/^  val bits = AddressSet.enumerateBits(mask)$/;"	l
bits	src/main/scala/tilelink/AtomicAutomata.scala	/^    val bits    = new TLBundleA(params.a)$/;"	l
bits	src/main/scala/tilelink/Fuzzer.scala	/^    val bits = MuxLookup(a_type_sel, gbits, Seq($/;"	l
bits	src/main/scala/tilelink/PatternPusher.scala	/^  def bits(edge: TLEdgeOut) = edge.Get(UInt(0), UInt(address), UInt(size))$/;"	m
bits	src/main/scala/tilelink/PatternPusher.scala	/^  def bits(edge: TLEdgeOut) = edge.Put(UInt(0), UInt(address), UInt(size), UInt(data << (8*(address % edge.manager.beatBytes).toInt)))$/;"	m
bits	src/main/scala/tilelink/PatternPusher.scala	/^  def bits(edge: TLEdgeOut): (Bool, TLBundleA)$/;"	m
bits	src/main/scala/util/AsyncQueue.scala	/^  val bits = log2Ceil(depth)$/;"	l
bits	src/main/scala/util/AsyncQueue.scala	/^  val bits = params.bits$/;"	l
bits	src/main/scala/util/CreditedIO.scala	/^  val bits   = Output(genType)$/;"	l
bits	src/main/scala/util/LanePositionedQueue.scala	/^  val bits  = Output(Vec(lanes, gen))$/;"	l
bits	src/main/scala/util/LanePositionedQueue.scala	/^  val bits = log2Ceil(ids+1)$/;"	l
bits	src/main/scala/util/MultiLaneQueue.scala	/^  val bits = log2Ceil(ids+1)$/;"	l
bits	src/main/scala/util/MultiPortQueue.scala	/^    val bits = dense.bits ++ dense.bits ++ Seq.fill(sparse.size) { 0.U.asTypeOf(chiselTypeOf(sparse.head.bits)) }$/;"	l
bits	src/main/scala/util/MultiPortQueue.scala	/^  val bits = log2Ceil(ids+1)$/;"	l
bits	src/main/scala/util/ReadyValidCancel.scala	/^  val bits       = Output(gen)$/;"	l
bits	src/main/scala/util/ScatterGather.scala	/^  val bits = log2Ceil(size+1)$/;"	l
bits0	src/main/scala/util/RationalCrossing.scala	/^  val bits0  = Output(gen)$/;"	l
bits1	src/main/scala/util/RationalCrossing.scala	/^  val bits1  = Output(gen)$/;"	l
bl_data	src/main/scala/util/MultiWidthFifo.scala	/^  val bl_data = Vec.tabulate(4){i => UInt((2 * i + 1) * 256 + 2 * i, 16)}$/;"	l
bl_finished	src/main/scala/util/MultiWidthFifo.scala	/^  val bl_finished = Reg(init = Bool(false))$/;"	l
bl_recv	src/main/scala/util/MultiWidthFifo.scala	/^  val bl_recv = Reg(init = Bool(false))$/;"	l
bl_recv_data	src/main/scala/util/MultiWidthFifo.scala	/^  val bl_recv_data = Mux(bl_recv_cnt(0),$/;"	l
bl_recv_data_idx	src/main/scala/util/MultiWidthFifo.scala	/^  val bl_recv_data_idx = bl_recv_cnt >> UInt(1)$/;"	l
bl_send	src/main/scala/util/MultiWidthFifo.scala	/^  val bl_send = Reg(init = Bool(false))$/;"	l
bl_start_recv	src/main/scala/util/MultiWidthFifo.scala	/^  val bl_start_recv = Reg(next = bl_send_done)$/;"	l
blackbox	scripts/vlsi_mem_gen	/^  blackbox = args.blackbox$/;"	v
blackbox	scripts/vlsi_mem_gen	/^blackbox = 0$/;"	v
blackbox	src/main/scala/subsystem/Configs.scala	/^      val blackbox = LazyModule(new BlackBoxExample(OpcodeSet.custom3, "RoccBlackBox")(p))$/;"	l
blackbox	src/main/scala/tile/LazyRoCC.scala	/^  val blackbox = {$/;"	l
block	src/main/scala/tilelink/SourceShrinker.scala	/^        val block = a_first && full$/;"	l
blockBeats	src/main/scala/tilelink/BusWrapper.scala	/^  def blockBeats: Int = blockBytes \/ beatBytes$/;"	m
blockBits	src/main/scala/tilelink/BusWrapper.scala	/^  def blockBits: Int = blockBytes * 8$/;"	m
blockBytes	src/main/scala/tile/L1Cache.scala	/^  def blockBytes:    Int \/\/ TODO this is ignored in favor of p(CacheBlockBytes) in BaseTile$/;"	m
blockBytes	src/main/scala/tilelink/BusWrapper.scala	/^  def blockBytes = params.blockBytes$/;"	m
blockBytes	src/main/scala/tilelink/BusWrapper.scala	/^  def blockBytes: Int$/;"	m
blockOffBits	src/main/scala/tile/L1Cache.scala	/^  def blockOffBits = lgCacheBlockBytes$/;"	m
blockOffset	src/main/scala/groundtest/Configs.scala	/^            val blockOffset = site(SystemBusKey).blockOffset$/;"	l
blockOffset	src/main/scala/tilelink/BusWrapper.scala	/^  def blockOffset: Int = log2Up(blockBytes)$/;"	m
blockPriorAddress	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  def blockPriorAddress = l(0) && a(0)$/;"	m
blockProbeAfterGrantCount	src/main/scala/rocket/DCache.scala	/^  val blockProbeAfterGrantCount = Reg(init=UInt(0))$/;"	l
blockProbeAfterGrantCycles	src/main/scala/rocket/HellaCache.scala	/^  def blockProbeAfterGrantCycles = 8 \/\/ give the processor some time to issue a request after a grant$/;"	m
blockSizeBytes	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def blockSizeBytes: Int$/;"	m
blockUncachedGrant	src/main/scala/rocket/DCache.scala	/^    val blockUncachedGrant = Reg(Bool())$/;"	l
blockWhile	src/main/scala/util/Blockable.scala	/^    def blockWhile(enable_blocking: Bool, data: DecoupledIO[T]): DecoupledIO[T] = {$/;"	m
blockWhile	src/main/scala/util/Blockable.scala	/^    def blockWhile(enable_blocking: Bool, data: T): T = {$/;"	m
blockWhile	src/main/scala/util/Blockable.scala	/^    def blockWhile(enable_blocking: Bool, data: TraceCoreInterface): TraceCoreInterface = {$/;"	m
blockWhile	src/main/scala/util/Blockable.scala	/^    def blockWhile(enable_blocking: Bool, data: Vec[T]): Vec[T] = {$/;"	m
blockWhile	src/main/scala/util/Blockable.scala	/^    def blockWhile(enable_blocking: Bool, x: Bool): Bool = x && !enable_blocking$/;"	m
blockWhile	src/main/scala/util/Blockable.scala	/^  def blockWhile(enable_blocking: Bool, data: T): T$/;"	m
block_during_reset	src/main/scala/interrupts/BlockDuringReset.scala	/^    val block_during_reset = LazyModule(new IntBlockDuringReset(stretchResetCycles))$/;"	l
block_during_reset	src/main/scala/tilelink/BlockDuringReset.scala	/^    val block_during_reset = LazyModule(new TLBlockDuringReset(stretchCycles))$/;"	l
block_miss	src/main/scala/rocket/NBDcache.scala	/^  val block_miss = Reg(init=Bool(false))$/;"	l
block_probe_for_core_progress	src/main/scala/rocket/DCache.scala	/^  val block_probe_for_core_progress = blockProbeAfterGrantCount > 0 || lrscValid$/;"	l
block_probe_for_ordering	src/main/scala/rocket/DCache.scala	/^  val block_probe_for_ordering = releaseInFlight || block_probe_for_pending_release_ack || grantInProgress$/;"	l
block_probe_for_pending_release_ack	src/main/scala/rocket/DCache.scala	/^  val block_probe_for_pending_release_ack = release_ack_wait && (tl_out.b.bits.address ^ release_ack_addr)(((pgIdxBits + pgLevelBits) min paddrBits) - 1, idxLSB) === 0$/;"	l
block_state	src/main/scala/rocket/NBDcache.scala	/^    val block_state = new ClientMetadata().asInput$/;"	l
blocked	src/main/scala/rocket/HellaCache.scala	/^  val blocked = Bool()$/;"	l
blocked	src/main/scala/rocket/RocketCore.scala	/^    val blocked = Reg(Bool())$/;"	l
blocked	src/main/scala/util/Blockable.scala	/^      val blocked: T = Wire(chiselTypeOf(data))$/;"	l
blocked	src/main/scala/util/Blockable.scala	/^      val blocked: TraceCoreInterface = Wire(chiselTypeOf(data))$/;"	l
blocker	src/main/scala/subsystem/HasTiles.scala	/^        val blocker = LazyModule(new BasicBusBlocker(bbbp))$/;"	l
blockerBus	src/main/scala/subsystem/HasTiles.scala	/^    val blockerBus = context.locateTLBusWrapper(blockerCtrlWhere)$/;"	l
blockerCtrlAddr	src/main/scala/groundtest/TraceGen.scala	/^  val blockerCtrlAddr = None$/;"	l
blockerCtrlAddr	src/main/scala/tile/BaseTile.scala	/^  val blockerCtrlAddr: Option[BigInt]$/;"	l
blocks	scripts/check_cache_trace.py	/^blocks = defaultdict(data_block)$/;"	v
blocks	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val blocks = pmps.tail.map(_.blockPriorAddress) :+ Bool(false)$/;"	l
bnez	src/main/scala/rocket/RVC.scala	/^    def bnez = inst(Cat(bImm(12), bImm(10,5), x0, rs1p, 1.U(3.W), bImm(4,1), bImm(11), 0x63.U(7.W)), x0, rs1p, x0)$/;"	m
bnoise	src/main/scala/amba/axi4/Delayer.scala	/^      val bnoise  = Wire(in.b .bits)$/;"	l
bnoise	src/main/scala/tilelink/Delayer.scala	/^      val bnoise = Wire(out.b.bits)$/;"	l
bools	src/main/scala/util/MultiLaneQueue.scala	/^    val bools = shift.asBools.toVector$/;"	l
bootFreqHz	src/main/scala/tile/Core.scala	/^  val bootFreqHz: BigInt$/;"	l
bootROM	src/main/scala/system/ExampleRocketSystem.scala	/^  val bootROM  = p(BootROMLocated(location)).map { BootROM.attach(_, this, CBUS) }$/;"	l
bootROMDomainWrapper	src/main/scala/devices/tilelink/BootROM.scala	/^    val bootROMDomainWrapper = LazyModule(new ClockSinkDomain(take = None))$/;"	l
bootROMResetVectorSourceNode	src/main/scala/devices/tilelink/BootROM.scala	/^    val bootROMResetVectorSourceNode = BundleBridgeSource[UInt]()$/;"	l
bootrom	src/main/scala/devices/tilelink/BootROM.scala	/^    val bootrom = bootROMDomainWrapper {$/;"	l
bootrom_img	bootrom/Makefile	/^bootrom_img = bootrom.img$/;"	m
both	src/main/scala/rocket/BTB.scala	/^    val both = doIdxPageRepl && doTgtPageRepl$/;"	l
box	src/main/scala/tile/FPU.scala	/^  def box(x: UInt, t: FType): UInt = {$/;"	m
box	src/main/scala/tile/FPU.scala	/^  def box(x: UInt, tag: UInt): UInt = {$/;"	m
boxes	src/main/scala/tile/FPU.scala	/^    val boxes = floatTypes.map(t => UInt((BigInt(1) << maxType.ieeeWidth) - (BigInt(1) << t.ieeeWidth)))$/;"	l
bp	src/main/scala/regmapper/Test.scala	/^  def bp(bits: Int) = request(bits, busy, pipe(3))$/;"	m
bp	src/main/scala/rocket/Breakpoint.scala	/^    val bp = Input(Vec(n, new BP))$/;"	l
bp	src/main/scala/rocket/CSR.scala	/^  val bp = Vec(nBreakpoints, new BP).asOutput$/;"	l
bpmStatic	src/main/scala/tile/CustomCSRs.scala	/^  def bpmStatic = getOrElse(bpmCSR, _.value(0), false.B)$/;"	m
bpu	src/main/scala/rocket/RocketCore.scala	/^  val bpu = Module(new BreakpointUnit(nBreakpoints))$/;"	l
bpwatch	src/main/scala/rocket/Breakpoint.scala	/^    val bpwatch  = Output(Vec(n, new BPWatch(1)))$/;"	l
bpwatch	src/main/scala/tile/Core.scala	/^    val bpwatch = Vec(coreParams.nBreakpoints, new BPWatch(coreParams.retireWidth)).asOutput$/;"	l
bpwatchNexusNode	src/main/scala/tile/BaseTile.scala	/^  val bpwatchNexusNode = BundleBroadcast[Vec[BPWatch]]()$/;"	l
bpwatchNode	src/main/scala/tile/BaseTile.scala	/^  val bpwatchNode: BundleBridgeOutwardNode[Vec[BPWatch]] =$/;"	l
bpwatchSourceNode	src/main/scala/tile/BaseTile.scala	/^  val bpwatchSourceNode = BundleBridgeSource(() => Vec(tileParams.core.nBreakpoints, new BPWatch(traceRetireWidth)))$/;"	l
brIdx	src/main/scala/rocket/BTB.scala	/^  val brIdx = Reg(Vec(entries, UInt(width=log2Up(fetchWidth))))$/;"	l
br_pc	src/main/scala/rocket/BTB.scala	/^  val br_pc = UInt(width = vaddrBits)$/;"	l
branch	src/main/scala/rocket/BTB.scala	/^  def branch = 0.U$/;"	m
branch	src/main/scala/rocket/BTB.scala	/^  val branch = Bool()$/;"	l
branch	src/main/scala/rocket/IDecode.scala	/^  val branch = Bool()$/;"	l
breakpoint	src/main/scala/rocket/Instructions.scala	/^  val breakpoint = 0x3$/;"	l
bridx	src/main/scala/rocket/BTB.scala	/^  val bridx = Bits(width = log2Up(fetchWidth))$/;"	l
broadcast	src/main/scala/diplomacy/BundleBridge.scala	/^      val broadcast: T = if (inputs.size >= 1) inputFn(inputs) else defaultWireOpt.get$/;"	l
broadcast	src/main/scala/diplomacy/BundleBridge.scala	/^    val broadcast = LazyModule(new BundleBridgeNexus[T]($/;"	l
broadcast	src/main/scala/tilelink/Broadcast.scala	/^    val broadcast = LazyModule(new TLBroadcast(params))$/;"	l
broadcastManager	src/main/scala/subsystem/BankedL2Params.scala	/^  val broadcastManager = broadcastManagerFn("broadcast", InSystem, CBUS)$/;"	l
broadcastManagerFn	src/main/scala/subsystem/BankedL2Params.scala	/^  def broadcastManagerFn($/;"	m
bsel	src/main/scala/amba/axi4/UserYanker.scala	/^      val bsel  = UIntToOH(bid,  edgeIn.master.endId).asBools$/;"	l
btb	src/main/scala/groundtest/Tile.scala	/^  val btb = None$/;"	l
btb	src/main/scala/rocket/Frontend.scala	/^    val btb = Module(new BTB)$/;"	l
btb	src/main/scala/rocket/Frontend.scala	/^  val btb = new BTBResp$/;"	l
btb	src/main/scala/tile/BaseTile.scala	/^  val btb: Option[BTBParams]$/;"	l
btbParams	src/main/scala/rocket/BTB.scala	/^  val btbParams = tileParams.btb.getOrElse(BTBParams(nEntries = 0))$/;"	l
btb_resp	src/main/scala/rocket/IBuf.scala	/^    val btb_resp = new BTBResp().asOutput$/;"	l
btb_update	src/main/scala/rocket/BTB.scala	/^    val btb_update = Valid(new BTBUpdate).flip$/;"	l
btb_update	src/main/scala/rocket/Frontend.scala	/^  val btb_update = Valid(new BTBUpdate)$/;"	l
buf	src/main/scala/diplomacy/LazyModule.scala	/^    val buf = new StringBuilder$/;"	l
buf	src/main/scala/rocket/IBuf.scala	/^  val buf = Reg(io.imem.bits)$/;"	l
bufMask	src/main/scala/rocket/IBuf.scala	/^  val bufMask = UIntToOH(nBufValid) - 1$/;"	l
buf_replay	src/main/scala/rocket/IBuf.scala	/^  val buf_replay = Mux(buf.replay, bufMask, UInt(0))$/;"	l
buf_size	src/main/resources/csrc/remote_bitbang.h	/^  static const ssize_t buf_size = 64 * 1024;$/;"	m	class:remote_bitbang_t
buffer	src/main/scala/amba/axi4/Buffer.scala	/^    def buffer[T <: Data](config: BufferParams, data: IrrevocableIO[T]): IrrevocableIO[T] = {$/;"	m
buffer	src/main/scala/amba/axi4/Credited.scala	/^    val buffer = LazyModule(new AXI4CreditedBuffer(delay))$/;"	l
buffer	src/main/scala/amba/axis/Buffer.scala	/^    val buffer = LazyModule(new AXISBuffer(params))$/;"	l
buffer	src/main/scala/tilelink/Buffer.scala	/^    val buffer = LazyModule(new TLBuffer(a, b, c, d, e))$/;"	l
buffer	src/main/scala/tilelink/Buffer.scala	/^    val buffer = LazyModule(new TLBufferAndNotCancel(a, b, c, d, e))$/;"	l
buffer	src/main/scala/tilelink/Credited.scala	/^    val buffer = LazyModule(new TLCreditedBuffer(delay))$/;"	l
bufferable	src/main/scala/amba/package.scala	/^    val bufferable = Bool() \/\/ writeback caching ok?$/;"	l
buffers	src/main/scala/tilelink/Buffer.scala	/^    val buffers = Seq.fill(depth) { LazyModule(new TLBuffer()) }$/;"	l
builtIn	src/main/scala/subsystem/BaseSubsystem.scala	/^    val builtIn = bus.builtInDevices$/;"	l
builtInDevices	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^  def builtInDevices: BuiltInDevices$/;"	m
builtInDevices	src/main/scala/subsystem/BankedL2Params.scala	/^  val builtInDevices = BuiltInDevices.none$/;"	l
builtInDevices	src/main/scala/subsystem/FrontBus.scala	/^  val builtInDevices: BuiltInDevices = BuiltInDevices.attach(params, outwardNode)$/;"	l
builtInDevices	src/main/scala/subsystem/MemoryBus.scala	/^  val builtInDevices: BuiltInDevices = BuiltInDevices.attach(params, outwardNode)$/;"	l
builtInDevices	src/main/scala/subsystem/PeripheryBus.scala	/^  val builtInDevices: BuiltInDevices = BuiltInDevices.attach(params, outwardNode)$/;"	l
builtInDevices	src/main/scala/subsystem/SystemBus.scala	/^  val builtInDevices: BuiltInDevices = BuiltInDevices.attach(params, outwardNode)$/;"	l
builtInDevices	src/main/scala/tilelink/BusWrapper.scala	/^  val builtInDevices = BuiltInDevices.none$/;"	l
bundle	src/main/scala/amba/ahb/Nodes.scala	/^  def bundle(e: AHBEdgeParameters) = AHBMasterBundle(e.bundle)$/;"	m
bundle	src/main/scala/amba/ahb/Nodes.scala	/^  def bundle(e: AHBEdgeParameters) = AHBSlaveBundle(e.bundle)$/;"	m
bundle	src/main/scala/amba/ahb/Parameters.scala	/^  val bundle = AHBBundleParameters(master, slave)$/;"	l
bundle	src/main/scala/amba/apb/Nodes.scala	/^  def bundle(e: APBEdgeParameters) = APBBundle(e.bundle)$/;"	m
bundle	src/main/scala/amba/apb/Parameters.scala	/^  val bundle = APBBundleParameters(master, slave)$/;"	l
bundle	src/main/scala/amba/axi4/Nodes.scala	/^  def bundle(e: AXI4AsyncEdgeParameters) = new AXI4AsyncBundle(e.bundle)$/;"	m
bundle	src/main/scala/amba/axi4/Nodes.scala	/^  def bundle(e: AXI4CreditedEdgeParameters) = new AXI4CreditedBundle(e.bundle)$/;"	m
bundle	src/main/scala/amba/axi4/Nodes.scala	/^  def bundle(e: AXI4EdgeParameters) = AXI4Bundle(e.bundle)$/;"	m
bundle	src/main/scala/amba/axi4/Parameters.scala	/^  val bundle = AXI4AsyncBundleParameters(slave.async, AXI4BundleParameters(master.base, slave.base))$/;"	l
bundle	src/main/scala/amba/axi4/Parameters.scala	/^  val bundle = AXI4BundleParameters(master, slave)$/;"	l
bundle	src/main/scala/amba/axi4/Parameters.scala	/^  val bundle = AXI4BundleParameters(master.base, slave.base)$/;"	l
bundle	src/main/scala/amba/axis/Nodes.scala	/^  def bundle(e: AXISEdgeParameters) = AXISBundle(e.bundle)$/;"	m
bundle	src/main/scala/amba/axis/Parameters.scala	/^  val bundle = AXISBundleParameters.v1($/;"	l
bundle	src/main/scala/devices/debug/Custom.scala	/^  def bundle(e: DebugCustomParams) = new DebugCustomBundle(e)$/;"	m
bundle	src/main/scala/diplomacy/BundleBridge.scala	/^  def bundle(e: BundleBridgeEdgeParams[T]): T = {$/;"	m
bundle	src/main/scala/diplomacy/BundleBridge.scala	/^  def bundle: T = in(0)._1$/;"	m
bundle	src/main/scala/diplomacy/BundleBridge.scala	/^  def bundle: T = out(0)._1$/;"	m
bundle	src/main/scala/diplomacy/Nodes.scala	/^  def bundle(e: E): B$/;"	m
bundle	src/main/scala/interrupts/Nodes.scala	/^  def bundle(e: IntEdge) = Vec(e.source.num, Bool())$/;"	m
bundle	src/main/scala/interrupts/Nodes.scala	/^  def bundle(e: IntEdge) = new SyncInterrupts(e)$/;"	m
bundle	src/main/scala/prci/ClockNodes.scala	/^  def bundle(e: ClockEdgeParameters) = new ClockBundle(e.bundle)$/;"	m
bundle	src/main/scala/prci/ClockNodes.scala	/^  def bundle(e: ClockGroupEdgeParameters) = new ClockGroupBundle(e.bundle)$/;"	m
bundle	src/main/scala/prci/ClockParameters.scala	/^  val bundle = ClockBundleParameters()$/;"	l
bundle	src/main/scala/prci/ClockParameters.scala	/^  val bundle = ClockGroupBundleParameters(members.map{ case (k, v) => k -> v.bundle})$/;"	l
bundle	src/main/scala/tilelink/Nodes.scala	/^  def bundle(e: TLAsyncEdgeParameters) = new TLAsyncBundle(e.bundle)$/;"	m
bundle	src/main/scala/tilelink/Nodes.scala	/^  def bundle(e: TLCreditedEdgeParameters) = new TLCreditedBundle(e.bundle)$/;"	m
bundle	src/main/scala/tilelink/Nodes.scala	/^  def bundle(e: TLRationalEdgeParameters) = new TLRationalBundle(e.bundle)$/;"	m
bundle	src/main/scala/tilelink/Parameters.scala	/^  val bundle = TLAsyncBundleParameters(manager.async, TLBundleParameters(client.base, manager.base))$/;"	l
bundle	src/main/scala/tilelink/Parameters.scala	/^  val bundle = TLBundleParameters(client.base, manager.base)$/;"	l
bundle	src/main/scala/tilelink/Parameters.scala	/^  val bundle = TLBundleParameters(master, slave)$/;"	l
bundleI	src/main/scala/diplomacy/Nodes.scala	/^  def bundleI(e: E): B = bundle(e)$/;"	m
bundleI	src/main/scala/diplomacy/Nodes.scala	/^  def bundleI(ei: EI): BI$/;"	m
bundleI	src/main/scala/tilelink/Nodes.scala	/^  def bundleI(ei: TLEdgeIn)  = TLBundle(ei.bundle)$/;"	m
bundleI	src/main/scala/tilelink/Nodes.scala	/^  def bundleI(ei: TLEdgeIn)  = TLBundle_ACancel(ei.bundle)$/;"	m
bundleO	src/main/scala/diplomacy/Nodes.scala	/^  def bundleO(e: E): B = bundle(e)$/;"	m
bundleO	src/main/scala/diplomacy/Nodes.scala	/^  def bundleO(eo: EO): BO$/;"	m
bundleO	src/main/scala/tilelink/Nodes.scala	/^  def bundleO(eo: TLEdgeOut) = TLBundle(eo.bundle)$/;"	m
bundleO	src/main/scala/tilelink/Nodes.scala	/^  def bundleO(eo: TLEdgeOut) = TLBundle_ACancel(eo.bundle)$/;"	m
bundles	src/main/scala/diplomacy/Nodes.scala	/^    val bundles = this.in.map(_._1)$/;"	l
bundles	src/main/scala/diplomacy/Nodes.scala	/^    val bundles = this.out.map(_._1)$/;"	l
bundles	src/main/scala/prci/ClockGroupDriver.scala	/^      val bundles = ioClockGroupSourceNode.out.map(_._1)$/;"	l
burst	src/main/scala/amba/axi4/Bundles.scala	/^  val burst  = UInt(width = params.burstBits)$/;"	l
burstBits	src/main/scala/amba/ahb/Parameters.scala	/^  val burstBits = AHBParameters.burstBits$/;"	l
burstBits	src/main/scala/amba/ahb/Protocol.scala	/^  val burstBits = 3$/;"	l
burstBits	src/main/scala/amba/axi4/Parameters.scala	/^  val burstBits = AXI4Parameters.burstBits$/;"	l
burstBits	src/main/scala/amba/axi4/Protocol.scala	/^  val burstBits = 2$/;"	l
burst_sizes	src/main/scala/amba/ahb/ToTL.scala	/^      val burst_sizes = Seq(1, 1, 4, 4, 8, 8, 16, 16)$/;"	l
bus	src/main/scala/devices/tilelink/MaskROM.scala	/^    val bus = subsystem.locateTLBusWrapper(where)$/;"	l
bus	src/main/scala/rocket/DCache.scala	/^  val bus = Valid(UInt(width = paddrBits))$/;"	l
bus	src/main/scala/rocket/ICache.scala	/^  val bus = Valid(UInt(width = paddrBits))$/;"	l
busErrorIntCause	src/main/scala/rocket/CSR.scala	/^  def busErrorIntCause = 128$/;"	m
busErrorLTN	src/main/scala/tile/BusErrorUnit.scala	/^    val busErrorLTN = new BusErrorLogicalTreeNode(device, omRegMap)$/;"	l
busView	src/main/scala/subsystem/BankedL2Params.scala	/^  def busView: TLEdge = coherent_jbar.node.edges.out.head$/;"	m
busView	src/main/scala/subsystem/MemoryBus.scala	/^  def busView: TLEdge = xbar.node.edges.in.head$/;"	m
busView	src/main/scala/subsystem/PeripheryBus.scala	/^  def busView: TLEdge = fixer.node.edges.in.head$/;"	m
busView	src/main/scala/subsystem/SystemBus.scala	/^  def busView: TLEdge = system_bus_xbar.node.edges.in.head$/;"	m
busView	src/main/scala/tilelink/BusWrapper.scala	/^  def busView: TLEdge = jbar.node.edges.in.head$/;"	m
busView	src/main/scala/tilelink/BusWrapper.scala	/^  def busView: TLEdge = viewNode.edges.in.head$/;"	m
busView	src/main/scala/tilelink/BusWrapper.scala	/^  def busView: TLEdge = xbar.node.edges.in.head$/;"	m
busView	src/main/scala/tilelink/BusWrapper.scala	/^  def busView: TLEdge$/;"	m
bus_blocker	src/main/scala/devices/tilelink/BusBlocker.scala	/^      val bus_blocker = LazyModule(new BasicBusBlocker(BasicBusBlockerParams(a, controlBus.beatBytes, beatBytes)))$/;"	l
bus_error_unit	src/main/scala/tile/RocketTile.scala	/^  val bus_error_unit = rocketParams.beuAddr map { a =>$/;"	l
buserror	src/main/scala/tile/Core.scala	/^  val buserror = tileParams.beuAddr.map(a => Bool())$/;"	l
busreq	src/main/scala/amba/ahb/Bundles.scala	/^  def busreq(): Bool = if (params.lite) Wire(init = Bool(true)) else hbusreq.get$/;"	m
busy	src/main/scala/amba/axi4/Fragmenter.scala	/^        val busy   = RegInit(Bool(false))$/;"	l
busy	src/main/scala/devices/debug/DebugTransport.scala	/^  val busy = Wire(Bool())$/;"	l
busy	src/main/scala/devices/debug/dm_registers.scala	/^  val busy = Bool()$/;"	l
busy	src/main/scala/regmapper/RegisterCrossing.scala	/^  val busy   = RegInit(Bool(false))$/;"	l
busy	src/main/scala/regmapper/Test.scala	/^      val busy = RegInit(Bool(false))$/;"	l
busy	src/main/scala/regmapper/Test.scala	/^  def busy: (Bool, Bool, UInt) => (Bool, Bool, UInt) = {$/;"	m
busy	src/main/scala/tile/LazyRoCC.scala	/^    val busy = Output(Bool())$/;"	l
busy	src/main/scala/tile/LazyRoCC.scala	/^  val busy = Output(Bool())$/;"	l
busy	src/main/scala/tile/LazyRoCC.scala	/^  val busy = RegInit(VecInit(Seq.fill(outer.n){false.B}))$/;"	l
busy	src/main/scala/tilelink/RAMModel.scala	/^            val busy = a_inc(i) - a_dec(i) - (!a_first).asUInt$/;"	l
busy	src/main/scala/tilelink/RAMModel.scala	/^        val busy = a_inc(i) =\/= a_dec(i) + (!a_first).asUInt$/;"	l
busyReg	src/main/scala/devices/debug/DebugTransport.scala	/^  val busyReg = RegInit(false.B)$/;"	l
busyResp	src/main/scala/devices/debug/DebugTransport.scala	/^  val busyResp    = Wire(new DMIAccessCapture(debugAddrBits))$/;"	l
bx	src/main/scala/util/BundleMap.scala	/^    def bx = this$/;"	m
bx	src/main/scala/util/BundleMap.scala	/^    val bx = this$/;"	l
by	src/main/scala/util/BundleMap.scala	/^    def by = that.asInstanceOf[BundleMap]$/;"	m
by	src/main/scala/util/BundleMap.scala	/^    val by = that.asInstanceOf[BundleMap]$/;"	l
bypass	src/main/scala/devices/tilelink/BusBypass.scala	/^      val bypass = Bool(INPUT)$/;"	l
bypass	src/main/scala/devices/tilelink/BusBypass.scala	/^    val bypass = Mux(in_reset, io.bypass, bypass_reg)$/;"	l
bypass	src/main/scala/devices/tilelink/MasterMux.scala	/^      val bypass = Bool(INPUT)$/;"	l
bypass	src/main/scala/devices/tilelink/MasterMux.scala	/^    val bypass = RegInit(io.bypass) \/\/ synchronous reset required$/;"	l
bypass	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^        val bypass = Bool(edgeIn.manager.minLatency == 0) && in.a.valid && in.a.bits.source === in.d.bits.source$/;"	l
bypass	src/main/scala/regmapper/RegisterCrossing.scala	/^    val bypass                  = Bool(INPUT)$/;"	l
bypass	src/main/scala/regmapper/RegisterCrossing.scala	/^  val bypass = Reg(Bool())$/;"	l
bypass	src/main/scala/tilelink/CacheCork.scala	/^        val bypass = Bool(edgeIn.manager.minLatency == 0) && in.a.valid && in.a.bits.source === d_d.bits.source$/;"	l
bypass	src/main/scala/tilelink/ErrorEvaluator.scala	/^      val bypass = Bool(edgeOut.manager.minLatency == 0) && in.a.fire() && in.a.bits.source === in.d.bits.source$/;"	l
bypass	src/main/scala/tilelink/RAMModel.scala	/^      val bypass = if (edge.manager.minLatency > 0) Bool(false) else in.a.valid && in.a.bits.source === out.d.bits.source$/;"	l
bypass	src/main/scala/tilelink/SourceShrinker.scala	/^        val bypass = Bool(edgeOut.manager.minLatency == 0) && in.a.valid && !full && a_first && nextFree === out.d.bits.source$/;"	l
bypass	src/main/scala/tilelink/WidthWidget.scala	/^        val bypass = in.a.valid && in.a.bits.source === source$/;"	l
bypass	src/main/scala/util/LanePositionedQueue.scala	/^  val bypass  = RegNext((deq_push &&  pre_gap2 && enq_refill_idle) || (deq_refill_ren1 &&  pre_gap2)   || (deq_refill_ren0 &&  pre_gap1) || abort_bypass)$/;"	l
bypassChain	src/main/scala/jtag/JtagTap.scala	/^    val bypassChain = Module(JtagBypassChain())$/;"	l
bypassIcode	src/main/scala/jtag/JtagTap.scala	/^    val bypassIcode = (BigInt(1) << irLength) - 1  \/\/ required BYPASS instruction$/;"	l
bypass_mux	src/main/scala/rocket/RocketCore.scala	/^  val bypass_mux = bypass_sources.map(_._3)$/;"	l
bypass_reg	src/main/scala/devices/tilelink/BusBypass.scala	/^    val bypass_reg = Reg(Bool())$/;"	l
bypass_sources	src/main/scala/rocket/RocketCore.scala	/^  val bypass_sources = IndexedSeq($/;"	l
bypass_src	src/main/scala/rocket/RocketCore.scala	/^      val bypass_src = PriorityEncoder(id_bypass_src(i))$/;"	l
bypasses	src/main/scala/rocket/NBDcache.scala	/^  val bypasses = List($/;"	l
byte	src/main/scala/tilelink/RAMModel.scala	/^            val byte = a.data(8*(i+1)-1, 8*i)$/;"	l
byteEn	src/main/scala/rocket/ICache.scala	/^          def byteEn(i: Int) = !(edge_in.get.hasData(s1_a) && s1_a.mask(i))$/;"	m
bytemap	src/main/scala/regmapper/RegMapper.scala	/^    val bytemap = mapping.toList.map { case (offset, fields) => (offset, fields.filter(_.width != 0)) }$/;"	l
bytes	src/main/scala/regmapper/RegField.scala	/^  def bytes(reg: UInt): Seq[RegField] = bytes(reg, None)$/;"	m
bytes	src/main/scala/regmapper/RegField.scala	/^  def bytes(reg: UInt, desc: Option[RegFieldDesc]): Seq[RegField] = {$/;"	m
bytes	src/main/scala/regmapper/RegField.scala	/^  def bytes(reg: UInt, numBytes: Int): Seq[RegField] = bytes(reg, numBytes, None)$/;"	m
bytes	src/main/scala/regmapper/RegField.scala	/^  def bytes(reg: UInt, numBytes: Int, desc: Option[RegFieldDesc]): Seq[RegField] = {$/;"	m
bytes1	src/main/scala/amba/axi4/Bundles.scala	/^  def bytes1(x:Int=0) = {$/;"	m
c	src/main/scala/devices/tilelink/Error.scala	/^      val c = if (buffer) {Queue(in.c, 1)} else in.c$/;"	l
c	src/main/scala/rocket/TLB.scala	/^  val c = Bool()$/;"	l
c	src/main/scala/tile/BaseTile.scala	/^    val c = if (tileParams.core.useCompressed) "c" else ""$/;"	l
c	src/main/scala/tile/FPU.scala	/^        val c = Bits(INPUT, expWidth + sigWidth + 1)$/;"	l
c	src/main/scala/tile/RocketTile.scala	/^  val c = core.dcacheArbPorts$/;"	l
c	src/main/scala/tilelink/Bundle_ACancel.scala	/^  val c =         Decoupled(new TLBundleC(params))$/;"	l
c	src/main/scala/tilelink/Bundles.scala	/^  def c = Seq( ("AccessAck",TLPermissions.PermMsgReserved),$/;"	m
c	src/main/scala/tilelink/Bundles.scala	/^  def c: DecoupledIO[TLBundleC] = optC.getOrElse(Wire(Decoupled(new TLBundleC(params))))$/;"	m
c	src/main/scala/tilelink/Bundles.scala	/^  val c = CreditedIO(new TLBundleC(params))$/;"	l
c	src/main/scala/tilelink/Bundles.scala	/^  val c = RationalIO(new TLBundleC(params))$/;"	l
c	src/main/scala/tilelink/Bundles.scala	/^  val c = new AsyncBundle(new TLBundleC(params.base), params.async)$/;"	l
c	src/main/scala/tilelink/Edges.scala	/^    val c = Wire(new TLBundleC(bundle))$/;"	l
c	src/main/scala/tilelink/Metadata.scala	/^    val c = categorize(cmd)$/;"	l
c	src/main/scala/util/Counters.scala	/^    val c = new ZCounter(n)$/;"	l
c	src/main/scala/util/LanePositionedQueue.scala	/^    val c = q.io.commit.get$/;"	l
cDataNo	src/main/scala/tilelink/Edges.scala	/^        val cDataNo  = client.anySupportPutFull || client.anySupportPutPartial || client.anySupportHint || client.anySupportProbe$/;"	l
cDataYes	src/main/scala/tilelink/Edges.scala	/^        val cDataYes = client.anySupportGet || client.anySupportArithmetic || client.anySupportLogical || client.anySupportProbe$/;"	l
cHideCaching	src/main/scala/tilelink/Filter.scala	/^  def cHideCaching: ClientFilter = { c =>$/;"	m
cIdentity	src/main/scala/tilelink/Filter.scala	/^  def cIdentity: ClientFilter = { c => Some(c) }$/;"	m
cSelectCaching	src/main/scala/tilelink/Filter.scala	/^  def cSelectCaching: ClientFilter = { c =>$/;"	m
cWidth	src/main/scala/tilelink/Bundles.scala	/^  val cWidth = 3$/;"	l
c_a	src/main/scala/tilelink/CacheCork.scala	/^        val c_a = Wire(out.a)$/;"	l
c_addr	src/main/scala/tilelink/RegionReplication.scala	/^      val c_addr = in.c.bits.address$/;"	l
c_array	src/main/scala/rocket/TLB.scala	/^  val c_array = Cat(Fill(nPhysicalEntries, cacheable), normal_entries.map(_.c).asUInt)$/;"	l
c_contained	src/main/scala/tilelink/RegionReplication.scala	/^      val c_contained = params.region.contains(c_addr) || totalContainment.B$/;"	l
c_d	src/main/scala/tilelink/CacheCork.scala	/^        val c_d = Wire(in.d)$/;"	l
c_dec	src/main/scala/tilelink/Edges.scala	/^    val c_dec = x.c.fire() && c_last && c_response$/;"	l
c_first	src/main/scala/tilelink/Broadcast.scala	/^      val c_first = edgeIn.first(in.c)$/;"	l
c_first	src/main/scala/tilelink/Monitor.scala	/^    val c_first = edge.first(bundle.c.bits, bundle.c.fire())$/;"	l
c_first	src/main/scala/tilelink/Monitor.scala	/^    val c_first = edge.first(c.bits, c.fire())$/;"	l
c_inc	src/main/scala/tilelink/Edges.scala	/^    val c_inc = x.c.fire() && c_first && c_request$/;"	l
c_last	src/main/scala/devices/tilelink/Error.scala	/^      val c_last = edge.last(c)$/;"	l
c_local	src/main/scala/tilelink/AddressAdjuster.scala	/^        val c_local = routeLocal(parent.c.bits.address)$/;"	l
c_opcode_bus_size	src/main/scala/tilelink/Monitor.scala	/^    val c_opcode_bus_size = 3 + 1                    \/\/opcode size is 3, but add so that 0 is not mapped to anything$/;"	l
c_opcode_lookup	src/main/scala/tilelink/Monitor.scala	/^    val c_opcode_lookup = WireInit(0.U((1 << log_c_opcode_bus_size).W))$/;"	l
c_opcodes_set	src/main/scala/tilelink/Monitor.scala	/^    val c_opcodes_set  = WireInit(0.U((edge.client.endSourceId << log_c_opcode_bus_size).W))$/;"	l
c_opcodes_set_interm	src/main/scala/tilelink/Monitor.scala	/^    val c_opcodes_set_interm = WireInit(0.U(c_opcode_bus_size.W))$/;"	l
c_probeack	src/main/scala/tilelink/Broadcast.scala	/^      val c_probeack     = in.c.bits.opcode === TLMessages.ProbeAck$/;"	l
c_probeackdata	src/main/scala/tilelink/Broadcast.scala	/^      val c_probeackdata = in.c.bits.opcode === TLMessages.ProbeAckData$/;"	l
c_release	src/main/scala/tilelink/Broadcast.scala	/^      val c_release      = in.c.bits.opcode === TLMessages.Release$/;"	l
c_releasedata	src/main/scala/tilelink/Broadcast.scala	/^      val c_releasedata  = in.c.bits.opcode === TLMessages.ReleaseData$/;"	l
c_set	src/main/scala/tilelink/Monitor.scala	/^    val c_set          = WireInit(0.U(edge.client.endSourceId.W))$/;"	l
c_set_wo_ready	src/main/scala/tilelink/Monitor.scala	/^    val c_set_wo_ready = WireInit(0.U(edge.client.endSourceId.W))$/;"	l
c_size_bus_size	src/main/scala/tilelink/Monitor.scala	/^    val c_size_bus_size   = edge.bundle.sizeBits + 1 \/\/add one so that 0 is not mapped to anything (size 0 -> size 1 in map, size 0 in map means unset)$/;"	l
c_size_lookup	src/main/scala/tilelink/Monitor.scala	/^    val c_size_lookup   = WireInit(0.U((1 << log_c_size_bus_size).W))$/;"	l
c_sizes_set	src/main/scala/tilelink/Monitor.scala	/^    val c_sizes_set    = WireInit(0.U((edge.client.endSourceId << log_c_size_bus_size).W))$/;"	l
c_sizes_set_interm	src/main/scala/tilelink/Monitor.scala	/^    val c_sizes_set_interm   = WireInit(0.U(c_size_bus_size.W))$/;"	l
c_trackerOH	src/main/scala/tilelink/Broadcast.scala	/^      val c_trackerOH    = trackers.map { t => t.line === (in.c.bits.address >> lineShift) }$/;"	l
c_trackerSrc	src/main/scala/tilelink/Broadcast.scala	/^      val c_trackerSrc   = Mux1H(c_trackerOH, trackers.map { _.source })$/;"	l
ca	src/main/scala/rocket/Decode.scala	/^    val ca = getCost(a, bits)$/;"	l
cache	src/main/scala/amba/axi4/Bundles.scala	/^  val cache  = UInt(width = params.cacheBits)$/;"	l
cache	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^  def cache() = BindingScope.bindingScopes.map(_.getResourceBindingsMap)$/;"	m
cache	src/main/scala/rocket/Decode.scala	/^    val cache = caches.getOrElseUpdate(addr, Map[Term,Bool]())$/;"	l
cache	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^    val cache = new HellaCacheIO$/;"	l
cache	src/main/scala/tilelink/ToAXI4.scala	/^        val cache = Wire(Vec(4, Bool()))$/;"	l
cacheBits	src/main/scala/amba/axi4/Parameters.scala	/^  val cacheBits = AXI4Parameters.cacheBits$/;"	l
cacheBits	src/main/scala/amba/axi4/Protocol.scala	/^  val cacheBits = 4$/;"	l
cacheBlockBytes	src/main/scala/tile/BaseTile.scala	/^  def cacheBlockBytes = p(CacheBlockBytes)$/;"	m
cacheDataBeats	src/main/scala/tile/L1Cache.scala	/^  def cacheDataBeats = (cacheBlockBytes * 8) \/ cacheDataBits$/;"	m
cacheDataBits	src/main/scala/tile/L1Cache.scala	/^  def cacheDataBits = tlBundleParams.dataBits$/;"	m
cacheDataBytes	src/main/scala/tile/L1Cache.scala	/^  def cacheDataBytes = cacheDataBits \/ 8$/;"	m
cacheOH	src/main/scala/tilelink/Broadcast.scala	/^    val cacheOH = Output(UInt(caches.W))$/;"	l
cacheOH	src/main/scala/tilelink/Broadcast.scala	/^  val cacheOH = Reg(UInt(caches.W))$/;"	l
cacheOH	src/main/scala/tilelink/Broadcast.scala	/^  val cacheOH = UInt(caches.W)$/;"	l
cacheOH	src/main/scala/tilelink/Broadcast.scala	/^  val cacheOH = UInt(params.caches.W)$/;"	l
cacheParams	src/main/scala/rocket/HellaCache.scala	/^  val cacheParams = tileParams.dcache.get$/;"	l
cacheParams	src/main/scala/rocket/ICache.scala	/^  val cacheParams = tileParams.icache.get$/;"	l
cacheParams	src/main/scala/tile/L1Cache.scala	/^  val cacheParams: L1CacheParams$/;"	l
cacheParams	src/main/scala/tile/LazyRoCC.scala	/^  val cacheParams = tileParams.icache.get$/;"	l
cache_resp	src/main/scala/rocket/NBDcache.scala	/^  val cache_resp = Wire(Valid(new HellaCacheResp))$/;"	l
cache_targets	src/main/scala/tilelink/Broadcast.scala	/^      val cache_targets = caches.map(c => c.start.U)$/;"	l
cacheable	src/main/scala/rocket/NBDcache.scala	/^  val cacheable = edge.manager.supportsAcquireBFast(io.req.bits.addr, lgCacheBlockBytes)$/;"	l
cacheable	src/main/scala/rocket/TLB.scala	/^  val cacheable = Bool()$/;"	l
cacheable	src/main/scala/rocket/TLB.scala	/^  val cacheable = fastCheck(_.supportsAcquireB) && (instruction || !usingDataScratchpad)$/;"	l
cached	src/main/scala/groundtest/Tile.scala	/^  val cached = if(dcache.isDefined) 1 else 0$/;"	l
cached_grant_wait	src/main/scala/rocket/DCache.scala	/^  val cached_grant_wait = Reg(init=Bool(false))$/;"	l
caches	src/main/scala/tilelink/Broadcast.scala	/^      val caches = clients.filter(_.supports.probe).map(_.sourceId)$/;"	l
caches	src/main/scala/tilelink/CacheCork.scala	/^        val caches = clients.filter(_.supports.probe)$/;"	l
call	src/main/scala/rocket/BTB.scala	/^  def call = 2.U$/;"	m
camFifoId	src/main/scala/tilelink/AtomicAutomata.scala	/^      def camFifoId(m: TLSlaveParameters) = m.fifoId.map(id => max(0, domainsNeedingHelp.indexOf(id))).getOrElse(0)$/;"	m
camSize	src/main/scala/tilelink/AtomicAutomata.scala	/^      val camSize = min(domainsNeedingHelp.size, concurrency)$/;"	l
cam_a	src/main/scala/tilelink/AtomicAutomata.scala	/^        val cam_a = Reg(Vec(camSize, new TLAtomicAutomata.CAM_A(params)))$/;"	l
cam_abusy	src/main/scala/tilelink/AtomicAutomata.scala	/^        val cam_abusy  = cam_s.map(e => e.state === GET || e.state === AMO) \/\/ A is blocked$/;"	l
cam_amo	src/main/scala/tilelink/AtomicAutomata.scala	/^        val cam_amo    = cam_s.map(_.state === AMO)$/;"	l
cam_d	src/main/scala/tilelink/AtomicAutomata.scala	/^        val cam_d = Reg(Vec(camSize, new TLAtomicAutomata.CAM_D(params)))$/;"	l
cam_dmatch	src/main/scala/tilelink/AtomicAutomata.scala	/^        val cam_dmatch = cam_s.map(e => e.state =\/= FREE) \/\/ D should inspect these entries$/;"	l
cam_free	src/main/scala/tilelink/AtomicAutomata.scala	/^        val cam_free   = cam_s.map(_.state === FREE)$/;"	l
cam_s	src/main/scala/tilelink/AtomicAutomata.scala	/^        val cam_s = RegInit(Vec.fill(camSize)(initval))$/;"	l
camelCase	src/main/scala/diplomacy/Nodes.scala	/^    val camelCase = "([a-z])([A-Z])".r$/;"	l
canAcceptCachedGrant	src/main/scala/rocket/DCache.scala	/^  val canAcceptCachedGrant = !release_state.isOneOf(s_voluntary_writeback, s_voluntary_write_meta, s_voluntary_release)$/;"	l
canAcceptLoadThenLoad	src/main/scala/rocket/HellaCache.scala	/^  val canAcceptLoadThenLoad = Bool()$/;"	l
canAcceptStoreThenLoad	src/main/scala/rocket/HellaCache.scala	/^  val canAcceptStoreThenLoad = Bool()$/;"	l
canAcceptStoreThenRMW	src/main/scala/rocket/HellaCache.scala	/^  val canAcceptStoreThenRMW = Bool()$/;"	l
canCorrect	src/main/scala/util/ECC.scala	/^  def canCorrect = false$/;"	m
canCorrect	src/main/scala/util/ECC.scala	/^  def canCorrect = true$/;"	m
canCorrect	src/main/scala/util/ECC.scala	/^  def canCorrect: Boolean$/;"	m
canDetect	src/main/scala/util/ECC.scala	/^  def canDetect = false$/;"	m
canDetect	src/main/scala/util/ECC.scala	/^  def canDetect = true$/;"	m
canDetect	src/main/scala/util/ECC.scala	/^  def canDetect: Boolean$/;"	m
canDoit	src/main/scala/tilelink/AtomicAutomata.scala	/^      val canDoit = m.supportsPutFull.contains(ourSupport) && m.supportsGet.contains(ourSupport)$/;"	l
canEq	src/main/scala/util/SimpleProduct.scala	/^      def canEq = that.canEqual(this) && this.canEqual(that)$/;"	m
canOverflow	src/main/scala/amba/axi4/Xbar.scala	/^              val canOverflow = legalFlight > flight$/;"	l
canSendFreshReq	src/main/scala/groundtest/TraceGen.scala	/^  val canSendFreshReq = (!reqValid || io.mem.req.fire()) &&$/;"	l
canSupportCFlushLine	src/main/scala/rocket/HellaCache.scala	/^  def canSupportCFlushLine = !usingVM || cfg.blockBytes * cfg.nSets <= (1 << pgIdxBits)$/;"	m
can_finish	src/main/scala/rocket/NBDcache.scala	/^  val can_finish = state.isOneOf(s_invalid, s_refill_req)$/;"	l
can_hit	src/main/scala/rocket/PTW.scala	/^    val can_hit =$/;"	l
can_refill	src/main/scala/rocket/PTW.scala	/^    val can_refill =$/;"	l
candidates	src/main/scala/diplomacy/AddressDecoder.scala	/^      val candidates = bits.map { bit =>$/;"	l
cap	src/main/scala/amba/axi4/Filter.scala	/^    val cap = TransferSizes(1, capTransfer)$/;"	l
cap	src/main/scala/tilelink/Filter.scala	/^    val cap = TransferSizes(1, capTransfer)$/;"	l
cap	src/main/scala/util/LanePositionedQueue.scala	/^  def cap(x: UInt) = Mux(x > lanes.U, lanes.U, x) +& 1.U$/;"	m
capBits1	src/main/scala/util/LanePositionedQueue.scala	/^  val capBits1 = log2Ceil(capacity+1)$/;"	l
capTransfer	src/main/scala/amba/axi4/Filter.scala	/^    val capTransfer = if (alignment == 0 || alignment > maxTransfer) maxTransfer else alignment.toInt$/;"	l
capTransfer	src/main/scala/tilelink/Filter.scala	/^    val capTransfer = if (alignment == 0 || alignment > maxTransfer) maxTransfer else alignment.toInt$/;"	l
cap_ready	src/main/scala/util/LanePositionedQueue.scala	/^  def cap_ready(l: Int = lanes) = if (l == maxReady) {$/;"	m
cap_ready	src/main/scala/util/MultiPortQueue.scala	/^    val cap_ready = Mux(dense.ready >= dense.lanes.U, dense.lanes.U, low_ready)$/;"	l
cap_valid	src/main/scala/util/LanePositionedQueue.scala	/^  def cap_valid(l: Int = lanes) = if (l == maxValid) {$/;"	m
cap_valid	src/main/scala/util/MultiPortQueue.scala	/^    val cap_valid = Mux(dense.valid >= dense.lanes.U, dense.lanes.U, low_valid)$/;"	l
capacity	src/main/scala/util/LanePositionedQueue.scala	/^  val capacity  = rows * lanes$/;"	l
capture	src/main/scala/jtag/JtagShifter.scala	/^    val capture = Capture(gen)$/;"	l
capture	src/main/scala/jtag/JtagShifter.scala	/^    val capture = Capture(genCapture)$/;"	l
capture	src/main/scala/jtag/JtagShifter.scala	/^  val capture = Bool()  \/\/ high in the CaptureIR\/DR state when this chain is selected$/;"	l
capture	src/main/scala/jtag/JtagShifter.scala	/^  val capture = Output(Bool())  \/\/ will be high in capture state (single cycle), captured on following rising edge$/;"	l
captureBits	src/main/scala/jtag/JtagShifter.scala	/^  val captureBits = io.capture.bits.asUInt()$/;"	l
captureWidth	src/main/scala/jtag/JtagShifter.scala	/^  val captureWidth = DataMirror.widthOf(genCapture) match {$/;"	l
carryOut	src/main/scala/util/Counters.scala	/^  lazy val carryOut = {$/;"	l
case_a_partitions	src/main/scala/diplomacy/AddressDecoder.scala	/^    val case_a_partitions = partitioned_partitions.map(_._1).filter(!_.isEmpty)$/;"	l
case_a_ports	src/main/scala/diplomacy/AddressDecoder.scala	/^    val case_a_ports = partitioned_ports.map(_._1).filter(!_.isEmpty).sorted(portOrder)$/;"	l
case_b_partitions	src/main/scala/diplomacy/AddressDecoder.scala	/^    val case_b_partitions = partitioned_partitions.map(_._2).filter(!_.isEmpty)$/;"	l
case_b_ports	src/main/scala/diplomacy/AddressDecoder.scala	/^    val case_b_ports = partitioned_ports.map(_._2).filter(!_.isEmpty).sorted(portOrder)$/;"	l
cases	src/main/scala/diplomacy/Parameters.scala	/^  val cases = Seq(CACHED, TRACKED, UNCACHED, IDEMPOTENT, VOLATILE, PUT_EFFECTS, GET_EFFECTS)$/;"	l
cast	src/main/scala/devices/tilelink/BusBypass.scala	/^      def cast(x: TLBundleB) = { val out = Wire(in.b.bits); out <> x; out }$/;"	m
cast	src/main/scala/devices/tilelink/BusBypass.scala	/^    def cast(x: TLBundleD) = { val out = Wire(in.d.bits); out <> x; out }$/;"	m
castA	src/main/scala/devices/tilelink/MasterMux.scala	/^    def castA(x: TLBundleA) = { val ret = Wire(out.a.bits); ret <> x; ret }$/;"	m
castC	src/main/scala/devices/tilelink/MasterMux.scala	/^      def castC(x: TLBundleC) = { val ret = Wire(out.c.bits); ret <> x; ret }$/;"	m
castE	src/main/scala/devices/tilelink/MasterMux.scala	/^      def castE(x: TLBundleE) = { val ret = Wire(out.e.bits); ret <> x; ret }$/;"	m
cat	src/main/scala/interrupts/Xbar.scala	/^    val cat = intnode.in.map { case (i, e) => i.take(e.source.num) }.flatten$/;"	l
cat	src/main/scala/tilelink/Metadata.scala	/^    val cat = Cat(isWrite(cmd), isWriteIntent(cmd))$/;"	l
catcher	src/main/scala/util/ResetCatchAndSync.scala	/^      val catcher = Module (new ResetCatchAndSync(sync))$/;"	l
cated	src/main/scala/tilelink/WidthWidget.scala	/^        val cated = Wire(chiselTypeOf(repeated))$/;"	l
categorize	src/main/scala/tilelink/Metadata.scala	/^  def categorize(cmd: UInt): UInt = {$/;"	m
cause	src/main/scala/rocket/CSR.scala	/^  val cause = UInt(INPUT, xLen)$/;"	l
cause	src/main/scala/rocket/CSR.scala	/^  val cause = UInt(width = 3)$/;"	l
cause	src/main/scala/rocket/CSR.scala	/^  val cause = UInt(width = xLen)$/;"	l
cause	src/main/scala/rocket/CSR.scala	/^  val cause =$/;"	l
cause	src/main/scala/util/TraceCoreInterface.scala	/^  val cause = UInt(params.xlen.W)$/;"	l
causeIsDebugBreak	src/main/scala/rocket/CSR.scala	/^  val causeIsDebugBreak = !cause(xLen-1) && insn_break && Cat(reg_dcsr.ebreakm, reg_dcsr.ebreakh, reg_dcsr.ebreaks, reg_dcsr.ebreaku)(reg_mstatus.prv)$/;"	l
causeIsDebugInt	src/main/scala/rocket/CSR.scala	/^  val causeIsDebugInt = cause(xLen-1) && cause_lsbs === CSR.debugIntCause$/;"	l
causeIsDebugTrigger	src/main/scala/rocket/CSR.scala	/^  val causeIsDebugTrigger = !cause(xLen-1) && cause_lsbs === CSR.debugTriggerCause$/;"	l
causeIsNmi	src/main/scala/rocket/CSR.scala	/^  val causeIsNmi = causeIsRnmiInt$/;"	l
causeIsRnmiBEU	src/main/scala/rocket/CSR.scala	/^  val causeIsRnmiBEU = cause(xLen-1) && cause(xLen-2) && cause_lsbs === CSR.rnmiBEUCause$/;"	l
causeIsRnmiInt	src/main/scala/rocket/CSR.scala	/^  val causeIsRnmiInt = cause(xLen-1) && cause(xLen-2) && (cause_lsbs === CSR.rnmiIntCause || cause_lsbs === CSR.rnmiBEUCause)$/;"	l
causeWidth	src/main/scala/tile/BusErrorUnit.scala	/^    val causeWidth = log2Ceil(sources.lastIndexWhere(_.nonEmpty) + 1)$/;"	l
cause_lsbs	src/main/scala/rocket/CSR.scala	/^  val cause_lsbs = cause(log2Ceil(1 + CSR.busErrorIntCause)-1, 0)$/;"	l
cause_wen	src/main/scala/tile/BusErrorUnit.scala	/^    val cause_wen = Wire(init = false.B)$/;"	l
causes	src/main/scala/prci/ResetWrangler.scala	/^    val causes = in.map(_.reset).foldLeft(false.B)(_.asBool || _.asBool)$/;"	l
cb	src/main/scala/rocket/Decode.scala	/^    val cb = getCost(b, bits)$/;"	l
cbus	src/main/scala/subsystem/BankedL2Params.scala	/^    val cbus = context.locateTLBusWrapper(controlPortsSlaveWhere)$/;"	l
cbus	src/main/scala/subsystem/BaseSubsystem.scala	/^  val cbus = tlBusWrapperLocationMap.lift(CBUS).getOrElse(sbus)$/;"	l
ccover	src/main/scala/devices/tilelink/Plic.scala	/^    def ccover(cond: Bool, label: String, desc: String)(implicit sourceInfo: SourceInfo) =$/;"	m
ccover	src/main/scala/rocket/DCache.scala	/^  def ccover(cond: Bool, label: String, desc: String)(implicit sourceInfo: SourceInfo) =$/;"	m
ccover	src/main/scala/rocket/Frontend.scala	/^  def ccover(cond: Bool, label: String, desc: String)(implicit sourceInfo: SourceInfo) =$/;"	m
ccover	src/main/scala/rocket/ICache.scala	/^  def ccover(cond: Bool, label: String, desc: String)(implicit sourceInfo: SourceInfo) =$/;"	m
ccover	src/main/scala/rocket/TLB.scala	/^  def ccover(cond: Bool, label: String, desc: String)(implicit sourceInfo: SourceInfo) =$/;"	m
ccover	src/main/scala/tile/FPU.scala	/^  def ccover(cond: Bool, label: String, desc: String)(implicit sourceInfo: SourceInfo) =$/;"	m
ccoverNotScratchpad	src/main/scala/rocket/DCache.scala	/^  def ccoverNotScratchpad(cond: Bool, label: String, desc: String)(implicit sourceInfo: SourceInfo) =$/;"	m
cdc_reg	src/main/scala/util/SynchronizerReg.scala	/^    val cdc_reg = Module(new ClockCrossingReg(in.getWidth, doInit))$/;"	l
cdc_reg	src/main/scala/util/SynchronizerReg.scala	/^  val cdc_reg = if (doInit) RegEnable(next=io.d, init=0.U(w.W), enable=io.en) else RegEnable(next=io.d, enable=io.en)$/;"	l
cease	src/main/scala/rocket/CSR.scala	/^  val cease = Bool()$/;"	l
cease	src/main/scala/tile/Core.scala	/^    val cease = Bool().asOutput$/;"	l
cease	src/main/scala/tile/Interrupts.scala	/^      val cease = (waitForQuiescence(c))$/;"	l
ceaseNode	src/main/scala/tile/BaseTile.scala	/^  def ceaseNode: IntOutwardNode       \/\/ Tile has ceased to retire instructions$/;"	m
ceaseNode	src/main/scala/tile/Interrupts.scala	/^  val ceaseNode = IntSourceNode(IntSourcePortSimple())$/;"	l
cellbits	src/main/scala/diplomacy/DeviceTree.scala	/^    val cellbits = 32$/;"	l
cfg	src/main/scala/devices/debug/Debug.scala	/^  val cfg = p(DebugModuleKey).get$/;"	l
cfg	src/main/scala/devices/debug/SBA.scala	/^    val cfg = p(DebugModuleKey).get$/;"	l
cfg	src/main/scala/devices/debug/SBA.scala	/^  val cfg = p(DebugModuleKey).get$/;"	l
cfg	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val cfg: DebugModuleParams = dmInner().dmInner.getCfg()$/;"	l
cfg	src/main/scala/rocket/HellaCache.scala	/^  val cfg = cacheParams$/;"	l
cfg	src/main/scala/rocket/PMP.scala	/^  val cfg = new PMPConfig$/;"	l
cfgLocked	src/main/scala/rocket/PMP.scala	/^  def cfgLocked = cfg.l$/;"	m
cfiType	src/main/scala/rocket/BTB.scala	/^  val cfiType = CFIType()$/;"	l
cfiType	src/main/scala/rocket/BTB.scala	/^  val cfiType = Reg(Vec(entries, CFIType()))$/;"	l
cfn	src/main/scala/rocket/TLBPermissions.scala	/^    val cfn = lowCostProperty(_.c)$/;"	l
cg	src/main/scala/util/ClockGate.scala	/^    val cg = Module(p(ClockGateImpl)())$/;"	l
chain	src/main/scala/rocket/Breakpoint.scala	/^  val chain = Bool()$/;"	l
chain	src/main/scala/tilelink/Buffer.scala	/^  def chain(depth: Int, name: Option[String] = None)(implicit p: Parameters): Seq[TLNode] = {$/;"	m
chain	src/main/scala/util/ShiftReg.scala	/^    val chain = Module(gen)$/;"	l
chain	src/main/scala/util/ShiftReg.scala	/^  val chain = List.tabulate(depth) { i =>$/;"	l
chain	src/main/scala/util/SynchronizerReg.scala	/^  val chain = List.tabulate(sync) { i =>$/;"	l
chainControlFrom	src/main/scala/jtag/JtagShifter.scala	/^  def chainControlFrom(in: ShifterIO): Unit = {$/;"	m
chainIn	src/main/scala/jtag/JtagShifter.scala	/^  val chainIn = Input(new ShifterIO)$/;"	l
chainNode	src/main/scala/tilelink/Buffer.scala	/^  def chainNode(depth: Int, name: Option[String] = None)(implicit p: Parameters): TLNode = {$/;"	m
chainOut	src/main/scala/jtag/JtagShifter.scala	/^  val chainOut = Output(new ShifterIO)$/;"	l
chainToIcode	src/main/scala/jtag/JtagTap.scala	/^    val chainToIcode = (SortedMap(allInstructions.toList:_*).groupBy { case (icode, chain) => chain } map {$/;"	l
chainToSelect	src/main/scala/jtag/JtagTap.scala	/^    val chainToSelect = chainToIcode map {$/;"	l
channelBytes	src/main/scala/tilelink/Parameters.scala	/^  val channelBytes:   TLChannelBeatBytes,$/;"	l
channelBytes	src/main/scala/tilelink/Parameters.scala	/^  val channelBytes:  TLChannelBeatBytes,$/;"	l
channelName	src/main/scala/tilelink/Bundles.scala	/^  val channelName = "'A' channel"$/;"	l
channelName	src/main/scala/tilelink/Bundles.scala	/^  val channelName = "'B' channel"$/;"	l
channelName	src/main/scala/tilelink/Bundles.scala	/^  val channelName = "'C' channel"$/;"	l
channelName	src/main/scala/tilelink/Bundles.scala	/^  val channelName = "'D' channel"$/;"	l
channelName	src/main/scala/tilelink/Bundles.scala	/^  val channelName = "'E' channel"$/;"	l
channelName	src/main/scala/tilelink/Bundles.scala	/^  val channelName: String$/;"	l
chars_found	src/main/scala/tile/LazyRoCC.scala	/^  val chars_found = PopCount(needle_match.zipWithIndex.map {$/;"	l
cheaper	src/main/scala/rocket/Decode.scala	/^  def cheaper(a: List[Term], b: List[Term], bits: Int) = {$/;"	m
check	src/main/scala/rocket/Events.scala	/^  def check(mask: UInt) = {$/;"	m
check	src/main/scala/tilelink/PatternPusher.scala	/^    val check  = Vec(pattern.map(p => Bool(p.dataIn.isDefined)))(step) holdUnless a.fire()$/;"	l
check	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^    val check =$/;"	l
checkExceptions	src/main/scala/rocket/RocketCore.scala	/^  def checkExceptions(x: Seq[(Bool, UInt)]) =$/;"	m
checkHazards	src/main/scala/rocket/RocketCore.scala	/^  def checkHazards(targets: Seq[(Bool, UInt)], cond: UInt => Bool) =$/;"	m
check_data	scripts/check_comparator_trace.py	/^def check_data(gnt_id, addr_beat, data):$/;"	f
check_trace	scripts/check_cache_trace.py	/^def check_trace(fname):$/;"	f
childAddresses	src/main/scala/diplomacy/Resources.scala	/^    val childAddresses = map.value.lift("ranges") match {$/;"	l
childClock	src/main/scala/diplomacy/LazyModule.scala	/^  val childClock: Clock = Wire(Clock())$/;"	l
childDangles	src/main/scala/diplomacy/LazyModule.scala	/^    val childDangles = wrapper.children.reverse.flatMap { c =>$/;"	l
childReset	src/main/scala/diplomacy/LazyModule.scala	/^  val childReset: Reset = Wire(Reset())$/;"	l
childrenIterator	src/main/scala/diplomacy/LazyModule.scala	/^  def childrenIterator(iterfunc: LazyModule => Unit): Unit = {$/;"	m
chisel3.shim	src/main/scala/diplomacy/CloneModule.scala	/^package chisel3.shim$/;"	p
chiselType	src/main/scala/jtag/JtagStateMachine.scala	/^    def chiselType() = UInt(width.W)$/;"	m
choice	src/main/scala/util/Arbiters.scala	/^  val choice = if (rr) {$/;"	l
chooseInterrupt	src/main/scala/rocket/CSR.scala	/^  def chooseInterrupt(masksIn: Seq[UInt]): (Bool, UInt) = {$/;"	m
chosen	src/main/scala/groundtest/DummyPTW.scala	/^    val chosen = UInt(width = log2Up(n))$/;"	l
chosen	src/main/scala/util/Arbiters.scala	/^  val chosen = Mux(locked, lockIdx, choice)$/;"	l
circuit	src/main/scala/tilelink/Xbar.scala	/^  def circuit(policy: TLArbiter.Policy, seqIn: Seq[(TLBundle, TLEdge)], seqOut: Seq[(TLBundle, TLEdge)]): Unit = {$/;"	m
circuit	src/main/scala/tilelink/Xbar.scala	/^  def circuit(policy: TLArbiter.Policy, seqIn: Seq[(TLBundle_ACancel, TLEdge)], seqOut: Seq[(TLBundle_ACancel, TLEdge)]): Unit = {$/;"	m
circuit	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val circuit = RenameModules(nameMappings, state.circuit)$/;"	l
circuitIdentity	src/main/scala/diplomacy/Nodes.scala	/^  def circuitIdentity: Boolean = false$/;"	m
cjtag	src/main/scala/devices/debug/Periphery.scala	/^  def cjtag = protocols.contains(CJTAG)$/;"	m
claimOffset	src/main/scala/devices/tilelink/Plic.scala	/^  def claimOffset = 4$/;"	m
claimed	src/main/scala/devices/tilelink/Plic.scala	/^      val claimed = claimer(0) && maxDevs(0) > 0$/;"	l
claimedDevs	src/main/scala/devices/tilelink/Plic.scala	/^    val claimedDevs = Vec(UIntToOH(claiming, nDevices+1).asBools)$/;"	l
claimer	src/main/scala/devices/tilelink/Plic.scala	/^    val claimer = Wire(Vec(nHarts, Bool()))$/;"	l
claiming	src/main/scala/devices/tilelink/Plic.scala	/^    val claiming = Seq.tabulate(nHarts){i => Mux(claimer(i), maxDevs(i), UInt(0))}.reduceLeft(_|_)$/;"	l
clamp_ready	src/main/scala/util/LanePositionedQueue.scala	/^  def clamp_ready(x: UInt): Unit = { ready := min(x, valid, lanes) }$/;"	m
clamp_valid	src/main/scala/util/LanePositionedQueue.scala	/^  def clamp_valid(x: UInt): Unit = { valid := min(x, ready, lanes) }$/;"	m
className	src/main/scala/diplomacy/LazyModule.scala	/^  lazy val className: String = findClassName(getClass)$/;"	l
classNames	src/main/scala/stage/RocketChipOptions.scala	/^      val classNames = names.map{ n => n.split('.').last }$/;"	l
classes	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^      val classes    = klass.getClasses$/;"	l
classify	src/main/scala/tile/FPU.scala	/^  def classify(x: UInt) = {$/;"	m
classify_out	src/main/scala/tile/FPU.scala	/^    val classify_out = (floatTypes.map(t => t.classify(maxType.unsafeConvert(in.in1, t))): Seq[UInt])(tag)$/;"	l
clauses	src/main/scala/util/Misc.scala	/^    val clauses = in.subsets(n).map(_.reduce(_ && _))$/;"	l
cleanReleaseMessage	src/main/scala/rocket/DCache.scala	/^  val cleanReleaseMessage = edge.ProbeAck(b = probe_bits, reportPermissions = s2_report_param)$/;"	l
clear	src/main/scala/rocket/BTB.scala	/^  def clear(): Unit = count := UInt(0)$/;"	m
clear	src/main/scala/rocket/RocketCore.scala	/^    def clear(en: Bool, addr: UInt): Unit = update(en, _next & ~mask(en, addr))$/;"	m
clearOH	src/main/scala/tilelink/Broadcast.scala	/^      val clearOH = Mux(in.c.fire() && (c_probeack || c_probeackdata) && CisN, whoC, 0.U)$/;"	l
clearOH	src/main/scala/tilelink/Broadcast.scala	/^    val clearOH = Input(UInt(caches.W))$/;"	l
client	src/main/scala/tilelink/Parameters.scala	/^  def client = master$/;"	m
clientParams	src/main/scala/tilelink/Fuzzer.scala	/^  val clientParams = if (nOrdered.isDefined) {$/;"	l
client_fd	src/main/resources/csrc/remote_bitbang.h	/^  int client_fd;$/;"	m	class:remote_bitbang_t
clients	src/main/scala/tilelink/Broadcast.scala	/^      val clients = edgeIn.client.clients$/;"	l
clients	src/main/scala/tilelink/CacheCork.scala	/^        val clients = edgeIn.client.clients$/;"	l
clients	src/main/scala/tilelink/Parameters.scala	/^  def clients = masters$/;"	m
clint	src/main/scala/devices/tilelink/CLINT.scala	/^    val clint = LazyModule(new CLINT(params, cbus.beatBytes))$/;"	l
clintOpt	src/main/scala/devices/tilelink/CLINT.scala	/^  val clintOpt = p(CLINTKey).map { params =>$/;"	l
clk	src/main/resources/vsrc/SimDTM.v	/^  input clk,$/;"	p
clk	src/main/scala/devices/debug/Periphery.scala	/^    val clk = Input(Clock())$/;"	l
clk	src/main/scala/prci/TestClockSource.scala	/^  val clk = Output(Clock())$/;"	l
clk	src/main/scala/util/AsyncResetReg.scala	/^    val clk = Clock(INPUT)$/;"	l
clk_in	src/main/scala/util/ClockDivider.scala	/^    val clk_in  = Input(Clock())$/;"	l
clk_out	src/main/scala/util/ClockDivider.scala	/^    val clk_out = Output(Clock())$/;"	l
clock	src/main/resources/vsrc/TestDriver.v	/^  reg clock = 1'b0;$/;"	r
clock	src/main/scala/devices/debug/Periphery.scala	/^    val clock = Input(Clock())$/;"	l
clock	src/main/scala/devices/debug/Periphery.scala	/^  val clock = Clock()$/;"	l
clock	src/main/scala/devices/debug/Periphery.scala	/^  val clock = Input(Clock())$/;"	l
clock	src/main/scala/prci/ClockBundles.scala	/^  val clock = Output(Clock())$/;"	l
clock	src/main/scala/prci/ClockDomain.scala	/^    val clock = IO(Output(chiselTypeOf(clockBundle.clock)))$/;"	l
clock	src/main/scala/prci/ClockParameters.scala	/^  val clock = source.give.orElse(sink.take).map { clock =>$/;"	l
clock	src/main/scala/scie/SCIE.scala	/^  val clock = Input(Clock())$/;"	l
clock	src/main/scala/tile/LazyRoCC.scala	/^                      val clock = Input(Clock())$/;"	l
clock	src/main/scala/util/AsyncQueue.scala	/^  val clock = IO(Input(Clock()))$/;"	l
clock	src/main/scala/util/Misc.scala	/^  val clock = Clock()$/;"	l
clock	src/main/scala/util/ROMGenerator.scala	/^    val clock = Clock(INPUT)$/;"	l
clockBundle	src/main/scala/prci/ClockDomain.scala	/^  def clockBundle = clockNode.in.head._1$/;"	m
clockBundle	src/main/scala/prci/ClockDomain.scala	/^  def clockBundle = clockNode.out.head._1$/;"	m
clockBundle	src/main/scala/prci/ClockDomain.scala	/^  def clockBundle: ClockBundle$/;"	m
clockBundle	src/main/scala/tile/TilePRCIDomain.scala	/^  def clockBundle = clockNode.in.head._1$/;"	m
clockBundle	src/main/scala/tile/TilePRCIDomain.scala	/^  lazy val clockBundle = tapClockNode.in.head._1$/;"	l
clockBundle	src/main/scala/tilelink/BusWrapper.scala	/^  def clockBundle = clockSinkNode.in.head._1$/;"	m
clockGroupNode	src/main/scala/tilelink/BusWrapper.scala	/^  val clockGroupNode = clockGroupAggregator.node \/\/ other bus clock groups attach here$/;"	l
clockNode	src/main/scala/devices/tilelink/ClockBlocker.scala	/^  val clockNode = ClockAdapterNode()$/;"	l
clockNode	src/main/scala/prci/ClockDomain.scala	/^  val clockNode = ClockSinkNode(Seq(clockSinkParams))$/;"	l
clockNode	src/main/scala/prci/ClockDomain.scala	/^  val clockNode = ClockSourceNode(Seq(clockSourceParams))$/;"	l
clockNode	src/main/scala/tile/TilePRCIDomain.scala	/^  val clockNode = ClockSinkNode(Seq(clockSinkParams))$/;"	l
clockNode	src/main/scala/tile/TilePRCIDomain.scala	/^  val clockNode = FixedClockBroadcast(None) :=* tapClockNode$/;"	l
clockNode	src/main/scala/tilelink/BusWrapper.scala	/^  val clockNode = clockGroup.node$/;"	l
clockSinkParams	src/main/scala/groundtest/TraceGen.scala	/^  val clockSinkParams = ClockSinkParameters()$/;"	l
clockSinkParams	src/main/scala/subsystem/HasTiles.scala	/^    val clockSinkParams = tileParams.clockSinkParams.copy(name = Some(s"${tileParams.name.getOrElse("core")}_${tileParams.hartId}"))$/;"	l
clockSinkParams	src/main/scala/tile/BaseTile.scala	/^  val clockSinkParams: ClockSinkParameters$/;"	l
clockSource	src/main/scala/subsystem/HasTiles.scala	/^    val clockSource = (crossingParams.crossingType match {$/;"	l
clock_en	src/main/scala/devices/debug/Periphery.scala	/^      val clock_en = RegNext(next=dmactiveAck, init=true.B)$/;"	l
clock_en	src/main/scala/rocket/Frontend.scala	/^  val clock_en = clock_en_reg || io.cpu.might_request$/;"	l
clock_en	src/main/scala/rocket/PTW.scala	/^  val clock_en = state =\/= s_ready || l2_refill_wire || arb.io.out.valid || io.dpath.sfence.valid || io.dpath.customCSRs.disableDCacheClockGate$/;"	l
clock_en	src/main/scala/rocket/RocketCore.scala	/^  val clock_en = Wire(init=true.B)$/;"	l
clock_en	src/main/scala/tile/FPU.scala	/^  val clock_en = clock_en_reg || io.cp_req.valid$/;"	l
clock_en_reg	src/main/scala/rocket/DCache.scala	/^  val clock_en_reg = Reg(Bool())$/;"	l
clock_en_reg	src/main/scala/rocket/Frontend.scala	/^  val clock_en_reg = Reg(Bool())$/;"	l
clock_en_reg	src/main/scala/rocket/RocketCore.scala	/^  val clock_en_reg = RegInit(true.B)$/;"	l
clock_en_reg	src/main/scala/tile/FPU.scala	/^  val clock_en_reg = Reg(Bool())$/;"	l
clock_enabled	src/main/scala/rocket/Frontend.scala	/^  val clock_enabled = Bool(INPUT)$/;"	l
clock_enabled	src/main/scala/rocket/HellaCache.scala	/^  val clock_enabled = Bool(INPUT) \/\/ is D$ currently being clocked?$/;"	l
clock_enabled	src/main/scala/rocket/ICache.scala	/^  val clock_enabled = Bool(INPUT)$/;"	l
clock_enabled	src/main/scala/rocket/PTW.scala	/^  val clock_enabled = Bool(OUTPUT)$/;"	l
clock_falling	src/main/scala/jtag/JtagTap.scala	/^  val clock_falling = WireInit((!clock.asUInt).asClock)$/;"	l
clock_out	src/main/scala/util/ClockDivider.scala	/^    val clock_out = Output(Clock())$/;"	l
clock_sources	src/main/scala/subsystem/BaseSubsystem.scala	/^  val clock_sources: ModuleValue[RecordMap[ClockBundle]] =$/;"	l
clockeddmi	src/main/scala/devices/debug/Periphery.scala	/^  val clockeddmi = p(ExportDebug).dmi.option(Flipped(new ClockedDMIIO()))$/;"	l
clocks	src/main/scala/amba/axi4/AsyncCrossing.scala	/^    val clocks = Module(new Pow2ClockDivider(2))$/;"	l
clocks	src/main/scala/diplomacy/Resources.scala	/^    val clocks = describeClocks(resources)$/;"	l
clocks	src/main/scala/diplomacy/Resources.scala	/^    val clocks = resources("clocks").map(_.value)$/;"	l
clocks	src/main/scala/regmapper/Test.scala	/^    val clocks = Module(new Pow2ClockDivider(2))$/;"	l
clocks	src/main/scala/tilelink/AsyncCrossing.scala	/^    val clocks = Module(new Pow2ClockDivider(2))$/;"	l
clone	src/main/scala/diplomacy/Clone.scala	/^  def clone[DI, UI, EI, BI <: Data, DO, UO, EO, BO <: Data](node: NodeHandle[DI, UI, EI, BI, DO, UO, EO, BO])(implicit valName: ValName) =$/;"	m
clone_auto	src/main/scala/diplomacy/Nodes.scala	/^    val clone_auto = clone.io("auto").asInstanceOf[AutoBundle]$/;"	l
clr	src/main/scala/tilelink/Fuzzer.scala	/^  val clr = Wire(init = UInt(0, width = numIds))$/;"	l
clrresethaltreq	src/main/scala/devices/debug/dm_registers.scala	/^  val clrresethaltreq = Bool()$/;"	l
clrresethaltreqWrEn	src/main/scala/devices/debug/Debug.scala	/^    val clrresethaltreqWrEn = WireInit(false.B)$/;"	l
cmWrapper	src/main/scala/subsystem/BankedL2Params.scala	/^    val cmWrapper = LazyModule(new CoherenceManagerWrapper(this, context))$/;"	l
cmd	src/main/scala/rocket/AMOALU.scala	/^    val cmd = Bits(INPUT, M_SZ)$/;"	l
cmd	src/main/scala/rocket/CSR.scala	/^    val cmd = Bits(INPUT, CSR.SZ)$/;"	l
cmd	src/main/scala/rocket/HellaCache.scala	/^  val cmd  = Bits(width = M_SZ)$/;"	l
cmd	src/main/scala/rocket/TLB.scala	/^  val cmd  = Bits(width = M_SZ)$/;"	l
cmd	src/main/scala/tile/LazyRoCC.scala	/^  val cmd = Flipped(Decoupled(new RoCCCommand))$/;"	l
cmd	src/main/scala/tile/LazyRoCC.scala	/^  val cmd = Queue(io.cmd)$/;"	l
cmd	src/main/scala/tile/LazyRoCC.scala	/^  val cmd = Queue(io.in)$/;"	l
cmdHalf	src/main/scala/rocket/Multiplier.scala	/^  val cmdHalf = (width > 32).B && in.bits.dw === DW_32$/;"	l
cmdHi	src/main/scala/rocket/Multiplier.scala	/^  val cmdHi :: lhsSigned :: rhsSigned :: Nil =$/;"	l
cmdMul	src/main/scala/rocket/Multiplier.scala	/^  val cmdMul :: cmdHi :: lhsSigned :: rhsSigned :: Nil =$/;"	l
cmdReadys	src/main/scala/tile/LazyRoCC.scala	/^  val cmdReadys = io.out.zip(opcodes).map { case (out, opcode) =>$/;"	l
cmdRouter	src/main/scala/tile/LazyRoCC.scala	/^    val cmdRouter = Module(new RoccCommandRouter(outer.roccs.map(_.opcodes))(outer.p))$/;"	l
cmd_addsub	src/main/scala/tile/FPU.scala	/^    val cmd_addsub = io.in.bits.swap23$/;"	l
cmd_amo_arithmetic	src/main/scala/rocket/TLB.scala	/^  val cmd_amo_arithmetic = Bool(usingAtomics) && isAMOArithmetic(io.req.bits.cmd)$/;"	l
cmd_amo_logical	src/main/scala/rocket/TLB.scala	/^  val cmd_amo_logical = Bool(usingAtomics) && isAMOLogical(io.req.bits.cmd)$/;"	l
cmd_fma	src/main/scala/tile/FPU.scala	/^    val cmd_fma = io.in.bits.ren3$/;"	l
cmd_lrsc	src/main/scala/rocket/TLB.scala	/^  val cmd_lrsc = Bool(usingAtomics) && io.req.bits.cmd.isOneOf(M_XLR, M_XSC)$/;"	l
cmd_match	src/main/scala/rocket/DCache.scala	/^      val cmd_match = isWrite(c._2.cmd) || isWrite(s1_req.cmd)$/;"	l
cmd_put_partial	src/main/scala/rocket/TLB.scala	/^  val cmd_put_partial = io.req.bits.cmd === M_PWR$/;"	l
cmd_read	src/main/scala/rocket/TLB.scala	/^  val cmd_read = isRead(io.req.bits.cmd)$/;"	l
cmd_readx	src/main/scala/rocket/TLB.scala	/^  val cmd_readx = usingHypervisor && io.req.bits.cmd === M_HLVX$/;"	l
cmd_write	src/main/scala/rocket/TLB.scala	/^  val cmd_write = isWrite(io.req.bits.cmd)$/;"	l
cmd_write_perms	src/main/scala/rocket/TLB.scala	/^  val cmd_write_perms = cmd_write ||$/;"	l
cmderr	src/main/scala/devices/debug/dm_registers.scala	/^  val cmderr = UInt(3.W)$/;"	l
cmdtype	src/main/scala/devices/debug/abstract_commands.scala	/^  val cmdtype = UInt(8.W)$/;"	l
cmdtype	src/main/scala/devices/debug/dm_registers.scala	/^  val cmdtype = UInt(8.W)$/;"	l
cmpEq	src/main/scala/rocket/ALU.scala	/^  def cmpEq(cmd: UInt) = !cmd(3)$/;"	m
cmpInverted	src/main/scala/rocket/ALU.scala	/^  def cmpInverted(cmd: UInt) = cmd(0)$/;"	m
cmpUnsigned	src/main/scala/rocket/ALU.scala	/^  def cmpUnsigned(cmd: UInt) = cmd(1)$/;"	m
cmp_out	src/main/scala/rocket/ALU.scala	/^    val cmp_out = Bool(OUTPUT)$/;"	l
cnoise	src/main/scala/tilelink/Delayer.scala	/^      val cnoise = Wire(in.c.bits)$/;"	l
cnt	src/main/scala/util/Counters.scala	/^    val cnt = Reg(init = UInt(0, log2Up(max+1)))$/;"	l
code	src/main/scala/rocket/PTW.scala	/^    val code = new ParityCode$/;"	l
code	src/main/scala/tile/FPU.scala	/^    val code = x(exp + sig - 1, exp + sig - 3)$/;"	l
code	src/main/scala/tilelink/SRAM.scala	/^  val code = ecc.code$/;"	l
code	src/main/scala/util/ECC.scala	/^  val code = new SECDEDCode$/;"	l
codeBits	src/main/scala/util/LanePositionedQueue.scala	/^  val codeBits = ecc.width(2*lanes*gen.getWidth)$/;"	l
codeHi	src/main/scala/tile/FPU.scala	/^    val codeHi = code(2, 1)$/;"	l
coded	src/main/scala/tilelink/SRAM.scala	/^    val coded  = VecInit((dat zip poison) map { case (d, p) =>$/;"	l
coh	src/main/scala/rocket/HellaCache.scala	/^  val coh = new ClientMetadata$/;"	l
coh_on_grant	src/main/scala/rocket/NBDcache.scala	/^  val coh_on_grant                                = new_coh.onGrant(req.cmd, io.mem_grant.bits.param)$/;"	l
collectDeep	src/main/scala/aop/Select.scala	/^  def collectDeep[T](lmod: LazyModule)(collect: PartialFunction[LazyModule, T]): Iterable[T] = {$/;"	m
collectInwardEdges	src/main/scala/aop/Select.scala	/^  def collectInwardEdges[T](node: BaseNode)(collect: PartialFunction[InwardEdge[_ <: Data, _], T]): Iterable[T] = {$/;"	m
collectOutwardEdges	src/main/scala/aop/Select.scala	/^  def collectOutwardEdges[T](node: BaseNode)(collect: PartialFunction[OutwardEdge[_ <: Data, _], T]): Iterable[T] = {$/;"	m
collectResourceAddresses	src/main/scala/diplomacy/Resources.scala	/^  def collectResourceAddresses = collect(2, Nil, 0, bindingTree)$/;"	m
collectWhitelist	src/main/scala/linting/rule/LintRule.scala	/^  def collectWhitelist(annotations: AnnotationSeq): Set[String] = annotations.flatMap {$/;"	m
cols	src/main/scala/rocket/Decode.scala	/^    val cols = (0 to bits).map(b => implicants.filter(b == _.mask.bitCount))$/;"	l
cols	src/main/scala/rocket/Decode.scala	/^    val cols = (0 to bits).map(b => mint.filter(b == _.mask.bitCount))$/;"	l
com	src/main/scala/util/LanePositionedQueue.scala	/^  val com = RegInit(0.U(bits.W))$/;"	l
combine	src/main/scala/tilelink/ProbePicker.scala	/^      def combine(next: TLMasterParameters, pair: (TLMasterParameters, Seq[TLMasterParameters])) = {$/;"	m
combo	src/main/scala/regmapper/Test.scala	/^    val combo = Module(new RRTestCombinational(bits, rvalid, wready))$/;"	l
combo	src/main/scala/regmapper/Test.scala	/^  def combo(bits: Int, rvalid: Bool => Bool, wready: Bool => Bool): RegField = {$/;"	m
commandRegBadHaltResume	src/main/scala/devices/debug/Debug.scala	/^    val commandRegBadHaltResume = WireInit(false.B)$/;"	l
commandRegIsAccessRegister	src/main/scala/devices/debug/Debug.scala	/^    val commandRegIsAccessRegister = (COMMANDReg.cmdtype === DebugAbstractCommandType.AccessRegister.id.U)$/;"	l
commandRegIsUnsupported	src/main/scala/devices/debug/Debug.scala	/^    val commandRegIsUnsupported = WireInit(true.B)$/;"	l
commandWrIsAccessRegister	src/main/scala/devices/debug/Debug.scala	/^    val commandWrIsAccessRegister = (COMMANDWrData.cmdtype === DebugAbstractCommandType.AccessRegister.id.U)$/;"	l
commandWrIsUnsupported	src/main/scala/devices/debug/Debug.scala	/^    val commandWrIsUnsupported = COMMANDWrEn && !commandWrIsAccessRegister$/;"	l
commands	src/main/scala/diplomacy/CloneModule.scala	/^    val commands = method.invoke(Builder.forcedUserModule).asInstanceOf[ArrayBuffer[Command]]$/;"	l
commit	src/main/resources/csrc/comlog.cc	/^void commit ()$/;"	f
commit	src/main/scala/util/LanePositionedQueue.scala	/^  val commit = if (args.commit) Some(Flipped(Decoupled(UInt(depthBitsU.W)))) else None$/;"	l
committed	src/main/scala/util/LanePositionedQueue.scala	/^  val committed = io.commit.map(x => Mux(x.fire(), x.bits, 0.U)).getOrElse(io.enq.valid)$/;"	l
commonCase	src/main/scala/tile/FPU.scala	/^      val commonCase = (expIn + (1 << to.exp)) - (1 << exp)$/;"	l
compacted	src/main/scala/tilelink/FIFOFixer.scala	/^      val compacted = ((fixMap zip splatMap) zip edgeOut.manager.managers) flatMap {$/;"	l
compare	src/main/scala/diplomacy/AddressRange.scala	/^  def compare(x: AddressRange) = {$/;"	m
compare	src/main/scala/diplomacy/LazyModule.scala	/^  def compare(that: HalfEdge): Int = HalfEdge.unapply(this) compare HalfEdge.unapply(that)$/;"	m
compare	src/main/scala/diplomacy/Parameters.scala	/^    def compare(that: T): Int = cases.indexOf(that) compare cases.indexOf(this)$/;"	m
compare	src/main/scala/diplomacy/Parameters.scala	/^  def compare(x: AddressSet) = {$/;"	m
compare	src/main/scala/diplomacy/Parameters.scala	/^  def compare(x: IdRange) = {$/;"	m
compareAddr	src/main/scala/devices/debug/SBA.scala	/^    val compareAddr = Wire(UInt(32.W)) \/\/ Need use written or latched address to detect error case depending on how transaction is initiated$/;"	l
compat	src/main/scala/diplomacy/Resources.scala	/^      val compat = resources("compat").map(_.value) :+ ResourceString("simple-bus")$/;"	l
compat	src/main/scala/diplomacy/Resources.scala	/^      val compat = resources("compat").map(_.value)$/;"	l
compat	src/main/scala/diplomacy/Resources.scala	/^    val compat = optDef("compatible", devcompat.map(ResourceString(_))) \/\/ describe the list of compatiable devices$/;"	l
compat	src/main/scala/subsystem/BaseSubsystem.scala	/^    val compat = p(DTSCompat)$/;"	l
complete	src/main/scala/devices/tilelink/Plic.scala	/^  val complete = Bool(INPUT)$/;"	l
completed	src/main/scala/devices/tilelink/Plic.scala	/^      val completed = completer(0)$/;"	l
completedDevs	src/main/scala/devices/tilelink/Plic.scala	/^    val completedDevs = Mux(completer.reduce(_ || _), UIntToOH(completerDev, nDevices+1), UInt(0))$/;"	l
completer	src/main/scala/devices/tilelink/Plic.scala	/^    val completer = Wire(Vec(nHarts, Bool()))$/;"	l
completerDev	src/main/scala/devices/tilelink/Plic.scala	/^    val completerDev = Wire(UInt(width = log2Up(nDevices + 1)))$/;"	l
componentSel	src/main/scala/devices/debug/Debug.scala	/^      val componentSel = WireInit(component.U)$/;"	l
computeMask	src/main/scala/rocket/PMP.scala	/^  def computeMask = {$/;"	m
computeVL	src/main/scala/rocket/CSR.scala	/^  def computeVL(avl: UInt, vtype: UInt, currentVL: UInt, useCurrentVL: Bool, useMax: Bool, useZero: Bool)(implicit p: Parameters): UInt =$/;"	m
concern_wmask	src/main/scala/rocket/DCache.scala	/^      val concern_wmask = new StoreGen(c._2.size, c._2.addr, UInt(0), wordBytes).mask$/;"	l
concerns	src/main/scala/rocket/DCache.scala	/^    val concerns = (uncachedInFlight zip uncachedReqs) :+ (s2_valid && s2_req.no_alloc, s2_req)$/;"	l
concurrency	src/main/scala/regmapper/RegisterRouter.scala	/^  val concurrency = devParams.concurrency$/;"	l
concurrency	src/main/scala/tilelink/RegisterRouter.scala	/^     val concurrency: Int     = 0,$/;"	l
cond	src/main/scala/util/Property.scala	/^  val cond: Bool$/;"	l
config	src/main/scala/package.scala	/^  val config = chipsalliance.rocketchip.config$/;"	l
config	src/main/scala/stage/phases/PreElaboration.scala	/^    val config = getConfig(rOpts.configNames.get).alterPartial {$/;"	l
configClass	src/main/scala/stage/RocketChipOptions.scala	/^  lazy val configClass: Option[String] = configNames match {$/;"	l
configNames	src/main/scala/stage/RocketChipOptions.scala	/^                                         val configNames:       Option[Seq[String]] = None,$/;"	l
configs	src/main/scala/util/GeneratorUtils.scala	/^    val configs =$/;"	l
conflictingDesiredNames	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^    val conflictingDesiredNames = moduleToDesiredName.collect {$/;"	l
conflictingDesiredNames	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val conflictingDesiredNames = moduleToDesiredName.collect {$/;"	l
conflictingModules	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^    val conflictingModules = lint(input, annos).annotations.collect {$/;"	l
conflictingModules	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^    val conflictingModules = lint(rename(input, annos)).annotations.collect {$/;"	l
confstrptrvalid	src/main/scala/devices/debug/dm_registers.scala	/^  val confstrptrvalid = Bool()$/;"	l
connect	src/main/scala/devices/debug/Periphery.scala	/^  def connect(dutio: JTAGIO, tbclock: Clock, tbreset: Bool, init_done: Bool, tbsuccess: Bool) = {$/;"	m
connect	src/main/scala/devices/debug/Periphery.scala	/^  def connect(tbclk: Clock, tbreset: Bool, dutio: ClockedDMIIO, tbsuccess: Bool) = {$/;"	m
connect	src/main/scala/subsystem/Attachable.scala	/^  def connect(context: HasTileLinkLocations)(implicit p: Parameters): Unit$/;"	m
connect	src/main/scala/subsystem/HasTiles.scala	/^  def connect(domain: TilePRCIDomain[TileType], context: TileContextType): Unit = {$/;"	m
connect	src/main/scala/tilelink/BusWrapper.scala	/^  def connect(context: HasTileLinkLocations)(implicit p: Parameters): Unit = {$/;"	m
connect	src/main/scala/tilelink/BusWrapper.scala	/^  def connect(context: HasTileLinkLocations, master: Location[TLBusWrapper], slave: Location[TLBusWrapper])(implicit p: Parameters): Unit = {$/;"	m
connect	src/main/scala/tilelink/BusWrapper.scala	/^  def connect(context: HasTileLinkLocations, master: Location[TLBusWrapper], slave: Location[TLBusWrapper])(implicit p: Parameters): Unit$/;"	m
connectAIO	src/main/scala/tilelink/Xbar.scala	/^    val connectAIO = reachableIO$/;"	l
connectAOI	src/main/scala/tilelink/Xbar.scala	/^    val connectAOI = transpose(connectAIO)$/;"	l
connectBIO	src/main/scala/tilelink/Xbar.scala	/^    val connectBIO = probeIO$/;"	l
connectBOI	src/main/scala/tilelink/Xbar.scala	/^    val connectBOI = transpose(connectBIO)$/;"	l
connectCIO	src/main/scala/tilelink/Xbar.scala	/^    val connectCIO = releaseIO$/;"	l
connectCOI	src/main/scala/tilelink/Xbar.scala	/^    val connectCOI = transpose(connectCIO)$/;"	l
connectDIO	src/main/scala/tilelink/Xbar.scala	/^    val connectDIO = reachableIO$/;"	l
connectDOI	src/main/scala/tilelink/Xbar.scala	/^    val connectDOI = transpose(connectDIO)$/;"	l
connectDebug	src/main/scala/devices/debug/Periphery.scala	/^  def connectDebug($/;"	m
connectDebugClockAndReset	src/main/scala/devices/debug/Periphery.scala	/^  def connectDebugClockAndReset(debugOpt: Option[DebugIO], c: Clock, sync: Boolean = true)(implicit p: Parameters): Unit = {$/;"	m
connectDebugClockHelper	src/main/scala/devices/debug/Periphery.scala	/^  def connectDebugClockHelper(debug: DebugIO, dmi_reset: Reset, c: Clock, sync: Boolean = true)(implicit p: Parameters): Unit = {$/;"	m
connectEIO	src/main/scala/tilelink/Xbar.scala	/^    val connectEIO = releaseIO$/;"	l
connectEOI	src/main/scala/tilelink/Xbar.scala	/^    val connectEOI = transpose(connectEIO)$/;"	l
connectInputConstants	src/main/scala/subsystem/HasTiles.scala	/^  def connectInputConstants(domain: TilePRCIDomain[TileType], context: TileContextType): Unit = {$/;"	m
connectInterrupts	src/main/scala/subsystem/HasTiles.scala	/^  def connectInterrupts(domain: TilePRCIDomain[TileType], context: TileContextType): Unit = {$/;"	m
connectMMIO	src/main/scala/system/SimAXIMem.scala	/^  def connectMMIO(dut: CanHaveMasterAXI4MMIOPort)(implicit p: Parameters): Seq[SimAXIMem] = {$/;"	m
connectMasterPorts	src/main/scala/subsystem/HasTiles.scala	/^  def connectMasterPorts(domain: TilePRCIDomain[TileType], context: Attachable): Unit = {$/;"	m
connectMem	src/main/scala/system/SimAXIMem.scala	/^  def connectMem(dut: CanHaveMasterAXI4MemPort)(implicit p: Parameters): Seq[SimAXIMem] = {$/;"	m
connectOutputNotifications	src/main/scala/subsystem/HasTiles.scala	/^  def connectOutputNotifications(domain: TilePRCIDomain[TileType], context: TileContextType): Unit = {$/;"	m
connectPRC	src/main/scala/subsystem/HasTiles.scala	/^  def connectPRC(domain: TilePRCIDomain[TileType], context: TileContextType): Unit = {$/;"	m
connectSlavePorts	src/main/scala/subsystem/HasTiles.scala	/^  def connectSlavePorts(domain: TilePRCIDomain[TileType], context: Attachable): Unit = {$/;"	m
connectTLSlave	src/main/scala/tile/BaseTile.scala	/^  def connectTLSlave(node: TLNode, bytes: Int): Unit = { connectTLSlave(tlSlaveXbar.node, node, bytes) }$/;"	m
connectTLSlave	src/main/scala/tile/BaseTile.scala	/^  def connectTLSlave(xbarNode: TLOutwardNode, node: TLNode, bytes: Int): Unit = {$/;"	m
connect_s0	src/main/scala/rocket/HellaCacheArbiter.scala	/^      def connect_s0() = {$/;"	m
connect_s1	src/main/scala/rocket/HellaCacheArbiter.scala	/^      def connect_s1() = {$/;"	m
connect_s2	src/main/scala/rocket/HellaCacheArbiter.scala	/^      def connect_s2() = {$/;"	m
connectedPortsInfo	src/main/scala/diplomacy/Nodes.scala	/^  def connectedPortsInfo: String =$/;"	m
connections	src/main/scala/tilelink/BusWrapper.scala	/^  val connections: Seq[(Location[TLBusWrapper], Location[TLBusWrapper], TLBusWrapperConnectionLike)]$/;"	l
consistent	src/main/scala/tile/FPU.scala	/^  def consistent(x: UInt): Bool = {$/;"	m
constant	src/main/scala/tile/CustomCSRs.scala	/^  def constant(id: Int, value: BigInt): CustomCSR = CustomCSR(id, BigInt(0), Some(value))$/;"	m
constants	src/main/scala/util/Annotations.scala	/^  def constants(component: InstanceId, xLen: Int): Unit = {$/;"	m
constructOM	src/main/scala/diplomaticobjectmodel/ConstructOM.scala	/^  def constructOM(): Unit = {$/;"	m
container	src/main/scala/tilelink/AddressAdjuster.scala	/^        val container = adjustableRemoteManagers.find { r => l.address.forall { la => r.address.exists(_.contains(la)) } }$/;"	l
contains	src/main/scala/diplomacy/AddressRange.scala	/^  def contains(x: AddressRange) = base <= x.base && x.end <= end$/;"	m
contains	src/main/scala/diplomacy/Parameters.scala	/^  def contains(x: AddressSet) = ((x.mask | (base ^ x.base)) & ~mask) == 0$/;"	m
contains	src/main/scala/diplomacy/Parameters.scala	/^  def contains(x: BigInt) = ((x ^ base) & ~mask) == 0$/;"	m
contains	src/main/scala/diplomacy/Parameters.scala	/^  def contains(x: IdRange) = start <= x.start && x.end <= end$/;"	m
contains	src/main/scala/diplomacy/Parameters.scala	/^  def contains(x: Int)  = start <= x && x < end$/;"	m
contains	src/main/scala/diplomacy/Parameters.scala	/^  def contains(x: Int) = isPow2(x) && min <= x && x <= max$/;"	m
contains	src/main/scala/diplomacy/Parameters.scala	/^  def contains(x: TransferSizes) = x.none || (min <= x.min && x.max <= max)$/;"	m
contains	src/main/scala/diplomacy/Parameters.scala	/^  def contains(x: UInt) = ((x ^ UInt(base)).zext() & SInt(~mask)) === SInt(0)$/;"	m
contains	src/main/scala/diplomacy/Parameters.scala	/^  def contains(x: UInt) =$/;"	m
contains	src/main/scala/tilelink/Parameters.scala	/^  def contains(id: UInt) = find(id).reduce(_ || _)$/;"	m
contains	src/main/scala/util/GeneratorUtils.scala	/^  def contains(extension: String): Boolean = {$/;"	m
containsAddress	src/main/scala/tilelink/AddressAdjuster.scala	/^      def containsAddress(region: Seq[AddressSet], addr: UInt): Bool = region.foldLeft(false.B)(_ || _.contains(addr))$/;"	m
containsLg	src/main/scala/diplomacy/Parameters.scala	/^  def containsLg(x: Int) = contains(1 << x)$/;"	m
containsLg	src/main/scala/diplomacy/Parameters.scala	/^  def containsLg(x: UInt) =$/;"	m
containsSafe	src/main/scala/tilelink/Parameters.scala	/^  def containsSafe(address: UInt) = findSafe(address).reduce(_ || _)$/;"	m
contents	src/main/scala/devices/tilelink/BootROM.scala	/^    lazy val contents = {$/;"	l
contents	src/main/scala/devices/tilelink/BootROM.scala	/^    val contents = contentsDelayed$/;"	l
context	src/main/scala/diplomacy/Nodes.scala	/^  def context: String = {$/;"	m
contextMatch	src/main/scala/rocket/Breakpoint.scala	/^  def contextMatch(mcontext: UInt, scontext: UInt) =$/;"	m
context_csrs	src/main/scala/rocket/CSR.scala	/^  val context_csrs = LinkedHashMap[Int,Bits]() ++$/;"	l
contiguous	src/main/scala/diplomacy/Parameters.scala	/^  def contiguous = alignment == mask+1$/;"	m
contract	src/main/scala/util/PrefixSum.scala	/^    def contract(layer: Int, offset: Int, x: Vector[T]): Vector[T] = {$/;"	m
control	src/main/scala/devices/debug/dm_registers.scala	/^  val control = UInt(24.W)$/;"	l
control	src/main/scala/jtag/JtagTap.scala	/^  val control = new JtagControl$/;"	l
control	src/main/scala/regmapper/RegisterCrossing.scala	/^  val control = Module(new BusyRegisterCrossing)$/;"	l
control	src/main/scala/rocket/Breakpoint.scala	/^  val control = new BPControl$/;"	l
controlBus	src/main/scala/subsystem/HasTiles.scala	/^      val controlBus = context.locateTLBusWrapper(crossingParams.slave.where)$/;"	l
controlBus	src/main/scala/subsystem/HasTiles.scala	/^    val controlBus = context.locateTLBusWrapper(where)$/;"	l
controlNode	src/main/scala/amba/ahb/RegisterRouter.scala	/^  val controlNode = AHBRegisterNode($/;"	l
controlNode	src/main/scala/amba/apb/RegisterRouter.scala	/^  val controlNode = APBRegisterNode($/;"	l
controlNode	src/main/scala/devices/tilelink/BusBlocker.scala	/^  val controlNode = TLRegisterNode($/;"	l
controlNode	src/main/scala/devices/tilelink/ClockBlocker.scala	/^  val controlNode = TLRegisterNode($/;"	l
controlNode	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val controlNode = TLRegisterNode($/;"	l
controlNode	src/main/scala/tilelink/Broadcast.scala	/^  val controlNode = params.control.map(x => TLRegisterNode($/;"	l
controlSize	src/main/scala/devices/tilelink/BusBlocker.scala	/^  val controlSize = 0x1000$/;"	l
controlXing	src/main/scala/amba/axi4/RegisterRouter.scala	/^  val controlXing: AXI4InwardClockCrossingHelper = this.crossIn(controlNode)$/;"	l
controlXing	src/main/scala/tilelink/RegisterRouter.scala	/^  val controlXing: TLInwardClockCrossingHelper = this.crossIn(controlNode)$/;"	l
control_part	src/main/scala/rocket/ICache.scala	/^     val control_part = AddressSet.misaligned(base_address + itim_control_offset, size - itim_control_offset)$/;"	l
controllerInternal	src/main/scala/jtag/JtagTap.scala	/^    val controllerInternal = Module(new JtagTapController(irLength, initialInstruction))$/;"	l
conv	src/main/scala/tile/FPU.scala	/^      val conv = Module(new hardfloat.RecFNToIN(maxExpWidth, maxSigWidth, xLen))$/;"	l
convert	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^  def convert(mapping: RegField.Map*): OMRegisterMap = {$/;"	m
convert	src/main/scala/tilelink/Map.scala	/^      val convert = edgeIn.manager.managers.flatMap(_.address) zip edgeOut.manager.managers.flatMap(_.address)$/;"	l
convertSeq	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^  def convertSeq(mapping: Seq[RegField.Map]): OMRegisterMap = OMRegister.convert(mapping: _*)$/;"	m
copy	src/main/scala/tilelink/Parameters.scala	/^  def copy($/;"	m
copyIn	src/main/scala/amba/axi4/Parameters.scala	/^  def copyIn(x: BufferParams) = this.copy(b = x, r = x)$/;"	m
copyIn	src/main/scala/diplomacy/Parameters.scala	/^  def copyIn(x: BufferParams): T$/;"	m
copyIn	src/main/scala/tilelink/Parameters.scala	/^  def copyIn(x: BufferParams) = this.copy(b = x, d = x)$/;"	m
copyInOut	src/main/scala/amba/axi4/Parameters.scala	/^  def copyInOut(x: BufferParams) = this.copyIn(x).copyOut(x)$/;"	m
copyInOut	src/main/scala/diplomacy/Parameters.scala	/^  def copyInOut(x: BufferParams): T$/;"	m
copyInOut	src/main/scala/tilelink/Parameters.scala	/^  def copyInOut(x: BufferParams) = this.copyIn(x).copyOut(x)$/;"	m
copyOut	src/main/scala/amba/axi4/Parameters.scala	/^  def copyOut(x: BufferParams) = this.copy(aw = x, ar = x, w = x)$/;"	m
copyOut	src/main/scala/diplomacy/Parameters.scala	/^  def copyOut(x: BufferParams): T$/;"	m
copyOut	src/main/scala/tilelink/Parameters.scala	/^  def copyOut(x: BufferParams) = this.copy(a = x, c = x, e = x)$/;"	m
core	src/main/scala/groundtest/Tile.scala	/^  val core = RocketCoreParams(nPMPs = 0) \/\/TODO remove this$/;"	l
core	src/main/scala/tile/BaseTile.scala	/^  val core: CoreParams$/;"	l
core	src/main/scala/tile/RocketTile.scala	/^  val core = Module(new Rocket(outer)(outer.p))$/;"	l
coreDataBits	src/main/scala/tile/Core.scala	/^  val coreDataBits = xLen max fLen max vMemDataBits$/;"	l
coreDataBytes	src/main/scala/tile/Core.scala	/^  val coreDataBytes = coreDataBits\/8$/;"	l
coreDevice	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^      val coreDevice = device.parent.get.asInstanceOf[SimpleDevice]$/;"	l
coreInstBits	src/main/scala/tile/Core.scala	/^  val coreInstBits = coreParams.instBits$/;"	l
coreInstBytes	src/main/scala/tile/Core.scala	/^  val coreInstBytes = coreInstBits\/8$/;"	l
coreMaxAddrBits	src/main/scala/tile/Core.scala	/^  def coreMaxAddrBits = paddrBits max vaddrBitsExtended$/;"	m
coreMonitorBundle	src/main/scala/rocket/RocketCore.scala	/^  val coreMonitorBundle = Wire(new CoreMonitorBundle(xLen, fLen))$/;"	l
coreMonitorBundles	src/main/scala/groundtest/GroundTestSubsystem.scala	/^  def coreMonitorBundles = Nil$/;"	m
coreMonitorBundles	src/main/scala/subsystem/RocketSubsystem.scala	/^  def coreMonitorBundles = (rocketTiles map { t =>$/;"	m
coreMonitorBundles	src/main/scala/util/CoreMonitor.scala	/^    def coreMonitorBundles: List[CoreMonitorBundle]$/;"	m
coreParams	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^    val coreParams = rocketParams.core$/;"	l
coreParams	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^    val coreParams = tile.rocketParams.core$/;"	l
coreParams	src/main/scala/stage/phases/AddDefaultTests.scala	/^      val coreParams = tileParams.core$/;"	l
coreParams	src/main/scala/tile/Core.scala	/^  val coreParams: CoreParams = tileParams.core$/;"	l
core_ips	src/main/scala/tile/Interrupts.scala	/^    val core_ips = core.lip$/;"	l
cork	src/main/scala/tilelink/CacheCork.scala	/^    val cork = LazyModule(new TLCacheCork(params))$/;"	l
correct	src/main/scala/util/ECC.scala	/^  val correct = RegInit(UInt(0, width=n))$/;"	l
correctable	src/main/scala/rocket/DCache.scala	/^  val correctable = (cacheParams.tagCode.canCorrect || cacheParams.dataCode.canCorrect).option(Valid(UInt(width = paddrBits)))$/;"	l
correctable	src/main/scala/rocket/ICache.scala	/^  val correctable = (cacheParams.tagCode.canDetect || cacheParams.dataCode.canDetect).option(Valid(UInt(width = paddrBits)))$/;"	l
correctable	src/main/scala/tilelink/SRAM.scala	/^  val correctable   = (params.code.canCorrect && params.notifyErrors).option(Valid(UInt(addrBits.W)))$/;"	l
correctable	src/main/scala/util/ECC.scala	/^    def correctable = Bool(false)$/;"	m
correctable	src/main/scala/util/ECC.scala	/^    val correctable = Bool(false)$/;"	l
correctable	src/main/scala/util/ECC.scala	/^    val correctable = pardec.uncorrectable$/;"	l
correctable	src/main/scala/util/ECC.scala	/^    val correctable = syndromeUInt.orR$/;"	l
correctable	src/main/scala/util/ECC.scala	/^  def correctable: Bool$/;"	m
correctable	src/main/scala/util/ECC.scala	/^  val correctable = RegInit(UInt(0, width=n))$/;"	l
correctable	src/main/scala/util/ECC.scala	/^  val correctable: Option[ValidIO[UInt]]$/;"	l
corrected	src/main/scala/util/ECC.scala	/^    def corrected = y$/;"	m
corrected	src/main/scala/util/ECC.scala	/^    val corrected = secdec.corrected$/;"	l
corrected	src/main/scala/util/ECC.scala	/^    val corrected = uncorrected ^ sysBadBitOH$/;"	l
corrected	src/main/scala/util/ECC.scala	/^    val corrected = uncorrected$/;"	l
corrected	src/main/scala/util/ECC.scala	/^  def corrected: UInt$/;"	m
corrupt	src/main/scala/amba/axi4/SRAM.scala	/^    val corrupt = if (edgeIn.bundle.requestFields.contains(AMBACorrupt)) Some(SeqMem(1 << mask.filter(b=>b).size, UInt(width=2))) else None$/;"	l
corrupt	src/main/scala/tilelink/AtomicAutomata.scala	/^    val corrupt = Bool()$/;"	l
corrupt	src/main/scala/tilelink/Bundles.scala	/^  val corrupt = Bool() \/\/ only applies to *Data messages$/;"	l
corrupt	src/main/scala/tilelink/Edges.scala	/^  def corrupt(x: TLDataChannel): Bool = {$/;"	m
corrupt	src/main/scala/tilelink/RAMModel.scala	/^            val corrupt = (Bool(ignoreCorruptData) && d.corrupt) || (Bool(ignoreDeniedData) && d.denied)$/;"	l
corrupt_in	src/main/scala/tilelink/WidthWidget.scala	/^      val corrupt_in = edgeIn.corrupt(in.bits)$/;"	l
corrupt_out	src/main/scala/tilelink/WidthWidget.scala	/^      val corrupt_out = corrupt_in || corrupt_reg$/;"	l
corrupt_reg	src/main/scala/tilelink/WidthWidget.scala	/^      val corrupt_reg = RegInit(false.B)$/;"	l
count	src/main/scala/amba/axi4/Deinterleaver.scala	/^            val count = RegInit(0.U(log2Ceil(beats+1).W))$/;"	l
count	src/main/scala/amba/axi4/Xbar.scala	/^              val count = RegInit(UInt(0, width = log2Ceil(flight+1)))$/;"	l
count	src/main/scala/jtag/Utils.scala	/^    val count = Output(UInt(width.W))$/;"	l
count	src/main/scala/jtag/Utils.scala	/^  val count = init match {$/;"	l
count	src/main/scala/prci/ResetStretcher.scala	/^        val count = RegInit(0.U(log2Ceil(cycles).W))$/;"	l
count	src/main/scala/rocket/Multiplier.scala	/^  val count = Reg(UInt(log2Ceil($/;"	l
count	src/main/scala/rocket/PTW.scala	/^    val count = pgLevels - minPgLevels - hgatp.additionalPgLevels$/;"	l
count	src/main/scala/rocket/PTW.scala	/^  val count = Reg(UInt(width = log2Ceil(pgLevels)))$/;"	l
count	src/main/scala/tile/Interrupts.scala	/^      val count = RegInit(0.U(log2Ceil(quiescenceCycles + 1).W))$/;"	l
count	src/main/scala/tile/LazyRoCC.scala	/^  val count = Reg(UInt(xLen.W))$/;"	l
count	src/main/scala/tilelink/Arbiter.scala	/^  val count = RegInit(0.U(log2Ceil(txns).W))$/;"	l
count	src/main/scala/tilelink/Broadcast.scala	/^  val count   = Reg(UInt(log2Ceil(caches+1).W))$/;"	l
count	src/main/scala/tilelink/Broadcast.scala	/^  val count   = UInt(log2Ceil(caches+1).W)$/;"	l
count	src/main/scala/tilelink/Edges.scala	/^    val count = (beats1 & ~counter1)$/;"	l
count	src/main/scala/tilelink/Edges.scala	/^  def count(bits: TLChannel, fire: Bool): (Bool, Bool, Bool, UInt) = {$/;"	m
count	src/main/scala/tilelink/Edges.scala	/^  def count(x: DecoupledIO[TLChannel]): (Bool, Bool, Bool, UInt) = count(x.bits, x.fire())$/;"	m
count	src/main/scala/tilelink/Edges.scala	/^  def count(x: ValidIO[TLChannel]): (Bool, Bool, Bool, UInt) = count(x.bits, x.valid)$/;"	m
count	src/main/scala/tilelink/ToAXI4.scala	/^        val count = RegInit(UInt(0, width = log2Ceil(maxCount + 1)))$/;"	l
count	src/main/scala/tilelink/WidthWidget.scala	/^      val count  = RegInit(0.U(countBits.W))$/;"	l
count	src/main/scala/tilelink/WidthWidget.scala	/^      val count = RegInit(0.U(countBits.W))$/;"	l
count	src/main/scala/util/Frequency.scala	/^    var count = firstFreq$/;"	l
count	src/main/scala/util/MultiWidthFifo.scala	/^    val count = UInt(OUTPUT, log2Up(n + 1))$/;"	l
count	src/main/scala/util/PlusArg.scala	/^    val count = Input(UInt(width.W))$/;"	l
count	src/main/scala/util/RationalCrossing.scala	/^  val count = RegInit(0.U(2.W))$/;"	l
countBits	src/main/scala/tilelink/RAMModel.scala	/^      val countBits    = log2Up(endSourceId)$/;"	l
countBits	src/main/scala/tilelink/WidthWidget.scala	/^      val countBits = log2Ceil(ratio)$/;"	l
countdown	src/main/scala/util/Timer.scala	/^  val countdown = Reg(UInt(width = log2Up(initCount)))$/;"	l
countdown	src/main/scala/util/Timer.scala	/^  val countdown = Reg(init = UInt(0, w))$/;"	l
counter	src/main/scala/devices/debug/SBA.scala	/^    val counter = RegInit(0.U((log2Ceil(cfg.maxSupportedSBAccess\/8)+1).W))$/;"	l
counter	src/main/scala/jtag/Utils.scala	/^      val counter = Module(new ClockedCounter(counts, None))$/;"	l
counter	src/main/scala/jtag/Utils.scala	/^      val counter = Module(new ClockedCounter(counts, Some(init)))$/;"	l
counter	src/main/scala/subsystem/Configs.scala	/^        val counter = LazyModule(new CharacterCountExample(OpcodeSet.custom2)(p))$/;"	l
counter	src/main/scala/tilelink/Edges.scala	/^    val counter  = RegInit(UInt(0, width = log2Up(maxTransfer \/ manager.beatBytes)))$/;"	l
counter	src/main/scala/util/CreditedIO.scala	/^    val counter = new CreditedIOCounter(depth, depth)$/;"	l
counter1	src/main/scala/tilelink/Edges.scala	/^    val counter1 = counter - UInt(1)$/;"	l
counterBits	src/main/scala/tilelink/Fragmenter.scala	/^        val counterBits = log2Up(maxSize\/beatBytes)$/;"	l
counter_addr	src/main/scala/rocket/CSR.scala	/^    val counter_addr = addr(log2Ceil(read_mcounteren.getWidth)-1, 0)$/;"	l
counters	src/main/scala/rocket/CSR.scala	/^  val counters = Vec(nPerfCounters, new PerfCounterIO)$/;"	l
coupleFrom	src/main/scala/tilelink/BusWrapper.scala	/^  def coupleFrom[T](name: String)(gen: TLInwardNode => T): T =$/;"	m
coupleTo	src/main/scala/tilelink/BusWrapper.scala	/^  def coupleTo[T](name: String)(gen: TLOutwardNode => T): T =$/;"	m
cover	src/main/scala/rocket/Decode.scala	/^      val cover = eprime ++ getCover(prime2, uncovered, bits)$/;"	l
cover	src/main/scala/rocket/Decode.scala	/^      val cover = minterms.map(m => implicants.filter(_.covers(m)))$/;"	l
cover	src/main/scala/rocket/Decode.scala	/^    val cover = eprime ++ Simplify.getCover(prime2, uncovered, bits)$/;"	l
cover	src/main/scala/rocket/Events.scala	/^  def cover() = eventSets.foreach { _ withCovers }$/;"	m
cover	src/main/scala/rocket/Events.scala	/^  def cover(): Unit = { eventSets.foreach(_._1.foreach(_.withCovers)) }$/;"	m
cover	src/main/scala/util/Property.scala	/^object cover {$/;"	c
coverExceptions	src/main/scala/rocket/RocketCore.scala	/^  def coverExceptions(exceptionValid: Bool, cause: UInt, labelPrefix: String, coverCausesLabels: Seq[(Int, String)]): Unit = {$/;"	m
cover_prop_class	src/main/scala/tilelink/Monitor.scala	/^  val cover_prop_class = PropertyClass.Default$/;"	l
coverable_counters	src/main/scala/rocket/CSR.scala	/^  val coverable_counters = read_mapping.filterNot { case (k, _) =>$/;"	l
covered	src/main/scala/tilelink/AddressAdjuster.scala	/^    val covered = remote.forall { r =>$/;"	l
covers	src/main/scala/rocket/Decode.scala	/^  def covers(x: Term) = ((value ^ x.value) &~ mask | x.mask &~ mask).signum == 0$/;"	m
cp	src/main/scala/tile/FPU.scala	/^    val cp = Bool()$/;"	l
cp_ctrl	src/main/scala/tile/FPU.scala	/^  val cp_ctrl = Wire(new FPUCtrlSigs)$/;"	l
cp_req	src/main/scala/tile/FPU.scala	/^  val cp_req = Decoupled(new FPInput()).flip \/\/cp doesn't pay attn to kill sigs$/;"	l
cp_resp	src/main/scala/tile/FPU.scala	/^  val cp_resp = Decoupled(new FPResult())$/;"	l
cpu	src/main/scala/rocket/Frontend.scala	/^  val cpu = new FrontendIO().flip$/;"	l
cpu	src/main/scala/rocket/HellaCache.scala	/^  val cpu = (new HellaCacheIO).flip$/;"	l
cpuDevice	src/main/scala/groundtest/Tile.scala	/^  val cpuDevice: SimpleDevice = new SimpleDevice("groundtest", Nil)$/;"	l
cpuDevice	src/main/scala/tile/Interrupts.scala	/^  def cpuDevice: Device$/;"	m
cpuDevice	src/main/scala/tile/RocketTile.scala	/^  val cpuDevice: SimpleDevice = new SimpleDevice("cpu", Seq("sifive,rocket0", "riscv")) {$/;"	l
cpuProperties	src/main/scala/tile/BaseTile.scala	/^  def cpuProperties: PropertyMap = Map($/;"	m
cpus	src/main/scala/diplomacy/Resources.scala	/^  val cpus = new Device {$/;"	l
crc	src/main/scala/tilelink/RAMModel.scala	/^      val crc = Mem(endSourceId, UInt(width = 16))$/;"	l
crc_bypass	src/main/scala/tilelink/RAMModel.scala	/^      val crc_bypass = if (edge.manager.minLatency > 0) Bool(false) else a_fire && a.source === d.source$/;"	l
crc_valid	src/main/scala/tilelink/RAMModel.scala	/^      val crc_valid = Mem(endSourceId, Bool())$/;"	l
create	scripts/RocketSim.py	/^    def create(self):$/;"	m	class:RocketSim
create	scripts/RocketSim32.py	/^    def create(self):$/;"	m	class:RocketSim
create	scripts/RocketSim64.py	/^    def create(self):$/;"	m	class:RocketSim
credit	src/main/scala/util/CreditedIO.scala	/^  val credit = Input (Bool()) \/\/ 1: a credit is given to the sender by the receiver$/;"	l
cross	src/main/scala/amba/axi4/package.scala	/^    def cross(n: AXI4InwardNode) (implicit valName: ValName) = crossIn(n)$/;"	m
cross	src/main/scala/amba/axi4/package.scala	/^    def cross(n: AXI4OutwardNode)(implicit valName: ValName) = crossOut(n)$/;"	m
cross	src/main/scala/interrupts/package.scala	/^    def cross(n: IntInwardNode) (implicit valName: ValName) = crossIn(n)$/;"	m
cross	src/main/scala/interrupts/package.scala	/^    def cross(n: IntOutwardNode)(implicit valName: ValName) = crossOut(n)$/;"	m
cross	src/main/scala/tilelink/package.scala	/^    def cross(n: TLInwardNode) (implicit valName: ValName) = crossIn(n)$/;"	m
cross	src/main/scala/tilelink/package.scala	/^    def cross(n: TLOutwardNode)(implicit valName: ValName) = crossOut(n)$/;"	m
crossAXI4In	src/main/scala/subsystem/CrossingWrapper.scala	/^  def crossAXI4In(n: AXI4InwardNode)(implicit p: Parameters): AXI4InwardNode = {$/;"	m
crossAXI4Out	src/main/scala/subsystem/CrossingWrapper.scala	/^  def crossAXI4Out(n: AXI4OutwardNode)(implicit p: Parameters): AXI4OutwardNode = {$/;"	m
crossFrom	src/main/scala/tilelink/BusWrapper.scala	/^  def crossFrom($/;"	m
crossFromBus	src/main/scala/tilelink/BusWrapper.scala	/^  def crossFromBus(bus: TLBusWrapper, xType: ClockCrossingType)(implicit asyncClockGroupNode: ClockGroupEphemeralNode): NoHandle = {$/;"	m
crossIn	src/main/scala/amba/axi4/package.scala	/^    def crossIn (n: AXI4InwardNode) (implicit valName: ValName) = AXI4InwardClockCrossingHelper(valName.name, x, n)$/;"	m
crossIn	src/main/scala/amba/axi4/package.scala	/^    def crossIn (n: AXI4InwardNode) (implicit valName: ValName) = AXI4InwardResetCrossingHelper(valName.name, x, n)$/;"	m
crossIn	src/main/scala/interrupts/package.scala	/^    def crossIn (n: IntInwardNode) (implicit valName: ValName) = IntInwardClockCrossingHelper(valName.name, x, n)$/;"	m
crossIn	src/main/scala/interrupts/package.scala	/^    def crossIn (n: IntInwardNode) (implicit valName: ValName) = IntInwardResetCrossingHelper(valName.name, x, n)$/;"	m
crossIn	src/main/scala/tilelink/package.scala	/^    def crossIn (n: TLInwardNode) (implicit valName: ValName) = TLInwardClockCrossingHelper (valName.name, x, n)$/;"	m
crossIn	src/main/scala/tilelink/package.scala	/^    def crossIn (n: TLInwardNode) (implicit valName: ValName) = TLInwardResetCrossingHelper (valName.name, x, n)$/;"	m
crossInHelper	src/main/scala/tilelink/BusWrapper.scala	/^  def crossInHelper = this.crossIn(inwardNode)(ValName("bus_xing"))$/;"	m
crossIntIn	src/main/scala/subsystem/CrossingWrapper.scala	/^  def crossIntIn(n: IntInwardNode)(implicit p: Parameters): IntInwardNode = {$/;"	m
crossIntIn	src/main/scala/tile/TilePRCIDomain.scala	/^  def crossIntIn(crossingType: ClockCrossingType): IntInwardNode = {$/;"	m
crossIntOut	src/main/scala/subsystem/CrossingWrapper.scala	/^  def crossIntOut(n: IntOutwardNode)(implicit p: Parameters): IntOutwardNode = {$/;"	m
crossIntOut	src/main/scala/tile/TilePRCIDomain.scala	/^  def crossIntOut(crossingType: ClockCrossingType, tileNode: IntOutwardNode): IntOutwardNode = {$/;"	m
crossMasterPort	src/main/scala/tile/TilePRCIDomain.scala	/^  def crossMasterPort(crossingType: ClockCrossingType): TLOutwardNode = {$/;"	m
crossOut	src/main/scala/amba/axi4/package.scala	/^    def crossOut(n: AXI4OutwardNode)(implicit valName: ValName) = AXI4OutwardClockCrossingHelper(valName.name, x, n)$/;"	m
crossOut	src/main/scala/amba/axi4/package.scala	/^    def crossOut(n: AXI4OutwardNode)(implicit valName: ValName) = AXI4OutwardResetCrossingHelper(valName.name, x, n)$/;"	m
crossOut	src/main/scala/interrupts/package.scala	/^    def crossOut(n: IntOutwardNode)(implicit valName: ValName) = IntOutwardClockCrossingHelper(valName.name, x, n)$/;"	m
crossOut	src/main/scala/interrupts/package.scala	/^    def crossOut(n: IntOutwardNode)(implicit valName: ValName) = IntOutwardResetCrossingHelper(valName.name, x, n)$/;"	m
crossOut	src/main/scala/tilelink/package.scala	/^    def crossOut(n: TLOutwardNode)(implicit valName: ValName) = TLOutwardClockCrossingHelper(valName.name, x, n)$/;"	m
crossOut	src/main/scala/tilelink/package.scala	/^    def crossOut(n: TLOutwardNode)(implicit valName: ValName) = TLOutwardResetCrossingHelper(valName.name, x, n)$/;"	m
crossOutHelper	src/main/scala/tilelink/BusWrapper.scala	/^  def crossOutHelper = this.crossOut(outwardNode)(ValName("bus_xing"))$/;"	m
crossProperties	src/main/scala/util/Property.scala	/^  def crossProperties(cond: Seq[Seq[CoverBoolean]]): Seq[CoverBoolean] = {$/;"	m
crossSlavePort	src/main/scala/tile/TilePRCIDomain.scala	/^  def crossSlavePort(crossingType: ClockCrossingType): TLInwardNode = { DisableMonitors { implicit p => FlipRendering { implicit p =>$/;"	m
crossTLIn	src/main/scala/subsystem/CrossingWrapper.scala	/^  def crossTLIn(n: TLInwardNode)(implicit p: Parameters): TLInwardNode = {$/;"	m
crossTLOut	src/main/scala/subsystem/CrossingWrapper.scala	/^  def crossTLOut(n: TLOutwardNode)(implicit p: Parameters): TLOutwardNode = {$/;"	m
crossTo	src/main/scala/tilelink/BusWrapper.scala	/^  def crossTo($/;"	m
crossToBus	src/main/scala/tilelink/BusWrapper.scala	/^  def crossToBus(bus: TLBusWrapper, xType: ClockCrossingType)(implicit asyncClockGroupNode: ClockGroupEphemeralNode): NoHandle = {$/;"	m
crossTracesOut	src/main/scala/tile/TilePRCIDomain.scala	/^  def crossTracesOut(): Unit = this {$/;"	m
crossing	src/main/scala/regmapper/RegisterCrossing.scala	/^  val crossing = Module(new AsyncQueue(gen, AsyncQueueParams.singleton(sync)))$/;"	l
crossing	src/main/scala/subsystem/CrossingWrapper.scala	/^  def crossing: ClockCrossingType$/;"	m
crossing	src/main/scala/subsystem/CrossingWrapper.scala	/^  def crossing: ResetCrossingType$/;"	m
crossing	src/main/scala/tile/TilePRCIDomain.scala	/^  def crossing = resetCrossingType$/;"	m
crossingParams	src/main/scala/subsystem/Configs.scala	/^    val crossingParams = heterogeneousOrGlobalSetting(tcp, tileParams.size)$/;"	l
crossingParams	src/main/scala/subsystem/HasTiles.scala	/^  def crossingParams: TileCrossingParamsLike$/;"	m
crossingType	src/main/scala/subsystem/HasTiles.scala	/^  def crossingType: ClockCrossingType$/;"	m
crossing_request_ready	src/main/scala/regmapper/RegisterCrossing.scala	/^    val crossing_request_ready  = Bool(INPUT)$/;"	l
crossing_request_valid	src/main/scala/regmapper/RegisterCrossing.scala	/^    val crossing_request_valid  = Bool(OUTPUT)$/;"	l
cs	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^    val cs = getIndex(components)$/;"	l
csr	src/main/scala/rocket/IDecode.scala	/^  val csr = Bits(width = CSR.SZ)$/;"	l
csr	src/main/scala/rocket/RocketCore.scala	/^  val csr = Module(new CSRFile(perfEvents, coreParams.customCSRs.decls))$/;"	l
csrIntMap	src/main/scala/tile/Interrupts.scala	/^  def csrIntMap: List[Int] = {$/;"	m
csr_addr	src/main/scala/rocket/CSR.scala	/^  def csr_addr = (inst >> 20)(CSR.ADDRSZ-1, 0)$/;"	m
csr_addr_legal	src/main/scala/rocket/CSR.scala	/^    val csr_addr_legal = reg_mstatus.prv >= CSR.mode(addr) ||$/;"	l
csr_exists	src/main/scala/rocket/CSR.scala	/^    val csr_exists = decodeAny(read_mapping)$/;"	l
csr_stall	src/main/scala/rocket/CSR.scala	/^  val csr_stall = Bool(OUTPUT)$/;"	l
csr_wen	src/main/scala/rocket/CSR.scala	/^  val csr_wen = io.rw.cmd.isOneOf(CSR.S, CSR.C, CSR.W)$/;"	l
csrs	src/main/scala/tile/CustomCSRs.scala	/^  val csrs = Vec(decls.size, new CustomCSRIO)$/;"	l
csrw_counter	src/main/scala/rocket/CSR.scala	/^  val csrw_counter = UInt(OUTPUT, CSR.nCtr)$/;"	l
ctrl	src/main/scala/devices/debug/Debug.scala	/^      val ctrl = (new DebugCtrlBundle(nComponents))$/;"	l
ctrl	src/main/scala/devices/debug/Debug.scala	/^      val ctrl = new DebugCtrlBundle(nComponents)$/;"	l
ctrlStateNxt	src/main/scala/devices/debug/Debug.scala	/^    val ctrlStateNxt = WireInit(ctrlStateReg)$/;"	l
ctrlStateReg	src/main/scala/devices/debug/Debug.scala	/^    val ctrlStateReg = Reg(chiselTypeOf(CtrlState(Waiting)))$/;"	l
ctrl_killd	src/main/scala/rocket/RocketCore.scala	/^  val ctrl_killd = Wire(Bool())$/;"	l
ctrl_killm	src/main/scala/rocket/RocketCore.scala	/^  val ctrl_killm = killm_common || mem_xcpt || fpu_kill_mem$/;"	l
ctrl_killx	src/main/scala/rocket/RocketCore.scala	/^  val ctrl_killx = take_pc_mem_wb || replay_ex || !ex_reg_valid$/;"	l
ctrl_stalld	src/main/scala/rocket/RocketCore.scala	/^  val ctrl_stalld =$/;"	l
cur	src/main/scala/rocket/PMP.scala	/^    val cur = WireInit(pmp)$/;"	l
curOK	src/main/scala/tile/FPU.scala	/^      val curOK = !t.isNaN(x) || x(t.sig + t.exp - 4) === x(t.sig - 2, prevT.recodedWidth - 1).andR$/;"	l
currStableNames	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^        val currStableNames = state.annotations.collect {$/;"	l
currState	src/main/scala/jtag/JtagStateMachine.scala	/^    val currState = Output(JtagState.State.chiselType)$/;"	l
currState	src/main/scala/jtag/JtagStateMachine.scala	/^  val currState = RegNext(next=nextState, init=JtagState.TestLogicReset.U)$/;"	l
currState	src/main/scala/jtag/JtagTap.scala	/^  val currState = Wire(JtagState.State.chiselType)$/;"	l
currUnstableNames	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^        val currUnstableNames = state.annotations.collect {$/;"	l
currentConfig	src/main/scala/util/GeneratorUtils.scala	/^      val currentConfig = try {$/;"	l
currentOp	src/main/scala/groundtest/TraceGen.scala	/^  val currentOp = Reg(init = opNop)$/;"	l
current_state	src/main/scala/util/Replacement.scala	/^  val current_state = Wire(UInt(logic.nBits.W))$/;"	l
custom0	src/main/scala/tile/LazyRoCC.scala	/^  def custom0 = new OpcodeSet(Seq("b0001011".U))$/;"	m
custom1	src/main/scala/tile/LazyRoCC.scala	/^  def custom1 = new OpcodeSet(Seq("b0101011".U))$/;"	m
custom2	src/main/scala/tile/LazyRoCC.scala	/^  def custom2 = new OpcodeSet(Seq("b1011011".U))$/;"	m
custom3	src/main/scala/tile/LazyRoCC.scala	/^  def custom3 = new OpcodeSet(Seq("b1111011".U))$/;"	m
customCSRs	src/main/scala/rocket/CSR.scala	/^    val customCSRs = Vec(CSRFile.this.customCSRs.size, new CustomCSRIO).asOutput$/;"	l
customCSRs	src/main/scala/rocket/PTW.scala	/^  val customCSRs = coreParams.customCSRs.asInput$/;"	l
customCSRs	src/main/scala/tile/Core.scala	/^  def customCSRs(implicit p: Parameters): CustomCSRs = new CustomCSRs$/;"	m
customExtensions	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^    val customExtensions = {$/;"	l
customNode	src/main/scala/devices/debug/Debug.scala	/^  val customNode = new DebugCustomSink()$/;"	l
custom_bytes	src/main/scala/devices/debug/Debug.scala	/^      val custom_bytes =  Seq.tabulate(customP.width\/8){i => custom_data.slice(i*8, (i+1)*8).asUInt}$/;"	l
custom_data	src/main/scala/devices/debug/Debug.scala	/^      val custom_data = custom.data.asBools$/;"	l
cutoff	src/main/scala/amba/axi4/Fragmenter.scala	/^        val cutoff = AXI4Parameters.lenBits + lgBytes$/;"	l
cutoff	src/main/scala/tilelink/Edges.scala	/^        val cutoff = log2Ceil(manager.beatBytes)$/;"	l
cvtType	src/main/scala/tile/FPU.scala	/^      val cvtType = in.typ.extract(log2Ceil(nIntTypes), 1)$/;"	l
cx	src/main/scala/rocket/Breakpoint.scala	/^    val cx = bp.contextMatch(io.mcontext, io.scontext)$/;"	l
cycle	src/main/scala/rocket/Instructions.scala	/^  val cycle = 0xc00$/;"	l
cycleCount	src/main/scala/groundtest/TraceGen.scala	/^  val cycleCount = Reg(init = UInt(0, 32))$/;"	l
cycleh	src/main/scala/rocket/Instructions.scala	/^  val cycleh = 0xc80$/;"	l
d	src/main/scala/devices/debug/SBA.scala	/^    val d = Queue(tl.d, 2) \/\/ Add a small buffer since response could arrive on same cycle as request$/;"	l
d	src/main/scala/rocket/PTW.scala	/^  val d = Bool()$/;"	l
d	src/main/scala/rocket/RocketCore.scala	/^    val d = Module(new SCIEDecoder)$/;"	l
d	src/main/scala/tile/BaseTile.scala	/^    val d = if (tileParams.core.fpu.nonEmpty && tileParams.core.fpu.get.fLen > 32) "d" else ""$/;"	l
d	src/main/scala/tile/FPU.scala	/^  val d: Array[(BitPat, List[BitPat])] =$/;"	l
d	src/main/scala/tilelink/Bundle_ACancel.scala	/^  val d = Flipped(Decoupled(new TLBundleD(params)))$/;"	l
d	src/main/scala/tilelink/Bundles.scala	/^  def d = Seq( ("AccessAck",TLPermissions.PermMsgReserved),$/;"	m
d	src/main/scala/tilelink/Bundles.scala	/^  def d: DecoupledIO[TLBundleD] = optD.getOrElse(Wire(Decoupled(new TLBundleD(params))))$/;"	m
d	src/main/scala/tilelink/Bundles.scala	/^  val d = CreditedIO(new TLBundleD(params)).flip$/;"	l
d	src/main/scala/tilelink/Bundles.scala	/^  val d = RationalIO(new TLBundleD(params)).flip$/;"	l
d	src/main/scala/tilelink/Bundles.scala	/^  val d = new AsyncBundle(new TLBundleD(params.base), params.async).flip$/;"	l
d	src/main/scala/tilelink/Edges.scala	/^    val d = Wire(new TLBundleD(bundle))$/;"	l
d	src/main/scala/tilelink/Fuzzer.scala	/^    val d = out.d.bits$/;"	l
d	src/main/scala/tilelink/PatternPusher.scala	/^    val d = tl_out.d$/;"	l
d	src/main/scala/tilelink/RAMModel.scala	/^      val d = RegNext(out.d.bits)$/;"	l
d	src/main/scala/tilelink/RegisterRouter.scala	/^    val d = bundleIn.d$/;"	l
d	src/main/scala/tilelink/ToAHB.scala	/^      val d = Wire(in.d)$/;"	l
d	src/main/scala/tilelink/ToAPB.scala	/^      val d = Wire(in.d)$/;"	l
d	src/main/scala/util/AsyncResetReg.scala	/^    val d = Bool(INPUT)$/;"	l
d	src/main/scala/util/AsyncResetReg.scala	/^  val d = UInt(INPUT, width = w)$/;"	l
d	src/main/scala/util/ShiftReg.scala	/^    val d = Input(UInt(w.W))$/;"	l
d	src/main/scala/util/SynchronizerReg.scala	/^    val d = Input(UInt(w.W))$/;"	l
dCacheLogicalTreeNode	src/main/scala/tile/RocketTile.scala	/^  val dCacheLogicalTreeNode = new DCacheLogicalTreeNode(dcache, dtim_adapter.map(_.device), rocketParams.dcache.get)$/;"	l
dDataNo	src/main/scala/tilelink/Edges.scala	/^        val dDataNo  = manager.anySupportPutFull || manager.anySupportPutPartial || manager.anySupportHint || manager.anySupportAcquireT$/;"	l
dDataYes	src/main/scala/tilelink/Edges.scala	/^        val dDataYes = manager.anySupportGet || manager.anySupportArithmetic || manager.anySupportLogical || manager.anySupportAcquireB$/;"	l
dECC	src/main/scala/rocket/DCache.scala	/^  val dECC = cacheParams.dataCode$/;"	l
dECC	src/main/scala/rocket/ICache.scala	/^  val dECC = cacheParams.dataCode$/;"	l
dECC	src/main/scala/rocket/NBDcache.scala	/^  val dECC = cacheParams.dataCode$/;"	l
dFirst	src/main/scala/tilelink/Fragmenter.scala	/^        val dFirst = acknum === UInt(0)$/;"	l
dFirst_acknum	src/main/scala/tilelink/Fragmenter.scala	/^        val dFirst_acknum = acknum_fragment | Mux(dHasData, acknum_size, UInt(0))$/;"	l
dFirst_size	src/main/scala/tilelink/Fragmenter.scala	/^        val dFirst_size = OH1ToUInt((dFragnum << log2Ceil(minSize)) | dsizeOH1)$/;"	l
dFragnum	src/main/scala/tilelink/Fragmenter.scala	/^        val dFragnum = out.d.bits.source(fragmentBits-1, 0)$/;"	l
dHasData	src/main/scala/tilelink/Fragmenter.scala	/^        val dHasData = edgeOut.hasData(out.d.bits)$/;"	l
dLast	src/main/scala/tilelink/Fragmenter.scala	/^        val dLast = dFragnum === UInt(0) \/\/ only for AccessAck (!Data)$/;"	l
dMode	src/main/scala/rocket/CSR.scala	/^            val dMode = newBPC.dmode && reg_debug && (prevDMode || !prevChain)$/;"	l
dOrig	src/main/scala/tilelink/Fragmenter.scala	/^        val dOrig = Reg(UInt())$/;"	l
dRatio	src/main/scala/diplomacy/Nodes.scala	/^  def dRatio: Int = oPorts.size \/ multiplicity$/;"	m
dToggle	src/main/scala/tilelink/Fragmenter.scala	/^        val dToggle = RegInit(Bool(false))$/;"	l
dWHeld	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^        val dWHeld = Mux(bypass, aWOk, dWOk) holdUnless d_first$/;"	l
dWHeld	src/main/scala/tilelink/CacheCork.scala	/^        val dWHeld = Mux(bypass, aWOk, dWOk) holdUnless d_first$/;"	l
dWOk	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^        val dWOk = wSourceVec(in.d.bits.source)$/;"	l
dWOk	src/main/scala/tilelink/CacheCork.scala	/^        val dWOk = wSourceVec(d_d.bits.source)$/;"	l
d_ack	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_ack  = out.d.bits.opcode === TLMessages.AccessAck$/;"	l
d_ackd	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_ackd = out.d.bits.opcode === TLMessages.AccessAckData$/;"	l
d_addr	src/main/scala/amba/ahb/ToTL.scala	/^      val d_addr  = Reg(in.haddr)$/;"	l
d_addr	src/main/scala/tilelink/RAMModel.scala	/^              val d_addr = d_addr_hi << shift | UInt(i)$/;"	l
d_addr	src/main/scala/tilelink/ToAHB.scala	/^        val d_addr  = RegEnable(send.addr,  a_flow && send.send)$/;"	l
d_addr_hi	src/main/scala/tilelink/RAMModel.scala	/^      val d_addr_hi = edge.addr_hi(d_address)$/;"	l
d_address	src/main/scala/tilelink/RAMModel.scala	/^      val d_address = d_base | d_address_inc$/;"	l
d_address	src/main/scala/tilelink/SRAM.scala	/^    val d_address   = Reg(UInt(edge.bundle.addressBits.W))$/;"	l
d_allow	src/main/scala/tilelink/Broadcast.scala	/^      val d_allow = Wire(Bool())$/;"	l
d_atomic	src/main/scala/tilelink/SRAM.scala	/^    val d_atomic    = Reg(Bool())$/;"	l
d_base	src/main/scala/tilelink/RAMModel.scala	/^      val d_base = d_flight.base$/;"	l
d_bits	src/main/scala/tilelink/RAMModel.scala	/^            val d_bits = UIntToOH1(d_size, addressBits)$/;"	l
d_block	src/main/scala/tilelink/ToAHB.scala	/^      val d_block = Wire(Bool())$/;"	l
d_bypass	src/main/scala/amba/ahb/SRAM.scala	/^    val d_bypass = RegEnable(a_bypass, a_request)$/;"	l
d_cam_corrupt	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_cam_corrupt = Mux1H(d_cam_sel_match, cam_d.map(_.corrupt))$/;"	l
d_cam_data	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_cam_data = Mux1H(d_cam_sel_match, cam_d.map(_.data))$/;"	l
d_cam_denied	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_cam_denied = Mux1H(d_cam_sel_match, cam_d.map(_.denied))$/;"	l
d_cam_sel	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_cam_sel = (a_cam_sel_free zip d_cam_sel_match) map { case (a,d) => Mux(d_cam_sel_bypass, a, d) }$/;"	l
d_cam_sel_any	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_cam_sel_any = d_cam_sel_bypass || d_cam_sel_match.reduce(_ || _)$/;"	l
d_cam_sel_bypass	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_cam_sel_bypass = if (edgeOut.manager.minLatency > 0) Bool(false) else$/;"	l
d_cam_sel_match	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_cam_sel_match = (d_cam_sel_raw zip cam_dmatch) map { case (a,b) => a&&b }$/;"	l
d_cam_sel_raw	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_cam_sel_raw = cam_a.map(_.bits.source === in.d.bits.source)$/;"	l
d_clr	src/main/scala/tilelink/Monitor.scala	/^    val d_clr          = WireInit(0.U(edge.client.endSourceId.W))$/;"	l
d_clr	src/main/scala/tilelink/Monitor.scala	/^    val d_clr = WireInit(0.U(edge.client.endSourceId.W))$/;"	l
d_clr_wo_ready	src/main/scala/tilelink/Monitor.scala	/^    val d_clr_wo_ready = WireInit(0.U(edge.client.endSourceId.W))$/;"	l
d_correctable	src/main/scala/tilelink/SRAM.scala	/^    val d_correctable   = d_decoded.map(_.correctable)$/;"	l
d_corrected	src/main/scala/tilelink/SRAM.scala	/^    val d_corrected     = Cat(d_decoded.map(_.corrected).reverse)$/;"	l
d_crc	src/main/scala/tilelink/RAMModel.scala	/^      val d_crc = CRC(divisor, Cat(d_crc_acc, d_crc_new), 16 + beatBytes*8)$/;"	l
d_crc_acc	src/main/scala/tilelink/RAMModel.scala	/^      val d_crc_acc = Mux(d_first, UInt(0), d_crc_reg)$/;"	l
d_crc_check	src/main/scala/tilelink/RAMModel.scala	/^      val d_crc_check = Mux(crc_bypass, a_crc, crc.read(d.source)) holdUnless d_first$/;"	l
d_crc_new	src/main/scala/tilelink/RAMModel.scala	/^      val d_crc_new = FillInterleaved(8, d_mask) & d.data$/;"	l
d_crc_reg	src/main/scala/tilelink/RAMModel.scala	/^      val d_crc_reg = Reg(UInt(width = 16))$/;"	l
d_crc_valid	src/main/scala/tilelink/RAMModel.scala	/^      val d_crc_valid = Mux(crc_bypass, a_crc_valid, crc_valid.read(d.source)) holdUnless d_first$/;"	l
d_d	src/main/scala/tilelink/CacheCork.scala	/^        val d_d = Wire(in.d)$/;"	l
d_data	src/main/scala/devices/tilelink/MaskROM.scala	/^    val d_data = rom.io.q holdUnless RegNext(in.a.fire())$/;"	l
d_data	src/main/scala/tilelink/SRAM.scala	/^    val d_data = VecInit(Seq.tabulate(lanes) { i => d_updated(8*eccBytes*(i+1)-1, 8*eccBytes*i) })$/;"	l
d_dec	src/main/scala/tilelink/Edges.scala	/^    val d_dec = x.d.fire() && d_last && d_response$/;"	l
d_dec	src/main/scala/tilelink/RAMModel.scala	/^      val d_dec = d_dec_bytes.map(_ + d_dec_tree)$/;"	l
d_dec_bytes	src/main/scala/tilelink/RAMModel.scala	/^      val d_dec_bytes = dec_bytes.map(_.read(d_addr_hi))$/;"	l
d_dec_tree	src/main/scala/tilelink/RAMModel.scala	/^      val d_dec_tree = d_dec_trees.fold(UInt(0))(_ + _)$/;"	l
d_dec_trees	src/main/scala/tilelink/RAMModel.scala	/^      val d_dec_trees = dec_trees.zipWithIndex.map{ case (m, i) => m.read(d_addr_hi >> (i+1)) }$/;"	l
d_decoded	src/main/scala/tilelink/SRAM.scala	/^    val d_decoded       = d_raw_data.map(lane => code.decode(lane))$/;"	l
d_denied	src/main/scala/tilelink/Fragmenter.scala	/^          val d_denied = (!dFirst && r_denied) || out.d.bits.denied$/;"	l
d_denied	src/main/scala/tilelink/Fragmenter.scala	/^          val d_denied = out.d.bits.denied holdUnless dFirst$/;"	l
d_denied	src/main/scala/tilelink/ToAHB.scala	/^      val d_denied  = Reg(Bool())$/;"	l
d_detect	src/main/scala/tilelink/ErrorEvaluator.scala	/^      val d_detect = (!d_first && r_detect) || (Bool(!deny) && out.d.bits.corrupt) || out.d.bits.denied$/;"	l
d_drop	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_drop = d_first && d_ackd && d_cam_sel_any$/;"	l
d_drop	src/main/scala/tilelink/Broadcast.scala	/^      val d_drop = d_what === DROP$/;"	l
d_echo	src/main/scala/tilelink/ToAHB.scala	/^      val d_echo    = RegEnable(send.echo,   a_flow && send.send)$/;"	l
d_echo	src/main/scala/tilelink/ToAPB.scala	/^      val d_echo   = RegEnable(a.bits.echo,   enable_d)$/;"	l
d_error	src/main/scala/tilelink/SRAM.scala	/^    val d_error         = d_lane_error.orR$/;"	l
d_extra	src/main/scala/tilelink/RegisterRouter.scala	/^    val d_extra = out.bits.extra(TLRegisterRouterExtra)$/;"	l
d_fail	src/main/scala/amba/ahb/ToTL.scala	/^      val d_fail  = RegInit(Bool(false))$/;"	l
d_fifo	src/main/scala/tilelink/RAMModel.scala	/^      val d_fifo = edge.manager.hasFifoIdFast(d_flight.base) && edge.client.requestFifo(d.source)$/;"	l
d_fire	src/main/scala/tilelink/RAMModel.scala	/^      val d_fire = Reg(next = out.d.fire(), init = Bool(false))$/;"	l
d_first	src/main/scala/tilelink/AddressAdjuster.scala	/^        val d_first = parentEdge.first(parent.d) && parent.d.bits.opcode =\/= TLMessages.ReleaseAck$/;"	l
d_first	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_first = edgeOut.first(out.d)$/;"	l
d_first	src/main/scala/tilelink/CacheCork.scala	/^        val d_first = edgeOut.first(in_d)$/;"	l
d_first	src/main/scala/tilelink/FIFOFixer.scala	/^      val d_first = edgeOut.first(out.d) && out.d.bits.opcode =\/= TLMessages.ReleaseAck$/;"	l
d_first	src/main/scala/tilelink/Monitor.scala	/^    val d_first = bundle.d.valid && edge.first(bundle.d.bits, bundle.d.fire())$/;"	l
d_first	src/main/scala/tilelink/Monitor.scala	/^    val d_first = edge.first(bundle.d.bits, bundle.d.fire())$/;"	l
d_first	src/main/scala/tilelink/Monitor.scala	/^    val d_first = edge.first(d.bits, d.fire())$/;"	l
d_flight	src/main/scala/tilelink/RAMModel.scala	/^      val d_flight = RegEnable(Mux(bypass, a_flight, flight(out.d.bits.source)), edge.first(out.d))$/;"	l
d_flight	src/main/scala/tilelink/ToAHB.scala	/^      val d_flight = RegInit(UInt(0, width = 2))$/;"	l
d_flow	src/main/scala/tilelink/ToAHB.scala	/^      val d_flow = Wire(Bool())$/;"	l
d_full	src/main/scala/devices/tilelink/MaskROM.scala	/^    val d_full = RegInit(Bool(false))$/;"	l
d_full	src/main/scala/tilelink/SRAM.scala	/^    val d_full      = RegInit(false.B)$/;"	l
d_full	src/main/scala/tilelink/ToAHB.scala	/^        val d_full  = RegInit(Bool(false))$/;"	l
d_grant	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^        val d_grant = in.d.bits.opcode === TLMessages.Grant || in.d.bits.opcode === TLMessages.GrantData$/;"	l
d_grant	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val d_grant = Bool(edgeIn.manager.anySupportAcquireB) && deny.opcode === TLMessages.Grant$/;"	l
d_grant	src/main/scala/tilelink/CacheCork.scala	/^        val d_grant = in_d.bits.opcode === GrantData || in_d.bits.opcode === Grant$/;"	l
d_hasData	src/main/scala/amba/axi4/ToTL.scala	/^      val d_hasData = edgeOut.hasData(out.d.bits)$/;"	l
d_hasData	src/main/scala/tilelink/Broadcast.scala	/^      val d_hasData = edgeOut.hasData(out.d.bits)$/;"	l
d_hasData	src/main/scala/tilelink/ErrorEvaluator.scala	/^      val d_hasData = edgeOut.hasData(out.d.bits)$/;"	l
d_high	src/main/scala/tilelink/Broadcast.scala	/^      val d_high = log2Ceil(edgeIn.client.endSourceId)$/;"	l
d_hint	src/main/scala/tilelink/ErrorEvaluator.scala	/^      val d_hint = out.d.bits.opcode === TLMessages.HintAck \/\/ even illegal hints can succeed$/;"	l
d_hint	src/main/scala/tilelink/ToAHB.scala	/^      val d_hint    = RegEnable(send.hint,   a_flow && send.send)$/;"	l
d_hsize	src/main/scala/tilelink/ToAHB.scala	/^        val d_hsize = RegEnable(send.hsize, a_flow && send.send)$/;"	l
d_idle	src/main/scala/tilelink/ToAHB.scala	/^        val d_idle  = RegInit(Bool(false))$/;"	l
d_inc	src/main/scala/tilelink/Edges.scala	/^    val d_inc = x.d.fire() && d_first && d_request$/;"	l
d_inc	src/main/scala/tilelink/RAMModel.scala	/^      val d_inc = d_inc_bytes.map(_ + d_inc_tree)$/;"	l
d_inc_bytes	src/main/scala/tilelink/RAMModel.scala	/^      val d_inc_bytes = inc_bytes.map(_.read(d_addr_hi))$/;"	l
d_inc_tree	src/main/scala/tilelink/RAMModel.scala	/^      val d_inc_tree = d_inc_trees.fold(UInt(0))(_ + _)$/;"	l
d_inc_trees	src/main/scala/tilelink/RAMModel.scala	/^      val d_inc_trees = inc_trees.zipWithIndex.map{ case (m, i) => m.read(d_addr_hi >> (i+1)) }$/;"	l
d_index	src/main/scala/amba/ahb/RegisterRouter.scala	/^    val d_index = Reg(UInt(width = indexBits))$/;"	l
d_inject	src/main/scala/tilelink/ErrorEvaluator.scala	/^      val d_inject = Mux(bypass, inject_now, inject_map.read(in.d.bits.source)) holdUnless d_first$/;"	l
d_interrupts	src/main/scala/rocket/CSR.scala	/^  val d_interrupts = io.interrupts.debug << CSR.debugIntCause$/;"	l
d_lane_error	src/main/scala/tilelink/SRAM.scala	/^    val d_lane_error    = Cat(d_uncorrectable.reverse) & d_lanes$/;"	l
d_lanes	src/main/scala/tilelink/SRAM.scala	/^    val d_lanes         = Cat(Seq.tabulate(lanes) { i => d_mask(eccBytes*(i+1)-1, eccBytes*i).orR }.reverse)$/;"	l
d_last	src/main/scala/amba/ahb/ToTL.scala	/^      val d_last   = a_first$/;"	l
d_last	src/main/scala/amba/axi4/ToTL.scala	/^      val d_last = edgeOut.last(out.d)$/;"	l
d_last	src/main/scala/tilelink/Broadcast.scala	/^    val d_last = Input(Bool())$/;"	l
d_last	src/main/scala/tilelink/SourceShrinker.scala	/^        val d_last  = edgeIn.last(in.d)$/;"	l
d_last	src/main/scala/tilelink/ToAXI4.scala	/^      val d_last = Mux(r_wins, out.r.bits.last, Bool(true))$/;"	l
d_legal	src/main/scala/amba/ahb/SRAM.scala	/^    val d_legal = RegEnable(a_legal, in.hreadyout)$/;"	l
d_mask	src/main/scala/amba/ahb/RegisterRouter.scala	/^    val d_mask  = Reg(UInt(width = beatBytes))$/;"	l
d_mask	src/main/scala/tilelink/RAMModel.scala	/^      val d_mask = edge.mask(d_base, d_size)$/;"	l
d_mask	src/main/scala/tilelink/SRAM.scala	/^    val d_mask      = Reg(UInt(beatBytes.W))$/;"	l
d_mshr	src/main/scala/tilelink/Broadcast.scala	/^      val d_mshr = OHToUInt(d_trackerOH)$/;"	l
d_mux	src/main/scala/tilelink/SRAM.scala	/^    val d_mux = if (sramReg) true.B else d_win$/;"	l
d_need_fix	src/main/scala/tilelink/SRAM.scala	/^    val d_need_fix      = d_correctable.reduce(_ || _)$/;"	l
d_no_race	src/main/scala/tilelink/RAMModel.scala	/^      val d_no_race = Wire(init = d_no_race_reg)$/;"	l
d_no_race_reg	src/main/scala/tilelink/RAMModel.scala	/^      val d_no_race_reg = Reg(Bool())$/;"	l
d_normal	src/main/scala/tilelink/Broadcast.scala	/^      val d_normal = Wire(in.d)$/;"	l
d_opcode	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val d_opcode = TLMessages.adResponse(in.a.bits.opcode)$/;"	l
d_opcode	src/main/scala/tilelink/SRAM.scala	/^    val d_opcode    = Reg(UInt(3.W))$/;"	l
d_opcodes_clr	src/main/scala/tilelink/Monitor.scala	/^    val d_opcodes_clr  = WireInit(0.U((edge.client.endSourceId << log_c_opcode_bus_size).W))$/;"	l
d_opcodes_clr	src/main/scala/tilelink/Monitor.scala	/^    val d_opcodes_clr = WireInit(0.U((edge.client.endSourceId << log_a_opcode_bus_size).W))$/;"	l
d_param	src/main/scala/tilelink/SRAM.scala	/^    val d_param     = Reg(UInt(3.W))$/;"	l
d_pause	src/main/scala/amba/ahb/ToTL.scala	/^      val d_pause = RegInit(Bool(true))$/;"	l
d_phase	src/main/scala/amba/ahb/RegisterRouter.scala	/^    val d_phase = RegInit(Bool(false))$/;"	l
d_poison	src/main/scala/tilelink/SRAM.scala	/^    val d_poison    = Reg(Bool())$/;"	l
d_poisonv	src/main/scala/tilelink/SRAM.scala	/^    val d_poisonv = VecInit(Seq.tabulate(lanes) { i =>$/;"	l
d_rack	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val d_rack  = Bool(edgeIn.manager.anySupportAcquireB) && in.d.bits.opcode === TLMessages.ReleaseAck$/;"	l
d_raw_data	src/main/scala/tilelink/SRAM.scala	/^    val d_raw_data  = Reg(Vec(lanes, Bits(width.W)))$/;"	l
d_rdata	src/main/scala/amba/ahb/SRAM.scala	/^    val d_rdata = mem.readAndHold(a_address, read)$/;"	l
d_read	src/main/scala/amba/ahb/RegisterRouter.scala	/^    val d_read  = Reg(Bool())$/;"	l
d_read	src/main/scala/tilelink/SRAM.scala	/^    val d_read      = Reg(Bool())$/;"	l
d_ready	src/main/scala/tilelink/SRAM.scala	/^    val d_ready = !d_respond || in.d.ready$/;"	l
d_recv	src/main/scala/amba/ahb/ToTL.scala	/^      val d_recv  = RegInit(Bool(false))$/;"	l
d_release_ack	src/main/scala/tilelink/Monitor.scala	/^    val d_release_ack = bundle.d.bits.opcode === TLMessages.ReleaseAck$/;"	l
d_replace	src/main/scala/tilelink/AtomicAutomata.scala	/^        val d_replace = d_first && d_ack && d_cam_sel_match.reduce(_ || _)$/;"	l
d_request	src/main/scala/amba/ahb/SRAM.scala	/^    val d_request = Reg(Bool(false))$/;"	l
d_resp	src/main/scala/amba/axi4/ToTL.scala	/^      val d_resp = Mux(out.d.bits.denied || out.d.bits.corrupt, AXI4Parameters.RESP_SLVERR, AXI4Parameters.RESP_OKAY)$/;"	l
d_respond	src/main/scala/tilelink/SRAM.scala	/^    val d_respond   = Reg(Bool())$/;"	l
d_response	src/main/scala/tilelink/Broadcast.scala	/^      val d_response = d_hasData || !d_what(1)$/;"	l
d_retry	src/main/scala/tilelink/ToAHB.scala	/^        val d_retry = RegInit(Bool(false))$/;"	l
d_rmw_data	src/main/scala/tilelink/SRAM.scala	/^    val d_rmw_data  = Reg(UInt((8*beatBytes).W))$/;"	l
d_sel	src/main/scala/amba/ahb/Xbar.scala	/^      val d_sel = Reg(a_sel)$/;"	l
d_sel	src/main/scala/tilelink/ToAXI4.scala	/^      val d_sel = UIntToOH(Mux(r_wins, out.r.bits.id, out.b.bits.id), edgeOut.master.endId).asBools$/;"	l
d_send	src/main/scala/amba/ahb/ToTL.scala	/^      val d_send  = RegInit(Bool(false))$/;"	l
d_set	src/main/scala/tilelink/Monitor.scala	/^    val d_set = WireInit(0.U(edge.manager.endSinkId.W))$/;"	l
d_shadow	src/main/scala/tilelink/RAMModel.scala	/^      val d_shadow = shadow.map(_.read(d_addr_hi))$/;"	l
d_size	src/main/scala/amba/ahb/ToTL.scala	/^      val d_size  = Reg(out.a.bits.size)$/;"	l
d_size	src/main/scala/devices/tilelink/MaskROM.scala	/^    val d_size = Reg(UInt())$/;"	l
d_size	src/main/scala/tilelink/RAMModel.scala	/^      val d_size = edge.size(d)$/;"	l
d_size	src/main/scala/tilelink/SRAM.scala	/^    val d_size      = Reg(UInt(edge.bundle.sizeBits.W))$/;"	l
d_size	src/main/scala/tilelink/ToAHB.scala	/^      val d_size    = RegEnable(send.size,   a_flow && send.send)$/;"	l
d_size	src/main/scala/tilelink/ToAPB.scala	/^      val d_size   = RegEnable(a.bits.size,   enable_d)$/;"	l
d_sizeOH	src/main/scala/tilelink/RAMModel.scala	/^      val d_sizeOH = UIntToOH(d_size)$/;"	l
d_sizes_clr	src/main/scala/tilelink/Monitor.scala	/^    val d_sizes_clr    = WireInit(0.U((edge.client.endSourceId << log_c_size_bus_size).W))$/;"	l
d_sizes_clr	src/main/scala/tilelink/Monitor.scala	/^    val d_sizes_clr = WireInit(0.U((edge.client.endSourceId << log_a_size_bus_size).W))$/;"	l
d_source	src/main/scala/devices/tilelink/MaskROM.scala	/^    val d_source = Reg(UInt())$/;"	l
d_source	src/main/scala/tilelink/SRAM.scala	/^    val d_source    = Reg(UInt(edge.bundle.sourceBits.W))$/;"	l
d_source	src/main/scala/tilelink/ToAHB.scala	/^      val d_source  = RegEnable(send.source, a_flow && send.send)$/;"	l
d_source	src/main/scala/tilelink/ToAPB.scala	/^      val d_source = RegEnable(a.bits.source, enable_d)$/;"	l
d_sublane	src/main/scala/tilelink/SRAM.scala	/^    val d_sublane   = Reg(Bool())$/;"	l
d_taken	src/main/scala/amba/ahb/RegisterRouter.scala	/^    val d_taken = Reg(Bool())$/;"	l
d_trackerOH	src/main/scala/tilelink/Broadcast.scala	/^      val d_trackerOH = VecInit(trackers.map { t => t.need_d && t.source === d_normal.bits.source }).asUInt holdUnless d_first$/;"	l
d_uncorrectable	src/main/scala/tilelink/SRAM.scala	/^    val d_uncorrectable = d_decoded.map(_.uncorrectable)$/;"	l
d_uncorrected	src/main/scala/tilelink/SRAM.scala	/^    val d_uncorrected   = Cat(d_decoded.map(_.uncorrected).reverse)$/;"	l
d_updated	src/main/scala/tilelink/SRAM.scala	/^    val d_updated = if (atomics) {$/;"	l
d_user	src/main/scala/amba/ahb/ToTL.scala	/^      val d_user  = Reg(BundleMap(edgeOut.bundle.requestFields))$/;"	l
d_valid	src/main/scala/tilelink/RAMModel.scala	/^      val d_valid = valid(d.source) holdUnless d_first$/;"	l
d_valid	src/main/scala/tilelink/ToAHB.scala	/^      val d_valid   = RegInit(Bool(false))$/;"	l
d_waddr	src/main/scala/tilelink/RAMModel.scala	/^      val d_waddr = Mux(wipe, wipeIndex, d_addr_hi)$/;"	l
d_wb	src/main/scala/tilelink/SRAM.scala	/^    val d_wb = d_full && (d_sublane || d_atomic || (d_read && d_need_fix))$/;"	l
d_wdata	src/main/scala/amba/ahb/SRAM.scala	/^    val d_wdata = Vec.tabulate(beatBytes) { i => in.hwdata(8*(i+1)-1, 8*i) }$/;"	l
d_what	src/main/scala/tilelink/Broadcast.scala	/^      val d_what = out.d.bits.source(d_high+1, d_high)$/;"	l
d_win	src/main/scala/tilelink/SRAM.scala	/^    val d_win = d_full && d_respond$/;"	l
d_write	src/main/scala/amba/ahb/ToTL.scala	/^      val d_write = RegInit(Bool(false))$/;"	l
d_write	src/main/scala/tilelink/ToAHB.scala	/^      val d_write   = RegEnable(send.write,  a_flow && send.send)$/;"	l
d_write	src/main/scala/tilelink/ToAPB.scala	/^      val d_write  = RegEnable(a_write,       enable_d)$/;"	l
da	src/main/scala/devices/tilelink/Error.scala	/^    val da = Wire(in.d)$/;"	l
da	src/main/scala/regmapper/Test.scala	/^  def da(bits: Int) = combo(bits, delay(5), always)$/;"	m
dangles	src/main/scala/diplomacy/LazyModule.scala	/^    val dangles = (forward zip auto.elements) map { case (d, (_, io)) =>$/;"	l
dangles	src/main/scala/diplomacy/Nodes.scala	/^    val dangles = super.instantiate()$/;"	l
dat	src/main/scala/tilelink/SRAM.scala	/^    val dat    = Mux(d_wb, d_data,    Mux(r_replay, r_data,    a_data))$/;"	l
data	src/main/scala/amba/axi4/Bundles.scala	/^  val data = UInt(width = params.dataBits)$/;"	l
data	src/main/scala/amba/axis/Bundles.scala	/^  def data = Output(UInt(width.W))$/;"	m
data	src/main/scala/amba/axis/Bundles.scala	/^  def data = if (params.hasData) apply(AXISData) else 0.U(params.dataBits.W)$/;"	m
data	src/main/scala/amba/package.scala	/^    def data = Output(Bool())$/;"	m
data	src/main/scala/amba/package.scala	/^    def data = Output(new AMBAProtBundle)$/;"	m
data	src/main/scala/devices/debug/Custom.scala	/^  val data = Output(UInt(p.width.W))$/;"	l
data	src/main/scala/devices/debug/DMI.scala	/^  val data = UInt(DMIConsts.dmiDataSize.W)$/;"	l
data	src/main/scala/devices/debug/DebugTransport.scala	/^  val data = UInt(DMIConsts.dmiDataSize.W)$/;"	l
data	src/main/scala/devices/debug/dm_registers.scala	/^  val data = UInt(32.W)$/;"	l
data	src/main/scala/jtag/JtagShifter.scala	/^  val data = Bool()  \/\/ as input: bit to be captured into shifter MSB on next rising edge; as output: value of shifter LSB$/;"	l
data	src/main/scala/jtag/Utils.scala	/^  val data = Bool()$/;"	l
data	src/main/scala/prci/BundleBridgeBlockDuringReset.scala	/^        val data = BundleBridgeNexus.requireOne[T](registered)(s)$/;"	l
data	src/main/scala/regmapper/RegMapper.scala	/^      val data = if (field.write.combinational) back.bits.data else front.bits.data$/;"	l
data	src/main/scala/regmapper/RegMapper.scala	/^  val data  = UInt(width = params.maskBits*8)$/;"	l
data	src/main/scala/regmapper/Test.scala	/^      val data = Reg(UInt(width = idata.getWidth))$/;"	l
data	src/main/scala/regmapper/Test.scala	/^    val data = Reg(Vec(x, UInt(width = idata.getWidth)))$/;"	l
data	src/main/scala/rocket/AMOALU.scala	/^  def data = genData(0)$/;"	m
data	src/main/scala/rocket/DCache.scala	/^      val data = DecodeLogic(opc, uncachedGrantOpcodesWithData, uncachedGrantOpcodesSansData)$/;"	l
data	src/main/scala/rocket/DCache.scala	/^    val data = array.read(addr, valid && !io.req.bits.write)$/;"	l
data	src/main/scala/rocket/DCache.scala	/^  val data = Module(new DCacheDataArray)$/;"	l
data	src/main/scala/rocket/DCache.scala	/^  val data = UInt(width = cacheParams.tagCode.width(new L1Metadata().getWidth))$/;"	l
data	src/main/scala/rocket/Frontend.scala	/^  val data = UInt(width = fetchWidth * coreInstBits)$/;"	l
data	src/main/scala/rocket/HellaCache.scala	/^  val data = Bits(width = coreDataBits)$/;"	l
data	src/main/scala/rocket/HellaCache.scala	/^  val data = new L1Metadata$/;"	l
data	src/main/scala/rocket/IBuf.scala	/^    val data = Cat(Fill((1 << (log2Ceil(r) + 1)) - r, in >> (r-1)*coreInstBits), in)$/;"	l
data	src/main/scala/rocket/ICache.scala	/^      val data = Mux(s3_slaveValid, s1s3_slaveData, tl_out.d.bits.data(wordBits*(i+1)-1, wordBits*i))$/;"	l
data	src/main/scala/rocket/ICache.scala	/^  val data = UInt(width = outer.icacheParams.fetchBytes*8)$/;"	l
data	src/main/scala/rocket/Multiplier.scala	/^  val data = Bits(dataBits.W)$/;"	l
data	src/main/scala/rocket/NBDcache.scala	/^          val data = Vec.fill(rowWords)(io.write.bits.data(encDataBits*(i+1)-1,encDataBits*i))$/;"	l
data	src/main/scala/rocket/NBDcache.scala	/^        val data = Vec.tabulate(rowWords)(i => io.write.bits.data(encDataBits*(i+1)-1,encDataBits*i))$/;"	l
data	src/main/scala/rocket/NBDcache.scala	/^  val data   = Bits(width = encRowBits)$/;"	l
data	src/main/scala/rocket/NBDcache.scala	/^  val data = Module(new DataArray)$/;"	l
data	src/main/scala/rocket/PTW.scala	/^    val data = Reg(Vec(coreParams.nPTECacheEntries, UInt((if (usingHypervisor && s2) vpnBits else ppnBits).W)))$/;"	l
data	src/main/scala/rocket/TLB.scala	/^  val data = Vec(nSectors, UInt(width = new TLBEntryData().getWidth))$/;"	l
data	src/main/scala/tile/FPU.scala	/^  val data = Bits(width = fLen+1)$/;"	l
data	src/main/scala/tile/LazyRoCC.scala	/^  val data = Bits(xLen.W)$/;"	l
data	src/main/scala/tilelink/AtomicAutomata.scala	/^    val data    = UInt(width = params.a.dataBits)$/;"	l
data	src/main/scala/tilelink/Broadcast.scala	/^  val data = UInt(params.dataBits.W)$/;"	l
data	src/main/scala/tilelink/Bundles.scala	/^  val data    = UInt(width = params.dataBits)$/;"	l
data	src/main/scala/tilelink/Edges.scala	/^  def data(x: TLDataChannel): UInt = {$/;"	m
data	src/main/scala/tilelink/Fuzzer.scala	/^    val data      = noiseMaker(dataBits, inc_beat, 2)$/;"	l
data	src/main/scala/tilelink/RAMModel.scala	/^        val data = Mux(wipe, UInt(0), a_inc_bytes(i) + UInt(1))$/;"	l
data	src/main/scala/tilelink/RAMModel.scala	/^        val data = Mux(wipe, UInt(0), a_inc_trees(i) + UInt(1))$/;"	l
data	src/main/scala/tilelink/RAMModel.scala	/^        val data = Mux(wipe, UInt(0), d_dec_bytes(i) + UInt(1))$/;"	l
data	src/main/scala/tilelink/RAMModel.scala	/^        val data = Mux(wipe, UInt(0), d_dec_trees(i) + UInt(1))$/;"	l
data	src/main/scala/tilelink/RAMModel.scala	/^        val data = Wire(new TLRAMModel.ByteMonitor(params))$/;"	l
data	src/main/scala/tilelink/RegisterRouter.scala	/^  def data = Output(new TLRegisterRouterExtraBundle(sourceBits, sizeBits))$/;"	m
data	src/main/scala/tilelink/ToAHB.scala	/^  val data   = UInt(width = params.bundle.dataBits)$/;"	l
data	src/main/scala/tilelink/ToAXI4.scala	/^  def data = Output(new AXI4TLStateBundle(sourceBits))$/;"	m
data	src/main/scala/util/BundleMap.scala	/^  def data = typeT$/;"	m
data	src/main/scala/util/BundleMap.scala	/^  def data: Data \/\/ the field's chisel type with a direction$/;"	m
data	src/main/scala/util/BundleMap.scala	/^  def data: T$/;"	m
data	src/main/scala/util/RecordMap.scala	/^  def data = elements.values$/;"	m
data	src/main/scala/util/ReorderQueue.scala	/^  val data = dType.cloneType$/;"	l
data	src/main/scala/util/ReorderQueue.scala	/^  val data = dType.cloneType.asOutput$/;"	l
data	src/main/scala/util/ScatterGather.scala	/^      val data = a.toVector$/;"	l
dataArb	src/main/scala/rocket/DCache.scala	/^  val dataArb = Module(new Arbiter(new DCacheDataReq, 4) with InlineInstance)$/;"	l
dataBits	src/main/scala/amba/axis/Parameters.scala	/^  val dataBits:    Int,$/;"	l
dataBits	src/main/scala/tilelink/Fuzzer.scala	/^    val dataBits     = edge.bundle.dataBits$/;"	l
dataBus	src/main/scala/subsystem/HasTiles.scala	/^    val dataBus = context.locateTLBusWrapper(crossingParams.master.where)$/;"	l
dataChainIn	src/main/scala/jtag/JtagTap.scala	/^  val dataChainIn = Input(new ShifterIO)$/;"	l
dataChainOut	src/main/scala/jtag/JtagTap.scala	/^  val dataChainOut = Output(new ShifterIO)$/;"	l
dataCode	src/main/scala/rocket/HellaCache.scala	/^  def dataCode: Code = Code.fromString(dataECC)$/;"	m
dataCode	src/main/scala/rocket/ICache.scala	/^  def dataCode: Code = Code.fromString(dataECC)$/;"	m
dataECC	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def dataECC: Option[OMECC]$/;"	m
dataIn	src/main/scala/devices/debug/SBA.scala	/^      val dataIn       = Input(UInt(128.W))$/;"	l
dataIn	src/main/scala/tilelink/PatternPusher.scala	/^  def dataIn: Option[BigInt] = None$/;"	m
dataMemorySizeBytes	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def dataMemorySizeBytes: Int$/;"	m
dataOut	src/main/scala/devices/debug/SBA.scala	/^      val dataOut      = Output(UInt(8.W))$/;"	l
dataOut	src/main/scala/regmapper/RegMapper.scala	/^    val dataOut = Array.fill(regSize) { UInt(0) }$/;"	l
dataPadded	src/main/scala/tile/FPU.scala	/^    val dataPadded = data.init.map(d => Cat(data.last >> d.getWidth, d)) :+ data.last$/;"	l
dataScratchpadBytes	src/main/scala/groundtest/Tile.scala	/^  val dataScratchpadBytes = 0$/;"	l
dataScratchpadBytes	src/main/scala/rocket/HellaCache.scala	/^  def dataScratchpadBytes: Int = scratch.map(_ => nSets*blockBytes).getOrElse(0)$/;"	m
dataScratchpadSize	src/main/scala/rocket/HellaCache.scala	/^  def dataScratchpadSize = cacheParams.dataScratchpadBytes$/;"	m
data_arrays	src/main/scala/rocket/DCache.scala	/^  val data_arrays = Seq.tabulate(rowBits \/ subWordBits) {$/;"	l
data_arrays	src/main/scala/rocket/ICache.scala	/^  val data_arrays = Seq.tabulate(tl_out.d.bits.data.getWidth \/ wordBits) {$/;"	l
data_block	scripts/check_cache_trace.py	/^def data_block():$/;"	f
data_bytes	src/main/scala/tile/LazyRoCC.scala	/^  val data_bytes = VecInit(Seq.tabulate(cacheDataBits\/8) { i => recv_data(8 * (i + 1) - 1, 8 * i) })$/;"	l
data_error	src/main/scala/rocket/ICache.scala	/^  val data_error = Seq($/;"	l
data_error	src/main/scala/tilelink/SRAM.scala	/^    val data_error = Seq($/;"	l
data_error_cover	src/main/scala/rocket/DCache.scala	/^    val data_error_cover = Seq($/;"	l
data_error_dirty	src/main/scala/rocket/DCache.scala	/^    val data_error_dirty = Seq($/;"	l
data_error_type	src/main/scala/rocket/DCache.scala	/^    val data_error_type = Seq($/;"	l
data_hazard_ex	src/main/scala/rocket/RocketCore.scala	/^  val data_hazard_ex = ex_ctrl.wxd && checkHazards(hazard_targets, _ === ex_waddr)$/;"	l
data_hazard_mem	src/main/scala/rocket/RocketCore.scala	/^  val data_hazard_mem = mem_ctrl.wxd && checkHazards(hazard_targets, _ === mem_waddr)$/;"	l
data_hazard_wb	src/main/scala/rocket/RocketCore.scala	/^  val data_hazard_wb = wb_ctrl.wxd && checkHazards(hazard_targets, _ === wb_waddr)$/;"	l
data_in	src/main/scala/tilelink/Atomics.scala	/^    val data_in  = UInt(width = params.dataBits).flip$/;"	l
data_out	src/main/scala/tilelink/Atomics.scala	/^    val data_out = UInt(width = params.dataBits)$/;"	l
data_raw	src/main/scala/rocket/HellaCache.scala	/^  val data_raw = Bits(width = coreDataBits)$/;"	l
data_req	src/main/scala/rocket/NBDcache.scala	/^    val data_req = Decoupled(new L1DataReadReq)$/;"	l
data_req_cnt	src/main/scala/rocket/NBDcache.scala	/^  val data_req_cnt = Reg(init = UInt(0, width = log2Up(refillCycles+1))) \/\/TODO Zero width$/;"	l
data_resp	src/main/scala/rocket/NBDcache.scala	/^    val data_resp = Bits(INPUT, encRowBits)$/;"	l
data_size	src/main/scala/amba/apb/ToTL.scala	/^      val data_size = UInt(log2Ceil(beatBytes))$/;"	l
data_word_bypass	src/main/scala/rocket/HellaCache.scala	/^  val data_word_bypass = Bits(width = coreDataBits)$/;"	l
dataaccess	src/main/scala/devices/debug/dm_registers.scala	/^  val dataaccess = Bool()$/;"	l
dataaddr	src/main/scala/devices/debug/dm_registers.scala	/^  val dataaddr = UInt(12.W)$/;"	l
datacount	src/main/scala/devices/debug/dm_registers.scala	/^  val datacount = UInt(4.W)$/;"	l
datasize	src/main/scala/devices/debug/dm_registers.scala	/^  val datasize = UInt(4.W)$/;"	l
dc	src/main/scala/devices/tilelink/Error.scala	/^      val dc = Wire(in.d)$/;"	l
dc	src/main/scala/rocket/Decode.scala	/^          val dc = getImplicitDC(maxterms, a, bits, false)$/;"	l
dc	src/main/scala/rocket/Decode.scala	/^          val dc = getImplicitDC(maxterms, a, bits, true)$/;"	l
dc	src/main/scala/rocket/Decode.scala	/^      val dc = termvalues.filter { case (k,t) => ((t.mask >> i) & 1) == 1 }.map(_._1)$/;"	l
dcIF	src/main/scala/tile/LazyRoCC.scala	/^      val dcIF = Module(new SimpleHellaCacheIF()(outer.p))$/;"	l
dc_last	src/main/scala/devices/tilelink/Error.scala	/^      val dc_last = edge.last(dc)$/;"	l
dcache	src/main/scala/rocket/HellaCache.scala	/^  lazy val dcache: HellaCache = LazyModule(p(BuildHellaCache)(this)(p))$/;"	l
dcache	src/main/scala/tile/BaseTile.scala	/^    val dcache = tileParams.dcache.filter(!_.scratch.isDefined).map(d => Map($/;"	l
dcache	src/main/scala/tile/BaseTile.scala	/^  val dcache: Option[DCacheParams]$/;"	l
dcache	src/main/scala/tile/BusErrorUnit.scala	/^  val dcache = new DCacheErrors$/;"	l
dcacheArb	src/main/scala/rocket/HellaCache.scala	/^  val dcacheArb = Module(new HellaCacheArbiter(outer.nDCachePorts)(outer.p))$/;"	l
dcacheArbPorts	src/main/scala/tile/BaseTile.scala	/^  def dcacheArbPorts = 1 + usingVM.toInt + usingDataScratchpad.toInt + p(BuildRoCC).size + tileParams.core.useVector.toInt$/;"	m
dcacheIF	src/main/scala/groundtest/TraceGen.scala	/^    val dcacheIF = Module(new SimpleHellaCacheIF())$/;"	l
dcacheImpl	src/main/scala/rocket/DCache.scala	/^  val dcacheImpl = withClock (gated_clock) { new DCacheModuleImpl }$/;"	l
dcacheOpt	src/main/scala/groundtest/Tile.scala	/^  val dcacheOpt = params.dcache.map { dc => LazyModule($/;"	l
dcachePorts	src/main/scala/rocket/HellaCache.scala	/^  val dcachePorts = ListBuffer[HellaCacheIO]()$/;"	l
dcacheReqTagBits	src/main/scala/tile/Core.scala	/^  def dcacheReqTagBits: Int = 6$/;"	m
dcache_blocked	src/main/scala/rocket/RocketCore.scala	/^  val dcache_blocked = {$/;"	l
dcache_bypass_data	src/main/scala/rocket/RocketCore.scala	/^  val dcache_bypass_data =$/;"	l
dcache_kill_mem	src/main/scala/rocket/RocketCore.scala	/^  val dcache_kill_mem = mem_reg_valid && mem_ctrl.wxd && io.dmem.replay_next \/\/ structural hazard on writeback port$/;"	l
dcmp	src/main/scala/tile/FPU.scala	/^  val dcmp = Module(new hardfloat.CompareRecFN(maxExpWidth, maxSigWidth))$/;"	l
dcsr	src/main/scala/rocket/Instructions.scala	/^  val dcsr = 0x7b0$/;"	l
dd	src/main/scala/regmapper/Test.scala	/^  def dd(bits: Int) = combo(bits, delay(5), delay(5))$/;"	m
de	src/main/scala/regmapper/Test.scala	/^  def de(bits: Int) = combo(bits, delay(5), delay(11))$/;"	m
debit	src/main/scala/util/CreditedIO.scala	/^  val debit  = Output(Bool()) \/\/ 1: a credit is consumed by the sender to transfer 'bits'$/;"	l
debounced	src/main/scala/prci/ResetWrangler.scala	/^    val debounced = withClockAndReset(slowIn.clock, causes) {$/;"	l
debug	src/main/scala/devices/debug/Periphery.scala	/^    val debug = IO(new DebugIO)$/;"	l
debug	src/main/scala/devices/debug/Periphery.scala	/^    val debug = LazyModule(new TLDebugModule(tlbus.beatBytes))$/;"	l
debug	src/main/scala/devices/debug/Periphery.scala	/^    val debug = new DMIIO$/;"	l
debug	src/main/scala/devices/debug/Periphery.scala	/^  val debug = noPrefix(outer.debugOpt.map { outerdebug =>$/;"	l
debug	src/main/scala/diplomacy/AddressDecoder.scala	/^  val debug = false$/;"	l
debug	src/main/scala/rocket/CSR.scala	/^  val debug = Bool() \/\/ keep in sync with CSR.debugIntCause$/;"	l
debug	src/main/scala/rocket/CSR.scala	/^  val debug = Bool()$/;"	l
debug	src/main/scala/tile/Interrupts.scala	/^  val debug = Bool()$/;"	l
debugAddrBits	src/main/scala/devices/debug/DebugTransport.scala	/^  val debugAddrBits = UInt(6.W)$/;"	l
debugCustomXbarOpt	src/main/scala/devices/debug/Periphery.scala	/^  val debugCustomXbarOpt = p(DebugModuleKey).map(params => LazyModule( new DebugCustomXbar(outputRequiresInput = false)))$/;"	l
debugEntry	src/main/scala/devices/debug/Debug.scala	/^  def debugEntry: BigInt = baseAddress + 0x800$/;"	m
debugEntry	src/main/scala/rocket/CSR.scala	/^  val debugEntry = p(DebugModuleKey).map(_.debugEntry).getOrElse(BigInt(0x800))$/;"	l
debugException	src/main/scala/devices/debug/Debug.scala	/^  def debugException: BigInt = baseAddress + 0x808$/;"	m
debugException	src/main/scala/rocket/CSR.scala	/^  val debugException = p(DebugModuleKey).map(_.debugException).getOrElse(BigInt(0x808))$/;"	l
debugIntCause	src/main/scala/rocket/CSR.scala	/^  def debugIntCause = 14 \/\/ keep in sync with MIP.debug$/;"	m
debugIntNxt	src/main/scala/devices/debug/Debug.scala	/^    val debugIntNxt = WireInit(VecInit(Seq.fill(nComponents) {false.B} ))$/;"	l
debugIntRegs	src/main/scala/devices/debug/Debug.scala	/^    val debugIntRegs = RegNext(next=debugIntNxt, init=0.U.asTypeOf(debugIntNxt)).suggestName("debugIntRegs")$/;"	l
debugOpt	src/main/scala/devices/debug/Periphery.scala	/^  val debugOpt = p(DebugModuleKey).map { params =>$/;"	l
debugTLDomainOpt	src/main/scala/devices/debug/Periphery.scala	/^  val debugTLDomainOpt = p(DebugModuleKey).map { _ =>$/;"	l
debugTVec	src/main/scala/rocket/CSR.scala	/^  val debugTVec = Mux(reg_debug, Mux(insn_break, debugEntry.U, debugException.U), debugEntry.U)$/;"	l
debugTriggerCause	src/main/scala/rocket/CSR.scala	/^  def debugTriggerCause = {$/;"	m
debugUnavail	src/main/scala/devices/debug/Debug.scala	/^      val debugUnavail    = Input(Vec(getNComponents(), Bool()))$/;"	l
debugUnavail	src/main/scala/devices/debug/Debug.scala	/^      val debugUnavail = Input(Vec(nComponents, Bool()))$/;"	l
debugUnavail	src/main/scala/devices/debug/Debug.scala	/^  val debugUnavail    = Input(Vec(nComponents, Bool()))$/;"	l
debugVersion	src/main/scala/devices/debug/DebugTransport.scala	/^  val debugVersion = UInt(4.W)$/;"	l
debug_clock	src/main/scala/devices/debug/Debug.scala	/^      val debug_clock = Input(Clock())$/;"	l
debug_csrs	src/main/scala/rocket/CSR.scala	/^  val debug_csrs = if (!usingDebug) LinkedHashMap() else LinkedHashMap[Int,Bits]($/;"	l
debug_if	src/main/scala/rocket/Breakpoint.scala	/^    val debug_if = Output(Bool())$/;"	l
debug_ld	src/main/scala/rocket/Breakpoint.scala	/^    val debug_ld = Output(Bool())$/;"	l
debug_req_bits_addr	src/main/resources/vsrc/SimDTM.v	/^  output [ 6:0] debug_req_bits_addr,$/;"	p
debug_req_bits_addr_reg	src/main/resources/vsrc/SimDTM.v	/^  reg [ 6:0] debug_req_bits_addr_reg;$/;"	r
debug_req_bits_data	src/main/resources/vsrc/SimDTM.v	/^  output [31:0] debug_req_bits_data,$/;"	p
debug_req_bits_data_reg	src/main/resources/vsrc/SimDTM.v	/^  reg [31:0] debug_req_bits_data_reg;$/;"	r
debug_req_bits_op_reg	src/main/resources/vsrc/SimDTM.v	/^  reg [ 1:0] debug_req_bits_op_reg;$/;"	r
debug_req_valid	src/main/resources/vsrc/SimDTM.v	/^  output        debug_req_valid,$/;"	p
debug_req_valid_reg	src/main/resources/vsrc/SimDTM.v	/^  reg        debug_req_valid_reg;$/;"	r
debug_reset	src/main/scala/devices/debug/Debug.scala	/^      val debug_reset = Input(Reset())$/;"	l
debug_reset	src/main/scala/devices/debug/Periphery.scala	/^    val debug_reset = Wire(Bool())$/;"	l
debug_reset_syncd	src/main/scala/devices/debug/Periphery.scala	/^      val debug_reset_syncd = if(sync) ~AsyncResetSynchronizerShiftReg(in=true.B, sync=3, name=Some("debug_reset_sync")) else dmi_reset$/;"	l
debug_resp_bits_data	src/main/resources/vsrc/SimDTM.v	/^  input  [31:0] debug_resp_bits_data,$/;"	p
debug_resp_ready	src/main/resources/vsrc/SimDTM.v	/^  output        debug_resp_ready,$/;"	p
debug_resp_ready_reg	src/main/resources/vsrc/SimDTM.v	/^  reg        debug_resp_ready_reg;$/;"	r
debug_st	src/main/scala/rocket/Breakpoint.scala	/^    val debug_st = Output(Bool())$/;"	l
debug_tick	src/main/resources/csrc/SimDTM.cc	/^extern "C" int debug_tick$/;"	f
dec	src/main/scala/amba/axi4/Deinterleaver.scala	/^            val dec = deq_OH(i) && in.r.fire() && in.r.bits.last$/;"	l
dec	src/main/scala/tile/FPU.scala	/^  val dec = new FPUCtrlSigs().asOutput$/;"	l
dec	src/main/scala/tilelink/Edges.scala	/^    val dec = Cat(Seq(a_dec, d_dec) ++ (if (bce) Seq(b_dec, c_dec, e_dec) else Nil))$/;"	l
dec	src/main/scala/tilelink/ToAXI4.scala	/^        val dec = ds && d_last && in.d.fire()$/;"	l
dec	src/main/scala/util/CreditedIO.scala	/^    val dec = res.toSender(depth, pipe)$/;"	l
decTrees	src/main/scala/tilelink/RAMModel.scala	/^      val decTrees     = log2Up(maxTransfer\/beatBytes)$/;"	l
dec_bytes	src/main/scala/tilelink/RAMModel.scala	/^      val dec_bytes = Seq.fill(beatBytes) { Mem(endAddressHi, UInt(width = countBits)) }$/;"	l
dec_bytes_wen	src/main/scala/tilelink/RAMModel.scala	/^      val dec_bytes_wen = Wire(init = Fill(beatBytes, wipe))$/;"	l
dec_trees	src/main/scala/tilelink/RAMModel.scala	/^      val dec_trees = Seq.tabulate(decTrees) { i => Mem(endAddressHi >> (i+1), UInt(width = countBits)) }$/;"	l
dec_trees_wen	src/main/scala/tilelink/RAMModel.scala	/^      val dec_trees_wen = Wire(init = Fill(decTrees, wipe))$/;"	l
decamel	src/main/scala/diplomacy/Nodes.scala	/^    val decamel = camelCase.replaceAllIn(valName.name, _ match { case camelCase(l, h) => l + "_" + h })$/;"	l
decisionMask	src/main/scala/rocket/TLBPermissions.scala	/^      val decisionMask = AddressDecoder(Seq(yes, no))$/;"	l
decls	src/main/scala/tile/CustomCSRs.scala	/^  def decls: Seq[CustomCSR] = bpmCSR.toSeq ++ chickenCSR$/;"	m
decode	src/main/scala/rocket/CSR.scala	/^  val decode = Vec(decodeWidth, new CSRDecodeIO)$/;"	l
decode	src/main/scala/rocket/IDecode.scala	/^  def decode(inst: UInt, table: Iterable[(BitPat, List[BitPat])]) = {$/;"	m
decode	src/main/scala/rocket/Multiplier.scala	/^  val decode = List($/;"	l
decode	src/main/scala/rocket/RVC.scala	/^  def decode = {$/;"	m
decode	src/main/scala/tilelink/Edges.scala	/^          val decode = UIntToOH1(size(bundle), maxLgSize) >> log2Ceil(manager.beatBytes)$/;"	l
decode	src/main/scala/tilelink/Edges.scala	/^        val decode = UIntToOH(size, maxLgSize+1) >> cutoff$/;"	l
decode	src/main/scala/util/ECC.scala	/^  def decode(x: UInt) = new Decoding {$/;"	m
decode	src/main/scala/util/ECC.scala	/^  def decode(x: UInt): Decoding$/;"	m
decode	src/main/scala/util/ECC.scala	/^  def decode(y: UInt) = new Decoding {$/;"	m
decodeAny	src/main/scala/rocket/CSR.scala	/^    def decodeAny(m: LinkedHashMap[Int,Bits]): Bool = m.map { case(k: Int, _: Bits) => addr === k }.reduce(_||_)$/;"	m
decodeCoreInterrupts	src/main/scala/tile/Interrupts.scala	/^  def decodeCoreInterrupts(core: TileInterrupts): Unit = {$/;"	m
decodeData	src/main/scala/rocket/DCache.scala	/^  def decodeData(x: UInt) = x.grouped(dECC.width(eccBits)).map(dECC.decode(_))$/;"	m
decodeFast	src/main/scala/rocket/CSR.scala	/^    def decodeFast(s: Seq[Int]): Bool = DecodeLogic(addr, s.map(_.U), (read_mapping -- s).keys.toList.map(_.U))$/;"	m
decodeReg	src/main/scala/rocket/RocketCore.scala	/^  def decodeReg(x: UInt) = (x.extract(x.getWidth-1, lgNXRegs).asBool, x(lgNXRegs-1, 0))$/;"	m
decodeWidth	src/main/scala/rocket/RocketCore.scala	/^  val decodeWidth: Int = fetchWidth \/ (if (useCompressed) 2 else 1)$/;"	l
decodeWidth	src/main/scala/tile/Core.scala	/^  val decodeWidth = coreParams.decodeWidth$/;"	l
decodeWidth	src/main/scala/tile/Core.scala	/^  val decodeWidth: Int$/;"	l
decode_table	src/main/scala/rocket/CSR.scala	/^  val decode_table = Seq(        SCALL->       List(Y,N,N,N,N,N,N,N,N),$/;"	l
decode_table	src/main/scala/rocket/RocketCore.scala	/^  val decode_table = {$/;"	l
decoded	src/main/scala/devices/debug/Custom.scala	/^    val decoded = sourceParams.map { x => x.addrs.foldLeft(false.B) { (result, current) => result || current.U === sink.addr}}$/;"	l
decoded	src/main/scala/rocket/CSR.scala	/^    val decoded = DecodeLogic(addr, Seq.fill(read_mapping.size)(X), pats)$/;"	l
decoded	src/main/scala/util/ECC.scala	/^  val decoded = code.decode(test(n-1, 0))$/;"	l
decoded_addr	src/main/scala/rocket/CSR.scala	/^  val decoded_addr = {$/;"	l
decoder	src/main/scala/rocket/IDecode.scala	/^    val decoder = DecodeLogic(inst, default, table)$/;"	l
decoder	src/main/scala/tile/FPU.scala	/^  val decoder = DecodeLogic(io.inst, default, insns)$/;"	l
default	src/main/scala/amba/axis/Bundles.scala	/^  def default(x: UInt): Unit = { x := DontCare }$/;"	m
default	src/main/scala/amba/package.scala	/^    def default(x: AMBAProtBundle): Unit = {$/;"	m
default	src/main/scala/amba/package.scala	/^    def default(x: Bool): Unit = { x := false.B }$/;"	m
default	src/main/scala/diplomacy/Parameters.scala	/^  val default = BufferParams(2)$/;"	l
default	src/main/scala/rocket/IDecode.scala	/^  def default: List[BitPat] =$/;"	m
default	src/main/scala/rocket/PMP.scala	/^  val default = if (io.pmp.isEmpty) true.B else io.prv > PRV.S$/;"	l
default	src/main/scala/tile/FPU.scala	/^  val default =       List(X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X)$/;"	l
default	src/main/scala/tilelink/RegisterRouter.scala	/^  def default(x: TLRegisterRouterExtraBundle) = {$/;"	m
default	src/main/scala/tilelink/ToAXI4.scala	/^  def default(x: AXI4TLStateBundle) = {$/;"	m
default	src/main/scala/util/BundleMap.scala	/^  def default(x: T): Unit = { x := defaultT }$/;"	m
default	src/main/scala/util/BundleMap.scala	/^  def default(x: T): Unit$/;"	m
defaultWireOpt	src/main/scala/diplomacy/BundleBridge.scala	/^    val defaultWireOpt = default.map(_())$/;"	l
default_rom_parameters	scripts/vlsi_rom_gen	/^default_rom_parameters = ROMParameters(name='', depth=0, width=0)$/;"	v
defbit	src/main/scala/rocket/Decode.scala	/^        val defbit = (dterm.value.toInt >> i) & 1$/;"	l
deglitched	src/main/scala/prci/ResetWrangler.scala	/^    val deglitched = AsyncResetReg(increment, slowIn.clock, causes, true, Some("deglitch"))$/;"	l
del	src/main/scala/rocket/CSR.scala	/^    val del = Wire(init=sup)$/;"	l
delay	src/main/resources/vsrc/ClockDivider3.v	/^   reg delay;$/;"	r
delay	src/main/scala/amba/axi4/Parameters.scala	/^  val delay = master.delay + slave.delay$/;"	l
delay	src/main/scala/regmapper/Test.scala	/^  def delay(x: Int): Bool => Bool = { ready =>$/;"	m
delay	src/main/scala/tilelink/Parameters.scala	/^  val delay = client.delay + manager.delay$/;"	l
delayTimer	src/main/scala/groundtest/TraceGen.scala	/^  val delayTimer = Module(new DynamicTimer(16))$/;"	l
delayer	src/main/scala/tilelink/Delayer.scala	/^    val delayer = LazyModule(new TLDelayer(q))$/;"	l
deleg	src/main/scala/rocket/CSR.scala	/^    val deleg = Wire(init = always)$/;"	l
delegable	src/main/scala/rocket/CSR.scala	/^      val delegable = (delegable_exceptions & (BigInt(1) << i).U) =\/= 0$/;"	l
delegable	src/main/scala/rocket/CSR.scala	/^    val delegable = (delegable_interrupts & (BigInt(1) << i).U) =\/= 0$/;"	l
delegable_counters	src/main/scala/rocket/CSR.scala	/^  val delegable_counters = ((BigInt(1) << (nPerfCounters + CSR.firstHPM)) - 1).U$/;"	l
delegable_exceptions	src/main/scala/rocket/CSR.scala	/^  val delegable_exceptions = UInt(Seq($/;"	l
delegate	src/main/scala/rocket/CSR.scala	/^  val delegate = Bool(usingSupervisor) && reg_mstatus.prv <= PRV.S && Mux(cause(xLen-1), read_mideleg(cause_lsbs), read_medeleg(cause_lsbs))$/;"	l
delegateVS	src/main/scala/rocket/CSR.scala	/^  val delegateVS = reg_mstatus.v && delegate && Mux(cause(xLen-1), read_hideleg(cause_lsbs), read_hedeleg(cause_lsbs))$/;"	l
denied	src/main/scala/tilelink/AtomicAutomata.scala	/^    val denied  = Bool()$/;"	l
denied	src/main/scala/tilelink/Bundles.scala	/^  val denied  = Bool() \/\/ implies corrupt iff *Data$/;"	l
denied	src/main/scala/tilelink/Monitor.scala	/^    val denied  = Reg(Bool())$/;"	l
dense	src/main/scala/util/PrefixSum.scala	/^    val dense = DensePrefixSum (input)(_ ++ _, layers)$/;"	l
denseL	src/main/scala/util/PrefixSum.scala	/^    val denseL = DensePrefixSum.layers(input.size)$/;"	l
deny	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val deny = Reg(in.d.bits)$/;"	l
denyValid	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val denyValid = RegInit(Bool(false))$/;"	l
denyWait	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val denyWait = RegInit(Bool(false)) \/\/ deny already inflight?$/;"	l
deny_access_to_debug	src/main/scala/rocket/TLB.scala	/^  val deny_access_to_debug = mpu_priv <= PRV.M && p(DebugModuleKey).map(dmp => dmp.address.contains(mpu_physaddr)).getOrElse(false)$/;"	l
deny_get_ok	src/main/scala/tilelink/Monitor.scala	/^    val deny_get_ok = edge.manager.mayDenyGet.B$/;"	l
deny_put_ok	src/main/scala/tilelink/Monitor.scala	/^    val deny_put_ok = edge.manager.mayDenyPut.B$/;"	l
deny_ready	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val deny_ready = !denyWait && flight === UInt(0)$/;"	l
depth	src/main/scala/amba/axi4/UserYanker.scala	/^        val depth = edgeOut.master.masters.find(_.id.contains(id)).flatMap(_.maxFlight).getOrElse(0)$/;"	l
depth	src/main/scala/regmapper/RegMapper.scala	/^    val depth = concurrency$/;"	l
depth	src/main/scala/tilelink/ToAHB.scala	/^      val depth = if (aFlow) 2 else 3$/;"	l
depth	src/main/scala/tilelink/ToAXI4.scala	/^      val depth = if (combinational) 1 else 2$/;"	l
depth	src/main/scala/util/LanePositionedQueue.scala	/^  val depth = args.rows * lanes$/;"	l
depthBitsU	src/main/scala/util/LanePositionedQueue.scala	/^  val depthBitsU = log2Up(depth)$/;"	l
deq	src/main/scala/util/AsyncQueue.scala	/^    val deq = Decoupled(gen)$/;"	l
deq	src/main/scala/util/Crossing.scala	/^  val deq = Decoupled(gen)$/;"	l
deq	src/main/scala/util/LanePositionedQueue.scala	/^  val deq = RegInit(0.U(bits.W))$/;"	l
deq	src/main/scala/util/LanePositionedQueue.scala	/^  val deq = new LanePositionedDecoupledIO(gen, depth, lanes)$/;"	l
deq	src/main/scala/util/MultiLaneQueue.scala	/^  val deq = RegInit(0.U(bits.W))$/;"	l
deq	src/main/scala/util/MultiPortQueue.scala	/^    val deq = Vec(deq_lanes, Decoupled(gen))$/;"	l
deq	src/main/scala/util/MultiPortQueue.scala	/^  val deq = RegInit(0.U(bits.W))$/;"	l
deq	src/main/scala/util/RationalCrossing.scala	/^    val deq = Decoupled(gen)$/;"	l
deq	src/main/scala/util/RationalCrossing.scala	/^    val deq = RationalIO(gen)$/;"	l
deq	src/main/scala/util/RationalCrossing.scala	/^  val deq = Wire(chiselTypeOf(io.deq))$/;"	l
deq	src/main/scala/util/RationalCrossing.scala	/^  val deq = io.deq$/;"	l
deq	src/main/scala/util/ReorderQueue.scala	/^    val deq = new ReorderDequeueIO(dType, tagWidth)$/;"	l
deq	src/main/scala/util/Repeater.scala	/^    val deq = Decoupled(gen.cloneType)$/;"	l
deq_0_lane	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_0_lane = Output(UInt(laneBitsU.W))$/;"	l
deq_OH	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val deq_OH = UIntToOH(deq_id, endId)$/;"	l
deq_OH_bools	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val deq_OH_bools = deq_OH.asBools$/;"	l
deq_bits	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val deq_bits = VecInit(qs.map(_.deq.bits))$/;"	l
deq_bits	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_bits = Wire(Vec(lanes, gen))$/;"	l
deq_bits	src/main/scala/util/MultiLaneQueue.scala	/^    val deq_bits  = Output(Vec(lanes, gen))$/;"	l
deq_bits	src/main/scala/util/MultiPortQueue.scala	/^  val deq_bits = RipplePrefixSum(deq +: ready.asBools.map(x => WireInit(UInt(bits.W), x)))(_ + _)$/;"	l
deq_bits_nxt	src/main/scala/util/AsyncQueue.scala	/^  val deq_bits_nxt = io.async.mem(if (params.narrow) 0.U else index)$/;"	l
deq_buf0	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_buf0 = deq_buffer(deq_row(1,0))$/;"	l
deq_buf1	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_buf1 = VecInit.tabulate(4) { i => deq_buffer((i+1) % 4) } (deq_row(1,0))$/;"	l
deq_buffer	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_buffer = Reg(Vec(4, Vec(lanes, gen)))$/;"	l
deq_clock	src/main/scala/util/Crossing.scala	/^  val deq_clock = Clock(INPUT)$/;"	l
deq_id	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val deq_id = Reg(UInt(log2Up(endId).W))$/;"	l
deq_lmask	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_lmask = (if (lanes==1) 0.U else UIntToOH1(deq_lane, lanes-1)).pad(2*lanes)$/;"	l
deq_mask	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_mask  = deq_rmask & ~deq_lmask$/;"	l
deq_pos	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_pos = deq_row * lanes.U + deq_lane$/;"	l
deq_push	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_push = deq_wrap && deq_row(0)$/;"	l
deq_ready	src/main/scala/util/MultiLaneQueue.scala	/^    val deq_ready = Input(UInt(laneBits1.W))$/;"	l
deq_ready	src/main/scala/util/MultiPortQueue.scala	/^    val deq_ready = DensePrefixSum(sparse.map(_.ready.asUInt))(_ +& _)$/;"	l
deq_refill	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_refill = RegInit(0.U(3.W))$/;"	l
deq_refill_flop0	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_refill_flop0 = deq_refill === 3.U$/;"	l
deq_refill_flop1	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_refill_flop1 = deq_refill === 5.U$/;"	l
deq_refill_idle	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_refill_idle  = deq_refill === 0.U$/;"	l
deq_refill_ren0	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_refill_ren0  = deq_refill === 2.U$/;"	l
deq_refill_ren1	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_refill_ren1  = deq_refill === 4.U$/;"	l
deq_refill_wait0	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_refill_wait0 = deq_refill === 1.U$/;"	l
deq_reset	src/main/scala/util/Crossing.scala	/^  val deq_reset = Bool(INPUT) \/\/ synchronously deasserted wrt. deq_clock$/;"	l
deq_rmask	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_rmask = UIntToOH1(io.deq.ready +& deq_lane, 2*lanes-1).pad(2*lanes)$/;"	l
deq_row_half	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_row_half = deq_row >> 1$/;"	l
deq_set	src/main/scala/util/LanePositionedQueue.scala	/^  val deq_set = (if (lanes == 1) deq_row else Cat(deq_row, deq_lane)) - rewindSize$/;"	l
deq_sparse	src/main/scala/util/MultiPortQueue.scala	/^    val deq_sparse = Scatter($/;"	l
deq_valid	src/main/scala/util/MultiLaneQueue.scala	/^    val deq_valid = Output(Bool())$/;"	l
desc	src/main/scala/diplomacy/Resources.scala	/^        val desc = Description(fullName, mapping)$/;"	l
desc	src/main/scala/util/Annotations.scala	/^    val desc = regField.desc$/;"	l
descendL	src/main/scala/util/BundleMap.scala	/^  def descendL(x: Data, y: Data): Unit = {$/;"	m
descendR	src/main/scala/util/BundleMap.scala	/^  def descendR(x: Data, y: Data): Unit = {$/;"	m
describe	src/main/scala/diplomacy/FixedClockResource.scala	/^    def describe() =$/;"	m
describe	src/main/scala/diplomacy/Resources.scala	/^    def describe(resources: ResourceBindings): Description = {$/;"	m
describe	src/main/scala/diplomacy/Resources.scala	/^    def describe(resources: ResourceBindings): Description =$/;"	m
describe	src/main/scala/diplomacy/Resources.scala	/^  def describe(): Description$/;"	m
describe	src/main/scala/diplomacy/Resources.scala	/^  def describe(resources: ResourceBindings): Description = {$/;"	m
describe	src/main/scala/diplomacy/Resources.scala	/^  def describe(resources: ResourceBindings): Description$/;"	m
describe	src/main/scala/diplomacy/Resources.scala	/^  final def describe(resources: ResourceBindings) = describe()$/;"	m
describe	src/main/scala/subsystem/InterruptBus.scala	/^    def describe(resources: ResourceBindings): Description = {$/;"	m
describe	src/main/scala/tile/Interrupts.scala	/^    def describe(): Description = {$/;"	m
describeClocks	src/main/scala/diplomacy/Resources.scala	/^  def describeClocks(resources: ResourceBindings): Map[String, Seq[ResourceValue]] = {$/;"	m
describeGlobalInterrupts	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def describeGlobalInterrupts(name: String, resources: ResourceBindings): Seq[OMInterrupt] = {$/;"	m
describeInterrupts	src/main/scala/diplomacy/Resources.scala	/^  def describeInterrupts(resources: ResourceBindings): Map[String, Seq[ResourceValue]] = {$/;"	m
describeInterrupts	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def describeInterrupts(name: String, resources: ResourceBindings): Seq[OMInterrupt] = {$/;"	m
describeName	src/main/scala/diplomacy/Resources.scala	/^  def describeName(devname: String, resources: ResourceBindings): String = {$/;"	m
description	src/main/scala/diplomacy/Nodes.scala	/^  def description: String$/;"	m
description	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^  def description: Option[String]$/;"	m
descs	src/main/scala/diplomacy/Resources.scala	/^    val descs: HashMap[Device, Description] = HashMap.empty$/;"	l
desiredName	src/main/scala/diplomacy/LazyModule.scala	/^  lazy val desiredName: String = className \/\/ + hashcode?$/;"	l
desiredNameAnnos	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^    val desiredNameAnnos = state.annotations.collect {$/;"	l
desiredNames	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^        val desiredNames = moduleToDesiredName.getOrElseUpdate(referringModule, mutable.Set())$/;"	l
desiredNames	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^        val desiredNames = moduleToDesiredName.getOrElseUpdate(referringModule, mutable.Set())$/;"	l
desired_mask	src/main/scala/rocket/ScratchpadSlavePort.scala	/^        val desired_mask = new StoreGen(a.size, a.address, 0.U, coreDataBytes).mask$/;"	l
dest	src/main/scala/amba/axis/Bundles.scala	/^  def dest = if (params.hasDest) apply(AXISDest) else 0.U$/;"	m
destBits	src/main/scala/amba/axis/Parameters.scala	/^  val destBits:    Int,$/;"	l
destinationId	src/main/scala/amba/axis/Parameters.scala	/^  val destinationId: Int,$/;"	l
detail	macros/src/main/scala/ValName.scala	/^  def detail(c: Context): c.Expr[ValNameImpl] = {$/;"	m
detectTininess	src/main/scala/tile/FPU.scala	/^        val detectTininess = UInt(INPUT, 1)$/;"	l
detectTininess_stage0	src/main/scala/tile/FPU.scala	/^    val detectTininess_stage0 = Wire(UInt(width=1))$/;"	l
dev	src/main/scala/devices/tilelink/Plic.scala	/^    val dev  = UInt(width = log2Ceil(nDevices+1))$/;"	l
devCompat	src/main/scala/subsystem/BaseSubsystem.scala	/^    val devCompat = (model +: compat).map(s => ResourceString(s + "-dev"))$/;"	l
devName	src/main/scala/tilelink/SRAM.scala	/^    val devName: Option[String] = None,$/;"	l
devcompat	src/main/scala/tilelink/RegisterRouter.scala	/^     val devcompat:   Seq[String],$/;"	l
device	src/main/scala/devices/debug/Debug.scala	/^  val device = new SimpleDevice("debug-controller", Seq("sifive,debug-013","riscv,debug-013")){$/;"	l
device	src/main/scala/devices/tilelink/BusBlocker.scala	/^  val device = new SimpleDevice("basic-bus-blocker", Seq("sifive,basic-bus-blocker0"))$/;"	l
device	src/main/scala/devices/tilelink/CLINT.scala	/^  val device = new SimpleDevice("clint", Seq("riscv,clint0")) {$/;"	l
device	src/main/scala/devices/tilelink/ClockBlocker.scala	/^  val device = new SimpleDevice("clock-blocker", Seq("sifive,clock-blocker0"))$/;"	l
device	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val device = new SimpleDevice("physical-filter", Seq("sifive,physical-filter-v0"))$/;"	l
device	src/main/scala/devices/tilelink/Plic.scala	/^  val device: SimpleDevice = new SimpleDevice("interrupt-controller", Seq("riscv,plic0")) {$/;"	l
device	src/main/scala/devices/tilelink/TestRAM.scala	/^  val device = new MemoryDevice$/;"	l
device	src/main/scala/diplomacy/FixedClockResource.scala	/^  val device = new DeviceSnippet {$/;"	l
device	src/main/scala/diplomacy/SRAM.scala	/^  val device = devName$/;"	l
device	src/main/scala/regmapper/RegisterRouter.scala	/^  val device = new SimpleDevice(devParams.name, devParams.compat) {$/;"	l
device	src/main/scala/rocket/ICache.scala	/^  val device = new SimpleDevice("itim", Seq("sifive,itim0")) {$/;"	l
device	src/main/scala/rocket/ScratchpadSlavePort.scala	/^  val device = new SimpleDevice("dtim", Seq("sifive,dtim0"))$/;"	l
device	src/main/scala/tile/BusErrorUnit.scala	/^  val device = new SimpleDevice("bus-error-unit", Seq("sifive,buserror0"))$/;"	l
device	src/main/scala/tilelink/RegisterRouter.scala	/^  val device = new SimpleDevice(devname, devcompat) {$/;"	l
deviceNamePlusAddress	src/main/scala/diplomacy/Resources.scala	/^  var deviceNamePlusAddress: String = ""$/;"	l
devname	src/main/scala/tilelink/RegisterRouter.scala	/^     val devname:     String,$/;"	l
dfma	src/main/scala/tile/FPU.scala	/^          val dfma = Module(new FPUFMAPipe(cfg.dfmaLatency, FType.D))$/;"	l
diff	src/main/scala/devices/tilelink/Plic.scala	/^      val diff = ep & ~ep2$/;"	l
diff	src/main/scala/rocket/Decode.scala	/^    val diff = value - x.value$/;"	l
diff_pos	src/main/scala/util/LanePositionedQueue.scala	/^  val diff_pos = enq_pos + Mux(enq_pos >= deq_pos, 0.U, capacity.U) - deq_pos$/;"	l
difference	src/main/scala/rocket/Multiplier.scala	/^      val difference = if (i == 0) subtractor else rem(2*w,w) - divisor(w-1,0)$/;"	l
diplomacyInfo	src/main/scala/tilelink/Monitor.scala	/^    def diplomacyInfo = if (true) "" else "\\nThe diplomacy information for the edge is as follows:\\n" + edge.formatEdge + "\\n"$/;"	m
diplomaticClaimsMasterToSlave	src/main/scala/tilelink/Parameters.scala	/^  def diplomaticClaimsMasterToSlave = master.anyEmitClaims.intersect(slave.anySupportClaims)$/;"	m
dir	src/main/scala/diplomacy/Nodes.scala	/^    val dir = edgeArityDirection(n)$/;"	l
dir	src/main/scala/system/RocketTestSuite.scala	/^  val dir = "$(RISCV)\/riscv64-unknown-elf\/share\/riscv-tests\/isa"$/;"	l
dir	src/main/scala/system/RocketTestSuite.scala	/^  val dir: String$/;"	l
dir	src/test/scala/generatorTests/StageGeneratorSpec.scala	/^    val dir = new File(dirName)$/;"	l
dirName	src/test/scala/generatorTests/StageGeneratorSpec.scala	/^    val dirName = System.getProperty("user.dir") + "\/testbuild"$/;"	l
direction	src/main/scala/tilelink/RationalCrossing.scala	/^      val direction = edgeIn.manager.direction$/;"	l
direction	src/main/scala/tilelink/RationalCrossing.scala	/^      val direction = edgeOut.manager.direction$/;"	l
dirties	src/main/scala/tilelink/Metadata.scala	/^    val dirties = categorize(second_cmd) === wr$/;"	l
dirtiest_cmd	src/main/scala/tilelink/Metadata.scala	/^    val dirtiest_cmd = Mux(dirties, second_cmd, first_cmd)$/;"	l
dirtiest_state	src/main/scala/tilelink/Metadata.scala	/^    val dirtiest_state = ClientMetadata(biggest_grow_param)$/;"	l
dirtyReleaseMessage	src/main/scala/rocket/DCache.scala	/^  val dirtyReleaseMessage = edge.ProbeAck(b = probe_bits, reportPermissions = s2_report_param, data = 0.U)$/;"	l
disableCLI	src/main/scala/linting/rule/LintRule.scala	/^  lazy val disableCLI: String = s"Omit $lintName from --lint option"$/;"	l
disableCoreClockGate	src/main/scala/tile/CustomCSRs.scala	/^  def disableCoreClockGate = getOrElse(chickenCSR, _.value(2), false.B)$/;"	m
disableDCacheClockGate	src/main/scala/tile/CustomCSRs.scala	/^  def disableDCacheClockGate = getOrElse(chickenCSR, _.value(0), false.B)$/;"	m
disableDebug	src/main/scala/devices/debug/Periphery.scala	/^  val disableDebug = p(ExportDebug).externalDisable.option(Input(Bool()))$/;"	l
disableICacheClockGate	src/main/scala/tile/CustomCSRs.scala	/^  def disableICacheClockGate = getOrElse(chickenCSR, _.value(1), false.B)$/;"	m
disableICachePrefetch	src/main/scala/rocket/RocketCore.scala	/^  def disableICachePrefetch = getOrElse(chickenCSR, _.value(17), true.B)$/;"	m
disableSpeculativeICacheRefill	src/main/scala/tile/CustomCSRs.scala	/^  def disableSpeculativeICacheRefill = getOrElse(chickenCSR, _.value(3), false.B)$/;"	m
disable_ahb_fuzzing	src/main/scala/amba/ahb/SRAM.scala	/^    val disable_ahb_fuzzing = PlusArg("disable_ahb_fuzzing", default = 0, "1:Disabled 0:Enabled.")(0)$/;"	l
discard_line	src/main/scala/rocket/DCache.scala	/^      val discard_line = s2_valid_flush_line && s2_req.size(1) || s2_flush_valid && flushing_req.size(1)$/;"	l
displayName	src/main/scala/util/Annotations.scala	/^    val displayName = s"${moduleName}.${baseHex}"$/;"	l
displayOptions	src/main/scala/linting/LintReporter.scala	/^        val displayOptions = arg.split(',').toSeq.foldLeft(DisplayOptions()) { (opt, str) =>$/;"	l
displayTotal	src/main/scala/linting/LintReporter.scala	/^  val displayTotal = "displayTotal=(\\\\d+)".r$/;"	l
distance	src/main/scala/util/ECC.scala	/^  val distance = PopCount(recoded ^ test)$/;"	l
div	src/main/scala/rocket/IDecode.scala	/^  val div = Bool()$/;"	l
div	src/main/scala/rocket/RocketCore.scala	/^  val div = Module(new MulDiv(if (pipelinedMul) mulDivParams.copy(mulUnroll = 0) else mulDivParams, width = xLen))$/;"	l
div	src/main/scala/tile/FPU.scala	/^  val div = Bool()$/;"	l
div3	src/main/scala/prci/ClockDivider.scala	/^          val div3 = Module(new ClockDivider3)$/;"	l
divDecode	src/main/scala/rocket/Multiplier.scala	/^  val divDecode = List($/;"	l
divMinLatency	src/main/scala/diplomaticobjectmodel/model/OMMulDiv.scala	/^    val divMinLatency =$/;"	l
divSqrt	src/main/scala/tile/FPU.scala	/^      val divSqrt = withReset(divSqrt_killed) { Module(new hardfloat.DivSqrtRecFN_small(t.exp, t.sig, 0)) }$/;"	l
divSqrt_flags	src/main/scala/tile/FPU.scala	/^  val divSqrt_flags = Wire(UInt(width = FPConstants.FLAGS_SZ))$/;"	l
divSqrt_inFlight	src/main/scala/tile/FPU.scala	/^  val divSqrt_inFlight = Wire(init = false.B)$/;"	l
divSqrt_inValid	src/main/scala/tile/FPU.scala	/^    val divSqrt_inValid = mem_reg_valid && (mem_ctrl.div || mem_ctrl.sqrt) && !divSqrt_inFlight$/;"	l
divSqrt_killed	src/main/scala/tile/FPU.scala	/^    val divSqrt_killed = RegNext(divSqrt_inValid && killm, true.B)$/;"	l
divSqrt_typeTag	src/main/scala/tile/FPU.scala	/^  val divSqrt_typeTag = Wire(UInt(width = log2Up(floatTypes.size)))$/;"	l
divSqrt_waddr	src/main/scala/tile/FPU.scala	/^  val divSqrt_waddr = Reg(UInt(width = 5))$/;"	l
divSqrt_wdata	src/main/scala/tile/FPU.scala	/^  val divSqrt_wdata = Wire(UInt(width = fLen+1))$/;"	l
divSqrt_wen	src/main/scala/tile/FPU.scala	/^  val divSqrt_wen = Wire(init = false.B)$/;"	l
divSqrt_write_port_busy	src/main/scala/tile/FPU.scala	/^  val divSqrt_write_port_busy = (mem_ctrl.div || mem_ctrl.sqrt) && wen.orR$/;"	l
div_clock	src/main/scala/prci/ClockDivider.scala	/^      val div_clock: Clock = div match {$/;"	l
divby0	src/main/scala/rocket/Multiplier.scala	/^    val divby0 = count === 0 && !subtractor(w)$/;"	l
dividendMSB	src/main/scala/rocket/Multiplier.scala	/^      val dividendMSB = Log2(remainder(w-1,0), w) | ~alignMask$/;"	l
dividers	src/main/scala/util/ClockDivider.scala	/^    val dividers = Seq.fill(pow2) { Module(new ClockDivider2) }$/;"	l
divisor	src/main/scala/rocket/Multiplier.scala	/^  val divisor = Reg(Bits((w+1).W)) \/\/ div only needs w bits$/;"	l
divisor	src/main/scala/tilelink/RAMModel.scala	/^      val divisor      = CRC.CRC_16F_4_2$/;"	l
divisorMSB	src/main/scala/rocket/Multiplier.scala	/^      val divisorMSB = Log2(divisor(w-1,0), w) & alignMask$/;"	l
dlatch0	src/main/scala/util/LanePositionedQueue.scala	/^  val dlatch0 = RegNext((deq_push && !deq_row(1))                  || (deq_refill_ren1 &&  deq_row(1)) || (deq_refill_ren0 && !deq_row(1)))$/;"	l
dlatch1	src/main/scala/util/LanePositionedQueue.scala	/^  val dlatch1 = RegNext((deq_push &&  deq_row(1))                  || (deq_refill_ren1 && !deq_row(1)) || (deq_refill_ren0 &&  deq_row(1)))$/;"	l
dmAuthBusy	src/main/scala/devices/debug/Debug.scala	/^  val dmAuthBusy  = Input(Bool())$/;"	l
dmAuthRdata	src/main/scala/devices/debug/Debug.scala	/^  val dmAuthRdata = Input(UInt(32.W))$/;"	l
dmAuthRead	src/main/scala/devices/debug/Debug.scala	/^  val dmAuthRead  = Output(Bool())$/;"	l
dmAuthWdata	src/main/scala/devices/debug/Debug.scala	/^  val dmAuthWdata = Output(UInt(32.W))$/;"	l
dmAuthWrite	src/main/scala/devices/debug/Debug.scala	/^  val dmAuthWrite = Output(Bool())$/;"	l
dmAuthenticated	src/main/scala/devices/debug/Debug.scala	/^      val dmAuthenticated = cfg.hasAuthentication.option(Input(Bool()))$/;"	l
dmAuthenticated	src/main/scala/devices/debug/Debug.scala	/^      val dmAuthenticated = p(DebugModuleKey).get.hasAuthentication.option(Input(Bool()))$/;"	l
dmAuthenticated	src/main/scala/devices/debug/Debug.scala	/^    val dmAuthenticated = io.auth.map(a => a.dmAuthenticated).getOrElse(true.B)$/;"	l
dmAuthenticated	src/main/scala/devices/debug/Debug.scala	/^    val dmAuthenticated = io.dmAuthenticated.map( dma =>$/;"	l
dmAuthenticated	src/main/scala/devices/debug/Debug.scala	/^  val dmAuthenticated = Input(Bool())$/;"	l
dmControlRegFields	src/main/scala/devices/debug/Debug.scala	/^    val dmControlRegFields = RegFieldGroup("dmcontrol", Some("debug module control register"), Seq($/;"	l
dmInner	src/main/scala/devices/debug/Debug.scala	/^  val dmInner : TLDebugModuleInnerAsync = LazyModule(new TLDebugModuleInnerAsync(device, () => {dmOuter.dmOuter.intnode.edges.out.size}, beatBytes)(p))$/;"	l
dmInner	src/main/scala/devices/debug/Debug.scala	/^  val dmInner = LazyModule(new TLDebugModuleInner(device, getNComponents, beatBytes))$/;"	l
dmOuter	src/main/scala/devices/debug/Debug.scala	/^  val dmOuter : TLDebugModuleOuterAsync = LazyModule(new TLDebugModuleOuterAsync(device)(p))$/;"	l
dmOuter	src/main/scala/devices/debug/Debug.scala	/^  val dmOuter = LazyModule( new TLDebugModuleOuter(device))$/;"	l
dmTopAddr	src/main/scala/devices/debug/Debug.scala	/^    val dmTopAddr = (1 << cfg.nDMIAddrSize) << 2$/;"	l
dmTopAddr	src/main/scala/devices/debug/Debug.scala	/^  val dmTopAddr = (1 << cfg.nDMIAddrSize) << 2$/;"	l
dmactive	src/main/scala/devices/debug/Debug.scala	/^      val dmactive = Input(Bool())$/;"	l
dmactive	src/main/scala/devices/debug/Debug.scala	/^    val dmactive = DMCONTROLReg.dmactive$/;"	l
dmactive	src/main/scala/devices/debug/Debug.scala	/^  val dmactive        = Output(Bool())$/;"	l
dmactive	src/main/scala/devices/debug/Debug.scala	/^  val dmactive    = Output(Bool())$/;"	l
dmactive	src/main/scala/devices/debug/Periphery.scala	/^  val dmactive   = Output(Bool())$/;"	l
dmactive	src/main/scala/devices/debug/dm_registers.scala	/^  val dmactive = Bool()$/;"	l
dmactiveAck	src/main/scala/devices/debug/Debug.scala	/^      val dmactiveAck = AsyncResetSynchronizerShiftReg(in=io.ctrl.dmactiveAck, sync=3, name=Some("dmactiveAckSync"))$/;"	l
dmactiveAck	src/main/scala/devices/debug/Debug.scala	/^  val dmactiveAck     = Input(Bool())$/;"	l
dmactiveAck	src/main/scala/devices/debug/Periphery.scala	/^      val dmactiveAck = if (sync) ResetSynchronizerShiftReg(in=debug.dmactive, sync=3, name=Some("dmactiveAck")) else debug.dmactive$/;"	l
dmactiveAck	src/main/scala/devices/debug/Periphery.scala	/^  val dmactiveAck = Input(Bool())$/;"	l
dmactiveWrEn	src/main/scala/devices/debug/Debug.scala	/^    val dmactiveWrEn        = WireInit(false.B)$/;"	l
dmactive_synced	src/main/scala/devices/debug/Debug.scala	/^      val dmactive_synced = AsyncResetSynchronizerShiftReg(in=io.dmactive, sync=3, name=Some("dmactiveSync"))$/;"	l
dmactive_synced	src/main/scala/devices/debug/Debug.scala	/^    val dmactive_synced = withClockAndReset(childClock, childReset) {$/;"	l
dmcs2RegFields	src/main/scala/devices/debug/Debug.scala	/^    val dmcs2RegFields = RegFieldGroup("dmi_dmcs2", Some("debug module control\/status register 2"), Seq($/;"	l
dmem	src/main/scala/rocket/ScratchpadSlavePort.scala	/^      val dmem = new HellaCacheIO$/;"	l
dmem	src/main/scala/tile/Core.scala	/^    val dmem = new HellaCacheIO$/;"	l
dmem_req_valid	src/main/scala/rocket/ScratchpadSlavePort.scala	/^    val dmem_req_valid = Wire(Bool())$/;"	l
dmem_req_valid_likely	src/main/scala/rocket/ScratchpadSlavePort.scala	/^    val dmem_req_valid_likely = (tl_in.a.valid && ready_likely) || state === s_replay$/;"	l
dmem_resp_data	src/main/scala/tile/FPU.scala	/^  val dmem_resp_data = Bits(INPUT, fLen)$/;"	l
dmem_resp_fpu	src/main/scala/rocket/RocketCore.scala	/^  val dmem_resp_fpu =  io.dmem.resp.bits.tag(0).asBool$/;"	l
dmem_resp_replay	src/main/scala/rocket/RocketCore.scala	/^  val dmem_resp_replay = dmem_resp_valid && io.dmem.resp.bits.replay$/;"	l
dmem_resp_tag	src/main/scala/tile/FPU.scala	/^  val dmem_resp_tag = UInt(INPUT, 5)$/;"	l
dmem_resp_type	src/main/scala/tile/FPU.scala	/^  val dmem_resp_type = Bits(INPUT, 3)$/;"	l
dmem_resp_val	src/main/scala/tile/FPU.scala	/^  val dmem_resp_val = Bool(INPUT)$/;"	l
dmem_resp_valid	src/main/scala/rocket/RocketCore.scala	/^  val dmem_resp_valid = io.dmem.resp.valid && io.dmem.resp.bits.has_data$/;"	l
dmem_resp_waddr	src/main/scala/rocket/RocketCore.scala	/^  val dmem_resp_waddr = io.dmem.resp.bits.tag(5, 1)$/;"	l
dmem_resp_xpu	src/main/scala/rocket/RocketCore.scala	/^  val dmem_resp_xpu = !io.dmem.resp.bits.tag(0).asBool$/;"	l
dmi	src/main/scala/devices/debug/DMI.scala	/^      val dmi = Flipped(new DMIIO()(p))$/;"	l
dmi	src/main/scala/devices/debug/DMI.scala	/^  val dmi      = new DMIIO()(p)$/;"	l
dmi	src/main/scala/devices/debug/Debug.scala	/^      val dmi   = (!p(ExportDebug).apb).option(Flipped(new DMIIO()(p)))$/;"	l
dmi	src/main/scala/devices/debug/Debug.scala	/^      val dmi = (!p(ExportDebug).apb).option(Flipped(new ClockedDMIIO()))$/;"	l
dmi	src/main/scala/devices/debug/DebugTransport.scala	/^    val dmi = new DMIIO()(p)$/;"	l
dmi	src/main/scala/devices/debug/Periphery.scala	/^  def dmi   = protocols.contains(DMI)$/;"	m
dmi2tl	src/main/scala/devices/debug/Debug.scala	/^    val dmi2tl = LazyModule(new DMIToTL())$/;"	l
dmi2tlOpt	src/main/scala/devices/debug/Debug.scala	/^  val dmi2tlOpt = (!p(ExportDebug).apb).option({$/;"	l
dmiAbstractDataAccess	src/main/scala/devices/debug/Debug.scala	/^    val dmiAbstractDataAccess  = dmiAbstractDataAccessVec.reduce(_ || _ )$/;"	l
dmiAbstractDataAccessLegal	src/main/scala/devices/debug/Debug.scala	/^    val dmiAbstractDataAccessLegal = WireInit(false.B)$/;"	l
dmiAbstractDataAccessVec	src/main/scala/devices/debug/Debug.scala	/^    val dmiAbstractDataAccessVec  = WireInit(VecInit(Seq.fill(cfg.nAbstractDataWords * 4) {false.B} ))$/;"	l
dmiAbstractDataRdEn	src/main/scala/devices/debug/Debug.scala	/^    val dmiAbstractDataRdEn = WireInit(VecInit(Seq.fill(cfg.nAbstractDataWords * 4) {false.B} ))$/;"	l
dmiAbstractDataWrEnMaybe	src/main/scala/devices/debug/Debug.scala	/^    val dmiAbstractDataWrEnMaybe = WireInit(VecInit(Seq.fill(cfg.nAbstractDataWords * 4) {false.B} ))$/;"	l
dmiAccessChain	src/main/scala/devices/debug/DebugTransport.scala	/^   val dmiAccessChain = Module(CaptureUpdateChain(genCapture = new DMIAccessCapture(debugAddrBits),$/;"	l
dmiBypass	src/main/scala/devices/debug/Debug.scala	/^  val dmiBypass = LazyModule(new TLBusBypass(beatBytes=4, bufferError=false, maxAtomic=0, maxTransfer=4))$/;"	l
dmiClock	src/main/scala/devices/debug/DMI.scala	/^  val dmiClock = Output(Clock())$/;"	l
dmiDataSize	src/main/scala/devices/debug/DMI.scala	/^  def dmiDataSize = 32$/;"	m
dmiIdleCycles	src/main/scala/devices/debug/DebugTransport.scala	/^  val dmiIdleCycles = UInt(3.W)$/;"	l
dmiInnerNode	src/main/scala/devices/debug/Debug.scala	/^  val dmiInnerNode = TLAsyncCrossingSource() := dmiBypass.node := dmiXbar.node$/;"	l
dmiNode	src/main/scala/devices/debug/Debug.scala	/^  val dmiNode = TLRegisterNode ($/;"	l
dmiNode	src/main/scala/devices/debug/Debug.scala	/^  val dmiNode = TLRegisterNode($/;"	l
dmiNode	src/main/scala/devices/debug/Debug.scala	/^  val dmiNode = dmiXing.node$/;"	l
dmiOpSize	src/main/scala/devices/debug/DMI.scala	/^  def dmiOpSize = 2$/;"	m
dmiProgramBufferAccess	src/main/scala/devices/debug/Debug.scala	/^    val dmiProgramBufferAccess = dmiProgramBufferAccessVec.reduce(_ || _)$/;"	l
dmiProgramBufferAccessLegal	src/main/scala/devices/debug/Debug.scala	/^    val dmiProgramBufferAccessLegal = WireInit(false.B)$/;"	l
dmiProgramBufferAccessVec	src/main/scala/devices/debug/Debug.scala	/^    val dmiProgramBufferAccessVec  = WireInit(VecInit(Seq.fill(cfg.nProgramBufferWords * 4) {false.B} ))$/;"	l
dmiProgramBufferRdEn	src/main/scala/devices/debug/Debug.scala	/^    val dmiProgramBufferRdEn = WireInit(VecInit(Seq.fill(cfg.nProgramBufferWords * 4) {false.B} ))$/;"	l
dmiProgramBufferWrEnMaybe	src/main/scala/devices/debug/Debug.scala	/^    val dmiProgramBufferWrEnMaybe = WireInit(VecInit(Seq.fill(cfg.nProgramBufferWords * 4) {false.B} ))$/;"	l
dmiReqReg	src/main/scala/devices/debug/DebugTransport.scala	/^  val dmiReqReg  = Reg(new DMIReq(debugAddrBits))$/;"	l
dmiReqValidCheck	src/main/scala/devices/debug/DebugTransport.scala	/^  val dmiReqValidCheck = WireInit(false.B)$/;"	l
dmiReqValidReg	src/main/scala/devices/debug/DebugTransport.scala	/^  val dmiReqValidReg = RegInit(false.B)$/;"	l
dmiReset	src/main/scala/devices/debug/DMI.scala	/^  val dmiReset = Output(Reset())$/;"	l
dmiResp	src/main/scala/devices/debug/DebugTransport.scala	/^  val dmiResp     = Wire(new DMIAccessCapture(debugAddrBits))$/;"	l
dmiRespSize	src/main/scala/devices/debug/DMI.scala	/^  def dmiRespSize = 2$/;"	m
dmiStatus	src/main/scala/devices/debug/DebugTransport.scala	/^  val dmiStatus = UInt(2.W)$/;"	l
dmiStatus	src/main/scala/devices/debug/DebugTransport.scala	/^  val dmiStatus = Wire(UInt(2.W))$/;"	l
dmiXbar	src/main/scala/devices/debug/Debug.scala	/^  val dmiXbar = LazyModule (new TLXbar())$/;"	l
dmiXing	src/main/scala/devices/debug/Debug.scala	/^  val dmiXing = LazyModule(new TLAsyncCrossingSink(AsyncQueueParams.singleton(safe=cfg.crossingHasSafeReset)))$/;"	l
dmi_OP_NONE	src/main/scala/devices/debug/DMI.scala	/^  def dmi_OP_NONE            = "b00".U$/;"	m
dmi_OP_READ	src/main/scala/devices/debug/DMI.scala	/^  def dmi_OP_READ            = "b01".U$/;"	m
dmi_OP_WRITE	src/main/scala/devices/debug/DMI.scala	/^  def dmi_OP_WRITE           = "b10".U$/;"	m
dmi_RESP_FAILURE	src/main/scala/devices/debug/DMI.scala	/^  def dmi_RESP_FAILURE     = "b01".U$/;"	m
dmi_RESP_HW_FAILURE	src/main/scala/devices/debug/DMI.scala	/^  def dmi_RESP_HW_FAILURE  = "b10".U$/;"	m
dmi_RESP_RESERVED	src/main/scala/devices/debug/DMI.scala	/^  def dmi_RESP_RESERVED    = "b11".U$/;"	m
dmi_RESP_SUCCESS	src/main/scala/devices/debug/DMI.scala	/^  def dmi_RESP_SUCCESS     = "b00".U$/;"	m
dmi_clock	src/main/scala/devices/debug/Debug.scala	/^      val dmi_clock = Input(Clock())$/;"	l
dmi_reset	src/main/scala/devices/debug/Debug.scala	/^      val dmi_reset = Input(Reset())$/;"	l
dmi_reset	src/main/scala/devices/debug/Periphery.scala	/^      val dmi_reset = debug.clockeddmi.map(_.dmiReset.asBool).getOrElse(false.B) |$/;"	l
dmireset	src/main/scala/devices/debug/DebugTransport.scala	/^  val dmireset = Bool()$/;"	l
dmode	src/main/scala/rocket/Breakpoint.scala	/^  val dmode = Bool()$/;"	l
dmstatusRegFields	src/main/scala/devices/debug/Debug.scala	/^    val dmstatusRegFields = RegFieldGroup("dmi_dmstatus", Some("debug module status register"), Seq($/;"	l
dnoise	src/main/scala/tilelink/Delayer.scala	/^      val dnoise = Wire(out.d.bits)$/;"	l
doAbort	src/main/scala/util/LanePositionedQueue.scala	/^  val doAbort  = io.abort .getOrElse(false.B)$/;"	l
doAccum	src/main/scala/tile/LazyRoCC.scala	/^  val doAccum = funct === 3.U$/;"	l
doEarlyAck	src/main/scala/tilelink/Fragmenter.scala	/^        val doEarlyAck = earlyAck match {$/;"	l
doIdxPageRepl	src/main/scala/rocket/BTB.scala	/^  val doIdxPageRepl = !useUpdatePageHit$/;"	l
doLoad	src/main/scala/tile/LazyRoCC.scala	/^  val doLoad = funct === 2.U$/;"	l
doN	src/main/scala/util/LatencyPipe.scala	/^  def doN[T](n: Int, func: T => T, in: T): T =$/;"	m
doNarrowRead	src/main/scala/rocket/HellaCache.scala	/^  def doNarrowRead = coreDataBits * nWays % rowBits == 0$/;"	m
doPeek	src/main/scala/rocket/BTB.scala	/^    val doPeek = (idxHit & cfiType.map(_ === CFIType.ret).asUInt).orR$/;"	l
doRead	src/main/scala/tile/LazyRoCC.scala	/^  val doRead = funct === 1.U$/;"	l
doResp	src/main/resources/vsrc/RoccBlackBox.v	/^  reg doResp;$/;"	r
doResp	src/main/scala/tile/LazyRoCC.scala	/^  val doResp = cmd.bits.inst.xd$/;"	l
doRewind	src/main/scala/util/LanePositionedQueue.scala	/^  val doRewind = io.rewind.getOrElse(false.B)$/;"	l
doTgtPageRepl	src/main/scala/rocket/BTB.scala	/^  val doTgtPageRepl = !samePage && !usePageHit$/;"	l
doUncachedResp	src/main/scala/rocket/DCache.scala	/^  val doUncachedResp = Reg(next = io.cpu.replay_next)$/;"	l
doVector	src/main/scala/rocket/CSR.scala	/^    val doVector = base(0) && cause(cause.getWidth-1) && (cause_lsbs >> mtvecInterruptAlign) === 0$/;"	l
doWrite	src/main/scala/tile/LazyRoCC.scala	/^  val doWrite = funct === 0.U$/;"	l
doZero	src/main/scala/rocket/AMOALU.scala	/^      val doZero = Bool(i == 0) && zero$/;"	l
do_both_stages	src/main/scala/rocket/PTW.scala	/^  val do_both_stages = r_req.vstage1 && r_req.stage2$/;"	l
do_bypass	src/main/scala/rocket/RocketCore.scala	/^      val do_bypass = id_bypass_src(i).reduce(_||_)$/;"	l
do_deq	src/main/scala/util/HellaQueue.scala	/^  val do_deq = io.deq.fire() && !do_flow$/;"	l
do_enq	src/main/scala/util/HellaQueue.scala	/^  val do_enq = io.enq.fire() && !do_flow$/;"	l
do_flow	src/main/scala/util/HellaQueue.scala	/^  val do_flow = Wire(Bool())$/;"	l
do_refill	src/main/scala/rocket/TLB.scala	/^  val do_refill = Bool(usingVM) && io.ptw.resp.valid$/;"	l
do_switch	src/main/scala/rocket/PTW.scala	/^  val do_switch = Wire(init = false.B)$/;"	l
documentationName	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^  def documentationName: String$/;"	m
documentationName	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^    val documentationName = portNames(portType)$/;"	l
doesA	src/main/scala/tilelink/AtomicAutomata.scala	/^    val doesA = a.opcode === ArithmeticData || a.opcode === LogicalData$/;"	l
doesR	src/main/scala/tilelink/AtomicAutomata.scala	/^    val doesR = a.opcode === Get || doesA$/;"	l
doesW	src/main/scala/tilelink/AtomicAutomata.scala	/^    val doesW = a.opcode === PutFullData || a.opcode === PutPartialData || doesA$/;"	l
domain	src/main/scala/devices/debug/Periphery.scala	/^    val domain = ClockSinkNode(Seq(ClockSinkParameters()))$/;"	l
domainsNeedingHelp	src/main/scala/tilelink/AtomicAutomata.scala	/^      val domainsNeedingHelp = managersNeedingHelp.map(_.fifoId.get).distinct$/;"	l
done	src/main/resources/csrc/remote_bitbang.h	/^  unsigned char done() {return quit;}$/;"	f	class:remote_bitbang_t
done	src/main/scala/diplomacy/LazyModule.scala	/^    val done = Set() ++ pairing.values.filter(_.size == 2).map { case Seq(a, b) =>$/;"	l
done	src/main/scala/groundtest/TraceGen.scala	/^  val done = reqCount  === UInt(numReqsPerGen) &&$/;"	l
done	src/main/scala/tilelink/Edges.scala	/^    val done  = last && fire$/;"	l
done	src/main/scala/tilelink/Edges.scala	/^  def done(bits: TLChannel, fire: Bool): Bool = firstlastHelper(bits, fire)._3$/;"	m
done	src/main/scala/tilelink/Edges.scala	/^  def done(x: DecoupledIO[TLChannel]): Bool = done(x.bits, x.fire())$/;"	m
done	src/main/scala/tilelink/Edges.scala	/^  def done(x: ValidIO[TLChannel]): Bool = done(x.bits, x.valid)$/;"	m
done	src/main/scala/tilelink/PatternPusher.scala	/^      val done = Bool(OUTPUT)$/;"	l
done	src/main/scala/util/LanePositionedQueue.scala	/^  val done = RegInit(false.B)$/;"	l
done	src/main/scala/util/MultiLaneQueue.scala	/^  val done = RegInit(false.B)$/;"	l
done	src/main/scala/util/MultiPortQueue.scala	/^  val done = RegInit(false.B)$/;"	l
doneAW	src/main/scala/tilelink/ToAXI4.scala	/^      val doneAW    = RegInit(Bool(false))$/;"	l
donePulse	src/main/scala/groundtest/TraceGen.scala	/^  val donePulse = done && !Reg(init = Bool(false), next = done)$/;"	l
done_reset	src/main/resources/csrc/emulator.cc	/^bool done_reset;$/;"	v
dontCareBits	src/main/scala/rocket/DCache.scala	/^            val dontCareBits = s1_paddr >> rowOffBits << rowOffBits$/;"	l
dontTouch	src/main/scala/util/Annotations.scala	/^  def dontTouch(data: Data): Unit = data match {$/;"	m
dontTouchPorts	src/main/scala/util/Annotations.scala	/^  def dontTouchPorts(): this.type = {$/;"	m
dontTouchPortsExcept	src/main/scala/util/Annotations.scala	/^  def dontTouchPortsExcept(f: Data => Boolean): this.type = {$/;"	m
double	src/main/scala/util/PrefixSum.scala	/^      val double = offset << 1$/;"	l
double1	src/main/scala/util/PrefixSum.scala	/^      val double1 = double - 1$/;"	l
dout	src/main/scala/rocket/ICache.scala	/^    val dout = data_array.read(mem_idx, !wen && s0_ren)$/;"	l
downgradeOpReg	src/main/scala/devices/debug/DebugTransport.scala	/^  val downgradeOpReg = RegInit(false.B) \/\/ downgrade op because prev. failed.$/;"	l
dp	src/main/scala/rocket/IDecode.scala	/^  val dp = Bool()$/;"	l
dpath	src/main/scala/rocket/PTW.scala	/^    val dpath = new DatapathPTWIO$/;"	l
dpc	src/main/scala/rocket/Instructions.scala	/^  val dpc = 0x7b1$/;"	l
dprv	src/main/scala/rocket/CSR.scala	/^  val dprv = UInt(width = PRV.SZ) \/\/ effective prv for data accesses$/;"	l
dprv	src/main/scala/rocket/HellaCache.scala	/^  val dprv = UInt(width = PRV.SZ)$/;"	l
dr	src/main/scala/regmapper/Test.scala	/^  def dr(bits: Int) = combo(bits, delay(5), random)$/;"	m
drive	src/main/scala/prci/ClockGroupDriver.scala	/^  def drive(node: ClockGroupEphemeralNode)(implicit p: Parameters, vn: ValName): ModuleValue[RecordMap[ClockBundle]] = {$/;"	m
driveClockFromMaster	src/main/scala/tilelink/BusWrapper.scala	/^     val driveClockFromMaster: Option[Boolean],$/;"	l
driveFromIOs	src/main/scala/prci/ClockGroupDriver.scala	/^  def driveFromIOs: DriveFn = { (groups, num, p, vn) =>$/;"	m
driveFromImplicitClock	src/main/scala/prci/ClockGroupDriver.scala	/^  def driveFromImplicitClock: DriveFn = { (groups, num, p, vn) =>$/;"	m
driveWith	src/main/scala/util/LanePositionedQueue.scala	/^  def driveWith(x: LanePositionedDecoupledIO[T], selfRotation: UInt = 0.U, xRotation: UInt = 0.U): Unit = {$/;"	m
driveWith	src/main/scala/util/LanePositionedQueue.scala	/^  def driveWith(x: LanePositionedQueueIO[T]): Unit = { enq.driveWith(x.deq, enq_0_lane, x.deq_0_lane) }$/;"	m
driven	src/main/scala/jtag/Utils.scala	/^  val driven = Bool()  \/\/ active high, pin is hi-Z when driven is low$/;"	l
drop	src/main/scala/tilelink/Fragmenter.scala	/^        val drop = !dHasData && !Mux(doEarlyAck, dFirst, dLast)$/;"	l
drop	src/main/scala/tilelink/HintHandler.scala	/^      val drop = if (!needsDrop) false.B else {$/;"	l
dropBits	src/main/scala/tilelink/WidthWidget.scala	/^        val dropBits = log2Ceil(edgeIn.manager.beatBytes)$/;"	l
dropBits	src/main/scala/tilelink/WidthWidget.scala	/^      val dropBits  = log2Ceil(inBytes)$/;"	l
dropBits	src/main/scala/tilelink/WidthWidget.scala	/^      val dropBits  = log2Ceil(outBytes)$/;"	l
dscratch	src/main/scala/rocket/Instructions.scala	/^  val dscratch = 0x7b2$/;"	l
dscratch1	src/main/scala/rocket/Instructions.scala	/^  val dscratch1 = 0x7b3$/;"	l
dsizeOH	src/main/scala/tilelink/Fragmenter.scala	/^        val dsizeOH  = UIntToOH (out.d.bits.size, log2Ceil(maxDownSize)+1)$/;"	l
dsizeOH1	src/main/scala/tilelink/Fragmenter.scala	/^        val dsizeOH1 = UIntToOH1(out.d.bits.size, log2Up(maxDownSize))$/;"	l
dtb	src/main/scala/subsystem/BaseSubsystem.scala	/^  lazy val dtb = DTB(dts)$/;"	l
dterm	src/main/scala/rocket/Decode.scala	/^    val dterm = term(default)$/;"	l
dtimProperty	src/main/scala/tile/RocketTile.scala	/^  val dtimProperty = dtim_adapter.map(d => Map($/;"	l
dtim_adapter	src/main/scala/tile/RocketTile.scala	/^  val dtim_adapter = tileParams.dcache.flatMap { d => d.scratch.map { s =>$/;"	l
dtlb	src/main/scala/rocket/NBDcache.scala	/^  val dtlb = Module(new TLB(false, log2Ceil(coreDataBytes), TLBConfig(nTLBSets, nTLBWays)))$/;"	l
dtlb	src/main/scala/tile/BaseTile.scala	/^    val dtlb = tileParams.dcache.filter(_ => tileParams.core.useVM).map(d => Map($/;"	l
dtm	src/main/resources/csrc/SimDTM.cc	/^dtm_t* dtm;$/;"	v
dtm	src/main/scala/devices/debug/Periphery.scala	/^        val dtm = Module(new SimDTM).connect(c, r, d, out)$/;"	l
dtm	src/main/scala/devices/debug/Periphery.scala	/^    val dtm = Module(new DebugTransportModuleJTAG(p(DebugModuleKey).get.nDMIAddrSize, p(JtagDTMKey)))$/;"	l
dtm	src/main/scala/devices/debug/Periphery.scala	/^  val dtm = debug.flatMap(_.systemjtag.map(instantiateJtagDTM(_)))$/;"	l
dtmInfo	src/main/scala/devices/debug/DebugTransport.scala	/^  val dtmInfo = Wire(new DTMInfo)$/;"	l
dtmInfoChain	src/main/scala/devices/debug/DebugTransport.scala	/^  val dtmInfoChain = Module (CaptureUpdateChain(gen = new DTMInfo()))$/;"	l
dtmJTAGAddrs	src/main/scala/devices/debug/DebugTransport.scala	/^object dtmJTAGAddrs {$/;"	c
dts	src/main/scala/subsystem/BaseSubsystem.scala	/^  lazy val dts = DTS(bindingTree)$/;"	l
dtsClk	src/main/scala/tilelink/BusWrapper.scala	/^  val dtsClk = fixedClockNode.fixedClockResources(s"${busName}_clock").flatten.headOption$/;"	l
dtsCompat	src/main/scala/tilelink/SRAM.scala	/^    val dtsCompat: Option[Seq[String]] = None$/;"	l
dtsFrequency	src/main/scala/tilelink/BusWrapper.scala	/^  def dtsFrequency = params.dtsFrequency$/;"	m
dtsFrequency	src/main/scala/tilelink/BusWrapper.scala	/^  def dtsFrequency: Option[BigInt]$/;"	m
dtsFrequency	src/main/scala/tilelink/BusWrapper.scala	/^  val dtsFrequency = None$/;"	l
dummyAspect	src/test/scala/generatorTests/StageGeneratorSpec.scala	/^  val dummyAspect = InjectingAspect($/;"	l
dummyClockGroupSourceNode	src/main/scala/prci/ClockGroupDriver.scala	/^    val dummyClockGroupSourceNode: ClockGroupSourceNode = SimpleClockGroupSource(num)$/;"	l
dummyEncodeData	src/main/scala/rocket/DCache.scala	/^  def dummyEncodeData(x: UInt) = x.grouped(eccBits).map(dECC.swizzle(_)).asUInt$/;"	m
dummyMeta	src/main/scala/rocket/DCache.scala	/^      val dummyMeta = L1Metadata(UInt(0), ClientMetadata.onReset)$/;"	l
dummyMfrId	src/main/scala/jtag/JtagUtils.scala	/^  def dummyMfrId: Int = 0x7f$/;"	m
dummyWire	src/test/scala/generatorTests/StageGeneratorSpec.scala	/^      val dummyWire = Wire(UInt(3.W)).suggestName("hello")$/;"	l
dump	src/main/scala/rocket/Events.scala	/^  def dump(): Unit = {$/;"	m
dump_start	src/main/resources/vsrc/TestDriver.v	/^  reg [63:0] dump_start = 0;$/;"	r
duplicate	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^  def duplicate(newTarget: IsModule): DesiredNameAnnotation = {$/;"	m
duplicate	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^  def duplicate(newTarget: IsModule): OverrideDesiredNameAnnotation = {$/;"	m
duplicate	src/main/scala/util/Annotations.scala	/^  def duplicate(n: ComponentName): TopLevelPortAnnotation = this.copy(n)$/;"	m
duplicate	src/main/scala/util/Annotations.scala	/^  def duplicate(n: ModuleName) = this.copy(n)$/;"	m
duplicate	src/main/scala/util/Annotations.scala	/^  def duplicate(n: ModuleName): RegFieldDescMappingAnnotation = this.copy(target = n)$/;"	m
duplicate	src/main/scala/util/Annotations.scala	/^  def duplicate(n: Named) = this.copy(n)$/;"	m
duplicate	src/main/scala/util/Annotations.scala	/^  def duplicate(n: Named): ResetVectorAnnotation = this.copy(n)$/;"	m
duplicate	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^  def duplicate(newTarget: IsModule): StableNameAnnotation = this.copy(target = newTarget)$/;"	m
duplicate	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^  def duplicate(newTarget: IsModule): UnstableNameAnnotation = this.copy(target = newTarget)$/;"	m
dut	src/main/scala/amba/ahb/Test.scala	/^  val dut = Module(LazyModule(new AHBFuzzBridge(aFlow, txns)).module)$/;"	l
dut	src/main/scala/amba/ahb/Test.scala	/^  val dut = Module(LazyModule(new AHBFuzzNative(aFlow, txns)).module)$/;"	l
dut	src/main/scala/amba/apb/Test.scala	/^  val dut = Module(LazyModule(new APBFuzzBridge(aFlow, txns)).module)$/;"	l
dut	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val dut = Module(LazyModule(new AXI4RAMAsyncCrossing(txns)).module)$/;"	l
dut	src/main/scala/amba/axi4/Test.scala	/^  val dut = Module(LazyModule(new AXI4FullFuzzRAM(txns)).module)$/;"	l
dut	src/main/scala/amba/axi4/Test.scala	/^  val dut = Module(LazyModule(new AXI4FuzzBridge(txns)).module)$/;"	l
dut	src/main/scala/amba/axi4/Test.scala	/^  val dut = Module(LazyModule(new AXI4LiteFuzzRAM(txns)).module)$/;"	l
dut	src/main/scala/amba/axi4/Test.scala	/^  val dut = Module(LazyModule(new AXI4LiteUserBitsFuzzRAM(txns)).module)$/;"	l
dut	src/main/scala/devices/tilelink/MasterMux.scala	/^  val dut = Module(LazyModule(new TLMasterMuxTester(txns)).module)$/;"	l
dut	src/main/scala/devices/tilelink/TestRAM.scala	/^  val dut = Module(LazyModule(new TLRAMZeroDelay(ramBeatBytes, txns)).module)$/;"	l
dut	src/main/scala/groundtest/TestHarness.scala	/^  val dut = Module(ldut.module)$/;"	l
dut	src/main/scala/system/TestHarness.scala	/^  val dut = Module(ldut.module)$/;"	l
dut	src/main/scala/tilelink/AtomicAutomata.scala	/^  val dut = Module(LazyModule(new TLRAMAtomicAutomata(txns)).module)$/;"	l
dut	src/main/scala/tilelink/Fragmenter.scala	/^  val dut = Module(LazyModule(new TLRAMFragmenter(ramBeatBytes,maxSize,txns)).module)$/;"	l
dut	src/main/scala/tilelink/Fuzzer.scala	/^  val dut = Module(LazyModule(new TLFuzzRAM(txns)).module)$/;"	l
dut	src/main/scala/tilelink/HintHandler.scala	/^  val dut = Module(LazyModule(new TLRAMHintHandler(txns)).module)$/;"	l
dut	src/main/scala/tilelink/Jbar.scala	/^  val dut = Module(LazyModule(new TLJbarTestImp(nClients, nManagers, txns)).module)$/;"	l
dut	src/main/scala/tilelink/RationalCrossing.scala	/^  val dut = Module(LazyModule(new TLRAMRationalCrossing(txns)).module)$/;"	l
dut	src/main/scala/tilelink/RegisterRouterTest.scala	/^  val dut = Module(LazyModule(new FuzzRRTest0(txns)).module)$/;"	l
dut	src/main/scala/tilelink/RegisterRouterTest.scala	/^  val dut = Module(LazyModule(new FuzzRRTest1(txns)).module)$/;"	l
dut	src/main/scala/tilelink/SRAM.scala	/^  val dut = Module(LazyModule(new TLRAMECC(ramBeatBytes, eccBytes, sramReg, txns)).module)$/;"	l
dut	src/main/scala/tilelink/SRAM.scala	/^  val dut = Module(LazyModule(new TLRAMSimple(ramBeatBytes, sramReg, txns)).module)$/;"	l
dut	src/main/scala/tilelink/WidthWidget.scala	/^  val dut = Module(LazyModule(new TLRAMWidthWidget(little,big,txns)).module)$/;"	l
dut	src/main/scala/tilelink/Xbar.scala	/^  val dut = Module(LazyModule(new TLMulticlientXbar(nManagers, nClients, txns)).module)$/;"	l
dut	src/main/scala/tilelink/Xbar.scala	/^  val dut = Module(LazyModule(new TLRAMXbar(nManagers,txns)).module)$/;"	l
dut12	src/main/scala/amba/axi4/Xbar.scala	/^  val dut12 = Module(LazyModule(new AXI4XbarFuzzTest("Xbar DUT12", txns, 1, 2)).module)$/;"	l
dut21	src/main/scala/amba/axi4/Xbar.scala	/^  val dut21 = Module(LazyModule(new AXI4XbarFuzzTest("Xbar DUT21", txns, 2, 1)).module)$/;"	l
dut22	src/main/scala/amba/axi4/Xbar.scala	/^  val dut22 = Module(LazyModule(new AXI4XbarFuzzTest("Xbar DUT22", txns, 2, 2)).module)$/;"	l
dut_0001	src/main/scala/amba/axi4/Credited.scala	/^  val dut_0001 = Module(LazyModule(new AXI4RAMCreditedCrossing(txns, CreditedCrossing(CreditedDelay(0, 0), CreditedDelay(0, 1)))).module)$/;"	l
dut_0001	src/main/scala/tilelink/Credited.scala	/^  val dut_0001 = Module(LazyModule(new TLRAMCreditedCrossing(txns, CreditedCrossing(CreditedDelay(0, 0), CreditedDelay(0, 1)))).module)$/;"	l
dut_0010	src/main/scala/amba/axi4/Credited.scala	/^  val dut_0010 = Module(LazyModule(new AXI4RAMCreditedCrossing(txns, CreditedCrossing(CreditedDelay(0, 0), CreditedDelay(1, 0)))).module)$/;"	l
dut_0010	src/main/scala/tilelink/Credited.scala	/^  val dut_0010 = Module(LazyModule(new TLRAMCreditedCrossing(txns, CreditedCrossing(CreditedDelay(0, 0), CreditedDelay(1, 0)))).module)$/;"	l
dut_0100	src/main/scala/amba/axi4/Credited.scala	/^  val dut_0100 = Module(LazyModule(new AXI4RAMCreditedCrossing(txns, CreditedCrossing(CreditedDelay(0, 1), CreditedDelay(0, 0)))).module)$/;"	l
dut_0100	src/main/scala/tilelink/Credited.scala	/^  val dut_0100 = Module(LazyModule(new TLRAMCreditedCrossing(txns, CreditedCrossing(CreditedDelay(0, 1), CreditedDelay(0, 0)))).module)$/;"	l
dut_1000	src/main/scala/amba/axi4/Credited.scala	/^  val dut_1000 = Module(LazyModule(new AXI4RAMCreditedCrossing(txns, CreditedCrossing(CreditedDelay(1, 0), CreditedDelay(0, 0)))).module)$/;"	l
dut_1000	src/main/scala/tilelink/Credited.scala	/^  val dut_1000 = Module(LazyModule(new TLRAMCreditedCrossing(txns, CreditedCrossing(CreditedDelay(1, 0), CreditedDelay(0, 0)))).module)$/;"	l
dut_1111	src/main/scala/amba/axi4/Credited.scala	/^  val dut_1111 = Module(LazyModule(new AXI4RAMCreditedCrossing(txns, CreditedCrossing(CreditedDelay(1, 1), CreditedDelay(1, 1)))).module)$/;"	l
dut_1111	src/main/scala/tilelink/Credited.scala	/^  val dut_1111 = Module(LazyModule(new TLRAMCreditedCrossing(txns, CreditedCrossing(CreditedDelay(1, 1), CreditedDelay(1, 1)))).module)$/;"	l
dut_narrow	src/main/scala/tilelink/AsyncCrossing.scala	/^  val dut_narrow = Module(LazyModule(new TLRAMAsyncCrossing(txns, AsynchronousCrossing(safe = false, narrow = true))).module)$/;"	l
dut_wide	src/main/scala/tilelink/AsyncCrossing.scala	/^  val dut_wide   = Module(LazyModule(new TLRAMAsyncCrossing(txns)).module)$/;"	l
duts	src/main/scala/amba/axi4/Credited.scala	/^  val duts = Seq(dut_1000, dut_0100, dut_0010, dut_0001, dut_1111)$/;"	l
duts	src/main/scala/tilelink/Credited.scala	/^  val duts = Seq(dut_1000, dut_0100, dut_0010, dut_0001, dut_1111)$/;"	l
dv	src/main/scala/rocket/CSR.scala	/^  val dv = Bool() \/\/ effective v for data accesses$/;"	l
dv	src/main/scala/rocket/HellaCache.scala	/^  val dv = Bool()$/;"	l
dw	src/main/scala/rocket/ALU.scala	/^    val dw = Bits(INPUT, SZ_DW)$/;"	l
dw	src/main/scala/rocket/Multiplier.scala	/^  val dw = Bits(SZ_DW.W)$/;"	l
dynamicLocal	src/main/scala/tilelink/AddressAdjuster.scala	/^      val dynamicLocal = AddressSet.unify(adjustableLocalManagers.flatMap(_.address))$/;"	l
dynamicLocalManagers	src/main/scala/tilelink/AddressAdjuster.scala	/^      val dynamicLocalManagers = localEdge.manager.v1copy($/;"	l
e	src/main/scala/tilelink/Bundle_ACancel.scala	/^  val e =         Decoupled(new TLBundleE(params))$/;"	l
e	src/main/scala/tilelink/Bundles.scala	/^  def e: DecoupledIO[TLBundleE] = optE.getOrElse(Wire(Decoupled(new TLBundleE(params))))$/;"	m
e	src/main/scala/tilelink/Bundles.scala	/^  val e = CreditedIO(new TLBundleE(params))$/;"	l
e	src/main/scala/tilelink/Bundles.scala	/^  val e = RationalIO(new TLBundleE(params))$/;"	l
e	src/main/scala/tilelink/Bundles.scala	/^  val e = new AsyncBundle(new TLBundleE(params.base), params.async)$/;"	l
e	src/main/scala/tilelink/Edges.scala	/^    val e = Wire(new TLBundleE(bundle))$/;"	l
eLen	src/main/scala/tile/Core.scala	/^  def eLen = coreParams.eLen(xLen, fLen)$/;"	m
eLen	src/main/scala/tile/Core.scala	/^  def eLen(xLen: Int, fLen: Int): Int = xLen max fLen$/;"	m
eOut	src/main/scala/rocket/Multiplier.scala	/^      val eOut = count === 0 && !divby0 && eOutPos >= align$/;"	l
eOut	src/main/scala/rocket/Multiplier.scala	/^    val eOut = (cfg.mulEarlyOut).B && count =\/= mulw\/cfg.mulUnroll-1 && count =\/= 0 &&$/;"	l
eOutMask	src/main/scala/rocket/Multiplier.scala	/^    val eOutMask = ((BigInt(-1) << mulw).S >> (count * cfg.mulUnroll)(log2Up(mulw)-1,0))(mulw-1,0)$/;"	l
eOutPos	src/main/scala/rocket/Multiplier.scala	/^      val eOutPos = ~(dividendMSB - divisorMSB)$/;"	l
eOutRes	src/main/scala/rocket/Multiplier.scala	/^    val eOutRes = (mulReg >> (mulw - count * cfg.mulUnroll)(log2Up(mulw)-1,0))$/;"	l
e_clr	src/main/scala/tilelink/Monitor.scala	/^    val e_clr = WireInit(0.U(edge.manager.endSinkId.W))$/;"	l
e_dec	src/main/scala/tilelink/Edges.scala	/^    val e_dec = x.e.fire() && e_last && e_response$/;"	l
e_first	src/main/scala/tilelink/Monitor.scala	/^    val e_first = true.B$/;"	l
e_inc	src/main/scala/tilelink/Edges.scala	/^    val e_inc = x.e.fire() && e_first && e_request$/;"	l
e_last	src/main/scala/tilelink/Broadcast.scala	/^    val e_last = Input(Bool())$/;"	l
e_local	src/main/scala/tilelink/AddressAdjuster.scala	/^        val e_local = parent.e.bits.sink < sink_threshold$/;"	l
ea	src/main/scala/regmapper/Test.scala	/^  def ea(bits: Int) = combo(bits, delay(11), always)$/;"	m
ea	src/main/scala/rocket/Breakpoint.scala	/^    val ea = Input(UInt(vaddrBits.W))$/;"	l
earlyValid	src/main/scala/util/ReadyValidCancel.scala	/^  val earlyValid = Output(Bool())$/;"	l
earlyValids	src/main/scala/tilelink/Arbiter.scala	/^      val earlyValids = sourcesIn.map(_.earlyValid)$/;"	l
earlyWinner	src/main/scala/tilelink/Arbiter.scala	/^      val earlyWinner = VecInit((readys zip earlyValids) map { case (r,v) => r&&v })$/;"	l
ebreak	src/main/scala/rocket/RVC.scala	/^      val ebreak = Cat(jr >> 7, 0x73.U(7.W)) | (1 << 20).U$/;"	l
ebreakh	src/main/scala/rocket/CSR.scala	/^  val ebreakh = Bool()$/;"	l
ebreakm	src/main/scala/rocket/CSR.scala	/^  val ebreakm = Bool()$/;"	l
ebreaks	src/main/scala/rocket/CSR.scala	/^  val ebreaks = Bool()$/;"	l
ebreaku	src/main/scala/rocket/CSR.scala	/^  val ebreaku = Bool()$/;"	l
eccBits	src/main/scala/rocket/HellaCache.scala	/^  val eccBits = cacheParams.dataECCBytes * 8$/;"	l
eccByteMask	src/main/scala/rocket/DCache.scala	/^  def eccByteMask(byteMask: UInt) = FillInterleaved(eccBytes, eccMask(byteMask))$/;"	m
eccBytes	src/main/scala/rocket/HellaCache.scala	/^  def eccBytes = cacheParams.dataECCBytes$/;"	m
eccBytes	src/main/scala/tilelink/SRAM.scala	/^  val eccBytes = ecc.bytes$/;"	l
eccCode	src/main/scala/amba/ahb/SRAM.scala	/^    val eccCode = None$/;"	l
eccCode	src/main/scala/amba/apb/SRAM.scala	/^    val eccCode = None$/;"	l
eccCode	src/main/scala/amba/axi4/SRAM.scala	/^    val eccCode = None$/;"	l
eccCode	src/main/scala/diplomacy/SRAM.scala	/^  def eccCode: Option[Code]$/;"	m
eccCode	src/main/scala/tilelink/SRAM.scala	/^    val eccCode = Some(ecc.code)$/;"	l
eccIndices	src/main/scala/util/ECC.scala	/^  def eccIndices(w0: Int) = Seq(w0)$/;"	m
eccIndices	src/main/scala/util/ECC.scala	/^  def eccIndices(w0: Int) = {$/;"	m
eccIndices	src/main/scala/util/ECC.scala	/^  def eccIndices(width: Int) = Seq.empty[Int]$/;"	m
eccIndices	src/main/scala/util/ECC.scala	/^  def eccIndices(width: Int): Seq[Int]$/;"	m
eccMask	src/main/scala/rocket/DCache.scala	/^    val eccMask = dataArb.io.in(0).bits.eccMask.asBools.grouped(subWordBytes\/eccBytes).map(_.orR).toSeq.asUInt$/;"	l
eccMask	src/main/scala/rocket/DCache.scala	/^  def eccMask(byteMask: UInt) = byteMask.grouped(eccBytes).map(_.orR).asUInt$/;"	m
eccMask	src/main/scala/rocket/DCache.scala	/^  val eccMask = UInt(width = wordBytes \/ eccBytes)$/;"	l
eccMask	src/main/scala/rocket/DCache.scala	/^  val eccMask = if (eccBits == subWordBits) Seq(true.B) else io.req.bits.eccMask.asBools$/;"	l
echo	src/main/scala/amba/axi4/Bundles.scala	/^  val echo   = BundleMap(params.echoFields)$/;"	l
echo	src/main/scala/amba/axi4/Bundles.scala	/^  val echo = BundleMap(params.echoFields)$/;"	l
echo	src/main/scala/tilelink/Broadcast.scala	/^  val echo    = Reg(io.in_a.bits.echo)$/;"	l
echo	src/main/scala/tilelink/Bundles.scala	/^  val echo    = BundleMap(params.echoFields)$/;"	l
echo	src/main/scala/tilelink/ToAHB.scala	/^  val echo   = BundleMap(params.bundle.echoFields)$/;"	l
echoFields	src/main/scala/amba/axi4/UserYanker.scala	/^      val echoFields = edgeIn.master.echoFields$/;"	l
echoFields	src/main/scala/tilelink/Parameters.scala	/^  val echoFields:    Seq[BundleFieldBase],$/;"	l
ed	src/main/scala/regmapper/Test.scala	/^  def ed(bits: Int) = combo(bits, delay(11), delay(5))$/;"	m
edge	src/main/scala/amba/ahb/Nodes.scala	/^  def edge(pd: AHBMasterPortParameters, pu: AHBSlavePortParameters, p: Parameters, sourceInfo: SourceInfo) = AHBEdgeParameters(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/amba/apb/Nodes.scala	/^  def edge(pd: APBMasterPortParameters, pu: APBSlavePortParameters, p: Parameters, sourceInfo: SourceInfo) = APBEdgeParameters(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/amba/axi4/Nodes.scala	/^  def edge(pd: AXI4AsyncMasterPortParameters, pu: AXI4AsyncSlavePortParameters, p: Parameters, sourceInfo: SourceInfo) = AXI4AsyncEdgeParameters(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/amba/axi4/Nodes.scala	/^  def edge(pd: AXI4CreditedMasterPortParameters, pu: AXI4CreditedSlavePortParameters, p: Parameters, sourceInfo: SourceInfo) = AXI4CreditedEdgeParameters(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/amba/axi4/Nodes.scala	/^  def edge(pd: AXI4MasterPortParameters, pu: AXI4SlavePortParameters, p: Parameters, sourceInfo: SourceInfo) = AXI4EdgeParameters(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/amba/axis/Nodes.scala	/^  def edge(pd: AXISMasterPortParameters, pu: AXISSlavePortParameters, p: Parameters, sourceInfo: SourceInfo) = AXISEdgeParameters.v1(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/devices/debug/Custom.scala	/^  def edge(pd: DebugCustomParams, pu: DebugCustomNull, p: Parameters, sourceInfo: SourceInfo) = pd$/;"	m
edge	src/main/scala/diplomacy/BundleBridge.scala	/^  def edge(pd: BundleBridgeParams[T], pu: BundleBridgeParams[T], p: Parameters, sourceInfo: SourceInfo) = BundleBridgeEdgeParams(pd, pu)$/;"	m
edge	src/main/scala/diplomacy/Nodes.scala	/^  def edge(pd: D, pu: U, p: Parameters, sourceInfo: SourceInfo): E$/;"	m
edge	src/main/scala/interrupts/Nodes.scala	/^  def edge(pd: IntSourcePortParameters, pu: IntSinkPortParameters, p: Parameters, sourceInfo: SourceInfo) = IntEdge(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/prci/ClockNodes.scala	/^  def edge(pd: ClockGroupSourceParameters, pu: ClockGroupSinkParameters, p: Parameters, sourceInfo: SourceInfo) = ClockGroupEdgeParameters(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/prci/ClockNodes.scala	/^  def edge(pd: ClockSourceParameters, pu: ClockSinkParameters, p: Parameters, sourceInfo: SourceInfo) = ClockEdgeParameters(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/rocket/Frontend.scala	/^  implicit val edge = outer.masterNode.edges.out(0)$/;"	l
edge	src/main/scala/rocket/HellaCache.scala	/^  implicit val edge = outer.node.edges.out(0)$/;"	l
edge	src/main/scala/tilelink/Nodes.scala	/^  def edge(pd: TLAsyncClientPortParameters, pu: TLAsyncManagerPortParameters, p: Parameters, sourceInfo: SourceInfo) = TLAsyncEdgeParameters(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/tilelink/Nodes.scala	/^  def edge(pd: TLCreditedClientPortParameters, pu: TLCreditedManagerPortParameters, p: Parameters, sourceInfo: SourceInfo) = TLCreditedEdgeParameters(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/tilelink/Nodes.scala	/^  def edge(pd: TLRationalClientPortParameters, pu: TLRationalManagerPortParameters, p: Parameters, sourceInfo: SourceInfo) = TLRationalEdgeParameters(pd, pu, p, sourceInfo)$/;"	m
edge	src/main/scala/tilelink/RAMModel.scala	/^      val edge         = edgeIn$/;"	l
edgeI	src/main/scala/diplomacy/Nodes.scala	/^  def edgeI(pd: D, pu: U, p: Parameters, sourceInfo: SourceInfo): E = edge(pd, pu, p, sourceInfo)$/;"	m
edgeI	src/main/scala/diplomacy/Nodes.scala	/^  def edgeI(pd: DI, pu: UI, p: Parameters, sourceInfo: SourceInfo): EI$/;"	m
edgeI	src/main/scala/tilelink/Nodes.scala	/^  def edgeI(pd: TLMasterPortParameters, pu: TLSlavePortParameters, p: Parameters, sourceInfo: SourceInfo) = TLImp.edgeI(pd, pu, p, sourceInfo)$/;"	m
edgeI	src/main/scala/tilelink/Nodes.scala	/^  def edgeI(pd: TLMasterPortParameters, pu: TLSlavePortParameters, p: Parameters, sourceInfo: SourceInfo) = new TLEdgeIn (pd, pu, p, sourceInfo)$/;"	m
edgeO	src/main/scala/diplomacy/Nodes.scala	/^  def edgeO(pd: D, pu: U, p: Parameters, sourceInfo: SourceInfo): E = edge(pd, pu, p, sourceInfo)$/;"	m
edgeO	src/main/scala/diplomacy/Nodes.scala	/^  def edgeO(pd: DO, pu: UO, p: Parameters, sourceInfo: SourceInfo): EO$/;"	m
edgeO	src/main/scala/tilelink/Nodes.scala	/^  def edgeO(pd: TLMasterPortParameters, pu: TLSlavePortParameters, p: Parameters, sourceInfo: SourceInfo) = TLImp.edgeO(pd, pu, p, sourceInfo)$/;"	m
edgeO	src/main/scala/tilelink/Nodes.scala	/^  def edgeO(pd: TLMasterPortParameters, pu: TLSlavePortParameters, p: Parameters, sourceInfo: SourceInfo) = new TLEdgeOut(pd, pu, p, sourceInfo)$/;"	m
edges	src/main/scala/diplomacy/Nodes.scala	/^  def edges: Edges[I,O]$/;"	m
edges	src/main/scala/diplomacy/Nodes.scala	/^  lazy val edges: Edges[EI, EO] = Edges(edgesIn, edgesOut)$/;"	l
edgesInSize	src/main/scala/tilelink/AddressAdjuster.scala	/^    val edgesInSize = node.edges.in.size$/;"	l
edgesOutSize	src/main/scala/tilelink/AddressAdjuster.scala	/^    val edgesOutSize = node.edges.out.size$/;"	l
ee	src/main/scala/regmapper/Test.scala	/^  def ee(bits: Int) = combo(bits, delay(11), delay(11))$/;"	m
eff	src/main/scala/rocket/TLB.scala	/^  val eff = Bool() \/\/ get\/put effects$/;"	l
eff_array	src/main/scala/rocket/TLB.scala	/^  val eff_array = Cat(Fill(nPhysicalEntries, prot_eff), normal_entries.map(_.eff).asUInt)$/;"	l
effectivePriority	src/main/scala/devices/tilelink/Plic.scala	/^  val effectivePriority = (UInt(1) << prioBits) +: (io.ip.asBools zip io.prio).map { case (p, x) => Cat(p, x) }$/;"	l
elatch0	src/main/scala/util/LanePositionedQueue.scala	/^  val elatch0 = RegNext((enq_refill_ren1 &&  enq_row(1)) || (enq_refill_ren0 && !enq_row(1)))$/;"	l
elatch1	src/main/scala/util/LanePositionedQueue.scala	/^  val elatch1 = RegNext((enq_refill_ren1 && !enq_row(1)) || (enq_refill_ren0 &&  enq_row(1)))$/;"	l
element	src/main/scala/diplomacy/LazyModule.scala	/^    val element = if (flip) data.cloneType.flip() else data.cloneType$/;"	l
elements	src/main/scala/diplomacy/CloneModule.scala	/^  val elements = ListMap(elts.map(d => d.instanceName -> d.chiselCloneType): _*)$/;"	l
elements	src/main/scala/diplomacy/LazyModule.scala	/^  val elements: ListMap[String, Data] = ListMap() ++ elts.zipWithIndex.map(makeElements).groupBy(_._1).values.flatMap {$/;"	l
elements	src/main/scala/prci/ClockGroupDriver.scala	/^      val elements =  bundles.map(_.member.elements).flatten$/;"	l
elements	src/main/scala/tilelink/Bundle_ACancel.scala	/^  val elements = ListMap("e" -> e, "d" -> d, "c" -> c, "b" -> b, "a" -> a)$/;"	l
elements	src/main/scala/tilelink/Bundles.scala	/^  val elements =$/;"	l
elements	src/main/scala/util/BundleMap.scala	/^  val elements: ListMap[String, Data] = ListMap(fields.map { bf => bf.key.name -> chisel3.experimental.DataMirror.internal.chiselTypeClone(bf.data) } :_*)$/;"	l
elements	src/main/scala/util/HeterogeneousBag.scala	/^  val elements = ListMap(elts.zipWithIndex.map { case (n,i) => (i.toString, n) }:_*)$/;"	l
elements	src/main/scala/util/RecordMap.scala	/^  val elements = ListMap[String, T]() ++ eltMap.mapValues(chiselTypeClone(_).asInstanceOf[T])  \/\/ mapValues return value is lazy$/;"	l
emitCases	src/main/scala/tilelink/Parameters.scala	/^    val emitCases = groupByIntoSeq(masters)(m => member(m)).map { case (k, vs) =>$/;"	l
emit_read	scripts/vlsi_mem_gen	/^  def emit_read(idx, rw):$/;"	f	function:gen_mem
emits	src/main/scala/tilelink/Parameters.scala	/^  val emits:              TLSlaveToMasterTransferSizes,$/;"	l
emits	src/main/scala/tilelink/Parameters.scala	/^  val emits:             TLMasterToSlaveTransferSizes,$/;"	l
emitsAcquireB	src/main/scala/tilelink/Parameters.scala	/^  def emitsAcquireB  (sourceId: UInt, lgSize: UInt) = sourceIdHelper2(_.emits.acquireB,   sourceId, lgSize)$/;"	m
emitsAcquireT	src/main/scala/tilelink/Parameters.scala	/^  def emitsAcquireT  (sourceId: UInt, lgSize: UInt) = sourceIdHelper2(_.emits.acquireT,   sourceId, lgSize)$/;"	m
emitsArithmetic	src/main/scala/tilelink/Parameters.scala	/^  def emitsArithmetic(sourceId: UInt, lgSize: UInt) = sourceIdHelper2(_.emits.arithmetic, sourceId, lgSize)$/;"	m
emitsArithmeticSafe	src/main/scala/tilelink/Parameters.scala	/^  def emitsArithmeticSafe    (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.emits.arithmetic,    address, lgSize, range)$/;"	m
emitsGet	src/main/scala/tilelink/Parameters.scala	/^  def emitsGet       (sourceId: UInt, lgSize: UInt) = sourceIdHelper2(_.emits.get,        sourceId, lgSize)$/;"	m
emitsGetSafe	src/main/scala/tilelink/Parameters.scala	/^  def emitsGetSafe           (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.emits.get,           address, lgSize, range)$/;"	m
emitsHint	src/main/scala/tilelink/Parameters.scala	/^  def emitsHint      (sourceId: UInt, lgSize: UInt) = sourceIdHelper2(_.emits.hint,       sourceId, lgSize)$/;"	m
emitsHintSafe	src/main/scala/tilelink/Parameters.scala	/^  def emitsHintSafe          (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.emits.hint,          address, lgSize, range)$/;"	m
emitsLogical	src/main/scala/tilelink/Parameters.scala	/^  def emitsLogical   (sourceId: UInt, lgSize: UInt) = sourceIdHelper2(_.emits.logical,    sourceId, lgSize)$/;"	m
emitsLogicalSafe	src/main/scala/tilelink/Parameters.scala	/^  def emitsLogicalSafe       (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.emits.logical,       address, lgSize, range)$/;"	m
emitsMinCover	src/main/scala/amba/axis/Parameters.scala	/^  val emitsMinCover = TransferSizes.mincover(masters.map(_.emitsSizes))$/;"	l
emitsProbeSafe	src/main/scala/tilelink/Parameters.scala	/^  def emitsProbeSafe         (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.emits.probe,         address, lgSize, range)$/;"	m
emitsPutFull	src/main/scala/tilelink/Parameters.scala	/^  def emitsPutFull   (sourceId: UInt, lgSize: UInt) = sourceIdHelper2(_.emits.putFull,    sourceId, lgSize)$/;"	m
emitsPutFullSafe	src/main/scala/tilelink/Parameters.scala	/^  def emitsPutFullSafe       (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.emits.putFull,       address, lgSize, range)$/;"	m
emitsPutPartial	src/main/scala/tilelink/Parameters.scala	/^  def emitsPutPartial(sourceId: UInt, lgSize: UInt) = sourceIdHelper2(_.emits.putPartial, sourceId, lgSize)$/;"	m
emitsPutPartialSafe	src/main/scala/tilelink/Parameters.scala	/^  def emitsPutPartialSafe    (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.emits.putPartial,    address, lgSize, range)$/;"	m
emitsSizes	src/main/scala/amba/axis/Parameters.scala	/^  val emitsSizes: TransferSizes,$/;"	l
empty	src/main/scala/util/CreditedIO.scala	/^  def empty: Bool = v === 0.U$/;"	m
empty	src/main/scala/util/HellaQueue.scala	/^  val empty = ptr_match && !maybe_full$/;"	l
empty	src/main/scala/util/Location.scala	/^  def empty[T]: LocationMap[T] = new LocationMap(Map.empty[String, T])$/;"	m
emptyBmarks	src/main/scala/system/RocketTestSuite.scala	/^  val emptyBmarks = new BenchmarkTestSuite("empty",$/;"	l
emptyBundleParams	src/main/scala/amba/ahb/Parameters.scala	/^  val emptyBundleParams = AHBBundleParameters(addrBits = 1, dataBits = 8, requestFields = Nil, responseFields = Nil, lite = true)$/;"	l
emptyBundleParams	src/main/scala/amba/apb/Parameters.scala	/^  val emptyBundleParams = APBBundleParameters(addrBits = 1, dataBits = 8, requestFields = Nil, responseFields = Nil)$/;"	l
emptyBundleParams	src/main/scala/amba/axi4/Parameters.scala	/^  val emptyBundleParams = AXI4BundleParameters(addrBits=1, dataBits=8, idBits=1, echoFields=Nil, requestFields=Nil, responseFields=Nil)$/;"	l
emptyBundleParams	src/main/scala/amba/axis/Parameters.scala	/^  val emptyBundleParams = new AXISBundleParameters($/;"	l
emptyBundleParams	src/main/scala/tilelink/Parameters.scala	/^  val emptyBundleParams = TLBundleParameters($/;"	l
emptyWhen	src/main/scala/jtag/JtagTap.scala	/^    val emptyWhen = when (false.B) { }  \/\/ Empty WhenContext to start things off$/;"	l
emu	emulator/Makefile	/^emu = emulator-$(PROJECT)-$(CONFIG)$/;"	m
emu_debug	emulator/Makefile	/^emu_debug = emulator-$(PROJECT)-$(CONFIG)-debug$/;"	m
en	src/main/scala/rocket/Breakpoint.scala	/^    val en = bp.control.enabled(io.status)$/;"	l
en	src/main/scala/rocket/CSR.scala	/^      val en = exception && cause === i$/;"	l
en	src/main/scala/rocket/CSR.scala	/^    val en = exception && (supported_interrupts & (BigInt(1) << i).U) =\/= 0 && cause === (BigInt(1) << (xLen - 1)).U + i$/;"	l
en	src/main/scala/rocket/DCache.scala	/^    val en = s1_valid || inWriteback || io.cpu.replay_next$/;"	l
en	src/main/scala/rocket/NBDcache.scala	/^      val en = en1 && ((Bool(i == 0) || !Bool(doNarrowRead)) || s1_writeback)$/;"	l
en	src/main/scala/util/AsyncResetReg.scala	/^    val en = Bool(INPUT)$/;"	l
en	src/main/scala/util/AsyncResetReg.scala	/^  val en = Bool(INPUT)$/;"	l
en	src/main/scala/util/ClockGate.scala	/^    val en = Input(Bool())$/;"	l
en	src/main/scala/util/SynchronizerReg.scala	/^    val en = Input(Bool())$/;"	l
en1	src/main/scala/rocket/NBDcache.scala	/^    val en1 = s1_clk_en && s1_tag_eq_way(w)$/;"	l
en_latched	src/main/resources/vsrc/EICG_wrapper.v	/^  reg en_latched \/*verilator clock_enable*\/;$/;"	r
enable	src/main/resources/vsrc/SimJTAG.v	/^                   input         enable,$/;"	p
enable	src/main/scala/devices/debug/Periphery.scala	/^    val enable = Input(Bool())$/;"	l
enable	src/main/scala/rocket/CSR.scala	/^  val enable = Bool()$/;"	l
enable	src/main/scala/rocket/ICache.scala	/^            val enable = scratchpadWayValid(scratchpadWay(a.address))$/;"	l
enable	src/main/scala/tile/BusErrorUnit.scala	/^    val enable = Reg(init = Vec(sources.map(_.nonEmpty.B)))$/;"	l
enable	src/main/scala/tilelink/WidthWidget.scala	/^      val enable = Seq.tabulate(ratio) { i => !((count ^ i.U) & limit).orR }$/;"	l
enableBase	src/main/scala/devices/tilelink/Plic.scala	/^  def enableBase = 0x2000$/;"	m
enableBase	src/main/scala/devices/tilelink/Plic.scala	/^  def enableBase(i: Int):Int = enableOffset(i) + enableBase$/;"	m
enableCommitLog	src/main/scala/tile/Core.scala	/^  val enableCommitLog = false$/;"	l
enableOffset	src/main/scala/devices/tilelink/Plic.scala	/^  def enableOffset(i: Int) = i * ((maxDevices+7)\/8)$/;"	m
enableRegDesc	src/main/scala/devices/tilelink/Plic.scala	/^    def enableRegDesc(i: Int, j: Int, wide: Int) = {$/;"	m
enableRegFields	src/main/scala/devices/tilelink/Plic.scala	/^    val enableRegFields = enables.zipWithIndex.map { case (e, i) =>$/;"	l
enableRegs	src/main/scala/devices/tilelink/Plic.scala	/^    def enableRegs = (Reg(UInt(width = firstEnable)) +:$/;"	m
enableVec	src/main/scala/devices/tilelink/Plic.scala	/^    val enableVec = Vec(enables.map(x => Cat(x.reverse)))$/;"	l
enableVec0	src/main/scala/devices/tilelink/Plic.scala	/^    val enableVec0 = Vec(enableVec.map(x => Cat(x, UInt(0, width=1))))$/;"	l
enable_d	src/main/scala/tilelink/ToAPB.scala	/^      val enable_d = a_sel && !a_enable$/;"	l
enable_desc	src/main/scala/tile/BusErrorUnit.scala	/^    val enable_desc =  sources.zipWithIndex.map { case (s, i) =>$/;"	l
enabled	src/main/scala/rocket/Breakpoint.scala	/^  def enabled(mstatus: MStatus) = !mstatus.debug && Cat(m, h, s, u)(mstatus.prv)$/;"	m
enables	src/main/scala/devices/tilelink/Plic.scala	/^    val enables = Seq.fill(nHarts) { enableRegs }$/;"	l
encBits	src/main/scala/rocket/HellaCache.scala	/^  val encBits = cacheParams.dataCode.width(eccBits)$/;"	l
encDataBits	src/main/scala/rocket/HellaCache.scala	/^  def encDataBits = cacheParams.dataCode.width(coreDataBits) \/\/ NBDCache only$/;"	m
encRowBits	src/main/scala/rocket/HellaCache.scala	/^  def encRowBits = encDataBits*rowWords$/;"	m
encWordBits	src/main/scala/rocket/HellaCache.scala	/^  val encWordBits = encBits * (wordBits \/ eccBits)$/;"	l
enc_tag	src/main/scala/rocket/ICache.scala	/^    val enc_tag = tECC.decode(tag_rdata(i))$/;"	l
enc_tag	src/main/scala/rocket/ICache.scala	/^    val enc_tag = tECC.encode(Cat(refillError, refill_tag))$/;"	l
encode	src/main/scala/util/ECC.scala	/^  def encode(x: UInt, poison: Bool = Bool(false)) = Cat(x.xorR ^ poison, x)$/;"	m
encode	src/main/scala/util/ECC.scala	/^  def encode(x: UInt, poison: Bool = Bool(false)) = {$/;"	m
encode	src/main/scala/util/ECC.scala	/^  def encode(x: UInt, poison: Bool = Bool(false)): UInt$/;"	m
encodeData	src/main/scala/rocket/DCache.scala	/^  def encodeData(x: UInt, poison: Bool) = x.grouped(eccBits).map(dECC.encode(_, if (dECC.canDetect) poison else false.B)).asUInt$/;"	m
encodeVirtualAddress	src/main/scala/rocket/RocketCore.scala	/^  def encodeVirtualAddress(a0: UInt, ea: UInt) = if (vaddrBitsExtended == vaddrBits) ea else {$/;"	m
end	src/main/scala/diplomacy/AddressRange.scala	/^  val end = base + size$/;"	l
end	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^                 val end: Int,$/;"	l
end	src/main/scala/rocket/Breakpoint.scala	/^    val end = !bp.control.chain$/;"	l
end	src/main/scala/tilelink/PatternPusher.scala	/^    val end = step === UInt(pattern.size)$/;"	l
endAddress	src/main/scala/tilelink/RAMModel.scala	/^      val endAddress   = edge.manager.maxAddress + 1$/;"	l
endAddressHi	src/main/scala/tilelink/RAMModel.scala	/^      val endAddressHi = (endAddress \/ beatBytes).intValue$/;"	l
endDestinationId	src/main/scala/amba/axis/Parameters.scala	/^  val endDestinationId = slaves.map(_.destinationId).max + 1$/;"	l
endId	src/main/scala/amba/axi4/Deinterleaver.scala	/^      val endId = edgeOut.master.endId$/;"	l
endId	src/main/scala/amba/axi4/Parameters.scala	/^  val endId = masters.map(_.id.end).max$/;"	l
endId	src/main/scala/amba/axi4/Xbar.scala	/^        val endId = edgesIn(i).master.endId$/;"	l
endIndex	src/main/scala/util/MuxLiteral.scala	/^    val endIndex = BigInt(1) << log2Ceil(maxKey+1)$/;"	l
endSinkId	src/main/scala/tilelink/Parameters.scala	/^  val endSinkId:      Int,$/;"	l
endSourceId	src/main/scala/amba/axis/Parameters.scala	/^  val endSourceId = masters.map(_.sourceId.end).max$/;"	l
endSourceId	src/main/scala/tilelink/Parameters.scala	/^  def endSourceId = masters.map(_.sourceId.end).max$/;"	m
endSourceId	src/main/scala/tilelink/RAMModel.scala	/^      val endSourceId  = edge.client.endSourceId$/;"	l
endsBeforeLower	src/main/scala/rocket/PMP.scala	/^    val endsBeforeLower = (x & pgMask) < (prev.comparand & pgMask)$/;"	l
endsBeforeUpper	src/main/scala/rocket/PMP.scala	/^    val endsBeforeUpper = (x & pgMask) < (comparand & pgMask)$/;"	l
enoise	src/main/scala/tilelink/Delayer.scala	/^      val enoise = Wire(in.e.bits)$/;"	l
enq	src/main/scala/util/AsyncQueue.scala	/^    val enq = Flipped(Decoupled(gen))$/;"	l
enq	src/main/scala/util/CreditedIO.scala	/^    val enq = Wire(DecoupledIO(genType))$/;"	l
enq	src/main/scala/util/Crossing.scala	/^  val enq = Decoupled(gen).flip$/;"	l
enq	src/main/scala/util/LanePositionedQueue.scala	/^  val enq = Flipped(new LanePositionedDecoupledIO(gen, lanes, depth))$/;"	l
enq	src/main/scala/util/LanePositionedQueue.scala	/^  val enq = RegInit(0.U(bits.W))$/;"	l
enq	src/main/scala/util/MultiLaneQueue.scala	/^  val enq = RegInit(0.U(bits.W))$/;"	l
enq	src/main/scala/util/MultiPortQueue.scala	/^    val enq = Flipped(Vec(enq_lanes, Decoupled(gen)))$/;"	l
enq	src/main/scala/util/MultiPortQueue.scala	/^  val enq = RegInit(0.U(bits.W))$/;"	l
enq	src/main/scala/util/RationalCrossing.scala	/^    val enq = Flipped(DecoupledIO(gen))$/;"	l
enq	src/main/scala/util/RationalCrossing.scala	/^    val enq = Flipped(RationalIO(gen))$/;"	l
enq	src/main/scala/util/RationalCrossing.scala	/^  val enq = direction match {$/;"	l
enq	src/main/scala/util/RationalCrossing.scala	/^  val enq = io.enq$/;"	l
enq	src/main/scala/util/ReorderQueue.scala	/^    val enq = new ReorderEnqueueIO(dType, tagWidth).flip$/;"	l
enq	src/main/scala/util/Repeater.scala	/^    val enq = Flipped(Decoupled(gen.cloneType))$/;"	l
enq_0_lane	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_0_lane = Output(UInt(laneBitsU.W))$/;"	l
enq_1hot	src/main/scala/util/MultiPortQueue.scala	/^    val enq_1hot = UIntToOH1(offset, dense.lanes).pad(dense.lanes)$/;"	l
enq_OH	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val enq_OH = UIntToOH(enq_id, endId)$/;"	l
enq_OH_bools	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val enq_OH_bools = enq_OH.asBools$/;"	l
enq_bits	src/main/scala/util/MultiLaneQueue.scala	/^    val enq_bits  = Input(Vec(lanes, gen))$/;"	l
enq_bits	src/main/scala/util/MultiPortQueue.scala	/^  val enq_bits = RipplePrefixSum(enq +: valid.asBools.map(x => WireInit(UInt(bits.W), x)))(_ + _)$/;"	l
enq_buffer	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_buffer = Reg(Vec(4, Vec(lanes, gen)))$/;"	l
enq_clock	src/main/scala/util/Crossing.scala	/^  val enq_clock = Clock(INPUT)$/;"	l
enq_dense	src/main/scala/util/MultiPortQueue.scala	/^    val enq_dense = Gather($/;"	l
enq_gap	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_gap    = RegInit(false.B)$/;"	l
enq_id	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val enq_id = out.r.bits.id$/;"	l
enq_in	src/main/scala/util/RationalCrossing.scala	/^  val enq_in = BlockDuringReset(io.enq)$/;"	l
enq_lmask	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_lmask = (if (lanes==1) 0.U else UIntToOH1( enq_lane, lanes-1)).pad(2*lanes)$/;"	l
enq_mask	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_mask  = enq_vmask & ~enq_lmask$/;"	l
enq_pos	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_pos = enq_row * lanes.U + enq_lane$/;"	l
enq_ptr	src/main/scala/util/HellaQueue.scala	/^  val enq_ptr = Counter(do_enq, entries)._1$/;"	l
enq_push	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_push = enq_wrap && enq_row(0)$/;"	l
enq_ready	src/main/scala/util/MultiLaneQueue.scala	/^    val enq_ready = Output(Bool())$/;"	l
enq_readys	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val enq_readys = VecInit(qs.map(_.enq.ready))$/;"	l
enq_refill	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_refill = RegInit(0.U(3.W))$/;"	l
enq_refill_flop0	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_refill_flop0 = enq_refill === 4.U$/;"	l
enq_refill_flop1	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_refill_flop1 = enq_refill === 6.U$/;"	l
enq_refill_idle	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_refill_idle  = enq_refill === 0.U$/;"	l
enq_refill_ren0	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_refill_ren0  = enq_refill === 3.U$/;"	l
enq_refill_ren1	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_refill_ren1  = enq_refill === 5.U$/;"	l
enq_refill_wait0	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_refill_wait0 = enq_refill === 1.U$/;"	l
enq_refill_wait1	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_refill_wait1 = enq_refill === 2.U$/;"	l
enq_reset	src/main/scala/util/Crossing.scala	/^  val enq_reset = Bool(INPUT) \/\/ synchronously deasserted wrt. enq_clock$/;"	l
enq_row_half	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_row_half = enq_row >> 1$/;"	l
enq_set	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_set = (if (lanes == 1) enq_row else Cat(enq_row, enq_lane)) - abortSize$/;"	l
enq_valid	src/main/scala/util/MultiLaneQueue.scala	/^    val enq_valid = Input(UInt(laneBits1.W))$/;"	l
enq_valid	src/main/scala/util/MultiPortQueue.scala	/^    val enq_valid = DensePrefixSum(sparse.map(_.valid.asUInt))(_ +& _)$/;"	l
enq_vmask	src/main/scala/util/LanePositionedQueue.scala	/^  val enq_vmask = UIntToOH1(io.enq.valid +& enq_lane, 2*lanes-1).pad(2*lanes)$/;"	l
entries	src/main/scala/rocket/BTB.scala	/^  val entries = btbParams.nEntries$/;"	l
entries	src/main/scala/rocket/TLB.scala	/^  val entries = all_entries.map(_.getData(vpn))$/;"	l
entries	src/main/scala/util/ShiftQueue.scala	/^                            val entries: Int,$/;"	l
entry	scripts/debug_rom/debug_rom.S	/^entry:$/;"	l
entry	scripts/debug_rom/debug_rom_nonzero.S	/^entry:$/;"	l
entry	src/main/scala/rocket/BTB.scala	/^  val entry = UInt(width = log2Up(entries + 1))$/;"	l
entry	src/main/scala/rocket/PTW.scala	/^      val entry = Wire(new L2TLBEntry(nL2TLBSets))$/;"	l
entry_data	src/main/scala/rocket/TLB.scala	/^  def entry_data = data.map(_.asTypeOf(new TLBEntryData))$/;"	m
entry_loop	scripts/debug_rom/debug_rom.S	/^entry_loop:$/;"	l
entry_loop	scripts/debug_rom/debug_rom_nonzero.S	/^entry_loop:$/;"	l
enumerateBits	src/main/scala/diplomacy/Parameters.scala	/^  def enumerateBits(mask: BigInt): Seq[BigInt] = {$/;"	m
enumerateMask	src/main/scala/diplomacy/Parameters.scala	/^  def enumerateMask(mask: BigInt): Seq[BigInt] = {$/;"	m
enumerateROMs	src/main/scala/util/GeneratorUtils.scala	/^  def enumerateROMs(circuit: Circuit): String = {$/;"	m
env	src/main/scala/stage/phases/AddDefaultTests.scala	/^      val env = if (vm) List("p", "v") else List("p")$/;"	l
envName	src/main/scala/system/RocketTestSuite.scala	/^  val envName = ""$/;"	l
envName	src/main/scala/system/RocketTestSuite.scala	/^  val envName: String$/;"	l
envs	src/main/scala/system/RocketTestSuite.scala	/^      val envs = s.groupBy(_.envName)$/;"	l
ep	src/main/scala/devices/tilelink/Plic.scala	/^      val ep = enables(0).asUInt & pending.asUInt$/;"	l
ep2	src/main/scala/devices/tilelink/Plic.scala	/^      val ep2 = RegNext(ep)$/;"	l
epc	src/main/scala/rocket/CSR.scala	/^  val epc = formEPC(io.pc)$/;"	l
eq	src/main/scala/util/Misc.scala	/^          val eq = sub_eq && (if (j % 2 == 1) bit else nbit)$/;"	l
equal	src/main/scala/util/RationalCrossing.scala	/^  val equal = count === deq.sink$/;"	l
equal	src/main/scala/util/RationalCrossing.scala	/^  val equal = count === enq.source$/;"	l
er	src/main/scala/regmapper/Test.scala	/^  def er(bits: Int) = combo(bits, delay(11), random)$/;"	m
eret	src/main/scala/rocket/CSR.scala	/^  val eret = Bool(OUTPUT)$/;"	l
err	src/main/resources/csrc/remote_bitbang.h	/^  int err;$/;"	m	class:remote_bitbang_t
error	scripts/toaxe.py	/^  def error(msg):$/;"	f	function:main
error	src/main/scala/amba/axi4/Fragmenter.scala	/^      val error = RegInit(Vec.fill(edgeIn.master.endId) { UInt(0, width = AXI4Parameters.respBits)})$/;"	l
error	src/main/scala/amba/axi4/Test.scala	/^  val error= LazyModule(new TLError(DevNullParams(Seq(AddressSet(0x1800, 0xff)), maxAtomic = 8, maxTransfer = 256)))$/;"	l
error	src/main/scala/amba/axi4/ToTL.scala	/^      val error = errorDev.address.head.base$/;"	l
error	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^      val error = LazyModule(new TLError($/;"	l
error	src/main/scala/groundtest/Status.scala	/^  val error = Valid(UInt(width = 4))$/;"	l
error	src/main/scala/util/ECC.scala	/^  def error = correctable || uncorrectable$/;"	m
errorBusy	src/main/scala/devices/debug/Debug.scala	/^    val errorBusy        = WireInit(false.B)$/;"	l
errorCodeBits	src/main/scala/groundtest/Package.scala	/^  val errorCodeBits = 4$/;"	l
errorDev	src/main/scala/amba/axi4/ToTL.scala	/^      val errorDev = errorDevs.maxBy(_.maxTransfer)$/;"	l
errorDev	src/main/scala/tilelink/AddressAdjuster.scala	/^      val errorDev = local.managers.filter(_.nodePath.last.lazyModule.className == "TLError").headOption$/;"	l
errorDevice	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^  val errorDevice: Option[BuiltInErrorDeviceParams]$/;"	l
errorDevs	src/main/scala/amba/axi4/ToTL.scala	/^      val errorDevs = edgeOut.manager.managers.filter(_.nodePath.last.lazyModule.className == "TLError")$/;"	l
errorException	src/main/scala/devices/debug/Debug.scala	/^    val errorException   = WireInit(false.B)$/;"	l
errorHaltResume	src/main/scala/devices/debug/Debug.scala	/^    val errorHaltResume  = WireInit(false.B)$/;"	l
errorList	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^    val errorList = violations.collect {$/;"	l
errorList	src/main/scala/linting/rule/LintRule.scala	/^    val errorList = violations.collect {$/;"	l
errorOpt	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^    val errorOpt = None$/;"	l
errorOpt	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^    val errorOpt = params.errorDevice.map { dnp => LazyScope("wrapped_error_device", "ErrorDeviceWrapper") {$/;"	l
errorOpt	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^  def errorOpt: Option[TLError]$/;"	m
errorUnsupported	src/main/scala/devices/debug/Debug.scala	/^    val errorUnsupported = WireInit(false.B)$/;"	l
error_addr	src/main/scala/rocket/DCache.scala	/^    val error_addr =$/;"	l
error_cross_covers	src/main/scala/rocket/ICache.scala	/^  val error_cross_covers = new property.CrossProperty($/;"	l
error_cross_covers	src/main/scala/tilelink/SRAM.scala	/^    val error_cross_covers = new property.CrossProperty(Seq(mem_active_valid, data_error), Seq(), "Ecc Covers")$/;"	l
error_in_flight_reg	src/main/scala/amba/apb/ToTL.scala	/^      val error_in_flight_reg = RegInit(false.B)$/;"	l
errors	src/main/scala/linting/LintException.scala	/^        val errors = lintErrors.zip(1 to remainingErrorLimit).map {$/;"	l
errors	src/main/scala/rocket/Frontend.scala	/^  val errors = new ICacheErrors$/;"	l
errors	src/main/scala/rocket/HellaCache.scala	/^  val errors = new DCacheErrors$/;"	l
errors	src/main/scala/rocket/ICache.scala	/^  val errors = new ICacheErrors$/;"	l
errors	src/main/scala/tile/BusErrorUnit.scala	/^      val errors = t.flip$/;"	l
errors	src/main/scala/tilelink/ErrorEvaluator.scala	/^    val errors = LazyModule(new TLErrorEvaluator(test, testOn, testOff, deny))$/;"	l
essential	src/main/scala/rocket/Decode.scala	/^    val essential = prime.filter(p => essentiallyCovered.exists(p covers _))$/;"	l
essentiallyCovered	src/main/scala/rocket/Decode.scala	/^    val essentiallyCovered = minterms.filter(t => prime.count(_ covers t) == 1)$/;"	l
eval	src/main/scala/rocket/PMP.scala	/^    def eval(a: UInt, b: UInt, m: UInt) = ((a ^ b) & ~m) === 0$/;"	m
evaluate	src/main/scala/rocket/Events.scala	/^  def evaluate(eventSel: UInt): Bool = {$/;"	m
evaluate	src/main/scala/rocket/Events.scala	/^  def evaluate(eventSel: UInt): UInt = {$/;"	m
evec	src/main/scala/rocket/CSR.scala	/^  val evec = UInt(OUTPUT, vaddrBitsExtended)$/;"	l
eventSel	src/main/scala/rocket/CSR.scala	/^  val eventSel = UInt(OUTPUT, xLen)$/;"	l
everything	src/main/scala/diplomacy/Parameters.scala	/^  val everything = AddressSet(0, -1)$/;"	l
exCoverCauses	src/main/scala/rocket/RocketCore.scala	/^  val exCoverCauses = idCoverCauses$/;"	l
ex_cannot_bypass	src/main/scala/rocket/RocketCore.scala	/^  val ex_cannot_bypass = ex_ctrl.csr =\/= CSR.N || ex_ctrl.jalr || ex_ctrl.mem || ex_ctrl.mul || ex_ctrl.div || ex_ctrl.fp || ex_ctrl.rocc || ex_scie_pipelined$/;"	l
ex_cp_valid	src/main/scala/tile/FPU.scala	/^  val ex_cp_valid = io.cp_req.fire()$/;"	l
ex_ctrl	src/main/scala/rocket/RocketCore.scala	/^  val ex_ctrl = Reg(new IntCtrlSigs)$/;"	l
ex_ctrl	src/main/scala/tile/FPU.scala	/^  val ex_ctrl = Mux(ex_cp_valid, cp_ctrl, ex_reg_ctrl)$/;"	l
ex_dcache_tag	src/main/scala/rocket/RocketCore.scala	/^  val ex_dcache_tag = Cat(ex_waddr, ex_ctrl.fp)$/;"	l
ex_imm	src/main/scala/rocket/RocketCore.scala	/^  val ex_imm = ImmGen(ex_ctrl.sel_imm, ex_reg_inst)$/;"	l
ex_op1	src/main/scala/rocket/RocketCore.scala	/^  val ex_op1 = MuxLookup(ex_ctrl.sel_alu1, SInt(0), Seq($/;"	l
ex_op2	src/main/scala/rocket/RocketCore.scala	/^  val ex_op2 = MuxLookup(ex_ctrl.sel_alu2, SInt(0), Seq($/;"	l
ex_pc_valid	src/main/scala/rocket/RocketCore.scala	/^  val ex_pc_valid = ex_reg_valid || ex_reg_replay || ex_reg_xcpt_interrupt$/;"	l
ex_ra	src/main/scala/tile/FPU.scala	/^  val ex_ra = List.fill(3)(Reg(UInt()))$/;"	l
ex_reg_btb_resp	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_btb_resp        = Reg(new BTBResp)$/;"	l
ex_reg_cause	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_cause           = Reg(UInt())$/;"	l
ex_reg_ctrl	src/main/scala/tile/FPU.scala	/^  val ex_reg_ctrl = RegEnable(id_ctrl, io.valid)$/;"	l
ex_reg_flush_pipe	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_flush_pipe      = Reg(Bool())$/;"	l
ex_reg_hls	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_hls = Reg(Bool())$/;"	l
ex_reg_inst	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_inst = Reg(Bits())$/;"	l
ex_reg_inst	src/main/scala/tile/FPU.scala	/^  val ex_reg_inst = RegEnable(io.inst, io.valid)$/;"	l
ex_reg_load_use	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_load_use        = Reg(Bool())$/;"	l
ex_reg_mem_size	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_mem_size = Reg(UInt())$/;"	l
ex_reg_pc	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_pc = Reg(UInt())$/;"	l
ex_reg_raw_inst	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_raw_inst = Reg(UInt())$/;"	l
ex_reg_replay	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_replay = Reg(Bool())$/;"	l
ex_reg_rs_bypass	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_rs_bypass = Reg(Vec(id_raddr.size, Bool()))$/;"	l
ex_reg_rs_lsb	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_rs_lsb = Reg(Vec(id_raddr.size, UInt(width = log2Ceil(bypass_sources.size))))$/;"	l
ex_reg_rs_msb	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_rs_msb = Reg(Vec(id_raddr.size, UInt()))$/;"	l
ex_reg_rvc	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_rvc             = Reg(Bool())$/;"	l
ex_reg_valid	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_valid           = Reg(Bool())$/;"	l
ex_reg_valid	src/main/scala/tile/FPU.scala	/^  val ex_reg_valid = Reg(next=io.valid, init=Bool(false))$/;"	l
ex_reg_wphit	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_wphit            = Reg(Vec(nBreakpoints, Bool()))$/;"	l
ex_reg_xcpt	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_xcpt            = Reg(Bool())$/;"	l
ex_reg_xcpt_interrupt	src/main/scala/rocket/RocketCore.scala	/^  val ex_reg_xcpt_interrupt  = Reg(Bool())$/;"	l
ex_rm	src/main/scala/tile/FPU.scala	/^  val ex_rm = Mux(ex_reg_inst(14,12) === Bits(7), io.fcsr_rm, ex_reg_inst(14,12))$/;"	l
ex_rs	src/main/scala/rocket/RocketCore.scala	/^  val ex_rs = for (i <- 0 until id_raddr.size)$/;"	l
ex_rs	src/main/scala/tile/FPU.scala	/^  val ex_rs = ex_ra.map(a => regfile(a))$/;"	l
ex_scie_pipelined	src/main/scala/rocket/RocketCore.scala	/^  val ex_scie_pipelined = Reg(Bool())$/;"	l
ex_scie_unpipelined	src/main/scala/rocket/RocketCore.scala	/^  val ex_scie_unpipelined = Reg(Bool())$/;"	l
ex_scie_unpipelined_wdata	src/main/scala/rocket/RocketCore.scala	/^  val ex_scie_unpipelined_wdata = if (!rocketParams.useSCIE) 0.U else {$/;"	l
ex_sfence	src/main/scala/rocket/RocketCore.scala	/^  val ex_sfence = Bool(usingVM) && ex_ctrl.mem && (ex_ctrl.mem_cmd === M_SFENCE || ex_ctrl.mem_cmd === M_HFENCEV || ex_ctrl.mem_cmd === M_HFENCEG)$/;"	l
ex_slow_bypass	src/main/scala/rocket/RocketCore.scala	/^  val ex_slow_bypass = ex_ctrl.mem_cmd === M_XSC || ex_reg_mem_size < 2$/;"	l
ex_waddr	src/main/scala/rocket/RocketCore.scala	/^  val ex_waddr = ex_reg_inst(11,7) & regAddrMask$/;"	l
exc	src/main/scala/tile/FPU.scala	/^    val exc = Bits(width = FPConstants.FLAGS_SZ)$/;"	l
exc	src/main/scala/tile/FPU.scala	/^  val exc = Bits(width = FPConstants.FLAGS_SZ)$/;"	l
excOut	src/main/scala/tile/FPU.scala	/^          val excOut = Cat(conv.io.signedOut === excSign, Fill(w-1, !excSign))$/;"	l
excSign	src/main/scala/tile/FPU.scala	/^          val excSign = in.in1(maxExpWidth + maxSigWidth) && !maxType.isNaN(in.in1)$/;"	l
exception	scripts/debug_rom/debug_rom.S	/^exception:$/;"	l
exception	scripts/debug_rom/debug_rom_nonzero.S	/^exception:$/;"	l
exception	src/main/scala/rocket/CSR.scala	/^  val exception = Bool()$/;"	l
exception	src/main/scala/rocket/CSR.scala	/^  val exception = Bool(INPUT)$/;"	l
exception	src/main/scala/rocket/CSR.scala	/^  val exception = insn_call || insn_break || io.exception$/;"	l
exception	src/main/scala/tile/LazyRoCC.scala	/^  val exception = Input(Bool())$/;"	l
exceptionFlags	src/main/scala/tile/FPU.scala	/^        val exceptionFlags = Bits(OUTPUT, 5)$/;"	l
excpt	src/main/scala/util/CoreMonitor.scala	/^  val excpt = Bool()$/;"	l
executable	src/main/scala/regmapper/RegisterRouter.scala	/^  val executable = devParams.executable$/;"	l
executable	src/main/scala/tilelink/Parameters.scala	/^  val executable:         Boolean,$/;"	l
executable	src/main/scala/tilelink/RegisterRouter.scala	/^     val executable:  Boolean = false)$/;"	l
execute	src/main/scala/diplomacy/LazyModule.scala	/^      def execute(): Unit = {$/;"	m
execute	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^  def execute(state: CircuitState): CircuitState = {$/;"	m
execute_command	src/main/resources/csrc/remote_bitbang.cc	/^void remote_bitbang_t::execute_command()$/;"	f	class:remote_bitbang_t
executesOnly	src/main/scala/tilelink/Parameters.scala	/^  val executesOnly:      Boolean,$/;"	l
exit	src/main/resources/vsrc/SimJTAG.v	/^                   output [31:0] exit$/;"	p
exit	src/main/scala/devices/debug/Periphery.scala	/^    val exit = Output(UInt(32.W))$/;"	l
exit_code	src/main/resources/csrc/remote_bitbang.h	/^  int exit_code() {return err;}$/;"	f	class:remote_bitbang_t
exit_reg	src/main/resources/vsrc/SimDTM.v	/^  reg [31:0] exit_reg;$/;"	r
exp	src/main/scala/rocket/IBuf.scala	/^    val exp = Module(new RVCExpander)$/;"	l
exp	src/main/scala/tile/FPU.scala	/^      val exp = UInt(expWidth.W)$/;"	l
expCode	src/main/scala/tile/FPU.scala	/^      val expCode = expIn(exp, exp - 2)$/;"	l
expIn	src/main/scala/tile/FPU.scala	/^    val expIn = x(sig + exp - 1, sig - 1)$/;"	l
expOut	src/main/scala/tile/FPU.scala	/^    val expOut = {$/;"	l
expWidth	src/main/scala/tile/FPU.scala	/^    val expWidth = exp$/;"	l
expand	src/main/scala/rocket/IBuf.scala	/^  def expand(i: Int, j: UInt, curInst: UInt): Unit = if (i < retireWidth) {$/;"	m
expand	src/main/scala/util/PrefixSum.scala	/^    def expand(layer: Int, offset: Int, x: Vector[T]): Vector[T] = {$/;"	m
expandTransfer	src/main/scala/amba/axi4/Fragmenter.scala	/^  def expandTransfer(x: TransferSizes, beatBytes: Int, alignment: BigInt) =$/;"	m
expandTransfer	src/main/scala/tilelink/Fragmenter.scala	/^  def expandTransfer(x: TransferSizes, op: String) = if (!x) x else {$/;"	m
expand_wmask	scripts/check_comparator_trace.py	/^def expand_wmask(wmask):$/;"	f
expect	src/main/scala/tilelink/PatternPusher.scala	/^    val expect = Vec(pattern.map(p => UInt(p.dataIn.getOrElse(BigInt(0)))))(step) holdUnless a.fire()$/;"	l
explanation	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^      val explanation = conflictingDesiredNames.map {$/;"	l
explanation	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^      val explanation = conflictingDesiredNames.map {$/;"	l
export	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^    val export = p(ExportDebug)$/;"	l
expressions	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^      val expressions = args.iterator$/;"	l
extInterrupts	src/main/scala/subsystem/InterruptBus.scala	/^  val extInterrupts = IntSourceNode(IntSourcePortSimple(num = nExtInterrupts, resources = device.int))$/;"	l
extTrigger	src/main/scala/devices/debug/Debug.scala	/^      val extTrigger = (nExtTriggers > 0).option(new DebugExtTriggerIO())$/;"	l
extTrigger	src/main/scala/devices/debug/Debug.scala	/^      val extTrigger = (p(DebugModuleKey).get.nExtTriggers > 0).option(new DebugExtTriggerIO())$/;"	l
extTrigger	src/main/scala/devices/debug/Periphery.scala	/^  val extTrigger = (p(DebugModuleKey).get.nExtTriggers > 0).option(new DebugExtTriggerIO())$/;"	l
extTriggerInReq	src/main/scala/devices/debug/Debug.scala	/^        val extTriggerInReq = Wire(Vec(nExtTriggers, Bool()))$/;"	l
extTriggerOutAck	src/main/scala/devices/debug/Debug.scala	/^        val extTriggerOutAck = Wire(Vec(nExtTriggers, Bool()))$/;"	l
extTriggerOutReq	src/main/scala/devices/debug/Debug.scala	/^        val extTriggerOutReq = RegInit(VecInit(Seq.fill(cfg.nExtTriggers) {false.B} ))$/;"	l
extensions	src/main/scala/stage/phases/AddDefaultTests.scala	/^      val extensions = {$/;"	l
externalLen	src/main/scala/tile/Core.scala	/^    val externalLen = paddrBits$/;"	l
extra	src/main/scala/devices/tilelink/Plic.scala	/^      val extra = Map($/;"	l
extra	src/main/scala/diplomacy/Resources.scala	/^    val extra = Map($/;"	l
extra	src/main/scala/regmapper/RegMapper.scala	/^  val extra = BundleMap(params.extraFields)$/;"	l
extra	src/main/scala/rocket/ICache.scala	/^     val extra = Map($/;"	l
extra	src/main/scala/tilelink/Monitor.scala	/^  def extra = {$/;"	m
extraAddrIndices	src/main/scala/groundtest/TraceGen.scala	/^  val extraAddrIndices = (0 to numExtraAddrs-1)$/;"	l
extraAddrs	src/main/scala/groundtest/TraceGen.scala	/^  val extraAddrs = Seq.fill(numExtraAddrs) {$/;"	l
extraBits	src/main/scala/rocket/TLB.scala	/^    val extraBits = if (guestPA) hypervisorExtraAddrBits else 0$/;"	l
extraResources	src/main/scala/regmapper/RegisterRouter.scala	/^  def extraResources(resources: ResourceBindings) = Map[String, Seq[ResourceValue]]()$/;"	m
extraResources	src/main/scala/tilelink/RegisterRouter.scala	/^  def extraResources(resources: ResourceBindings) = Map[String, Seq[ResourceValue]]()$/;"	m
extract	src/main/scala/util/package.scala	/^    def extract(hi: Int, lo: Int): UInt = {$/;"	m
extractOption	src/main/scala/util/package.scala	/^    def extractOption(hi: Int, lo: Int): Option[UInt] = {$/;"	m
exttrigger	src/main/scala/devices/debug/dm_registers.scala	/^  val exttrigger = UInt(4.W)$/;"	l
exttriggerWrEn	src/main/scala/devices/debug/Debug.scala	/^    val exttriggerWrEn = WireInit(false.B)$/;"	l
f	src/main/scala/rocket/CSR.scala	/^      val f = wdata('f' - 'a')$/;"	l
f	src/main/scala/tile/BaseTile.scala	/^    val f = if (tileParams.core.fpu.nonEmpty) "f" else ""$/;"	l
f	src/main/scala/tile/FPU.scala	/^  val f: Array[(BitPat, List[BitPat])] =$/;"	l
f	src/main/scala/util/GeneratorUtils.scala	/^    val f = new File(targetDir, fname)$/;"	l
f	src/main/scala/util/LanePositionedQueue.scala	/^    val f = q.io.free.get$/;"	l
fLen	src/main/scala/tile/Core.scala	/^  val fLen = coreParams.fpu.map(_.fLen).getOrElse(0)$/;"	l
fLen	src/main/scala/tile/FPU.scala	/^  val fLen: Int$/;"	l
f_base	src/main/scala/tilelink/RAMModel.scala	/^            val f_base = flight(i).base$/;"	l
f_bits	src/main/scala/tilelink/RAMModel.scala	/^            val f_bits = UIntToOH1(f_size, addressBits)$/;"	l
f_rivalid	src/main/scala/regmapper/RegMapper.scala	/^      val f_rivalid = rivalid(i) && rimask$/;"	l
f_roready	src/main/scala/regmapper/RegMapper.scala	/^      val f_roready = roready(i) && romask$/;"	l
f_size	src/main/scala/tilelink/RAMModel.scala	/^            val f_size = flight(i).size$/;"	l
f_wivalid	src/main/scala/regmapper/RegMapper.scala	/^      val f_wivalid = wivalid(i) && wimask$/;"	l
f_woready	src/main/scala/regmapper/RegMapper.scala	/^      val f_woready = woready(i) && womask$/;"	l
facct	src/main/scala/regmapper/RegMapper.scala	/^      val facct = field.desc.map{_.access}.getOrElse("")$/;"	l
factory	src/main/scala/tilelink/Broadcast.scala	/^  def factory: TLBroadcast.ProbeFilterFactory = params => new BroadcastFilter(params)$/;"	m
failure	src/main/resources/vsrc/TestDriver.v	/^  reg failure = 1'b0;$/;"	r
falses	src/main/scala/util/ReduceOthers.scala	/^    val falses = literals.count(_.litValue == 0)$/;"	l
fanin	src/main/scala/devices/tilelink/Plic.scala	/^      val fanin = Module(new PLICFanIn(nDevices, prioBits))$/;"	l
fanout	src/main/scala/amba/axi4/Xbar.scala	/^  def fanout[T <: AXI4BundleBase](input: IrrevocableIO[T], select: Seq[Bool]) = {$/;"	m
fanout	src/main/scala/amba/axis/Xbar.scala	/^  def fanout(input: AXISBundle, select: Seq[Bool]): Seq[AXISBundle] = {$/;"	m
fanout	src/main/scala/tilelink/Xbar.scala	/^  def fanout[T <: TLChannel](input: DecoupledIO[T], select: Seq[Bool], force: Seq[Boolean] = Nil): Seq[DecoupledIO[T]] = {$/;"	m
fanout	src/main/scala/tilelink/Xbar.scala	/^  def fanout[T <: TLChannel](input: ReadyValidCancel[T], select: Seq[Bool], force: Seq[Boolean] = Nil): Seq[ReadyValidCancel[T]] = {$/;"	m
fast	src/main/scala/tilelink/RationalCrossing.scala	/^    val fast = Module(new Pow2ClockDivider(1))$/;"	l
fastCheck	src/main/scala/rocket/TLB.scala	/^  def fastCheck(member: TLManagerParameters => Boolean) =$/;"	m
fastLoadByte	src/main/scala/rocket/RocketCore.scala	/^  val fastLoadByte = rocketParams.fastLoadByte$/;"	l
fastLoadWord	src/main/scala/rocket/RocketCore.scala	/^  val fastLoadWord = rocketParams.fastLoadWord$/;"	l
fastMulW	src/main/scala/rocket/Multiplier.scala	/^  val fastMulW = if (cfg.mulUnroll == 0) false else w\/2 > cfg.mulUnroll && w % (2*cfg.mulUnroll) == 0$/;"	l
fastProperty	src/main/scala/tilelink/Parameters.scala	/^  def fastProperty[K, D <: Data](address: UInt, p: TLSlaveParameters => K, d: K => D): D =$/;"	m
fastPropertyGroup	src/main/scala/tilelink/Parameters.scala	/^  def fastPropertyGroup[K](p: TLSlaveParameters => K): Seq[(K, Seq[AddressSet])] = {$/;"	m
fastpipe	src/main/scala/tile/FPU.scala	/^  val fastpipe = Bool()$/;"	l
fbus	src/main/scala/subsystem/BaseSubsystem.scala	/^  val fbus = tlBusWrapperLocationMap.lift(FBUS).getOrElse(sbus)$/;"	l
fbus	src/main/scala/subsystem/FrontBus.scala	/^    val fbus = LazyModule(new FrontBus(this, loc.name))$/;"	l
fcsr	src/main/scala/rocket/Instructions.scala	/^  val fcsr = 0x3$/;"	l
fcsr_flags	src/main/scala/rocket/CSR.scala	/^  val fcsr_flags = Valid(Bits(width = FPConstants.FLAGS_SZ)).flip$/;"	l
fcsr_flags	src/main/scala/tile/FPU.scala	/^  val fcsr_flags = Valid(Bits(width = FPConstants.FLAGS_SZ))$/;"	l
fcsr_rdy	src/main/scala/tile/FPU.scala	/^  val fcsr_rdy = Bool(OUTPUT)$/;"	l
fcsr_rm	src/main/scala/rocket/CSR.scala	/^  val fcsr_rm = Bits(OUTPUT, FPConstants.RM_SZ)$/;"	l
fcsr_rm	src/main/scala/tile/FPU.scala	/^  val fcsr_rm = Bits(INPUT, FPConstants.RM_SZ)$/;"	l
fcvt_hd	src/main/scala/tile/FPU.scala	/^  val fcvt_hd: Array[(BitPat, List[BitPat])] =$/;"	l
fd	src/main/scala/stage/phases/AddDefaultTests.scala	/^        val fd = coreParams.fpu.map {$/;"	l
fdesc	src/main/scala/regmapper/RegMapper.scala	/^      val fdesc = field.desc.map{_.desc + ":"}.getOrElse("")$/;"	l
feed	src/main/scala/amba/axi4/Delayer.scala	/^    def feed[T <: Data](sink: IrrevocableIO[T], source: IrrevocableIO[T], noise: T): Unit = {$/;"	m
feed	src/main/scala/tilelink/Delayer.scala	/^    def feed[T <: Data](sink: DecoupledIO[T], source: DecoupledIO[T], noise: T): Unit = {$/;"	m
fence	src/main/scala/rocket/IDecode.scala	/^  val fence = Bool()$/;"	l
fence_i	src/main/scala/rocket/IDecode.scala	/^  val fence_i = Bool()$/;"	l
fence_rdy	src/main/scala/groundtest/TraceGen.scala	/^    val fence_rdy = Bool(INPUT)$/;"	l
fence_rdy	src/main/scala/rocket/NBDcache.scala	/^    val fence_rdy = Bool(OUTPUT)$/;"	l
fetch	src/main/scala/amba/package.scala	/^    val fetch      = Bool() \/\/ instruct_fetch=true, load\/store=false$/;"	l
fetchBytes	src/main/scala/tile/Core.scala	/^  def fetchBytes: Int = fetchWidth * instBytes$/;"	m
fetchBytes	src/main/scala/tile/Core.scala	/^  val fetchBytes = coreParams.fetchBytes$/;"	l
fetchWidth	src/main/scala/rocket/RocketCore.scala	/^  val fetchWidth: Int = if (useCompressed) 2 else 1$/;"	l
fetchWidth	src/main/scala/tile/Core.scala	/^  val fetchWidth = coreParams.fetchWidth$/;"	l
fetchWidth	src/main/scala/tile/Core.scala	/^  val fetchWidth: Int$/;"	l
fetch_access	src/main/scala/rocket/Instructions.scala	/^  val fetch_access = 0x1$/;"	l
fetch_bubble_likely	src/main/scala/rocket/Frontend.scala	/^      val fetch_bubble_likely = !fq.io.mask(1)$/;"	l
fetch_guest_page_fault	src/main/scala/rocket/Instructions.scala	/^  val fetch_guest_page_fault = 0x14$/;"	l
fetch_page_fault	src/main/scala/rocket/Instructions.scala	/^  val fetch_page_fault = 0xc$/;"	l
fflags	src/main/scala/rocket/Instructions.scala	/^  val fflags = 0x1$/;"	l
field	src/main/scala/amba/axi4/IdIndexer.scala	/^      val field = if (bits > 0) Seq(AXI4ExtraIdField(bits)) else Nil$/;"	l
field	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    def field(bits: Int, reg: UInt, desc: RegFieldDesc, lock: Bool = l(0)) =$/;"	m
field	src/main/scala/regmapper/Test.scala	/^      val field = UInt(width = bits)$/;"	l
fields	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val fields = AXI4RRIdField(ar.bits.params.idBits) +: ar.bits.params.echoFields$/;"	l
fields	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  def fields(blockAddress: Bool, initial: PMPInitialValue): Seq[RegField] = {$/;"	m
fields	src/main/scala/tilelink/RegisterRouter.scala	/^    val fields = TLRegisterRouterExtraField(edge.bundle.sourceBits, edge.bundle.sizeBits) +: a.bits.params.echoFields$/;"	l
fifoId	src/main/scala/tilelink/AtomicAutomata.scala	/^    val fifoId  = UInt(width = log2Up(params.domainsNeedingHelp))$/;"	l
fifoId	src/main/scala/tilelink/Fragmenter.scala	/^        val fifoId = managers(0).fifoId$/;"	l
fifoId	src/main/scala/tilelink/Parameters.scala	/^  val fifoId:             Option[Int],$/;"	l
fifoIdFactory	src/main/scala/tilelink/AddressAdjuster.scala	/^      val fifoIdFactory = TLXbar.relabeler()$/;"	l
fifoIdFactory	src/main/scala/tilelink/Jbar.scala	/^      val fifoIdFactory = TLXbar.relabeler()$/;"	l
fifoIdFactory	src/main/scala/tilelink/Xbar.scala	/^      val fifoIdFactory = TLXbar.relabeler()$/;"	l
fifoIdMapper	src/main/scala/tilelink/AddressAdjuster.scala	/^        val fifoIdMapper = fifoIdFactory()$/;"	l
fifoIdMapper	src/main/scala/tilelink/Jbar.scala	/^          val fifoIdMapper = fifoIdFactory()$/;"	l
fifoIdMapper	src/main/scala/tilelink/Xbar.scala	/^          val fifoIdMapper = fifoIdFactory()$/;"	l
fifoMap	src/main/scala/tilelink/Xbar.scala	/^      val fifoMap = scala.collection.mutable.HashMap.empty[Int, Int]$/;"	l
file	src/main/resources/csrc/verilator.h	/^  FILE* file;$/;"	m	class:VerilatedVcdFILE
file	src/main/scala/linting/rule/package.scala	/^      val file = i.info.serialize.split(' ').head$/;"	l
fileName	src/main/scala/stage/phases/GenerateFirrtlAnnos.scala	/^    val fileName = s"${view[RocketChipOptions](annotations).longName.get}.anno.json"$/;"	l
fileName	src/main/scala/stage/phases/GenerateROMs.scala	/^    val fileName = s"${view[RocketChipOptions](annotations).longName.get}.rom.conf"$/;"	l
fileName	src/main/scala/stage/phases/GenerateTestSuiteMakefrags.scala	/^    val fileName = s"${view[RocketChipOptions](annotations).longName.get}.d"$/;"	l
files	src/main/scala/util/GeneratorUtils.scala	/^  var files: Seq[(String, () => String)] = Nil$/;"	l
fillLow	src/main/scala/amba/axi4/Fragmenter.scala	/^        val fillLow  = rightOR(len) >> 1   \/\/ set   all bits in positions <  a set     bit$/;"	l
fillN	src/main/scala/diplomacy/BundleBridge.scala	/^  def fillN[T <: Data](registered: Boolean)(x: T, n: Int): Seq[T] = Seq.fill(n) {$/;"	m
filter	src/main/scala/amba/axi4/Xbar.scala	/^  def filter(i: Int) = TLFilter.mSelectIntersect(AddressSet(i * masterBandSize, ~BigInt(slaveSize - masterBandSize)))$/;"	m
filter	src/main/scala/subsystem/Ports.scala	/^      val filter = AddressSet(channel * mbus.blockBytes, ~((nMemoryChannels-1) * mbus.blockBytes))$/;"	l
filter	src/main/scala/tilelink/Arbiter.scala	/^    val filter = Cat(valid & ~mask, valid)$/;"	l
filter	src/main/scala/tilelink/Broadcast.scala	/^      val filter = Module(params.filterFactory(ProbeFilterParams($/;"	l
filter	src/main/scala/tilelink/Filter.scala	/^    val filter = LazyModule(new TLFilter(mfilter, cfilter))$/;"	l
filter	src/main/scala/tilelink/Xbar.scala	/^    def filter[T](data: Seq[T], mask: Seq[Boolean]) = (data zip mask).filter(_._2).map(_._1)$/;"	m
filterCollectDeep	src/main/scala/aop/Select.scala	/^  def filterCollectDeep[T](lmod: LazyModule)(filter: LazyModule => Boolean)(collect: PartialFunction[LazyModule, T]): Iterable[T] = {$/;"	m
filtered	src/main/scala/amba/axi4/Filter.scala	/^    val filtered = s.address.map(_.intersect(select)).flatten$/;"	l
filtered	src/main/scala/amba/axi4/Xbar.scala	/^    val filtered = Wire(Vec(select.size, input))$/;"	l
filtered	src/main/scala/amba/axis/Xbar.scala	/^    val filtered = Wire(Vec(select.size, chiselTypeOf(input)))$/;"	l
filtered	src/main/scala/tilelink/Filter.scala	/^    val filtered = m.address.filterNot(containedBy.contains(_))$/;"	l
filtered	src/main/scala/tilelink/Filter.scala	/^    val filtered = m.address.flatMap(_.subtract(except))$/;"	l
filtered	src/main/scala/tilelink/Filter.scala	/^    val filtered = m.address.map(_.intersect(select)).flatten$/;"	l
filtered	src/main/scala/tilelink/Xbar.scala	/^    val filtered = Wire(Vec(select.size, chiselTypeOf(input)))$/;"	l
finalNameStrings	src/main/scala/amba/axi4/IdIndexer.scala	/^      val finalNameStrings = names.map { n => if (n.isEmpty) "(unused)" else n.toList.mkString(", ") }$/;"	l
finalNames	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val finalNames = state.circuit.modules.map {$/;"	l
final_ae_array	src/main/scala/rocket/TLB.scala	/^  val final_ae_array = Cat(false.B, entries.map(_.ae_final).asUInt)$/;"	l
find	src/main/scala/tilelink/Fragmenter.scala	/^        val find = manager.findFast(edgeIn.address(in_a.bits))$/;"	l
find	src/main/scala/tilelink/Parameters.scala	/^  def find(address: BigInt) = slaves.find(_.address.exists(_.contains(address)))$/;"	m
find	src/main/scala/tilelink/Parameters.scala	/^  def find(id: Int) = masters.find(_.sourceId.contains(id))$/;"	m
find	src/main/scala/tilelink/Parameters.scala	/^  def find(id: UInt) = Vec(masters.map(_.sourceId.contains(id)))$/;"	m
findFast	src/main/scala/tilelink/Parameters.scala	/^  def findFast(address: UInt) = {$/;"	m
findFifoIdFast	src/main/scala/tilelink/Parameters.scala	/^  def findFifoIdFast(address: UInt) = fastProperty(address, _.fifoId.map(_+1).getOrElse(0), (i:Int) => UInt(i))$/;"	m
findMax	src/main/scala/devices/tilelink/Plic.scala	/^  def findMax(x: Seq[UInt]): (UInt, UInt) = {$/;"	m
findSafe	src/main/scala/tilelink/Parameters.scala	/^  def findSafe(address: UInt) = Vec(slaves.map(_.address.map(_.contains(address)).reduce(_ || _)))$/;"	m
findTreeViolation	src/main/scala/tilelink/Parameters.scala	/^  def findTreeViolation() = nodePath.find {$/;"	m
findTreeViolation	src/main/scala/tilelink/Parameters.scala	/^  def findTreeViolation() = slaves.flatMap(_.findTreeViolation()).headOption$/;"	m
findex	src/main/scala/regmapper/RegMapper.scala	/^    val findex = front.bits.index & maskMatch$/;"	l
finish_request	src/main/resources/vsrc/TestDriver.v	/^  reg finish_request = 1'b0;$/;"	r
finished	src/main/scala/amba/ahb/Test.scala	/^      val finished = Bool(OUTPUT)$/;"	l
finished	src/main/scala/amba/axi4/Test.scala	/^      val finished = Bool(OUTPUT)$/;"	l
finished	src/main/scala/groundtest/TraceGen.scala	/^    val finished = Bool(OUTPUT)$/;"	l
finished	src/main/scala/tile/LazyRoCC.scala	/^  val finished = Reg(Bool())$/;"	l
finished	src/main/scala/tilelink/Fuzzer.scala	/^      val finished = Bool(OUTPUT)$/;"	l
finished	src/main/scala/tilelink/RationalCrossing.scala	/^      val finished = Bool(OUTPUT)$/;"	l
finished	src/main/scala/unittest/TestGenerator.scala	/^    val finished = IO(Bool(OUTPUT))$/;"	l
finished	src/main/scala/unittest/UnitTest.scala	/^    val finished = Bool(OUTPUT)$/;"	l
finished	src/main/scala/unittest/UnitTest.scala	/^  val finished = Bool(OUTPUT)$/;"	l
finished	src/main/scala/unittest/package.scala	/^    def finished = seq.map(_.module.finished).foldLeft(Bool(true))(_ && _)$/;"	m
finite	src/main/scala/diplomacy/Parameters.scala	/^  def finite = mask >= 0$/;"	m
fire	src/main/scala/rocket/NBDcache.scala	/^  val fire = active && data_req_cnt < UInt(refillCycles)$/;"	l
fire	src/main/scala/util/Misc.scala	/^  def fire() = {$/;"	m
fire	src/main/scala/util/Misc.scala	/^  def fire(exclude: Bool, includes: Bool*) = {$/;"	m
fire	src/main/scala/util/ReadyValidCancel.scala	/^  def fire():      Bool = ready && validQual()$/;"	m
first	src/main/scala/tilelink/Arbiter.scala	/^  val first = lastWinner > numSources.U$/;"	l
first	src/main/scala/tilelink/Edges.scala	/^    val first = counter === UInt(0)$/;"	l
first	src/main/scala/tilelink/Edges.scala	/^  def first(bits: TLChannel, fire: Bool): Bool = firstlastHelper(bits, fire)._1$/;"	m
first	src/main/scala/tilelink/Edges.scala	/^  def first(x: DecoupledIO[TLChannel]): Bool = first(x.bits, x.fire())$/;"	m
first	src/main/scala/tilelink/Edges.scala	/^  def first(x: ValidIO[TLChannel]): Bool = first(x.bits, x.valid)$/;"	m
first	src/main/scala/tilelink/ToAHB.scala	/^  val first  = Bool()$/;"	l
first	src/main/scala/tilelink/WidthWidget.scala	/^      val first  = count === 0.U$/;"	l
first	src/main/scala/tilelink/WidthWidget.scala	/^      val first = count === 0.U$/;"	l
firstCtr	src/main/scala/rocket/CSR.scala	/^  val firstCtr = CSRs.cycle$/;"	l
firstCtrH	src/main/scala/rocket/CSR.scala	/^  val firstCtrH = CSRs.cycleh$/;"	l
firstEnable	src/main/scala/devices/tilelink/Plic.scala	/^    val firstEnable = nDevices min 7$/;"	l
firstHPC	src/main/scala/rocket/CSR.scala	/^  val firstHPC = CSRs.hpmcounter3$/;"	l
firstHPCH	src/main/scala/rocket/CSR.scala	/^  val firstHPCH = CSRs.hpmcounter3h$/;"	l
firstHPE	src/main/scala/rocket/CSR.scala	/^  val firstHPE = CSRs.mhpmevent3$/;"	l
firstHPM	src/main/scala/rocket/CSR.scala	/^  val firstHPM = 3$/;"	l
firstMHPC	src/main/scala/rocket/CSR.scala	/^  val firstMHPC = CSRs.mhpmcounter3$/;"	l
firstMHPCH	src/main/scala/rocket/CSR.scala	/^  val firstMHPCH = CSRs.mhpmcounter3h$/;"	l
firstMMIO	src/main/scala/rocket/HellaCache.scala	/^  def firstMMIO = (cacheClientParameters.map(_.sourceId.end) :+ 0).max$/;"	m
firstStableNames	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^    val firstStableNames = firstState.annotations.collect {$/;"	l
firstState	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^    val firstState = renameNames(testCases.head)$/;"	l
firstUnstableNames	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^    val firstUnstableNames = firstState.annotations.collect {$/;"	l
first_zero	src/main/scala/tile/LazyRoCC.scala	/^  val first_zero = PriorityEncoder(zero_match)$/;"	l
firstlast	src/main/scala/tilelink/Edges.scala	/^  def firstlast(bits: TLChannel, fire: Bool): (Bool, Bool, Bool) = {$/;"	m
firstlast	src/main/scala/tilelink/Edges.scala	/^  def firstlast(x: DecoupledIO[TLChannel]): (Bool, Bool, Bool) = firstlast(x.bits, x.fire())$/;"	m
firstlast	src/main/scala/tilelink/Edges.scala	/^  def firstlast(x: ValidIO[TLChannel]): (Bool, Bool, Bool) = firstlast(x.bits, x.valid)$/;"	m
firstlastHelper	src/main/scala/tilelink/Edges.scala	/^  def firstlastHelper(bits: TLChannel, fire: Bool): (Bool, Bool, Bool, UInt) = {$/;"	m
fix	src/main/scala/tilelink/SRAM.scala	/^        val fix = d_corrected(8*(i+1)-1, 8*i) \/\/ safe to use, because D-stage write-back always wins arbitration$/;"	l
fixMap	src/main/scala/tilelink/FIFOFixer.scala	/^    val fixMap = seq.map { m => m.fifoId match {$/;"	l
fix_fast_sink	src/main/scala/tilelink/RationalCrossing.scala	/^  val fix_fast_sink   = LazyModule(new TLRAMRationalCrossingSink(SlowToFast))$/;"	l
fix_fast_source	src/main/scala/tilelink/RationalCrossing.scala	/^  val fix_fast_source = LazyModule(new TLRAMRationalCrossingSource("RationalCrossing fast", txns))$/;"	l
fix_slow_sink	src/main/scala/tilelink/RationalCrossing.scala	/^  val fix_slow_sink   = LazyModule(new TLRAMRationalCrossingSink(FastToSlow))$/;"	l
fix_slow_source	src/main/scala/tilelink/RationalCrossing.scala	/^  val fix_slow_source = LazyModule(new TLRAMRationalCrossingSource("RationalCrossing slow", txns))$/;"	l
fixed	src/main/scala/amba/axi4/Fragmenter.scala	/^        val fixed = a.bits.burst === AXI4Parameters.BURST_FIXED$/;"	l
fixedClockNode	src/main/scala/tilelink/BusWrapper.scala	/^  val fixedClockNode = FixedClockBroadcast(fixedClockOpt) \/\/ device clocks attach here$/;"	l
fixedClockOpt	src/main/scala/tilelink/BusWrapper.scala	/^  def fixedClockOpt = dtsFrequency.map(f => ClockParameters(freqMHz = f.toDouble \/ 1000000.0))$/;"	m
fixedClockResources	src/main/scala/prci/ClockGroup.scala	/^  def fixedClockResources(name: String, prefix: String = "soc\/"): Seq[Option[FixedClockResource]] = Seq(fixedClockOpt.map(t => new FixedClockResource(name, t.freqMHz, prefix)))$/;"	m
fixedClockResources	src/main/scala/prci/ClockNodes.scala	/^  def fixedClockResources(name: String, prefix: String = "soc\/"): Seq[Option[FixedClockResource]] = portParams.map { p =>$/;"	m
fixedLocalManagers	src/main/scala/tilelink/AddressAdjuster.scala	/^      val fixedLocalManagers       = local.managers.filter(m => !isDeviceContainedBy(Seq(params.region), m))$/;"	l
fixedLocalManagers	src/main/scala/tilelink/AddressAdjuster.scala	/^      val fixedLocalManagers       = localEdge.manager.managers.filter(m => !isDeviceContainedBy(Seq(params.region), m))$/;"	l
fixedRemoteManagers	src/main/scala/tilelink/AddressAdjuster.scala	/^      val fixedRemoteManagers = remote.managers.flatMap { m =>$/;"	l
fixer	src/main/scala/tilelink/FIFOFixer.scala	/^    val fixer = LazyModule(new TLFIFOFixer(policy))$/;"	l
fixer_node	src/main/scala/subsystem/PeripheryBus.scala	/^    val fixer_node = replicator.map(fixer.node :*= _.node).getOrElse(fixer.node)$/;"	l
flagBundle	src/main/scala/devices/debug/Debug.scala	/^    class flagBundle extends Bundle {$/;"	c
flags	src/main/scala/devices/debug/Debug.scala	/^    val flags = WireInit(VecInit(Seq.fill(1 << selectedHartReg.getWidth) {0.U.asTypeOf(new flagBundle())} ))$/;"	l
flags	src/main/scala/tilelink/Parameters.scala	/^    def flags = Vector($/;"	m
flat	src/main/scala/regmapper/RegMapper.scala	/^    val flat = wordmap.toList.map { case (word, fields) =>$/;"	l
flatAddresses	src/main/scala/tilelink/Broadcast.scala	/^      val flatAddresses = AddressSet.unify(edgeOut.manager.managers.flatMap(_.address))$/;"	l
flatDomains	src/main/scala/tilelink/FIFOFixer.scala	/^    val flatDomains = Set(flatManagers.flatMap(_.fifoId):_*) \/\/ => ID 0$/;"	l
flatMap	src/main/scala/tilelink/FIFOFixer.scala	/^    val flatMap = flatDomains.map { x => (x, 0) }.toMap$/;"	l
flatSources	src/main/scala/devices/tilelink/Plic.scala	/^  lazy val flatSources = (sources zip sources.map(_.num).scanLeft(0)(_+_).init).map {$/;"	l
fld	src/main/scala/rocket/RVC.scala	/^    def fld = inst(Cat(ldImm, rs1p, 3.U(3.W), rs2p, 0x07.U(7.W)), rs2p, rs1p, rs2p)$/;"	m
fldsp	src/main/scala/rocket/RVC.scala	/^    def fldsp = inst(Cat(ldspImm, sp, 3.U(3.W), rd, 0x07.U(7.W)), rd, sp, rs2)$/;"	m
flexSet	src/main/scala/diplomacy/Nodes.scala	/^    val flexSet = DFS(this, Map()).values$/;"	l
flight	src/main/scala/amba/axi4/Xbar.scala	/^              val flight = legalFlight min maxFlightPerId$/;"	l
flight	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val flight = RegInit(UInt(0, width = log2Ceil(edgeIn.client.endSourceId+1+1))) \/\/ +1 for inclusive range +1 for a_first vs. d_last$/;"	l
flight	src/main/scala/tilelink/AddressAdjuster.scala	/^        val flight = RegInit(VecInit(Seq.fill(parentEdge.client.endSourceId) { false.B }))$/;"	l
flight	src/main/scala/tilelink/Edges.scala	/^    val flight = RegInit(UInt(0, width = log2Ceil(3*client.endSourceId+1)))$/;"	l
flight	src/main/scala/tilelink/FIFOFixer.scala	/^      val flight = RegInit(Vec.fill(edgeIn.client.endSourceId) { Bool(false) })$/;"	l
flight	src/main/scala/tilelink/PatternPusher.scala	/^    val flight = RegInit(Bool(false))$/;"	l
flight	src/main/scala/tilelink/RAMModel.scala	/^      val flight = Reg(Vec(endSourceId, new TLRAMModel.FlightMonitor(params)))$/;"	l
flip	src/main/scala/formal/FormalUtils.scala	/^  def flip: MonitorDirection$/;"	m
flip	src/main/scala/util/CreditedIO.scala	/^  def flip: CreditedDelay = CreditedDelay(credit, debit)$/;"	m
flip	src/main/scala/util/RationalCrossing.scala	/^  def flip = FastToSlow$/;"	m
flip	src/main/scala/util/RationalCrossing.scala	/^  def flip = Flexible$/;"	m
flip	src/main/scala/util/RationalCrossing.scala	/^  def flip = SlowToFast$/;"	m
flip	src/main/scala/util/RationalCrossing.scala	/^  def flip = Symmetric$/;"	m
flip	src/main/scala/util/RationalCrossing.scala	/^  def flip: RationalDirection$/;"	m
flipRendering	src/main/scala/tilelink/BusWrapper.scala	/^     val flipRendering: Boolean)$/;"	l
flipped	src/main/scala/tilelink/AddressAdjuster.scala	/^      val flipped = m.address.map(a => AddressSet((a.base ^ b) & ~a.mask, a.mask)).sorted$/;"	l
floatTypes	src/main/scala/tile/FPU.scala	/^  val floatTypes = FType.all.filter(t => minFLen <= t.ieeeWidth && t.ieeeWidth <= fLen)$/;"	l
flow	src/main/scala/diplomacy/Parameters.scala	/^  val flow    = BufferParams(1, true, false)$/;"	l
flush	src/main/scala/rocket/BTB.scala	/^    val flush = Bool().asInput$/;"	l
flushBTB	src/main/scala/tile/CustomCSRs.scala	/^  def flushBTB = getOrElse(bpmCSR, _.wen, false.B)$/;"	m
flushCounter	src/main/scala/rocket/DCache.scala	/^  val flushCounter = Reg(init=UInt(nSets * (nWays-1), log2Ceil(nSets * nWays)))$/;"	l
flushCounterNext	src/main/scala/rocket/DCache.scala	/^  val flushCounterNext = flushCounter +& 1$/;"	l
flushCounterWrap	src/main/scala/rocket/DCache.scala	/^  val flushCounterWrap = flushCounterNext(log2Ceil(nSets)-1, 0)$/;"	l
flushDone	src/main/scala/rocket/DCache.scala	/^  val flushDone = (flushCounterNext >> log2Ceil(nSets)) === nWays$/;"	l
flushOnFenceI	src/main/scala/rocket/HellaCache.scala	/^  def flushOnFenceI = cfg.scratch.isEmpty && !node.edges.out(0).manager.managers.forall(m => !m.supportsAcquireB || !m.executable || m.regionType >= RegionType.TRACKED || m.regionType <= RegionType.IDEMPOTENT)$/;"	m
flush_icache	src/main/scala/rocket/Frontend.scala	/^  val flush_icache = Bool(OUTPUT)$/;"	l
flushed	src/main/scala/rocket/DCache.scala	/^  val flushed = Reg(init=Bool(true))$/;"	l
flushing	src/main/scala/rocket/DCache.scala	/^  val flushing = Reg(init=Bool(false))$/;"	l
flushing_req	src/main/scala/rocket/DCache.scala	/^  val flushing_req = Reg(s1_req)$/;"	l
flw	src/main/scala/rocket/RVC.scala	/^    def flw = {$/;"	m
flwsp	src/main/scala/rocket/RVC.scala	/^    def flwsp = {$/;"	m
fma	src/main/scala/tile/FPU.scala	/^  val fma = Bool()$/;"	l
fma	src/main/scala/tile/FPU.scala	/^  val fma = Module(new MulAddRecFNPipe((latency-1) min 2, t.exp, t.sig))$/;"	l
fmaCmd	src/main/scala/tile/FPU.scala	/^  val fmaCmd = Bits(width = 2)$/;"	l
fmt	src/main/scala/tile/FPU.scala	/^  val fmt = Bits(width = 2)$/;"	l
fn	src/main/scala/rocket/ALU.scala	/^    val fn = Bits(INPUT, SZ_ALU_FN)$/;"	l
fn	src/main/scala/rocket/Multiplier.scala	/^  val fn = Bits(SZ_ALU_FN.W)$/;"	l
fname	src/main/scala/regmapper/RegMapper.scala	/^      val fname = field.desc.map{_.name}.getOrElse("")$/;"	l
foldOutSelect	src/main/scala/jtag/JtagTap.scala	/^    def foldOutSelect(res: WhenContext, x: (Chain, Bool)): WhenContext = {$/;"	m
forNonSynchronous	src/main/scala/prci/IOHelper.scala	/^  def forNonSynchronous[T <: Data](gen: => T, x: ClockCrossingType, name: String): Option[ModuleValue[T]] = {$/;"	m
forNonSynchronous	src/main/scala/prci/IOHelper.scala	/^  def forNonSynchronous[T <: Data](gen: => T, xs: Seq[ClockCrossingType], prefix: String): Seq[Option[ModuleValue[T]]] = {$/;"	m
forceLocal	src/main/scala/tilelink/AddressAdjuster.scala	/^    val forceLocal: Seq[AddressSet] = Nil, \/\/ ensure special devices (e.g. debug) remain reacheable at id=0 even if in params.region$/;"	l
forceSeparateClockReset	src/main/scala/subsystem/HasTiles.scala	/^  def forceSeparateClockReset: Boolean$/;"	m
forceSeparateClockReset	src/main/scala/subsystem/RocketSubsystem.scala	/^  def forceSeparateClockReset: Boolean = false$/;"	m
force_taken	src/main/scala/rocket/Frontend.scala	/^    val force_taken = io.ptw.customCSRs.bpmStatic$/;"	l
formCacheReq	src/main/scala/rocket/ScratchpadSlavePort.scala	/^    def formCacheReq(a: TLBundleA) = {$/;"	m
formEPC	src/main/scala/rocket/CSR.scala	/^  def formEPC(x: UInt) = ~(~x | (if (usingCompressed) 1.U else 3.U))$/;"	m
formFS	src/main/scala/rocket/CSR.scala	/^  def formFS(fs: UInt) = if (coreParams.haveFSDirty) fs else Fill(2, fs.orR)$/;"	m
formTVec	src/main/scala/rocket/CSR.scala	/^  def formTVec(x: UInt) = x andNot Mux(x(0), ((((BigInt(1) << mtvecInterruptAlign) - 1) << mtvecBaseAlign) | 2).U, 2)$/;"	m
formVS	src/main/scala/rocket/CSR.scala	/^  def formVS(vs: UInt) = if (usingVector) vs else 0.U$/;"	m
formatEdge	src/main/scala/diplomacy/Nodes.scala	/^  def formatEdge: String$/;"	m
formatEdge	src/main/scala/tilelink/Parameters.scala	/^  def formatEdge = client.infoString + "\\n" + manager.infoString$/;"	m
formatEdge	src/main/scala/tilelink/Parameters.scala	/^  def formatEdge = master.infoString + "\\n" + slave.infoString$/;"	m
formatNode	src/main/scala/diplomacy/Nodes.scala	/^  def formatNode: String = ""$/;"	m
formats	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^    implicit val formats = Serialization.formats(NoTypeHints) + new OMEnumSerializer$/;"	l
forward	src/main/scala/diplomacy/LazyModule.scala	/^    val forward = allDangles.filter(d => !done(d.source))$/;"	l
forward	src/main/scala/tilelink/Map.scala	/^      def forward(x: UInt) =$/;"	m
fp	src/main/scala/rocket/IDecode.scala	/^  val fp = Bool()$/;"	l
fpArb	src/main/scala/tile/LazyRoCC.scala	/^        val fpArb = Module(new InOrderArbiter(new FPInput()(outer.p), new FPResult()(outer.p), nFPUPorts))$/;"	l
fp_csr	src/main/scala/rocket/CSR.scala	/^  val fp_csr = Bool(OUTPUT)$/;"	l
fp_csrs	src/main/scala/rocket/CSR.scala	/^  val fp_csrs = LinkedHashMap[Int,Bits]() ++$/;"	l
fp_data_hazard_ex	src/main/scala/rocket/RocketCore.scala	/^  val fp_data_hazard_ex = ex_ctrl.wfd && checkHazards(fp_hazard_targets, _ === ex_waddr)$/;"	l
fp_data_hazard_mem	src/main/scala/rocket/RocketCore.scala	/^  val fp_data_hazard_mem = mem_ctrl.wfd && checkHazards(fp_hazard_targets, _ === mem_waddr)$/;"	l
fp_data_hazard_wb	src/main/scala/rocket/RocketCore.scala	/^  val fp_data_hazard_wb = wb_ctrl.wfd && checkHazards(fp_hazard_targets, _ === wb_waddr)$/;"	l
fp_decoder	src/main/scala/tile/FPU.scala	/^  val fp_decoder = Module(new FPUDecoder)$/;"	l
fp_hazard_targets	src/main/scala/rocket/RocketCore.scala	/^  val fp_hazard_targets = Seq((io.fpu.dec.ren1, id_raddr1),$/;"	l
fp_illegal	src/main/scala/rocket/CSR.scala	/^  val fp_illegal = Bool(OUTPUT)$/;"	l
fp_rocc_ios	src/main/scala/tile/LazyRoCC.scala	/^        val fp_rocc_ios = outer.roccs.filter(_.usesFPU).map(_.module.io)$/;"	l
fp_sboard	src/main/scala/rocket/RocketCore.scala	/^    val fp_sboard = new Scoreboard(32)$/;"	l
fpiu	src/main/scala/tile/FPU.scala	/^  val fpiu = Module(new FPToInt)$/;"	l
fpmu	src/main/scala/tile/FPU.scala	/^  val fpmu = Module(new FPToFP(2))$/;"	l
fpu	src/main/scala/tile/Core.scala	/^    val fpu = new FPUCoreIO().flip$/;"	l
fpu	src/main/scala/tile/Core.scala	/^  val fpu: Option[FPUParams]$/;"	l
fpuImpl	src/main/scala/tile/FPU.scala	/^  val fpuImpl = withClock (gated_clock) { new FPUImpl }$/;"	l
fpuOpt	src/main/scala/tile/RocketTile.scala	/^  val fpuOpt = outer.tileParams.core.fpu.map(params => Module(new FPU(params)(outer.p)))$/;"	l
fpu_kill_mem	src/main/scala/rocket/RocketCore.scala	/^  val fpu_kill_mem = mem_reg_valid && mem_ctrl.fp && io.fpu.nack_mem$/;"	l
fpu_req	src/main/scala/tile/LazyRoCC.scala	/^  val fpu_req = Decoupled(new FPInput)$/;"	l
fpu_resp	src/main/scala/tile/LazyRoCC.scala	/^  val fpu_resp = Flipped(Decoupled(new FPResult))$/;"	l
fq	src/main/scala/rocket/Frontend.scala	/^  val fq = withReset(reset || io.cpu.req.valid) { Module(new ShiftQueue(new FrontendResp, 5, flow = true)) }$/;"	l
fq	src/main/scala/util/HellaQueue.scala	/^  val fq = Module(new HellaFlowQueue(entries)(data))$/;"	l
fractIn	src/main/scala/tile/FPU.scala	/^    val fractIn = x(sig - 2, 0)$/;"	l
fractOut	src/main/scala/tile/FPU.scala	/^    val fractOut = fractIn << to.sig >> sig$/;"	l
fragment	src/main/scala/amba/axi4/Fragmenter.scala	/^      def fragment(a: IrrevocableIO[AXI4BundleA], supportedSizes1: Seq[Int]): (IrrevocableIO[AXI4BundleA], Bool, UInt) = {$/;"	m
fragmentBits	src/main/scala/tilelink/Fragmenter.scala	/^  val fragmentBits = log2Ceil(maxSize \/ minSize)$/;"	l
fragmented_superpage	src/main/scala/rocket/PTW.scala	/^  val fragmented_superpage = Bool()$/;"	l
fragmented_superpage	src/main/scala/rocket/TLB.scala	/^  val fragmented_superpage = Bool()$/;"	l
fragmenter	src/main/scala/tilelink/Fragmenter.scala	/^      val fragmenter = LazyModule(new TLFragmenter(minSize, maxSize, alwaysMin, earlyAck, holdFirstDeny))$/;"	l
fragments	src/main/scala/diplomacy/Parameters.scala	/^    val fragments = mask & ~(size-1)$/;"	l
free	src/main/scala/tilelink/Fuzzer.scala	/^    val free = Decoupled(UInt(width = w)).flip$/;"	l
free	src/main/scala/tilelink/SourceShrinker.scala	/^        val free = d_last && in.d.fire()$/;"	l
free	src/main/scala/util/IDPool.scala	/^    val free = Flipped(Valid(UInt(idWidth.W)))$/;"	l
free	src/main/scala/util/LanePositionedQueue.scala	/^  val free = if (args.free) Some(Flipped(Decoupled(UInt(depthBitsU.W)))) else None$/;"	l
freeTracker	src/main/scala/tilelink/Broadcast.scala	/^      val freeTracker = freeTrackers.orR()$/;"	l
freeTrackers	src/main/scala/tilelink/Broadcast.scala	/^      val freeTrackers = VecInit(trackers.map { t => t.idle }).asUInt$/;"	l
free_id	src/main/scala/tilelink/SourceShrinker.scala	/^        val free_id = Mux(free, UIntToOH(out.d.bits.source), UInt(0))$/;"	l
free_sdq	src/main/scala/rocket/NBDcache.scala	/^  val free_sdq = io.replay.fire() && isWrite(io.replay.bits.cmd)$/;"	l
freechips	src/main/scala/package.scala	/^package freechips$/;"	p
freechips.rocketchip	src/main/scala/amba/package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip	src/main/scala/diplomacy/package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip	src/main/scala/groundtest/Package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip	src/main/scala/interrupts/package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip	src/main/scala/jtag/package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip	src/main/scala/prci/package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip	src/main/scala/rocket/package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip	src/main/scala/stage/package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip	src/main/scala/tilelink/package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip	src/main/scala/unittest/package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip	src/main/scala/util/package.scala	/^package freechips.rocketchip$/;"	p
freechips.rocketchip.amba	src/main/scala/amba/ahb/package.scala	/^package freechips.rocketchip.amba$/;"	p
freechips.rocketchip.amba	src/main/scala/amba/apb/package.scala	/^package freechips.rocketchip.amba$/;"	p
freechips.rocketchip.amba	src/main/scala/amba/axi4/package.scala	/^package freechips.rocketchip.amba$/;"	p
freechips.rocketchip.amba	src/main/scala/amba/axis/package.scala	/^package freechips.rocketchip.amba$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/AHBLite.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/Bundles.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/Monitor.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/Nodes.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/Parameters.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/Protocol.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/RegisterRouter.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/SRAM.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/Test.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/ToTL.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.ahb	src/main/scala/amba/ahb/Xbar.scala	/^package freechips.rocketchip.amba.ahb$/;"	p
freechips.rocketchip.amba.apb	src/main/scala/amba/apb/Bundles.scala	/^package freechips.rocketchip.amba.apb$/;"	p
freechips.rocketchip.amba.apb	src/main/scala/amba/apb/Monitor.scala	/^package freechips.rocketchip.amba.apb$/;"	p
freechips.rocketchip.amba.apb	src/main/scala/amba/apb/Nodes.scala	/^package freechips.rocketchip.amba.apb$/;"	p
freechips.rocketchip.amba.apb	src/main/scala/amba/apb/Parameters.scala	/^package freechips.rocketchip.amba.apb$/;"	p
freechips.rocketchip.amba.apb	src/main/scala/amba/apb/Protocol.scala	/^package freechips.rocketchip.amba.apb$/;"	p
freechips.rocketchip.amba.apb	src/main/scala/amba/apb/RegisterRouter.scala	/^package freechips.rocketchip.amba.apb$/;"	p
freechips.rocketchip.amba.apb	src/main/scala/amba/apb/SRAM.scala	/^package freechips.rocketchip.amba.apb$/;"	p
freechips.rocketchip.amba.apb	src/main/scala/amba/apb/Test.scala	/^package freechips.rocketchip.amba.apb$/;"	p
freechips.rocketchip.amba.apb	src/main/scala/amba/apb/ToTL.scala	/^package freechips.rocketchip.amba.apb$/;"	p
freechips.rocketchip.amba.apb	src/main/scala/amba/apb/Xbar.scala	/^package freechips.rocketchip.amba.apb$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/AsyncCrossing.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Buffer.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Bundles.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Credited.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/CrossingHelper.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Deinterleaver.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Delayer.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Filter.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Fragmenter.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/IdIndexer.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Monitor.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Nodes.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Parameters.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Protocol.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/RegisterRouter.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/SRAM.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Test.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/ToTL.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/UserYanker.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axi4	src/main/scala/amba/axi4/Xbar.scala	/^package freechips.rocketchip.amba.axi4$/;"	p
freechips.rocketchip.amba.axis	src/main/scala/amba/axis/Buffer.scala	/^package freechips.rocketchip.amba.axis$/;"	p
freechips.rocketchip.amba.axis	src/main/scala/amba/axis/Bundles.scala	/^package freechips.rocketchip.amba.axis$/;"	p
freechips.rocketchip.amba.axis	src/main/scala/amba/axis/Nodes.scala	/^package freechips.rocketchip.amba.axis$/;"	p
freechips.rocketchip.amba.axis	src/main/scala/amba/axis/Parameters.scala	/^package freechips.rocketchip.amba.axis$/;"	p
freechips.rocketchip.amba.axis	src/main/scala/amba/axis/Xbar.scala	/^package freechips.rocketchip.amba.axis$/;"	p
freechips.rocketchip.aop	src/main/scala/aop/Select.scala	/^package freechips.rocketchip.aop$/;"	p
freechips.rocketchip.aspects	src/main/scala/aspects/RenameModulesAspect.scala	/^package freechips.rocketchip.aspects$/;"	p
freechips.rocketchip.devices.debug	src/main/scala/devices/debug/APB.scala	/^package freechips.rocketchip.devices.debug$/;"	p
freechips.rocketchip.devices.debug	src/main/scala/devices/debug/Custom.scala	/^package freechips.rocketchip.devices.debug$/;"	p
freechips.rocketchip.devices.debug	src/main/scala/devices/debug/DMI.scala	/^package freechips.rocketchip.devices.debug$/;"	p
freechips.rocketchip.devices.debug	src/main/scala/devices/debug/Debug.scala	/^package freechips.rocketchip.devices.debug$/;"	p
freechips.rocketchip.devices.debug	src/main/scala/devices/debug/DebugRomContents.scala	/^package freechips.rocketchip.devices.debug$/;"	p
freechips.rocketchip.devices.debug	src/main/scala/devices/debug/DebugRomNonzeroContents.scala	/^package freechips.rocketchip.devices.debug$/;"	p
freechips.rocketchip.devices.debug	src/main/scala/devices/debug/DebugTransport.scala	/^package freechips.rocketchip.devices.debug$/;"	p
freechips.rocketchip.devices.debug	src/main/scala/devices/debug/Periphery.scala	/^package freechips.rocketchip.devices.debug$/;"	p
freechips.rocketchip.devices.debug	src/main/scala/devices/debug/abstract_commands.scala	/^package freechips.rocketchip.devices.debug$/;"	p
freechips.rocketchip.devices.debug	src/main/scala/devices/debug/dm_registers.scala	/^package freechips.rocketchip.devices.debug$/;"	p
freechips.rocketchip.devices.debug.systembusaccess	src/main/scala/devices/debug/SBA.scala	/^package freechips.rocketchip.devices.debug.systembusaccess$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/BootROM.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/BusBlocker.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/BusBypass.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/CLINT.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/ClockBlocker.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/Deadlock.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/DevNull.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/Error.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/MaskROM.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/MasterMux.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/Plic.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/TestRAM.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.devices.tilelink	src/main/scala/devices/tilelink/Zero.scala	/^package freechips.rocketchip.devices.tilelink$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/AddressDecoder.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/AddressRange.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/BundleBridge.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/ClockDomain.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/Clone.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/DeviceTree.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/FixedClockResource.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/JSON.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/LazyModule.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/Nodes.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/Parameters.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/Resources.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/SRAM.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/Unreachable.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomacy	src/main/scala/diplomacy/ValName.scala	/^package freechips.rocketchip.diplomacy$/;"	p
freechips.rocketchip.diplomaticobjectmodel	src/main/scala/diplomaticobjectmodel/ConstructOM.scala	/^package freechips.rocketchip.diplomaticobjectmodel$/;"	p
freechips.rocketchip.diplomaticobjectmodel	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^package freechips.rocketchip.diplomaticobjectmodel$/;"	p
freechips.rocketchip.diplomaticobjectmodel	src/main/scala/diplomaticobjectmodel/HasLogicalTreeNode.scala	/^package freechips.rocketchip.diplomaticobjectmodel$/;"	p
freechips.rocketchip.diplomaticobjectmodel.logicaltree	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^package freechips.rocketchip.diplomaticobjectmodel.logicaltree$/;"	p
freechips.rocketchip.diplomaticobjectmodel.logicaltree	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^package freechips.rocketchip.diplomaticobjectmodel.logicaltree$/;"	p
freechips.rocketchip.diplomaticobjectmodel.logicaltree	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^package freechips.rocketchip.diplomaticobjectmodel.logicaltree$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/CustomISAExtensions.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMBase.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMBranchPredictor.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMBusError.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMBusMemory.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMCLINT.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMCoreComplex.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMDevice.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMErrorDevice.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMFPU.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMInterrupts.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMMemory.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMMulDiv.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMPLIC.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMPMP.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMPerformanceMonitor.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMRegFieldAccessType.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMRegFieldRdAction.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMRegFieldWrType.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMRocketCore.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMSRAM.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMSpecification.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMTestHarness.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMUTLB.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.diplomaticobjectmodel.model	src/main/scala/diplomaticobjectmodel/model/OMZeroDevice.scala	/^package freechips.rocketchip.diplomaticobjectmodel.model$/;"	p
freechips.rocketchip.examples	src/main/scala/examples/ExampleDevice.scala	/^package freechips.rocketchip.examples$/;"	p
freechips.rocketchip.formal	src/main/scala/formal/FormalUtils.scala	/^package freechips.rocketchip.formal$/;"	p
freechips.rocketchip.groundtest	src/main/scala/groundtest/Configs.scala	/^package freechips.rocketchip.groundtest$/;"	p
freechips.rocketchip.groundtest	src/main/scala/groundtest/DummyPTW.scala	/^package freechips.rocketchip.groundtest$/;"	p
freechips.rocketchip.groundtest	src/main/scala/groundtest/Generator.scala	/^package freechips.rocketchip.groundtest$/;"	p
freechips.rocketchip.groundtest	src/main/scala/groundtest/GroundTestSubsystem.scala	/^package freechips.rocketchip.groundtest$/;"	p
freechips.rocketchip.groundtest	src/main/scala/groundtest/Status.scala	/^package freechips.rocketchip.groundtest$/;"	p
freechips.rocketchip.groundtest	src/main/scala/groundtest/TestHarness.scala	/^package freechips.rocketchip.groundtest$/;"	p
freechips.rocketchip.groundtest	src/main/scala/groundtest/Tile.scala	/^package freechips.rocketchip.groundtest$/;"	p
freechips.rocketchip.groundtest	src/main/scala/groundtest/TraceGen.scala	/^package freechips.rocketchip.groundtest$/;"	p
freechips.rocketchip.interrupts	src/main/scala/interrupts/BlockDuringReset.scala	/^package freechips.rocketchip.interrupts$/;"	p
freechips.rocketchip.interrupts	src/main/scala/interrupts/Bundles.scala	/^package freechips.rocketchip.interrupts$/;"	p
freechips.rocketchip.interrupts	src/main/scala/interrupts/Crossing.scala	/^package freechips.rocketchip.interrupts$/;"	p
freechips.rocketchip.interrupts	src/main/scala/interrupts/CrossingHelper.scala	/^package freechips.rocketchip.interrupts$/;"	p
freechips.rocketchip.interrupts	src/main/scala/interrupts/Nodes.scala	/^package freechips.rocketchip.interrupts$/;"	p
freechips.rocketchip.interrupts	src/main/scala/interrupts/NullIntSource.scala	/^package freechips.rocketchip.interrupts$/;"	p
freechips.rocketchip.interrupts	src/main/scala/interrupts/Parameters.scala	/^package freechips.rocketchip.interrupts$/;"	p
freechips.rocketchip.interrupts	src/main/scala/interrupts/RegisterRouter.scala	/^package freechips.rocketchip.interrupts$/;"	p
freechips.rocketchip.interrupts	src/main/scala/interrupts/Xbar.scala	/^package freechips.rocketchip.interrupts$/;"	p
freechips.rocketchip.jtag	src/main/scala/jtag/JtagShifter.scala	/^package freechips.rocketchip.jtag$/;"	p
freechips.rocketchip.jtag	src/main/scala/jtag/JtagStateMachine.scala	/^package freechips.rocketchip.jtag$/;"	p
freechips.rocketchip.jtag	src/main/scala/jtag/JtagTap.scala	/^package freechips.rocketchip.jtag$/;"	p
freechips.rocketchip.jtag	src/main/scala/jtag/JtagUtils.scala	/^package freechips.rocketchip.jtag$/;"	p
freechips.rocketchip.jtag	src/main/scala/jtag/Utils.scala	/^package freechips.rocketchip.jtag$/;"	p
freechips.rocketchip.linting	src/main/scala/linting/LintAnnotation.scala	/^package freechips.rocketchip.linting$/;"	p
freechips.rocketchip.linting	src/main/scala/linting/LintException.scala	/^package freechips.rocketchip.linting$/;"	p
freechips.rocketchip.linting	src/main/scala/linting/LintReporter.scala	/^package freechips.rocketchip.linting$/;"	p
freechips.rocketchip.linting	src/main/scala/linting/Linter.scala	/^package freechips.rocketchip.linting$/;"	p
freechips.rocketchip.linting	src/main/scala/linting/rule/LintAnonymousRegisters.scala	/^package freechips.rocketchip.linting$/;"	p
freechips.rocketchip.linting	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^package freechips.rocketchip.linting$/;"	p
freechips.rocketchip.linting	src/main/scala/linting/rule/LintRule.scala	/^package freechips.rocketchip.linting$/;"	p
freechips.rocketchip.linting	src/main/scala/linting/rule/LintTruncatingWidths.scala	/^package freechips.rocketchip.linting$/;"	p
freechips.rocketchip.linting	src/main/scala/linting/rule/package.scala	/^package freechips.rocketchip.linting$/;"	p
freechips.rocketchip.linting.rule	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^package freechips.rocketchip.linting.rule$/;"	p
freechips.rocketchip.macros	macros/src/main/scala/ValName.scala	/^package freechips.rocketchip.macros$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/BundleBridgeBlockDuringReset.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ClockBundles.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ClockDivider.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ClockDomain.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ClockGroup.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ClockGroupDriver.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ClockNodes.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ClockParameters.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/IOHelper.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ResetCrossingType.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ResetStretcher.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ResetSynchronizer.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/ResetWrangler.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.prci	src/main/scala/prci/TestClockSource.scala	/^package freechips.rocketchip.prci$/;"	p
freechips.rocketchip.regmapper	src/main/scala/regmapper/Annotation.scala	/^package freechips.rocketchip.regmapper$/;"	p
freechips.rocketchip.regmapper	src/main/scala/regmapper/DescribedReg.scala	/^package freechips.rocketchip.regmapper$/;"	p
freechips.rocketchip.regmapper	src/main/scala/regmapper/RegField.scala	/^package freechips.rocketchip.regmapper$/;"	p
freechips.rocketchip.regmapper	src/main/scala/regmapper/RegFieldDesc.scala	/^package freechips.rocketchip.regmapper$/;"	p
freechips.rocketchip.regmapper	src/main/scala/regmapper/RegMapper.scala	/^package freechips.rocketchip.regmapper$/;"	p
freechips.rocketchip.regmapper	src/main/scala/regmapper/RegisterCrossing.scala	/^package freechips.rocketchip.regmapper$/;"	p
freechips.rocketchip.regmapper	src/main/scala/regmapper/RegisterRouter.scala	/^package freechips.rocketchip.regmapper$/;"	p
freechips.rocketchip.regmapper	src/main/scala/regmapper/Test.scala	/^package freechips.rocketchip.regmapper$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/ALU.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/AMOALU.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/BTB.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/Breakpoint.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/CSR.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/DCache.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/Decode.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/Events.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/Frontend.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/HellaCache.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/HellaCacheArbiter.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/IBuf.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/ICache.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/IDecode.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/Instructions.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/Multiplier.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/NBDcache.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/PMP.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/PTW.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/RVC.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/RocketCore.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/ScratchpadSlavePort.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/TLB.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket	src/main/scala/rocket/TLBPermissions.scala	/^package freechips.rocketchip.rocket$/;"	p
freechips.rocketchip.rocket.constants	src/main/scala/rocket/Consts.scala	/^package freechips.rocketchip.rocket.constants$/;"	p
freechips.rocketchip.scie	src/main/scala/scie/SCIE.scala	/^package freechips.rocketchip.scie$/;"	p
freechips.rocketchip.stage	src/main/scala/stage/RocketChipAnnotations.scala	/^package freechips.rocketchip.stage$/;"	p
freechips.rocketchip.stage	src/main/scala/stage/RocketChipCli.scala	/^package freechips.rocketchip.stage$/;"	p
freechips.rocketchip.stage	src/main/scala/stage/RocketChipOptions.scala	/^package freechips.rocketchip.stage$/;"	p
freechips.rocketchip.stage.phases	src/main/scala/stage/phases/AddDefaultTests.scala	/^package freechips.rocketchip.stage.phases$/;"	p
freechips.rocketchip.stage.phases	src/main/scala/stage/phases/Checks.scala	/^package freechips.rocketchip.stage.phases$/;"	p
freechips.rocketchip.stage.phases	src/main/scala/stage/phases/GenerateArtefacts.scala	/^package freechips.rocketchip.stage.phases$/;"	p
freechips.rocketchip.stage.phases	src/main/scala/stage/phases/GenerateFirrtlAnnos.scala	/^package freechips.rocketchip.stage.phases$/;"	p
freechips.rocketchip.stage.phases	src/main/scala/stage/phases/GenerateROMs.scala	/^package freechips.rocketchip.stage.phases$/;"	p
freechips.rocketchip.stage.phases	src/main/scala/stage/phases/GenerateTestSuiteMakefrags.scala	/^package freechips.rocketchip.stage.phases$/;"	p
freechips.rocketchip.stage.phases	src/main/scala/stage/phases/PreElaboration.scala	/^package freechips.rocketchip.stage.phases$/;"	p
freechips.rocketchip.stage.phases	src/main/scala/stage/phases/TransformAnnotations.scala	/^package freechips.rocketchip.stage.phases$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/Attachable.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/BankedL2Params.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/BaseSubsystem.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/BusTopology.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/Configs.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/CrossingWrapper.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/FrontBus.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/HasTiles.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/InterruptBus.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/MemoryBus.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/PeripheryBus.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/Ports.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/RTC.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/RocketSubsystem.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.subsystem	src/main/scala/subsystem/SystemBus.scala	/^package freechips.rocketchip.subsystem$/;"	p
freechips.rocketchip.system	src/main/scala/system/Configs.scala	/^package freechips.rocketchip.system$/;"	p
freechips.rocketchip.system	src/main/scala/system/ExampleRocketSystem.scala	/^package freechips.rocketchip.system$/;"	p
freechips.rocketchip.system	src/main/scala/system/RocketChipStageGenerator.scala	/^package freechips.rocketchip.system$/;"	p
freechips.rocketchip.system	src/main/scala/system/RocketTestSuite.scala	/^package freechips.rocketchip.system$/;"	p
freechips.rocketchip.system	src/main/scala/system/SimAXIMem.scala	/^package freechips.rocketchip.system \/\/ TODO this should really be in a testharness package$/;"	p
freechips.rocketchip.system	src/main/scala/system/TestHarness.scala	/^package freechips.rocketchip.system$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/BaseTile.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/BusErrorUnit.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/Core.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/CustomCSRs.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/FPU.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/Interrupts.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/L1Cache.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/LazyRoCC.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/LookupByHartId.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/RocketTile.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tile	src/main/scala/tile/TilePRCIDomain.scala	/^package freechips.rocketchip.tile$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/AddressAdjuster.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Arbiter.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/AsyncCrossing.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/AtomicAutomata.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Atomics.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/BankBinder.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/BlockDuringReset.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Broadcast.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Buffer.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Bundle_ACancel.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Bundles.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/BusWrapper.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/CacheCork.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Credited.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/CrossingHelper.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Delayer.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Edges.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/ErrorEvaluator.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/FIFOFixer.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Filter.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Fragmenter.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Fuzzer.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/HintHandler.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Isolation.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Jbar.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Map.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Metadata.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Monitor.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Nodes.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Parameters.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/PatternPusher.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/ProbePicker.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/RAMModel.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/RationalCrossing.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/RegionReplication.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/RegisterRouter.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/RegisterRouterTest.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/SRAM.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/SourceShrinker.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/ToAHB.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/ToAPB.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/ToAXI4.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/WidthWidget.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/tilelink/Xbar.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.tilelink	src/main/scala/util/IdentityModule.scala	/^package freechips.rocketchip.tilelink$/;"	p
freechips.rocketchip.transforms.naming	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^package freechips.rocketchip.transforms.naming$/;"	p
freechips.rocketchip.transforms.naming	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^package freechips.rocketchip.transforms.naming$/;"	p
freechips.rocketchip.unittest	src/main/scala/unittest/Configs.scala	/^package freechips.rocketchip.unittest$/;"	p
freechips.rocketchip.unittest	src/main/scala/unittest/Generator.scala	/^package freechips.rocketchip.unittest$/;"	p
freechips.rocketchip.unittest	src/main/scala/unittest/TestGenerator.scala	/^package freechips.rocketchip.unittest$/;"	p
freechips.rocketchip.unittest	src/main/scala/unittest/TestHarness.scala	/^package freechips.rocketchip.unittest$/;"	p
freechips.rocketchip.unittest	src/main/scala/unittest/UnitTest.scala	/^package freechips.rocketchip.unittest$/;"	p
freechips.rocketchip.util	src/main/scala/util/Annotations.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Arbiters.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/AsyncQueue.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/AsyncResetReg.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/BlockDuringReset.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Blockable.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Broadcaster.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/BundleMap.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/CRC.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ClockDivider.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ClockGate.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/CompileOptions.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/CoreMonitor.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Counters.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/CreditedIO.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Crossing.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/DescribedSRAM.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ECC.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Frequency.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/GeneratorUtils.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/GenericParameterizedBundle.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/HellaQueue.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/HeterogeneousBag.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/IDPool.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/LCG.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/LanePositionedQueue.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/LatencyPipe.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Location.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Misc.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/MultiLaneQueue.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/MultiPortQueue.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/MultiWidthFifo.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/MuxLiteral.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/PSDTestMode.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/PlusArg.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/PrefixSum.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ROMGenerator.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/RationalCrossing.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ReadyValidCancel.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/RecordMap.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ReduceOthers.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ReorderQueue.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Repeater.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Replacement.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ResetCatchAndSync.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ScatterGather.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/SeededRandom.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ShiftQueue.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/ShiftReg.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/SimpleProduct.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/SynchronizerReg.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/Timer.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util	src/main/scala/util/TraceCoreInterface.scala	/^package freechips.rocketchip.util$/;"	p
freechips.rocketchip.util.property	src/main/scala/util/Property.scala	/^package freechips.rocketchip.util.property$/;"	p
freed	src/main/scala/util/LanePositionedQueue.scala	/^  val freed     = io.free  .map(x => Mux(x.fire(), x.bits, 0.U)).getOrElse(io.deq.ready)$/;"	l
frfWriteBundle	src/main/scala/tile/FPU.scala	/^  val frfWriteBundle = Seq.fill(2)(WireInit(new CoreMonitorBundle(xLen, fLen), DontCare))$/;"	l
frm	src/main/scala/rocket/Instructions.scala	/^  val frm = 0x2$/;"	l
from	src/main/scala/amba/axi4/Parameters.scala	/^  val from = axi4Id$/;"	l
from	src/main/scala/amba/axi4/ToTL.scala	/^  val from = axi4Id$/;"	l
from	src/main/scala/diplomacy/Parameters.scala	/^  def from: IdRange$/;"	m
from	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^                   val from: OMIDRange,$/;"	l
from	src/main/scala/subsystem/InterruptBus.scala	/^  def from(name: Option[String])(xing: ClockCrossingType) = int_in_xing(xing) :=* IntNameNode(name)$/;"	m
from	src/main/scala/tilelink/BusWrapper.scala	/^  def from[T](name: String)(body: => T): T = {$/;"	m
from	src/main/scala/tilelink/Parameters.scala	/^  val from = tlId$/;"	l
from	src/main/scala/tilelink/ToAXI4.scala	/^  val from = tlId$/;"	l
fromAsync	src/main/scala/subsystem/InterruptBus.scala	/^  def fromAsync: IntInwardNode = from(None)(AsynchronousCrossing(8,3))$/;"	m
fromCode	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def fromCode(code: Code): OMECC = {$/;"	m
fromCoherentMaster	src/main/scala/tilelink/BusWrapper.scala	/^  def fromCoherentMaster[D,U,E,B <: Data]$/;"	m
fromMaster	src/main/scala/tilelink/BusWrapper.scala	/^  def fromMaster[D,U,E,B <: Data]$/;"	m
fromMasterNode	src/main/scala/tilelink/BusWrapper.scala	/^  def fromMasterNode$/;"	m
fromNode	src/main/scala/util/HeterogeneousBag.scala	/^  def fromNode[D <: Data, E](elts: Seq[(D, E)]) = new HeterogeneousBag(elts.map(_._1.cloneType))$/;"	m
fromPort	src/main/scala/tilelink/BusWrapper.scala	/^  def fromPort[D,U,E,B <: Data]$/;"	m
fromRational	src/main/scala/subsystem/InterruptBus.scala	/^  def fromRational: IntInwardNode = from(None)(RationalCrossing())$/;"	m
fromReceiver	src/main/scala/util/CreditedIO.scala	/^  def fromReceiver[T <: Data](x: ReadyValidIO[T], depth: Int, flow: Boolean = true): CreditedIO[T] = {$/;"	m
fromSeed	src/main/scala/util/SeededRandom.scala	/^  val fromSeed = new scala.util.Random(42)$/;"	l
fromSender	src/main/scala/util/CreditedIO.scala	/^  def fromSender[T <: Data](x: ReadyValidIO[T], depth: Int, pipe: Boolean = true): CreditedIO[T] = {$/;"	m
fromSets	src/main/scala/diplomacy/AddressRange.scala	/^  def fromSets(seq: Seq[AddressSet]): Seq[AddressRange] = unify(seq.flatMap(_.toRanges))$/;"	m
fromString	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def fromString(code: String): OMECC = {$/;"	m
fromString	src/main/scala/util/ECC.scala	/^  def fromString(s: Option[String]): Code = fromString(s.getOrElse("none"))$/;"	m
fromString	src/main/scala/util/ECC.scala	/^  def fromString(s: String): Code = s.toLowerCase match {$/;"	m
fromString	src/main/scala/util/Replacement.scala	/^  def fromString(s: String, n_ways: Int): ReplacementPolicy = s.toLowerCase match {$/;"	m
fromSync	src/main/scala/subsystem/InterruptBus.scala	/^  def fromSync: IntInwardNode = int_bus.intnode$/;"	m
fromTile	src/main/scala/tilelink/BusWrapper.scala	/^  def fromTile$/;"	m
fromUInt	src/main/scala/rocket/CSR.scala	/^  def fromUInt(that: UInt, ignore_vill: Boolean = false)(implicit p: Parameters): VType = {$/;"	m
fromint	src/main/scala/tile/FPU.scala	/^  val fromint = Bool()$/;"	l
fromint_data	src/main/scala/tile/FPU.scala	/^  val fromint_data = Bits(INPUT, xLen)$/;"	l
front	src/main/scala/regmapper/RegMapper.scala	/^    val front = Wire(Decoupled(new RegMapperInput(inParams)))$/;"	l
frontMask	src/main/scala/regmapper/RegMapper.scala	/^    val frontMask = FillInterleaved(8, front.bits.mask)$/;"	l
frontSel	src/main/scala/regmapper/RegMapper.scala	/^    val frontSel = UIntToOH(iindex).asBools$/;"	l
frontend	src/main/scala/rocket/Frontend.scala	/^  val frontend = LazyModule(new Frontend(tileParams.icache.get, staticIdForMetadataUseOnly))$/;"	l
fs	src/main/scala/rocket/CSR.scala	/^  val fs = UInt(width = 2)$/;"	l
fsd	src/main/scala/rocket/RVC.scala	/^    def fsd = inst(Cat(ldImm >> 5, rs2p, rs1p, 3.U(3.W), ldImm(4,0), 0x27.U(7.W)), rs2p, rs1p, rs2p)$/;"	m
fsdbfile	src/main/resources/vsrc/TestDriver.v	/^  reg [2047:0] fsdbfile = 0;$/;"	r
fsdsp	src/main/scala/rocket/RVC.scala	/^    def fsdsp = inst(Cat(sdspImm >> 5, rs2, sp, 3.U(3.W), sdspImm(4,0), 0x27.U(7.W)), rd, sp, rs2)$/;"	m
fsgnj	src/main/scala/tile/FPU.scala	/^  val fsgnj = Cat(signNum(fLen), in.bits.in1(fLen-1, 0))$/;"	l
fsgnjMux	src/main/scala/tile/FPU.scala	/^  val fsgnjMux = Wire(new FPResult)$/;"	l
fsw	src/main/scala/rocket/RVC.scala	/^    def fsw = {$/;"	m
fswsp	src/main/scala/rocket/RVC.scala	/^    def fswsp = {$/;"	m
fuInput	src/main/scala/tile/FPU.scala	/^  def fuInput(minT: Option[FType]): FPInput = {$/;"	m
full	src/main/scala/regmapper/Test.scala	/^    val full = RegInit(Vec.fill(x)(Bool(false)))$/;"	l
full	src/main/scala/tilelink/SourceShrinker.scala	/^        val full = allocated.andR()$/;"	l
full	src/main/scala/tilelink/ToAHB.scala	/^  val full   = Bool()$/;"	l
full	src/main/scala/util/CreditedIO.scala	/^  def full: Bool = v === depth.U$/;"	m
full	src/main/scala/util/HellaQueue.scala	/^  val full = ptr_match && maybe_full$/;"	l
full	src/main/scala/util/Repeater.scala	/^    val full = Output(Bool())$/;"	l
full	src/main/scala/util/Repeater.scala	/^  val full = RegInit(false.B)$/;"	l
fullBits	src/main/scala/tilelink/Fragmenter.scala	/^  val fullBits = if (earlyAck == EarlyAck.PutFulls) 1 else 0$/;"	l
fullBytes	src/main/scala/regmapper/RegField.scala	/^    val fullBytes = Seq.tabulate(numFullBytes) { i =>$/;"	l
fullEnables	src/main/scala/devices/tilelink/Plic.scala	/^    val fullEnables = (nDevices - firstEnable) \/ 8$/;"	l
fullMask	src/main/scala/tilelink/Fragmenter.scala	/^        val fullMask = UInt((BigInt(1) << beatBytes) - 1)$/;"	l
fullName	src/main/scala/diplomacy/Resources.scala	/^        val fullName = dev.parent match {$/;"	l
full_insn	src/main/scala/rocket/IBuf.scala	/^      val full_insn = exp.io.rvc || valid(j+1) || buf_replay(j)$/;"	l
full_mask	src/main/scala/tilelink/Edges.scala	/^  def full_mask(x: TLAddrChannel): UInt = {$/;"	m
funct	src/main/scala/rocket/RVC.scala	/^        val funct = Seq(0.U, 4.U, 6.U, 7.U, 0.U, 0.U, 2.U, 3.U)(Cat(x(12), x(6,5)))$/;"	l
funct	src/main/scala/tile/LazyRoCC.scala	/^  val funct = Bits(7.W)$/;"	l
funct	src/main/scala/tile/LazyRoCC.scala	/^  val funct = cmd.bits.inst.funct$/;"	l
funct3	src/main/scala/devices/debug/Debug.scala	/^      val funct3 = UInt(3.W)$/;"	l
fuzz	src/main/scala/amba/ahb/Test.scala	/^  val fuzz  = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/amba/ahb/Test.scala	/^  val fuzz  = LazyModule(new TLFuzzer(txns, overrideAddress = Some(fuzzAddr)))$/;"	l
fuzz	src/main/scala/amba/apb/Test.scala	/^  val fuzz  = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/amba/axi4/Credited.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/amba/axi4/Test.scala	/^  val fuzz  = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/amba/axi4/Test.scala	/^  val fuzz  = LazyModule(new TLFuzzer(txns, overrideAddress = Some(fuzzAddr)))$/;"	l
fuzz	src/main/scala/devices/tilelink/TestRAM.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/AsyncCrossing.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/AtomicAutomata.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/Credited.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/Fragmenter.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/Fuzzer.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/HintHandler.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/RationalCrossing.scala	/^  val fuzz  = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/RegisterRouterTest.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/SRAM.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/WidthWidget.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/Xbar.scala	/^    val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz	src/main/scala/tilelink/Xbar.scala	/^  val fuzz = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz1	src/main/scala/devices/tilelink/MasterMux.scala	/^  val fuzz1 = LazyModule(new TLFuzzer(txns))$/;"	l
fuzz2	src/main/scala/devices/tilelink/MasterMux.scala	/^  val fuzz2 = LazyModule(new TLFuzzer(txns))$/;"	l
fuzzAddr	src/main/scala/amba/ahb/Test.scala	/^  val fuzzAddr = AddressSet(0x0, 0xfff)$/;"	l
fuzzAddr	src/main/scala/amba/axi4/Test.scala	/^  val fuzzAddr = AddressSet(0x0, 0xfff)$/;"	l
fuzzer	src/main/scala/tilelink/Fuzzer.scala	/^    val fuzzer = LazyModule(new TLFuzzer(nOperations, inFlight, noiseMaker, noModify, overrideAddress, nOrdered))$/;"	l
fuzzer	src/main/scala/tilelink/Jbar.scala	/^    val fuzzer = LazyModule(new TLFuzzer(txns))$/;"	l
fuzzers	src/main/scala/tilelink/Jbar.scala	/^  val fuzzers = Seq.fill(nClients) {$/;"	l
fuzzers	src/main/scala/tilelink/Xbar.scala	/^  val fuzzers = (0 until nClients) map { n =>$/;"	l
fw	src/main/scala/util/GeneratorUtils.scala	/^    val fw = new FileWriter(f)$/;"	l
g	src/main/scala/rocket/PTW.scala	/^    val g = Reg(Vec(coreParams.nL2TLBWays, UInt(width = nL2TLBSets)))$/;"	l
g	src/main/scala/rocket/PTW.scala	/^  val g = Bool()$/;"	l
g	src/main/scala/rocket/TLB.scala	/^  val g = Bool()$/;"	l
gDesc	src/main/scala/regmapper/RegFieldDesc.scala	/^      val gDesc = if ((i > 0) & descFirstOnly) None else desc$/;"	l
gap	src/main/scala/util/LanePositionedQueue.scala	/^      val gap = if (r % 2 == 0) gap0 else gap1$/;"	l
gap0	src/main/scala/util/LanePositionedQueue.scala	/^  val gap0 = RegNext(pre_gap0)$/;"	l
gap1	src/main/scala/util/LanePositionedQueue.scala	/^  val gap1 = RegNext(pre_gap1)$/;"	l
gap2	src/main/scala/util/LanePositionedQueue.scala	/^  val gap2 = RegNext(pre_gap2)$/;"	l
gate	src/main/scala/prci/TestClockSource.scala	/^  val gate = Input(Bool())$/;"	l
gated_clock	src/main/scala/devices/debug/Periphery.scala	/^      val gated_clock =$/;"	l
gated_clock	src/main/scala/rocket/DCache.scala	/^  val gated_clock =$/;"	l
gated_clock	src/main/scala/rocket/Frontend.scala	/^  val gated_clock =$/;"	l
gated_clock	src/main/scala/rocket/PTW.scala	/^  val gated_clock =$/;"	l
gated_clock	src/main/scala/rocket/RocketCore.scala	/^  val gated_clock =$/;"	l
gated_clock	src/main/scala/tile/FPU.scala	/^  val gated_clock =$/;"	l
gateway	src/main/scala/devices/tilelink/Plic.scala	/^      val gateway = Module(new LevelGateway)$/;"	l
gateways	src/main/scala/devices/tilelink/Plic.scala	/^    val gateways = interrupts.map { case i =>$/;"	l
gather	src/main/scala/util/MultiPortQueue.scala	/^  def gather[T <: Data](sparse: Seq[DecoupledIO[T]], dense: LanePositionedDecoupledIO[T], offset: UInt = 0.U): Unit = {$/;"	m
gaveT	src/main/scala/tilelink/Broadcast.scala	/^  val gaveT   = Bool()$/;"	l
gen	src/main/scala/stage/phases/PreElaboration.scala	/^    val gen = () =>$/;"	l
gen	src/main/scala/util/SynchronizerReg.scala	/^    val gen: () => SynchronizerPrimitiveShiftReg = resetType match {$/;"	l
genExtraAddrs	src/main/scala/groundtest/TraceGen.scala	/^  val genExtraAddrs       = false$/;"	l
genOMRegMap	src/main/scala/tilelink/RegisterRouter.scala	/^  def genOMRegMap(mapping: RegField.Map*): OMRegisterMap = {$/;"	m
genRegDescsJson	src/main/scala/tilelink/RegisterRouter.scala	/^  def genRegDescsJson(mapping: RegField.Map*): Unit = {$/;"	m
genType	src/main/scala/util/CreditedIO.scala	/^  def genType: T = gen$/;"	m
gen_mem	scripts/vlsi_mem_gen	/^def gen_mem(name, width, depth, mask_gran, mask_seg, ports):$/;"	f
gen_rom	scripts/vlsi_rom_gen	/^def gen_rom(name, width, depth, rom_hex_file):$/;"	f
generateMakeFrag	src/main/scala/system/RocketTestSuite.scala	/^  def generateMakeFrag: String = {$/;"	m
generateProperties	src/main/scala/util/Property.scala	/^  def generateProperties(): Seq[BasePropertyParameters]$/;"	m
generateProperties	src/main/scala/util/Property.scala	/^  def generateProperties(): Seq[CoverPropertyParameters] = {$/;"	m
generateProperty	src/main/scala/util/Property.scala	/^  def generateProperty(prop_param: BasePropertyParameters)(implicit sourceInfo: SourceInfo): Unit = {$/;"	m
generateProperty	src/main/scala/util/Property.scala	/^  def generateProperty(prop_param: BasePropertyParameters)(implicit sourceInfo: SourceInfo): Unit$/;"	m
generated_dir	emulator/Makefile	/^generated_dir = $(abspath .\/generated-src)$/;"	m
generated_dir	regression/Makefile	/^generated_dir = $(abspath .\/generated-src)$/;"	m
generated_dir	vsim/Makefile	/^generated_dir = $(abspath .\/generated-src)$/;"	m
generated_dir_debug	emulator/Makefile	/^generated_dir_debug = $(abspath .\/generated-src-debug)$/;"	m
generatorTests	src/test/scala/generatorTests/StageGeneratorSpec.scala	/^package generatorTests$/;"	p
gennum	src/main/scala/tilelink/Fragmenter.scala	/^        val gennum = RegInit(UInt(0, width = counterBits))$/;"	l
get	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    def get(f: PMPInitialValue => Boolean): Int = initial.map { i => if (f(i)) 1 else 0}.getOrElse(0)$/;"	m
get	src/main/scala/rocket/BTB.scala	/^  def get(addr: UInt): BHTResp = {$/;"	m
get	src/main/scala/rocket/DCache.scala	/^  val get     = edge.Get(a_source, access_address, a_size)._2$/;"	l
get	src/main/scala/rocket/NBDcache.scala	/^  val get     = edge.Get(a_source, a_address, a_size)._2$/;"	l
get	src/main/scala/tilelink/Parameters.scala	/^  def get:        TransferSizes$/;"	m
get	src/main/scala/util/Location.scala	/^  def get(key: Location[_]) = internalMap.get(key.name)$/;"	m
getAllClassNames	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def getAllClassNames(klass: Class[_]): Seq[String] =$/;"	m
getCfg	src/main/scala/devices/debug/Debug.scala	/^  def getCfg = () => cfg$/;"	m
getChildren	src/main/scala/diplomacy/LazyModule.scala	/^  def getChildren: List[LazyModule] = children$/;"	m
getConfig	src/main/scala/util/GeneratorUtils.scala	/^  def getConfig(fullConfigClassNames: Seq[String]): Config = {$/;"	m
getCost	src/main/scala/rocket/Decode.scala	/^  def getCost(cover: Seq[Term], bits: Int) = cover.map(bits - _.mask.bitCount).sum$/;"	m
getCover	src/main/scala/rocket/Decode.scala	/^  def getCover(implicants: Seq[Term], minterms: Seq[Term], bits: Int) = {$/;"	m
getData	src/main/scala/rocket/TLB.scala	/^  def getData(vpn: UInt) = OptimizationBarrier(data(sectorIdx(vpn)).asTypeOf(new TLBEntryData))$/;"	m
getDemangledName	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def getDemangledName(claz: Class[_]): String =$/;"	m
getDesc	src/main/scala/diplomacy/Resources.scala	/^    def getDesc(dev: Device): Description = {$/;"	m
getDevice	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^  def getDevice = deviceOpt$/;"	m
getElements	src/main/scala/util/package.scala	/^    def getElements: Seq[Element] = x match {$/;"	m
getEssentialPrimeImplicants	src/main/scala/rocket/Decode.scala	/^  def getEssentialPrimeImplicants(prime: Seq[Term], minterms: Seq[Term]): (Seq[Term],Seq[Term],Seq[Term]) = {$/;"	m
getImplicitDC	src/main/scala/rocket/Decode.scala	/^  def getImplicitDC(maxterms: Seq[Term], term: Term, bits: Int, above: Boolean): Term = {$/;"	m
getIndex	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^  def getIndex(cs: Seq[OMComponent]): Seq[(OMComponent, Int)] = {$/;"	m
getInitialValueInts	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  def getInitialValueInts(addressBits: Int, pageBits: Int, initial: Option[PMPInitialValue]): PMPInitialValueInt = {$/;"	m
getInt	src/main/scala/diplomacy/DeviceTree.scala	/^    def getInt(x: ResourceValue) = x match {$/;"	m
getModes	src/main/scala/diplomaticobjectmodel/model/OMPLIC.scala	/^  def getModes(hasSupervisorMode: Boolean, hasHypervisorMode: Boolean): Seq[OMPrivilegeMode] = {$/;"	m
getNComponents	src/main/scala/devices/debug/Debug.scala	/^    def getNComponents = () => nComponents$/;"	m
getNInterrupts	src/main/scala/devices/tilelink/Plic.scala	/^    def getNInterrupts = interrupts.size$/;"	m
getNeedCustom	src/main/scala/devices/debug/Debug.scala	/^    def getNeedCustom = () => needCustom$/;"	m
getNodes	src/main/scala/diplomacy/LazyModule.scala	/^  def getNodes: List[BaseNode] = nodes$/;"	m
getOMBusError	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^  def getOMBusError(resourceBindings: ResourceBindings): Seq[OMComponent] = {$/;"	m
getOMBusMemory	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^  def getOMBusMemory(resourceBindings: ResourceBindings): Seq[OMComponent] = {$/;"	m
getOMCLINT	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^  def getOMCLINT(resourceBindings: ResourceBindings): Seq[OMComponent] = {$/;"	m
getOMComponentHelper	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def getOMComponentHelper(resourceBindings: ResourceBindings, fn: (ResourceBindings) => Seq[OMComponent]): Seq[OMComponent] = {$/;"	m
getOMComponentTree	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^    def getOMComponentTree(node: LogicalTreeNode): Seq[OMComponent] = {$/;"	m
getOMComponents	src/main/scala/devices/tilelink/Error.scala	/^    def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent] = Nil) = {$/;"	m
getOMComponents	src/main/scala/devices/tilelink/Zero.scala	/^    def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent] = Nil) = {$/;"	m
getOMComponents	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^  def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent] = Nil): Seq[OMComponent]$/;"	m
getOMComponents	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^  def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent]): Seq[OMComponent] = {$/;"	m
getOMComponents	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^  def getOMComponents(resourceBindings: ResourceBindings, components: Seq[OMComponent]): Seq[OMComponent] = {$/;"	m
getOMComponents	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^  def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent]): Seq[OMComponent] = {$/;"	m
getOMDebug	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^  def getOMDebug(resourceBindings: ResourceBindings): Seq[OMComponent] = {$/;"	m
getOMDebugInterfaceType	src/main/scala/diplomaticobjectmodel/model/OMDebug.scala	/^  def getOMDebugInterfaceType(p: Parameters): OMDebugInterfaceType = {$/;"	m
getOMInterruptTargets	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^  def getOMInterruptTargets(): Seq[OMInterruptTarget] = {$/;"	m
getOMInterrupts	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def getOMInterrupts(resourceBindings: ResourceBindings): Seq[OMInterrupt]= {$/;"	m
getOMMemRegions	src/main/scala/diplomacy/SRAM.scala	/^  def getOMMemRegions(resourceBindings: ResourceBindings): Seq[OMMemoryRegion] = {$/;"	m
getOMMemoryRegions	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def getOMMemoryRegions(name: String, resourceBindings: ResourceBindings, omRegMap: Option[OMRegisterMap] = None,$/;"	m
getOMPLIC	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^  def getOMPLIC(resourceBindings: ResourceBindings): Seq[OMComponent] = {$/;"	m
getOMPortMemoryRegions	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def getOMPortMemoryRegions(name: String, resourceBindings: ResourceBindings, omRegMap: Option[OMRegisterMap] = None): Seq[OMMemoryRegion]= {$/;"	m
getOMSRAMs	src/main/scala/rocket/HellaCache.scala	/^  def getOMSRAMs(): Seq[OMSRAM]$/;"	m
getPrimeImplicants	src/main/scala/rocket/Decode.scala	/^  def getPrimeImplicants(implicants: Seq[Term], bits: Int) = {$/;"	m
getPrimeImplicants	src/main/scala/rocket/Decode.scala	/^  def getPrimeImplicants(minterms: Seq[Term], maxterms: Seq[Term], bits: Int) = {$/;"	m
getResourceBindings	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^  def getResourceBindings(device: Device, maps: ArrayBuffer[ResourceBindingsMap]): ResourceBindings = {$/;"	m
getResourceBindingsMap	src/main/scala/diplomacy/Resources.scala	/^  def getResourceBindingsMap: ResourceBindingsMap = {$/;"	m
getScalaFiles	src/main/scala/linting/LintAnnotation.scala	/^  def getScalaFiles: Seq[String] = {$/;"	m
getSuperClasses	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def getSuperClasses(klass: Class[_]): Seq[Class[_]] = {$/;"	m
getWrappedValue	src/main/scala/diplomacy/LazyModule.scala	/^      def getWrappedValue: T = {$/;"	m
getWrappedValue	src/main/scala/diplomacy/LazyModule.scala	/^  def getWrappedValue: T$/;"	m
get_ldst	src/main/resources/csrc/comlog.cc	/^int get_ldst (std::string& line)$/;"	f
get_line_num	src/main/scala/formal/FormalUtils.scala	/^  def get_line_num(implicit sourceInfo: SourceInfo): String = {$/;"	m
get_next_state	src/main/scala/util/Replacement.scala	/^  def get_next_state(state: UInt, touch_way: UInt) = 0.U \/\/DontCare$/;"	m
get_next_state	src/main/scala/util/Replacement.scala	/^  def get_next_state(state: UInt, touch_way: UInt): UInt = {$/;"	m
get_next_state	src/main/scala/util/Replacement.scala	/^  def get_next_state(state: UInt, touch_way: UInt): UInt$/;"	m
get_next_state	src/main/scala/util/Replacement.scala	/^  def get_next_state(state: UInt, touch_way: UInt, tree_nways: Int): UInt = {$/;"	m
get_next_state	src/main/scala/util/Replacement.scala	/^  def get_next_state(state: UInt, touch_ways: Seq[Valid[UInt]]): UInt = {$/;"	m
get_next_states	src/main/scala/util/Replacement.scala	/^  val get_next_states  = (0 until (1 << (n_ways-1))).map(state => (0 until n_ways).map(way =>$/;"	l
get_pdst	src/main/resources/csrc/comlog.cc	/^int get_pdst (std::string& line)$/;"	f
get_replace_way	src/main/scala/util/Replacement.scala	/^  def get_replace_way(state: UInt) = way$/;"	m
get_replace_way	src/main/scala/util/Replacement.scala	/^  def get_replace_way(state: UInt): UInt = get_replace_way(state, n_ways)$/;"	m
get_replace_way	src/main/scala/util/Replacement.scala	/^  def get_replace_way(state: UInt): UInt = {$/;"	m
get_replace_way	src/main/scala/util/Replacement.scala	/^  def get_replace_way(state: UInt): UInt$/;"	m
get_replace_way	src/main/scala/util/Replacement.scala	/^  def get_replace_way(state: UInt, tree_nways: Int): UInt = {$/;"	m
get_replace_ways	src/main/scala/util/Replacement.scala	/^  val get_replace_ways = (0 until (1 << (n_ways-1))).map(state =>$/;"	l
gf	src/main/scala/rocket/Frontend.scala	/^  val gf = new Bundle {$/;"	l
gf	src/main/scala/rocket/HellaCache.scala	/^  val gf = new AlignmentExceptions$/;"	l
gf	src/main/scala/rocket/PTW.scala	/^      val gf = stage2 && !stage2_final && !pte.ur()$/;"	l
gf	src/main/scala/rocket/PTW.scala	/^  val gf = Bool()$/;"	l
gf	src/main/scala/rocket/TLB.scala	/^  val gf = Bool()$/;"	l
gf	src/main/scala/rocket/TLB.scala	/^  val gf = new TLBExceptions$/;"	l
gf_inst_array	src/main/scala/rocket/TLB.scala	/^  val gf_inst_array = Mux(priv_v, ~(hx_array | ptw_ae_array), 0.U)$/;"	l
gf_ld_array	src/main/scala/rocket/TLB.scala	/^  val gf_ld_array = Mux(priv_v && cmd_read, ~(Mux(cmd_readx, hx_array, hr_array) | ptw_ae_array), 0.U)$/;"	l
gf_st_array	src/main/scala/rocket/TLB.scala	/^  val gf_st_array = Mux(priv_v && cmd_write_perms, ~(hw_array | ptw_ae_array), 0.U)$/;"	l
given	src/main/scala/util/IDPool.scala	/^  val given  = Mux(io.free .valid, UIntToOH(io.free .bits, numIds), 0.U)$/;"	l
givenPartitions	src/main/scala/diplomacy/AddressDecoder.scala	/^      val givenPartitions = bitsToTake.foldLeft(partitions) { (p, b) => partitionPartitions(p, b) }$/;"	l
global_interrupt	src/main/scala/tile/BusErrorUnit.scala	/^    val global_interrupt = Reg(init = Vec.fill(sources.size)(false.B))$/;"	l
global_interrupt_desc	src/main/scala/tile/BusErrorUnit.scala	/^    val global_interrupt_desc = sources.zipWithIndex.map { case (s, i) =>$/;"	l
gnt	src/main/scala/tile/LazyRoCC.scala	/^  val gnt = tl_out.d.bits$/;"	l
go	src/main/scala/devices/debug/Debug.scala	/^      val go = Bool()$/;"	l
goAbstract	src/main/scala/devices/debug/Debug.scala	/^    val goAbstract   = WireInit(false.B)$/;"	l
goCustom	src/main/scala/devices/debug/Debug.scala	/^    val goCustom     = WireInit(false.B)$/;"	l
goReg	src/main/scala/devices/debug/Debug.scala	/^    val goReg        = Reg(Bool())$/;"	l
got	src/main/scala/tilelink/RAMModel.scala	/^            val got = d.data(8*(i+1)-1, 8*i)$/;"	l
got_e	src/main/scala/tilelink/Broadcast.scala	/^  val got_e   = RegInit(true.B)$/;"	l
gpa	src/main/scala/rocket/Frontend.scala	/^  val gpa = Flipped(Valid(UInt(vaddrBitsExtended.W)))$/;"	l
gpa	src/main/scala/rocket/Frontend.scala	/^  val gpa = Reg(UInt(vaddrBitsExtended.W))$/;"	l
gpa	src/main/scala/rocket/PTW.scala	/^  val gpa = Valid(UInt(vaddrBits.W))$/;"	l
gpa	src/main/scala/rocket/TLB.scala	/^  val gpa = UInt(vaddrBitsExtended.W)$/;"	l
gpa_hits	src/main/scala/rocket/TLB.scala	/^  val gpa_hits = {$/;"	l
gpa_is_pte	src/main/scala/rocket/TLB.scala	/^  val gpa_is_pte = Bool()$/;"	l
gpa_pgoff	src/main/scala/rocket/PTW.scala	/^  val gpa_pgoff = Reg(UInt(pgIdxBits.W)) \/\/ only valid in resp_gf case$/;"	l
gpa_valid	src/main/scala/rocket/Frontend.scala	/^  val gpa_valid = Reg(Bool())$/;"	l
gpio	src/main/scala/amba/ahb/Test.scala	/^  val gpio  = LazyModule(new AHBRRTest0(0x100))$/;"	l
gpio	src/main/scala/amba/apb/Test.scala	/^  val gpio  = LazyModule(new APBRRTest0(0x100))$/;"	l
gpio	src/main/scala/amba/axi4/Test.scala	/^  val gpio  = LazyModule(new AXI4RRTest0(0x400))$/;"	l
gpio	src/main/scala/amba/axi4/Test.scala	/^  val gpio  = LazyModule(new AXI4RRTest1(0x400))$/;"	l
gpio	src/main/scala/examples/ExampleDevice.scala	/^  val gpio = UInt(params.num.W)$/;"	l
gpio	src/main/scala/tilelink/Fuzzer.scala	/^  val gpio = LazyModule(new TLRRTest1(0x400))$/;"	l
granWidth	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^      val granWidth = data match {$/;"	l
granWidth	src/main/scala/util/DescribedSRAM.scala	/^    val granWidth = data match {$/;"	l
grant	src/main/scala/amba/ahb/Bundles.scala	/^  def grant():  Bool = if (params.lite) Wire(init = Bool(true)) else hgrant.get$/;"	m
grant	src/main/scala/rocket/HellaCache.scala	/^  val grant = Bool()$/;"	l
grantInProgress	src/main/scala/rocket/DCache.scala	/^  val grantInProgress = Reg(init=Bool(false))$/;"	l
grantIsCached	src/main/scala/rocket/DCache.scala	/^  val grantIsCached = d_opc.isOneOf(Grant, GrantData)$/;"	l
grantIsRefill	src/main/scala/rocket/DCache.scala	/^  val grantIsRefill = d_opc === GrantData     \/\/ Writes the data array$/;"	l
grantIsVoluntary	src/main/scala/rocket/DCache.scala	/^  val grantIsVoluntary = d_opc === ReleaseAck \/\/ Clears a different pending bit$/;"	l
grantVec	src/main/scala/util/ReadyValidCancel.scala	/^  val grantVec           = Wire(Vec(n, Bool()))$/;"	l
grant_has_data	src/main/scala/rocket/NBDcache.scala	/^  val grant_has_data = edge.hasData(tl_out.d.bits)$/;"	l
grant_word	src/main/scala/rocket/NBDcache.scala	/^  val grant_word = Reg(UInt(width = wordBits))$/;"	l
grantackq	src/main/scala/rocket/NBDcache.scala	/^  val grantackq = Module(new Queue(io.mem_finish.bits, 1))$/;"	l
granted	src/main/scala/tilelink/ToAHB.scala	/^      val granted   = RegEnable(out.grant(), out.hready)$/;"	l
graphML	src/main/scala/diplomacy/LazyModule.scala	/^  lazy val graphML: String = parent.map(_.graphML).getOrElse {$/;"	l
groundtest32	src/main/scala/system/RocketTestSuite.scala	/^  val groundtest32 = new AssemblyTestSuite("rv32ui", groundtestNames)(_)$/;"	l
groundtest64	src/main/scala/system/RocketTestSuite.scala	/^  val groundtest64 = new AssemblyTestSuite("rv64ui", groundtestNames)(_)$/;"	l
groundtestNames	src/main/scala/system/RocketTestSuite.scala	/^  val groundtestNames = LinkedHashSet("simple")$/;"	l
group	src/main/scala/util/TraceCoreInterface.scala	/^  val group = Vec(params.nGroups, new TraceCoreGroup(params))$/;"	l
groupByIntoSeq	src/main/scala/util/package.scala	/^  def groupByIntoSeq[A, K](xs: Seq[A])(f: A => K): immutable.Seq[(K, immutable.Seq[A])] = {$/;"	m
grouped	src/main/scala/linting/LintReporter.scala	/^    val grouped = state.annotations.groupBy {$/;"	l
grouped	src/main/scala/rocket/TLBPermissions.scala	/^    val grouped = groupRegions(managers)$/;"	l
grouped	src/main/scala/util/package.scala	/^    def grouped(width: Int): Seq[UInt] =$/;"	m
groupedErrors	src/main/scala/linting/LintException.scala	/^    val groupedErrors = seq.groupBy {$/;"	l
groups	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^    val groups = for {$/;"	l
groups	src/main/scala/tilelink/Parameters.scala	/^    val groups = groupByIntoSeq(slaves.map(m => (p(m), m.address)))( _._1).map { case (k, vs) =>$/;"	l
grow_param	src/main/scala/rocket/NBDcache.scala	/^  val grow_param                                  = new_coh.onAccess(req.cmd)._2$/;"	l
gstatus	src/main/scala/rocket/CSR.scala	/^  val gstatus = new MStatus().asOutput$/;"	l
gstatus	src/main/scala/rocket/PTW.scala	/^  val gstatus = new MStatus().asInput$/;"	l
gva	src/main/scala/rocket/CSR.scala	/^  val gva = Bool()$/;"	l
gva	src/main/scala/rocket/CSR.scala	/^  val gva = Bool(INPUT)$/;"	l
h	src/main/scala/rocket/Breakpoint.scala	/^  val h = Bool()$/;"	l
h	src/main/scala/tile/FPU.scala	/^  val h: Array[(BitPat, List[BitPat])] =$/;"	l
h	src/main/scala/tile/RocketTile.scala	/^  val h = dcachePorts.size$/;"	l
h	src/main/scala/tilelink/AtomicAutomata.scala	/^        val h = 8*beatBytes-1 \/\/ now sign-extended; use biggest bit$/;"	l
h	src/main/scala/util/BundleMap.scala	/^    val h = HashMap(keydata:_*)$/;"	l
h	src/main/scala/util/BundleMap.scala	/^    val h = HashMap(that.keydata:_*)$/;"	l
haWindowSize	src/main/scala/devices/debug/Debug.scala	/^    def haWindowSize = 32$/;"	m
haddr	src/main/scala/amba/ahb/Bundles.scala	/^  val haddr     = UInt(OUTPUT, width = params.addrBits)$/;"	l
haddr	src/main/scala/amba/ahb/Bundles.scala	/^  val haddr   = UInt(OUTPUT, width = params.addrBits)$/;"	l
half	src/main/scala/devices/tilelink/Plic.scala	/^      val half = 1 << (log2Ceil(x.length) - 1)$/;"	l
half	src/main/scala/util/Misc.scala	/^      val half = x.getWidth \/ 2$/;"	l
halfWidth	src/main/scala/rocket/Multiplier.scala	/^  def halfWidth(req: MultiplierReq) = (w > 32).B && req.dw === DW_32$/;"	m
haltNode	src/main/scala/tile/BaseTile.scala	/^  def haltNode: IntOutwardNode        \/\/ Unrecoverable error has occurred; suggest reset$/;"	m
haltNode	src/main/scala/tile/Interrupts.scala	/^  val haltNode = IntSourceNode(IntSourcePortSimple())$/;"	l
halt_and_catch_fire	src/main/scala/groundtest/Tile.scala	/^  val halt_and_catch_fire = None$/;"	l
haltedBitRegs	src/main/scala/devices/debug/Debug.scala	/^    val haltedBitRegs    = Reg(UInt(nComponents.W))$/;"	l
haltedStatus	src/main/scala/devices/debug/Debug.scala	/^    val haltedStatus   = Wire(Vec(numHaltedStatus, Bits(32.W)))$/;"	l
haltedSummary	src/main/scala/devices/debug/Debug.scala	/^    val haltedSummary = Cat(haltedStatus.map(_.orR).reverse)$/;"	l
haltgroup	src/main/scala/devices/debug/dm_registers.scala	/^  val haltgroup = UInt(5.W)$/;"	l
haltgroupWrEn	src/main/scala/devices/debug/Debug.scala	/^    val haltgroupWrEn  = WireInit(false.B)$/;"	l
haltreq	src/main/scala/devices/debug/dm_registers.scala	/^  val haltreq = Bool()$/;"	l
haltreqWrEn	src/main/scala/devices/debug/Debug.scala	/^    val haltreqWrEn         = WireInit(false.B)$/;"	l
haltsum0	src/main/scala/devices/debug/dm_registers.scala	/^  val haltsum0 = UInt(32.W)$/;"	l
haltsum1	src/main/scala/devices/debug/dm_registers.scala	/^  val haltsum1 = UInt(32.W)$/;"	l
haltsum2	src/main/scala/devices/debug/dm_registers.scala	/^  val haltsum2 = UInt(32.W)$/;"	l
haltsum3	src/main/scala/devices/debug/dm_registers.scala	/^  val haltsum3 = UInt(32.W)$/;"	l
hamask	src/main/scala/devices/debug/Debug.scala	/^    val hamask = WireInit(VecInit(Seq.fill(nComponents) {false.B} ))$/;"	l
hamask	src/main/scala/devices/debug/Debug.scala	/^  val hamask       = Vec(nComponents, Bool())$/;"	l
hamaskFull	src/main/scala/devices/debug/Debug.scala	/^    val hamaskFull = WireInit(VecInit(Seq.fill(nComponents) {false.B} ))$/;"	l
hamaskReg	src/main/scala/devices/debug/Debug.scala	/^      val hamaskReg = Reg(Vec(nComponents, Bool()))$/;"	l
hamaskWrSel	src/main/scala/devices/debug/Debug.scala	/^    val hamaskWrSel = WireInit(VecInit(Seq.fill(nComponents) {false.B} ))$/;"	l
hamaskZero	src/main/scala/devices/debug/Debug.scala	/^      val hamaskZero = WireInit(VecInit(Seq.fill(nComponents) {false.B} ))$/;"	l
hamm2sys	src/main/scala/util/ECC.scala	/^    val hamm2sys = IndexedSeq.tabulate(n+1) { i =>$/;"	l
hammBadBitOH	src/main/scala/util/ECC.scala	/^    val hammBadBitOH = UIntToOH(syndromeUInt, n+1)$/;"	l
handle_sigterm	src/main/resources/csrc/emulator.cc	/^void handle_sigterm(int sig)$/;"	f
hartBase	src/main/scala/devices/tilelink/Plic.scala	/^  def hartBase = 0x200000$/;"	m
hartBase	src/main/scala/devices/tilelink/Plic.scala	/^  def hartBase(i: Int):Int = hartOffset(i) + hartBase$/;"	m
hartExceptionId	src/main/scala/devices/debug/Debug.scala	/^    val hartExceptionId      = Wire(UInt(sbIdWidth.W))$/;"	l
hartExceptionWrEn	src/main/scala/devices/debug/Debug.scala	/^    val hartExceptionWrEn    = Wire(Bool())$/;"	l
hartGoingId	src/main/scala/devices/debug/Debug.scala	/^    val hartGoingId          = Wire(UInt(sbIdWidth.W))$/;"	l
hartGoingWrEn	src/main/scala/devices/debug/Debug.scala	/^    val hartGoingWrEn        = Wire(Bool())$/;"	l
hartHalted	src/main/scala/devices/debug/Debug.scala	/^    val hartHalted   = haltedBitRegs(selectedHartReg)$/;"	l
hartHaltedId	src/main/scala/devices/debug/Debug.scala	/^    val hartHaltedId         = Wire(UInt(sbIdWidth.W))$/;"	l
hartHaltedIdIndex	src/main/scala/devices/debug/Debug.scala	/^        val hartHaltedIdIndex   = UIntToOH(hartSelFuncs.hartIdToHartSel(hartHaltedId))$/;"	l
hartHaltedWrEn	src/main/scala/devices/debug/Debug.scala	/^    val hartHaltedWrEn       = Wire(Bool())$/;"	l
hartId	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^      val hartId = coreDevice.deviceNamePlusAddress.split("@").last.toInt$/;"	l
hartId	src/main/scala/tile/BaseTile.scala	/^  def hartId: Int = staticIdForMetadataUseOnly$/;"	m
hartId	src/main/scala/tile/BaseTile.scala	/^  val hartId: Int$/;"	l
hartIdLen	src/main/scala/tile/Core.scala	/^  lazy val hartIdLen: Int = p(MaxHartIdBits)$/;"	l
hartIdList	src/main/scala/subsystem/HasTiles.scala	/^  def hartIdList: Seq[Int] = tileParams.map(_.hartId)$/;"	m
hartIdNexusNode	src/main/scala/tile/BaseTile.scala	/^  val hartIdNexusNode: BundleBridgeNode[UInt] = BundleBroadcast[UInt](registered = p(InsertTimingClosureRegistersOnHartIds))$/;"	l
hartIdNode	src/main/scala/tile/BaseTile.scala	/^  val hartIdNode: BundleBridgeInwardNode[UInt] =$/;"	l
hartIdSinkNode	src/main/scala/tile/BaseTile.scala	/^  val hartIdSinkNode = BundleBridgeSink[UInt]()$/;"	l
hartIdSinkNodeOpt	src/main/scala/rocket/HellaCache.scala	/^  val hartIdSinkNodeOpt = cfg.scratch.map(_ => BundleBridgeSink[UInt]())$/;"	l
hartIdSinkNodeOpt	src/main/scala/rocket/ICache.scala	/^  val hartIdSinkNodeOpt = icacheParams.itimAddr.map(_ => BundleBridgeSink[UInt]())$/;"	l
hartIdSource	src/main/scala/subsystem/HasTiles.scala	/^      val hartIdSource = BundleBridgeSource(() => UInt(w.W))$/;"	l
hartIds	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^  def hartIds: Seq[Int]$/;"	m
hartIsInReset	src/main/scala/devices/debug/Debug.scala	/^      val hartIsInReset = Input(Vec(getNComponents(), Bool()))$/;"	l
hartIsInReset	src/main/scala/devices/debug/Debug.scala	/^      val hartIsInReset = Input(Vec(nComponents, Bool()))$/;"	l
hartIsInReset	src/main/scala/devices/debug/Periphery.scala	/^  val hartIsInReset = Input(Vec(nComponents, Bool()))$/;"	l
hartIsInResetSync	src/main/scala/devices/debug/Debug.scala	/^    val hartIsInResetSync = Wire(Vec(nComponents, Bool()))$/;"	l
hartOffset	src/main/scala/devices/tilelink/Plic.scala	/^  def hartOffset(i: Int) = i * 0x1000$/;"	m
hartRegFields	src/main/scala/devices/tilelink/Plic.scala	/^    val hartRegFields = Seq.tabulate(nHarts) { i =>$/;"	l
hartResetNxt	src/main/scala/devices/debug/Debug.scala	/^      val hartResetNxt = Wire(Vec(nComponents, Bool()))$/;"	l
hartResetReg	src/main/scala/devices/debug/Debug.scala	/^      val hartResetReg = RegNext(next=hartResetNxt, init=0.U.asTypeOf(hartResetNxt))$/;"	l
hartResetReq	src/main/scala/devices/debug/Debug.scala	/^      val hartResetReq = cfg.hasHartResets.option(Output(Vec(nComponents, Bool())))$/;"	l
hartResetReq	src/main/scala/devices/debug/Debug.scala	/^      val hartResetReq = p(DebugModuleKey).get.hasHartResets.option(Output(Vec(nComponents, Bool())))$/;"	l
hartResetReq	src/main/scala/devices/debug/Periphery.scala	/^  val hartResetReq = (p(DebugModuleKey).exists(x=>x.hasHartResets)).option(Output(Vec(nComponents, Bool())))$/;"	l
hartResumingId	src/main/scala/devices/debug/Debug.scala	/^    val hartResumingId       = Wire(UInt(sbIdWidth.W))$/;"	l
hartResumingIdIndex	src/main/scala/devices/debug/Debug.scala	/^        val hartResumingIdIndex = UIntToOH(hartSelFuncs.hartIdToHartSel(hartResumingId))$/;"	l
hartResumingWrEn	src/main/scala/devices/debug/Debug.scala	/^    val hartResumingWrEn     = Wire(Bool())$/;"	l
hartSelFuncs	src/main/scala/devices/debug/Debug.scala	/^    val hartSelFuncs = if (getNComponents() > 1) p(DebugModuleHartSelKey) else DebugModuleHartSelFuncs($/;"	l
hartSelected	src/main/scala/devices/debug/Debug.scala	/^    def hartSelected(hart: Int): Bool = {$/;"	m
hartid	src/main/scala/groundtest/TraceGen.scala	/^    val hartid = UInt(INPUT, log2Up(numGens))$/;"	l
hartid	src/main/scala/rocket/CSR.scala	/^  val hartid = UInt(INPUT, hartIdLen)$/;"	l
hartid	src/main/scala/tile/Core.scala	/^    val hartid = UInt(hartIdLen.W).asInput$/;"	l
hartid	src/main/scala/tile/FPU.scala	/^  val hartid = Input(UInt(hartIdLen.W))$/;"	l
hartid	src/main/scala/util/CoreMonitor.scala	/^  val hartid = UInt(width = xLen.W)$/;"	l
hartinfoRegFields	src/main/scala/devices/debug/Debug.scala	/^    val hartinfoRegFields = RegFieldGroup("dmi_hartinfo", Some("hart information"), Seq($/;"	l
hartreset	src/main/scala/devices/debug/dm_registers.scala	/^  val hartreset = Bool()$/;"	l
hartresetWrEn	src/main/scala/devices/debug/Debug.scala	/^    val hartresetWrEn       = WireInit(false.B)$/;"	l
harts	scripts/RocketSim.py	/^    harts = [RocketSimHart()]$/;"	v	class:RocketSim
harts	scripts/RocketSim32.py	/^    harts = [RocketSimHart()]$/;"	v	class:RocketSim
harts	scripts/RocketSim64.py	/^    harts = [RocketSimHart()]$/;"	v	class:RocketSim
harts	src/main/scala/devices/tilelink/Plic.scala	/^    val harts = io_harts.flatten$/;"	l
hartsel	src/main/scala/devices/debug/Debug.scala	/^  val hartsel      = UInt(10.W)$/;"	l
hartselIndex	src/main/scala/devices/debug/Debug.scala	/^        val hartselIndex        = UIntToOH(io.innerCtrl.bits.hartsel)$/;"	l
hartsel_mask	src/main/scala/devices/debug/Debug.scala	/^    val hartsel_mask = if (nComponents > 1) ((1 << p(MaxHartIdBits)) - 1).U else 0.U$/;"	l
hartselhi	src/main/scala/devices/debug/dm_registers.scala	/^  val hartselhi = UInt(10.W)$/;"	l
hartsello	src/main/scala/devices/debug/dm_registers.scala	/^  val hartsello = UInt(10.W)$/;"	l
hartselloWrEn	src/main/scala/devices/debug/Debug.scala	/^    val hartselloWrEn       = WireInit(false.B)$/;"	l
hasAddr	src/main/scala/devices/debug/SBA.scala	/^    val hasAddr    = Seq(true, hasSBAddr1, hasSBAddr2, hasSBAddr3)$/;"	l
hasData	src/main/scala/amba/axis/Parameters.scala	/^  def hasData = true$/;"	m
hasData	src/main/scala/devices/debug/SBA.scala	/^    val hasData        = Seq(true, hasSBData1, hasSBData2And3, hasSBData2And3)$/;"	l
hasData	src/main/scala/devices/tilelink/TestRAM.scala	/^    val hasData = edge.hasData(in.a.bits)$/;"	l
hasData	src/main/scala/tilelink/Edges.scala	/^        val hasData = this.hasData(bundle)$/;"	l
hasData	src/main/scala/tilelink/Edges.scala	/^  def hasData(x: TLChannel): Bool = {$/;"	m
hasData	src/main/scala/tilelink/WidthWidget.scala	/^      val hasData = edgeIn.hasData(in.bits)$/;"	l
hasDest	src/main/scala/amba/axis/Parameters.scala	/^  def hasDest = destBits > 0$/;"	m
hasFifoIdFast	src/main/scala/tilelink/Parameters.scala	/^  def hasFifoIdFast(address: UInt) = fastProperty(address, _.fifoId.isDefined, (b:Boolean) => Bool(b))$/;"	m
hasId	src/main/scala/amba/axis/Parameters.scala	/^  def hasId   = idBits > 0$/;"	m
hasKeep	src/main/scala/amba/axis/Parameters.scala	/^  def hasKeep = true$/;"	m
hasLast	src/main/scala/amba/axis/Parameters.scala	/^  def hasLast = !oneBeat$/;"	m
hasReadPermission	src/main/scala/tilelink/Metadata.scala	/^  def hasReadPermission(state: UInt): Bool = state > Nothing$/;"	m
hasSBAddr1	src/main/scala/devices/debug/SBA.scala	/^    val hasSBAddr1 = (sb2tl.module.edge.bundle.addressBits >= 33)$/;"	l
hasSBAddr2	src/main/scala/devices/debug/SBA.scala	/^    val hasSBAddr2 = (sb2tl.module.edge.bundle.addressBits >= 65)$/;"	l
hasSBAddr3	src/main/scala/devices/debug/SBA.scala	/^    val hasSBAddr3 = (sb2tl.module.edge.bundle.addressBits >= 97)$/;"	l
hasSBData1	src/main/scala/devices/debug/SBA.scala	/^    val hasSBData1     = (cfg.maxSupportedSBAccess >   32)$/;"	l
hasSBData2And3	src/main/scala/devices/debug/SBA.scala	/^    val hasSBData2And3 = (cfg.maxSupportedSBAccess == 128)$/;"	l
hasStrb	src/main/scala/amba/axis/Parameters.scala	/^  def hasStrb = !aligned$/;"	m
hasSupervisorMode	src/main/scala/tile/Core.scala	/^  def hasSupervisorMode: Boolean = useSupervisor || useVM$/;"	m
hasVectoredInterrupts	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^  def hasVectoredInterrupts: Boolean$/;"	m
hasWritePermission	src/main/scala/tilelink/Metadata.scala	/^  def hasWritePermission(state: UInt): Bool = state > Branch$/;"	m
has_data	src/main/scala/rocket/HellaCache.scala	/^  val has_data = Bool()$/;"	l
has_data	src/main/scala/rocket/RocketCore.scala	/^    val has_data = wb_wen && !wb_set_sboard$/;"	l
hasel	src/main/scala/devices/debug/Debug.scala	/^  val hasel        = Bool()$/;"	l
hasel	src/main/scala/devices/debug/dm_registers.scala	/^  val hasel = Bool()$/;"	l
haselWrEn	src/main/scala/devices/debug/Debug.scala	/^    val haselWrEn           = WireInit(false.B)$/;"	l
hashAddr	src/main/scala/rocket/BTB.scala	/^    def hashAddr(addr: UInt) = {$/;"	m
hashHistory	src/main/scala/rocket/BTB.scala	/^    def hashHistory(hist: UInt) = if (params.historyLength == params.historyBits) hist else {$/;"	m
hasresethaltreq	src/main/scala/devices/debug/dm_registers.scala	/^  val hasresethaltreq = Bool()$/;"	l
hauser	src/main/scala/amba/ahb/Bundles.scala	/^  val hauser    = BundleMap(params.requestFields)$/;"	l
hauser	src/main/scala/amba/ahb/Bundles.scala	/^  val hauser  = BundleMap(params.requestFields)$/;"	l
hauser	src/main/scala/tilelink/ToAHB.scala	/^  val hauser = BundleMap(params.bundle.requestFields)$/;"	l
haveBasicCounters	src/main/scala/tile/Core.scala	/^  val haveBasicCounters: Boolean$/;"	l
haveCFlush	src/main/scala/tile/Core.scala	/^  val haveCFlush: Boolean$/;"	l
haveChildAddresses	src/main/scala/diplomacy/Resources.scala	/^    val haveChildAddresses = map.value.values.exists(_.exists {$/;"	l
haveFSDirty	src/main/scala/rocket/RocketCore.scala	/^  val haveFSDirty = false$/;"	l
haveFSDirty	src/main/scala/tile/Core.scala	/^  val haveFSDirty: Boolean$/;"	l
haveResetBitRegs	src/main/scala/devices/debug/Debug.scala	/^    val haveResetBitRegs = Reg(UInt(nComponents.W))$/;"	l
hawindowsel	src/main/scala/devices/debug/dm_registers.scala	/^  val hawindowsel = UInt(15.W)$/;"	l
hazard_targets	src/main/scala/rocket/RocketCore.scala	/^  val hazard_targets = Seq((id_ctrl.rxs1 && id_raddr1 =\/= UInt(0), id_raddr1),$/;"	l
hburst	src/main/scala/amba/ahb/Bundles.scala	/^  val hburst    = UInt(OUTPUT, width = params.burstBits)$/;"	l
hburst	src/main/scala/amba/ahb/Bundles.scala	/^  val hburst  = UInt(OUTPUT, width = params.burstBits)$/;"	l
hburst	src/main/scala/tilelink/ToAHB.scala	/^  val hburst = UInt(width = AHBParameters.burstBits)$/;"	l
hbusreq	src/main/scala/amba/ahb/Bundles.scala	/^  val hbusreq   = if (params.lite) None else Some(Bool(OUTPUT))$/;"	l
hcontext	src/main/scala/rocket/Instructions.scala	/^  val hcontext = 0x6a8$/;"	l
hcounteren	src/main/scala/rocket/Instructions.scala	/^  val hcounteren = 0x606$/;"	l
hduser	src/main/scala/amba/ahb/Bundles.scala	/^  val hduser    = BundleMap(params.responseFields)$/;"	l
head	src/main/scala/util/MultiWidthFifo.scala	/^    val head = Reg(init = UInt(0, log2Up(n * nBeats)))$/;"	l
head	src/main/scala/util/MultiWidthFifo.scala	/^    val head = Reg(init = UInt(0, log2Up(n \/ nBeats)))$/;"	l
header	src/main/scala/linting/LintException.scala	/^        val header =$/;"	l
heads	src/main/scala/tilelink/Edges.scala	/^    val heads = todo.map(_.head)$/;"	l
hedeleg	src/main/scala/rocket/Instructions.scala	/^  val hedeleg = 0x602$/;"	l
helpPP	src/main/scala/tilelink/HintHandler.scala	/^      val helpPP = isHint && edgeOut.manager.fastProperty(in.a.bits.address, usePP, (b:Boolean) => b.B)$/;"	l
helper	src/main/scala/diplomacy/Parameters.scala	/^    def helper(id: BigInt, tail: Seq[BigInt]): Seq[BigInt] =$/;"	m
helper	src/main/scala/diplomacy/Parameters.scala	/^    def helper(x: BigInt): Seq[BigInt] = {$/;"	m
helper	src/main/scala/tile/FPU.scala	/^    def helper(x: UInt, t: FType): Bool = if (typeTag(t) == 0) true.B else {$/;"	m
helper	src/main/scala/tile/FPU.scala	/^    def helper(x: UInt, t: FType): Seq[(Bool, UInt)] = {$/;"	m
helper	src/main/scala/tile/FPU.scala	/^    def helper(x: UInt, t: FType): UInt = {$/;"	m
helper	src/main/scala/tilelink/WidthWidget.scala	/^      def helper(idata: UInt): UInt = {$/;"	m
helper	src/main/scala/tilelink/WidthWidget.scala	/^      def helper(idata: UInt, width: Int): UInt = {$/;"	m
helper	src/main/scala/unittest/TestGenerator.scala	/^    def helper(lm: LazyModule, tail: Seq[LazyUnitTest]): Seq[LazyUnitTest] =$/;"	m
helper	src/main/scala/util/Misc.scala	/^    def helper(i: Int): Seq[(Bool, Bool)] = {$/;"	m
helper	src/main/scala/util/MultiLaneQueue.scala	/^    def helper(bit: Int, offset: Int, x: Vector[T]): Vector[T] = {$/;"	m
helper	src/main/scala/util/PrefixSum.scala	/^    def helper(layer: Int, offset: Int, x: Vector[T]): Vector[T] = {$/;"	m
helper	src/main/scala/util/ScatterGather.scala	/^    def helper(layer: Int, offset: Int, holeSum0: Vector[UInt], data0: Vector[T]): Vector[T] = {$/;"	m
helper	src/main/scala/util/package.scala	/^    def helper(s: Int, x: UInt): UInt =$/;"	m
hertz	src/main/scala/diplomacy/Resources.scala	/^      val hertz = resources("hertz").map(_.value)$/;"	l
hertz	src/main/scala/subsystem/BaseSubsystem.scala	/^    var hertz = p(DTSTimebase) \/\/ add for timebase-frequency$/;"	l
heterogeneousOrGlobalSetting	src/main/scala/util/package.scala	/^  def heterogeneousOrGlobalSetting[T](in: Seq[T], n: Int): Seq[T] = in.size match {$/;"	m
hfma	src/main/scala/tile/FPU.scala	/^          val hfma = Module(new FPUFMAPipe(cfg.sfmaLatency, FType.H))$/;"	l
hg	src/main/scala/rocket/PTW.scala	/^      val hg = usingHypervisor && io.dpath.sfence.bits.hg$/;"	l
hg	src/main/scala/rocket/TLB.scala	/^        val hg = usingHypervisor && io.sfence.bits.hg$/;"	l
hg	src/main/scala/rocket/TLB.scala	/^  val hg = Bool()$/;"	l
hgBits	src/main/scala/devices/debug/Debug.scala	/^      val hgBits = log2Up(nHaltGroups)$/;"	l
hgDebugInt	src/main/scala/devices/debug/Debug.scala	/^      val hgDebugInt      = Output(Vec(getNComponents(), Bool()))$/;"	l
hgDebugInt	src/main/scala/devices/debug/Debug.scala	/^      val hgDebugInt = Input(Vec(nComponents, Bool()))$/;"	l
hgDebugInt	src/main/scala/devices/debug/Debug.scala	/^      val hgDebugInt = Output(Vec(nComponents, Bool()))$/;"	l
hgDebugInt	src/main/scala/devices/debug/Debug.scala	/^    val hgDebugInt     = WireInit(VecInit(Seq.fill(nComponents) {false.B} ))$/;"	l
hgExtTrigger	src/main/scala/devices/debug/Debug.scala	/^          val hgExtTrigger = Reg(UInt(trigBits.W))$/;"	l
hgFired	src/main/scala/devices/debug/Debug.scala	/^      val hgFired          = RegInit (VecInit(Seq.fill(nHaltGroups+1) {false.B} ))$/;"	l
hgHartFiring	src/main/scala/devices/debug/Debug.scala	/^      val hgHartFiring     = WireInit(VecInit(Seq.fill(nHaltGroups+1) {false.B} ))     \/\/ which hg's are firing due to hart halting$/;"	l
hgHartsAllHalted	src/main/scala/devices/debug/Debug.scala	/^      val hgHartsAllHalted = WireInit(VecInit(Seq.fill(nHaltGroups+1) {false.B} ))     \/\/ in which hg's have all harts halted$/;"	l
hgParticipateHart	src/main/scala/devices/debug/Debug.scala	/^      val hgParticipateHart = RegInit(VecInit(Seq.fill(nComponents)(0.U(hgBits.W))))$/;"	l
hgParticipateTrig	src/main/scala/devices/debug/Debug.scala	/^      val hgParticipateTrig = if (nExtTriggers > 0) RegInit(VecInit(Seq.fill(nExtTriggers)(0.U(hgBits.W)))) else Nil$/;"	l
hgSelect	src/main/scala/devices/debug/Debug.scala	/^        val hgSelect = Reg(Bool())$/;"	l
hgTrigFiring	src/main/scala/devices/debug/Debug.scala	/^      val hgTrigFiring     = WireInit(VecInit(Seq.fill(nHaltGroups+1) {false.B} ))     \/\/ which hg's are firing due to trig in$/;"	l
hgTrigsAllAcked	src/main/scala/devices/debug/Debug.scala	/^      val hgTrigsAllAcked  = WireInit(VecInit(Seq.fill(nHaltGroups+1) { true.B} ))     \/\/ in which hg's have all trigouts been acked$/;"	l
hgatp	src/main/scala/rocket/CSR.scala	/^  val hgatp = new PTBR().asOutput$/;"	l
hgatp	src/main/scala/rocket/Instructions.scala	/^  val hgatp = 0x680$/;"	l
hgatp	src/main/scala/rocket/PTW.scala	/^  val hgatp = new PTBR().asInput$/;"	l
hgatp_initial_count	src/main/scala/rocket/PTW.scala	/^        val hgatp_initial_count = pgLevels - minPgLevels - io.dpath.hgatp.additionalPgLevels$/;"	l
hgeie	src/main/scala/rocket/Instructions.scala	/^  val hgeie = 0x607$/;"	l
hgeip	src/main/scala/rocket/Instructions.scala	/^  val hgeip = 0xe12$/;"	l
hgrant	src/main/scala/amba/ahb/Bundles.scala	/^  val hgrant  = if (params.lite) None else Some(Bool(INPUT))$/;"	l
hgselect	src/main/scala/devices/debug/dm_registers.scala	/^  val hgselect = Bool()$/;"	l
hgselectWrEn	src/main/scala/devices/debug/Debug.scala	/^    val hgselectWrEn   = WireInit(false.B)$/;"	l
hgwrite	src/main/scala/devices/debug/dm_registers.scala	/^  val hgwrite = Bool()$/;"	l
hgwriteWrEn	src/main/scala/devices/debug/Debug.scala	/^    val hgwriteWrEn    = WireInit(false.B)$/;"	l
hi	src/main/scala/rocket/BTB.scala	/^      val hi = addr >> log2Ceil(fetchBytes)$/;"	l
hi	src/main/scala/rocket/CSR.scala	/^      val hi = lo + CSRs.mcycleh - CSRs.mcycle$/;"	l
hi	src/main/scala/rocket/Multiplier.scala	/^    val hi = Mux(halfW, Fill(w\/2, sign), x(w-1,w\/2))$/;"	l
hi	src/main/scala/util/Counters.scala	/^      val hi = Mux(nextSmall(smallWidth), large ^ (large +& UInt(1)), UInt(0)) >> 1$/;"	l
hiOut	src/main/scala/rocket/Multiplier.scala	/^  val hiOut = Mux(halfWidth(req), Fill(w\/2, loOut(w\/2-1)), result(w-1,w\/2))$/;"	l
hi_mask	src/main/scala/util/LanePositionedQueue.scala	/^  val hi_mask = enq_mask(2*lanes-1, lanes)$/;"	l
hideleg	src/main/scala/rocket/Instructions.scala	/^  val hideleg = 0x603$/;"	l
hie	src/main/scala/rocket/CSR.scala	/^  val hie = Bool()$/;"	l
hie	src/main/scala/rocket/Instructions.scala	/^  val hie = 0x604$/;"	l
high	src/main/scala/devices/tilelink/BootROM.scala	/^    val high = if (wrapSize == size) UInt(0) else in.a.bits.address(log2Ceil(size)-1, log2Ceil(wrapSize))$/;"	l
high	src/main/scala/devices/tilelink/Plic.scala	/^      val high = low + wide - 1$/;"	l
high	src/main/scala/regmapper/RegMapper.scala	/^      val high = low + field.width - 1$/;"	l
highHoles	src/main/scala/util/MultiPortQueue.scala	/^    val highHoles = sparse.map(x => WireInit(UInt(popBits.W), !x.ready))$/;"	l
highHoles	src/main/scala/util/MultiPortQueue.scala	/^    val highHoles = sparse.map(x => WireInit(UInt(popBits.W), !x.valid))$/;"	l
high_interrupts	src/main/scala/rocket/CSR.scala	/^  val high_interrupts = (if (usingNMI) 0.U else io.interrupts.buserror.map(_ << CSR.busErrorIntCause).getOrElse(0.U))$/;"	l
highest	src/main/scala/tilelink/Arbiter.scala	/^  def highest[T <: TLChannel](edge: TLEdge, sink: DecoupledIO[T], sources: DecoupledIO[T]*): Unit = {$/;"	m
highest	src/main/scala/tilelink/Arbiter.scala	/^  def highest[T <: TLChannel](edge: TLEdge, sink: ReadyValidCancel[T], sources: ReadyValidCancel[T]*): Unit = {$/;"	m
highestIndexFirst	src/main/scala/tilelink/Arbiter.scala	/^  val highestIndexFirst: Policy = (width, valids, select) => ~((rightOR(valids) >> 1).pad(width))$/;"	l
hint	src/main/scala/devices/tilelink/DevNull.scala	/^  val hint = if (params.hint) xfer else TransferSizes.none$/;"	l
hint	src/main/scala/tilelink/Parameters.scala	/^  def hint:       TransferSizes$/;"	m
hint	src/main/scala/tilelink/ToAHB.scala	/^  val hint   = Bool()$/;"	l
hint_outstanding	src/main/scala/rocket/ICache.scala	/^  val hint_outstanding = RegInit(false.B)$/;"	l
hints	src/main/scala/tilelink/HintHandler.scala	/^    val hints = LazyModule(new TLHintHandler(passthrough))$/;"	l
hip	src/main/scala/rocket/Instructions.scala	/^  val hip = 0x644$/;"	l
history	src/main/scala/rocket/BTB.scala	/^  val history = RegInit(0.U(params.historyLength.W))$/;"	l
history	src/main/scala/rocket/BTB.scala	/^  val history = UInt(width = btbParams.bhtParams.map(_.historyLength).getOrElse(1))$/;"	l
hit	src/main/scala/rocket/PMP.scala	/^    val hit = pmp.hit(io.addr, io.size, lgMaxSize, prevPMP)$/;"	l
hit	src/main/scala/rocket/PMP.scala	/^  def hit(x: UInt, lgSize: UInt, lgMaxSize: Int, prev: PMP): Bool =$/;"	m
hit	src/main/scala/rocket/PTW.scala	/^    val hit = hits.orR && can_hit$/;"	l
hit	src/main/scala/rocket/TLB.scala	/^  def hit(vpn: UInt, virtual: Bool): Bool = {$/;"	m
hit	src/main/scala/util/Replacement.scala	/^  def hit = {}$/;"	m
hit	src/main/scala/util/Replacement.scala	/^  def hit: Unit$/;"	m
hitState	src/main/scala/rocket/DCache.scala	/^      val hitState = Mux(inScratchpad, ClientMetadata.maximum, ClientMetadata.onReset)$/;"	l
hit_again	src/main/scala/tilelink/Metadata.scala	/^    val hit_again = r1._1 && r2._1$/;"	l
hit_mask	src/main/scala/rocket/TLB.scala	/^    val hit_mask = Fill(ordinary_entries.size, r_gpa_valid && r_gpa_vpn === vpn) | Fill(all_entries.size, !vstage1_en)$/;"	l
hits	src/main/scala/rocket/Events.scala	/^  val hits = Wire(Vec(size, Bool()))$/;"	l
hits	src/main/scala/rocket/PTW.scala	/^    val hits = tags.map(_ === tag).asUInt & valid$/;"	l
hits	src/main/scala/rocket/TLB.scala	/^  val hits = Cat(!vm_enabled, real_hits)$/;"	l
hitsVec	src/main/scala/rocket/TLB.scala	/^  val hitsVec = all_entries.map(vm_enabled && _.hit(vpn, priv_v))$/;"	l
hk	src/main/scala/util/BundleMap.scala	/^    def hk = HashMap(keys.map(k => (k.name, k)):_*)$/;"	m
hlock	src/main/scala/amba/ahb/Bundles.scala	/^  val hlock     = if (params.lite) None else Some(Bool(OUTPUT))$/;"	l
hlsv	src/main/scala/rocket/CSR.scala	/^  val hlsv = Seq(HLV_B, HLV_BU, HLV_H, HLV_HU, HLV_W, HLV_WU, HLV_D, HSV_B, HSV_H, HSV_W, HSV_D, HLVX_HU, HLVX_WU)$/;"	l
hmaster	src/main/scala/amba/ahb/Bundles.scala	/^  val hmaster   = if (params.lite) None else Some(UInt(OUTPUT, width = 4))$/;"	l
hmastlock	src/main/scala/amba/ahb/Bundles.scala	/^  val hmastlock = Bool(OUTPUT)$/;"	l
hmastlock	src/main/scala/amba/ahb/Bundles.scala	/^  val hmastlock = if (params.lite) Some(Bool(OUTPUT)) else None$/;"	l
hold	src/main/scala/amba/axi4/Delayer.scala	/^      val hold = RegInit(Bool(false))$/;"	l
hold	src/main/scala/tilelink/WidthWidget.scala	/^          val hold = Mux(first, sel, RegEnable(sel, first)) \/\/ a_first is not for whole xfer$/;"	l
holdUnless	src/main/scala/util/package.scala	/^    def holdUnless(enable: Bool): T = Mux(enable, x, RegEnable(x, enable))$/;"	m
holeSum	src/main/scala/util/ScatterGather.scala	/^      val holeSum = b.toVector$/;"	l
holes	src/main/scala/tilelink/AddressAdjuster.scala	/^    val holes = la.foldLeft(ra) { case (holes, la) => holes.flatMap(_.subtract(la)) }$/;"	l
holes	src/main/scala/util/ScatterGather.scala	/^    val holes = data.map(x => WireInit(UInt(popBits.W), (!x.valid).asUInt))$/;"	l
homo	src/main/scala/rocket/TLBPermissions.scala	/^    val homo = AddressSet.unify(grouped.values.flatten.toList)$/;"	l
homogeneous	src/main/scala/rocket/PMP.scala	/^  def homogeneous(x: UInt, pgLevel: UInt, prev: PMP): Bool =$/;"	m
homogeneous	src/main/scala/rocket/PTW.scala	/^  val homogeneous = Bool()$/;"	l
homogeneous	src/main/scala/rocket/PTW.scala	/^  val homogeneous = pmaHomogeneous && pmpHomogeneous$/;"	l
homogeneous	src/main/scala/rocket/TLB.scala	/^  val homogeneous = TLBPageLookup(edge.manager.managers, xLen, p(CacheBlockBytes), BigInt(1) << pgIdxBits)(mpu_physaddr).homogeneous$/;"	l
homogeneous	src/main/scala/rocket/TLBPermissions.scala	/^  def homogeneous(managers: Seq[TLManagerParameters], pageSize: BigInt): Boolean = {$/;"	m
hpmWidth	src/main/scala/rocket/CSR.scala	/^  val hpmWidth = 40$/;"	l
hpmcounter10	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter10 = 0xc0a$/;"	l
hpmcounter10h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter10h = 0xc8a$/;"	l
hpmcounter11	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter11 = 0xc0b$/;"	l
hpmcounter11h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter11h = 0xc8b$/;"	l
hpmcounter12	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter12 = 0xc0c$/;"	l
hpmcounter12h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter12h = 0xc8c$/;"	l
hpmcounter13	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter13 = 0xc0d$/;"	l
hpmcounter13h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter13h = 0xc8d$/;"	l
hpmcounter14	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter14 = 0xc0e$/;"	l
hpmcounter14h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter14h = 0xc8e$/;"	l
hpmcounter15	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter15 = 0xc0f$/;"	l
hpmcounter15h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter15h = 0xc8f$/;"	l
hpmcounter16	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter16 = 0xc10$/;"	l
hpmcounter16h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter16h = 0xc90$/;"	l
hpmcounter17	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter17 = 0xc11$/;"	l
hpmcounter17h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter17h = 0xc91$/;"	l
hpmcounter18	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter18 = 0xc12$/;"	l
hpmcounter18h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter18h = 0xc92$/;"	l
hpmcounter19	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter19 = 0xc13$/;"	l
hpmcounter19h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter19h = 0xc93$/;"	l
hpmcounter20	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter20 = 0xc14$/;"	l
hpmcounter20h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter20h = 0xc94$/;"	l
hpmcounter21	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter21 = 0xc15$/;"	l
hpmcounter21h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter21h = 0xc95$/;"	l
hpmcounter22	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter22 = 0xc16$/;"	l
hpmcounter22h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter22h = 0xc96$/;"	l
hpmcounter23	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter23 = 0xc17$/;"	l
hpmcounter23h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter23h = 0xc97$/;"	l
hpmcounter24	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter24 = 0xc18$/;"	l
hpmcounter24h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter24h = 0xc98$/;"	l
hpmcounter25	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter25 = 0xc19$/;"	l
hpmcounter25h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter25h = 0xc99$/;"	l
hpmcounter26	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter26 = 0xc1a$/;"	l
hpmcounter26h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter26h = 0xc9a$/;"	l
hpmcounter27	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter27 = 0xc1b$/;"	l
hpmcounter27h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter27h = 0xc9b$/;"	l
hpmcounter28	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter28 = 0xc1c$/;"	l
hpmcounter28h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter28h = 0xc9c$/;"	l
hpmcounter29	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter29 = 0xc1d$/;"	l
hpmcounter29h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter29h = 0xc9d$/;"	l
hpmcounter3	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter3 = 0xc03$/;"	l
hpmcounter30	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter30 = 0xc1e$/;"	l
hpmcounter30h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter30h = 0xc9e$/;"	l
hpmcounter31	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter31 = 0xc1f$/;"	l
hpmcounter31h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter31h = 0xc9f$/;"	l
hpmcounter3h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter3h = 0xc83$/;"	l
hpmcounter4	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter4 = 0xc04$/;"	l
hpmcounter4h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter4h = 0xc84$/;"	l
hpmcounter5	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter5 = 0xc05$/;"	l
hpmcounter5h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter5h = 0xc85$/;"	l
hpmcounter6	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter6 = 0xc06$/;"	l
hpmcounter6h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter6h = 0xc86$/;"	l
hpmcounter7	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter7 = 0xc07$/;"	l
hpmcounter7h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter7h = 0xc87$/;"	l
hpmcounter8	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter8 = 0xc08$/;"	l
hpmcounter8h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter8h = 0xc88$/;"	l
hpmcounter9	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter9 = 0xc09$/;"	l
hpmcounter9h	src/main/scala/rocket/Instructions.scala	/^  val hpmcounter9h = 0xc89$/;"	l
hprot	src/main/scala/amba/ahb/Bundles.scala	/^  val hprot     = UInt(OUTPUT, width = params.protBits)$/;"	l
hprot	src/main/scala/amba/ahb/Bundles.scala	/^  val hprot   = UInt(OUTPUT, width = params.protBits)$/;"	l
hprot	src/main/scala/tilelink/ToAHB.scala	/^        val hprot = Wire(Vec(4, Bool()))$/;"	l
hr	src/main/scala/rocket/PTW.scala	/^  val hr = Bool()$/;"	l
hr	src/main/scala/rocket/TLB.scala	/^  val hr = Bool()$/;"	l
hrDebugInt	src/main/scala/devices/debug/Debug.scala	/^    val hrDebugInt = Wire(Vec(nComponents, Bool()))$/;"	l
hrDebugIntReg	src/main/scala/devices/debug/Debug.scala	/^      val hrDebugIntReg = RegInit(VecInit(Seq.fill(nComponents) { false.B } ))$/;"	l
hrReset	src/main/scala/devices/debug/Debug.scala	/^    val hrReset    = WireInit(VecInit(Seq.fill(nComponents) { false.B } ))$/;"	l
hr_array	src/main/scala/rocket/TLB.scala	/^  val hr_array = Cat(true.B, entries.map(_.hr).asUInt | Mux(io.ptw.status.mxr, entries.map(_.hx).asUInt, UInt(0)) | stage2_bypass)$/;"	l
hrdata	src/main/scala/amba/ahb/Bundles.scala	/^  val hrdata    = UInt(INPUT, width = params.dataBits)$/;"	l
hrdata	src/main/scala/amba/ahb/Bundles.scala	/^  val hrdata  = UInt(INPUT, width = params.dataBits)$/;"	l
hready	src/main/scala/amba/ahb/Bundles.scala	/^  val hready    = Bool(OUTPUT) \/\/ from arbiter$/;"	l
hready	src/main/scala/amba/ahb/Bundles.scala	/^  val hready  = Bool(INPUT)$/;"	l
hreadyout	src/main/scala/amba/ahb/Bundles.scala	/^  val hreadyout = Bool(INPUT)  \/\/ to arbiter$/;"	l
hreadyout	src/main/scala/amba/ahb/ToTL.scala	/^      val hreadyout = Mux(d_write, (!d_send || out.a.ready) && (!d_last || !d_recv || out.d.valid), out.d.valid || !d_recv)$/;"	l
hresp	src/main/scala/amba/ahb/Bundles.scala	/^  val hresp     = UInt(INPUT, width = params.hrespBits)$/;"	l
hresp	src/main/scala/amba/ahb/Bundles.scala	/^  val hresp   = UInt(INPUT, width = params.hrespBits)$/;"	l
hresp	src/main/scala/amba/ahb/ToTL.scala	/^      val hresp = d_fail || (out.d.valid && (out.d.bits.denied || out.d.bits.corrupt))$/;"	l
hrespBits	src/main/scala/amba/ahb/Parameters.scala	/^  val hrespBits = if (lite) 1 else AHBParameters.hrespBits$/;"	l
hrespBits	src/main/scala/amba/ahb/Protocol.scala	/^  val hrespBits = 2  \/\/ AHB full$/;"	l
hrmask	src/main/scala/devices/debug/Debug.scala	/^    val hrmask    = Wire(Vec(nComponents, Bool()))$/;"	l
hrmask	src/main/scala/devices/debug/Debug.scala	/^  val hrmask       = Vec(nComponents, Bool())$/;"	l
hrmaskNxt	src/main/scala/devices/debug/Debug.scala	/^    val hrmaskNxt = Wire(Vec(nComponents, Bool()))$/;"	l
hrmaskReg	src/main/scala/devices/debug/Debug.scala	/^    val hrmaskReg  = RegInit(hrReset)$/;"	l
hrmaskReg	src/main/scala/devices/debug/Debug.scala	/^    val hrmaskReg = RegNext(next=hrmaskNxt, init=0.U.asTypeOf(hrmaskNxt)).suggestName("hrmaskReg")$/;"	l
hs_delegable_counters	src/main/scala/rocket/CSR.scala	/^  val hs_delegable_counters = delegable_counters$/;"	l
hs_delegable_exceptions	src/main/scala/rocket/CSR.scala	/^  val hs_delegable_exceptions = UInt(Seq($/;"	l
hsel	src/main/scala/amba/ahb/Bundles.scala	/^  val hsel      = Bool(OUTPUT)$/;"	l
hsize	src/main/scala/amba/ahb/Bundles.scala	/^  val hsize     = UInt(OUTPUT, width = params.sizeBits)$/;"	l
hsize	src/main/scala/amba/ahb/Bundles.scala	/^  val hsize   = UInt(OUTPUT, width = params.sizeBits)$/;"	l
hsize	src/main/scala/tilelink/ToAHB.scala	/^  val hsize  = UInt(width = AHBParameters.sizeBits)$/;"	l
hsplit	src/main/scala/amba/ahb/Bundles.scala	/^  val hsplit    = if (params.lite) None else Some(UInt(INPUT, width = 16))$/;"	l
hstatus	src/main/scala/rocket/CSR.scala	/^  val hstatus = new HStatus().asOutput$/;"	l
hstatus	src/main/scala/rocket/Instructions.scala	/^  val hstatus = 0x600$/;"	l
hstatus	src/main/scala/rocket/PTW.scala	/^  val hstatus = new HStatus().asInput$/;"	l
htimedelta	src/main/scala/rocket/Instructions.scala	/^  val htimedelta = 0x605$/;"	l
htimedeltah	src/main/scala/rocket/Instructions.scala	/^  val htimedeltah = 0x615$/;"	l
htinst	src/main/scala/rocket/Instructions.scala	/^  val htinst = 0x64a$/;"	l
htrans	src/main/scala/amba/ahb/Bundles.scala	/^  val htrans    = UInt(OUTPUT, width = params.transBits)$/;"	l
htrans	src/main/scala/amba/ahb/Bundles.scala	/^  val htrans  = UInt(OUTPUT, width = params.transBits)$/;"	l
htval	src/main/scala/rocket/CSR.scala	/^  val htval = UInt(INPUT, (maxSVAddrBits + 1) min xLen)$/;"	l
htval	src/main/scala/rocket/Instructions.scala	/^  val htval = 0x643$/;"	l
htval_dmem	src/main/scala/rocket/RocketCore.scala	/^    val htval_dmem = Mux(htval_valid_dmem, io.dmem.s2_gpa, 0.U)$/;"	l
htval_imem	src/main/scala/rocket/RocketCore.scala	/^    val htval_imem = Mux(htval_valid_imem, io.imem.gpa.bits, 0.U)$/;"	l
htval_valid_dmem	src/main/scala/rocket/RocketCore.scala	/^    val htval_valid_dmem = wb_xcpt && tval_dmem_addr && io.dmem.s2_xcpt.gf.asUInt.orR && !io.dmem.s2_xcpt.pf.asUInt.orR$/;"	l
htval_valid_imem	src/main/scala/rocket/RocketCore.scala	/^    val htval_valid_imem = wb_reg_xcpt && wb_reg_cause === Causes.fetch_guest_page_fault$/;"	l
hu	src/main/scala/rocket/CSR.scala	/^  val hu = Bool()$/;"	l
hv	src/main/scala/rocket/TLB.scala	/^        val hv = usingHypervisor && io.sfence.bits.hv$/;"	l
hv	src/main/scala/rocket/TLB.scala	/^  val hv = Bool()$/;"	l
hvip	src/main/scala/rocket/Instructions.scala	/^  val hvip = 0x645$/;"	l
hw	src/main/scala/rocket/PTW.scala	/^  val hw = Bool()$/;"	l
hw	src/main/scala/rocket/TLB.scala	/^  val hw = Bool()$/;"	l
hw_array	src/main/scala/rocket/TLB.scala	/^  val hw_array = Cat(true.B, entries.map(_.hw).asUInt | stage2_bypass)$/;"	l
hwdata	src/main/scala/amba/ahb/Bundles.scala	/^  val hwdata    = UInt(OUTPUT, width = params.dataBits)$/;"	l
hwdata	src/main/scala/amba/ahb/Bundles.scala	/^  val hwdata  = UInt(OUTPUT, width = params.dataBits)$/;"	l
hwrite	src/main/scala/amba/ahb/Bundles.scala	/^  val hwrite    = Bool(OUTPUT)$/;"	l
hwrite	src/main/scala/amba/ahb/Bundles.scala	/^  val hwrite  = Bool(OUTPUT)$/;"	l
hx	src/main/scala/rocket/PTW.scala	/^  val hx = Bool()$/;"	l
hx	src/main/scala/rocket/TLB.scala	/^  val hx = Bool()$/;"	l
hx	src/main/scala/util/BundleMap.scala	/^        val hx = HashMap(rx.elements.toList:_*)$/;"	l
hx	src/main/scala/util/BundleMap.scala	/^    val hx = HashMap(bx.elements.toList:_*)$/;"	l
hx_array	src/main/scala/rocket/TLB.scala	/^  val hx_array = Cat(true.B, entries.map(_.hx).asUInt | stage2_bypass)$/;"	l
hy	src/main/scala/util/BundleMap.scala	/^        val hy = HashMap(ry.elements.toList:_*)$/;"	l
hy	src/main/scala/util/BundleMap.scala	/^    val hy = HashMap(by.elements.toList:_*)$/;"	l
hypervisorExtraAddrBits	src/main/scala/tile/BaseTile.scala	/^  def hypervisorExtraAddrBits: Int = {$/;"	m
i	src/main/scala/diplomacy/Nodes.scala	/^      val i = mapParamsU(iPorts.size, uoParams)$/;"	l
i	src/main/scala/diplomacy/Nodes.scala	/^    val i = x.iPushed$/;"	l
i	src/main/scala/jtag/JtagTap.scala	/^        val i = internalIo.idcode.get.asUInt()$/;"	l
i	src/main/scala/rocket/BTB.scala	/^      val i = BigDecimal(k * math.pow(2, params.historyLength)).toBigInt$/;"	l
i	src/main/scala/util/Misc.scala	/^    var i = BigInt(0)$/;"	l
i2f	src/main/scala/tile/FPU.scala	/^      val i2f = Module(new hardfloat.INToRecFN(xLen, t.exp, t.sig))$/;"	l
i2fResults	src/main/scala/tile/FPU.scala	/^    val i2fResults = for (t <- floatTypes) yield {$/;"	l
iBindingInfo	src/main/scala/diplomacy/Nodes.scala	/^  def iBindingInfo: String = s"""${iBindings.size} inward nodes bound: [${iBindings.map(n => s"${n._3}-${n._2.name}").mkString(",")}]"""$/;"	m
iCacheLogicalTreeNode	src/main/scala/rocket/Frontend.scala	/^  val iCacheLogicalTreeNode = new ICacheLogicalTreeNode(frontend.icache, deviceOpt, tileParams.icache.get)$/;"	l
iGroups	src/main/scala/diplomacy/Nodes.scala	/^    val iGroups = in .grouped(multiplicity).toList.transpose$/;"	l
iKnown	src/main/scala/diplomacy/Nodes.scala	/^      val iKnown = iBindings.map { case (_, n, b, _, _) => b match {$/;"	l
iLen	src/main/scala/scie/SCIE.scala	/^  val iLen = 32$/;"	l
iLen	src/main/scala/tile/BaseTile.scala	/^  def iLen: Int = 32$/;"	m
iParams	src/main/scala/diplomacy/Nodes.scala	/^  def iParams: Seq[DI] = node.inward .diParams$/;"	m
iPorts	src/main/scala/diplomacy/Nodes.scala	/^  lazy val iPorts: Seq[(Int, OutwardNode[DI, UI, BI], Parameters, SourceInfo)] = iDirectPorts.map(iTrace)$/;"	l
iRightReg	src/main/scala/regmapper/RegMapper.scala	/^    val iRightReg = Array.fill(regSize) { Bool(true) }$/;"	l
iStar	src/main/scala/tilelink/BankBinder.scala	/^    val iStar = if (iStars == 0) 0 else (ports - iKnown) \/ iStars$/;"	l
iStars	src/main/scala/diplomacy/Nodes.scala	/^      val iStars = iBindings.count { case (_,n,b,_,_) => b == BIND_STAR || (b == BIND_FLEX && edgeArityDirection(n) > 0) }$/;"	l
iSum	src/main/scala/diplomacy/Nodes.scala	/^      val iSum = iBindings.map { case (_, n, b, _, _) => b match {$/;"	l
i_data	src/main/scala/tilelink/Broadcast.scala	/^  val i_data = Wire(Decoupled(new TLBroadcastData(edgeIn.bundle)))$/;"	l
iaddr	src/main/scala/rocket/CSR.scala	/^  val iaddr = UInt(width = coreMaxAddrBits)$/;"	l
iaddr	src/main/scala/util/TraceCoreInterface.scala	/^  val iaddr = UInt(params.iaddrWidth.W)$/;"	l
iaddrWidth	src/main/scala/util/TraceCoreInterface.scala	/^  val iaddrWidth: Int = 32$/;"	l
ibuf	src/main/scala/rocket/RocketCore.scala	/^  val ibuf = Module(new IBuf)$/;"	l
ibufBTBResp	src/main/scala/rocket/IBuf.scala	/^  val ibufBTBResp = Reg(new BTBResp)$/;"	l
ibus	src/main/scala/subsystem/Attachable.scala	/^  val ibus: InterruptBusWrapper$/;"	l
ibus	src/main/scala/subsystem/BaseSubsystem.scala	/^  val ibus = LazyModule(new InterruptBusWrapper)$/;"	l
icData	src/main/scala/rocket/IBuf.scala	/^  val icData = shiftInsnLeft(Cat(io.imem.bits.data, Fill(fetchWidth, io.imem.bits.data(coreInstBits-1, 0))), icShiftAmt)$/;"	l
icMask	src/main/scala/rocket/IBuf.scala	/^  val icMask = (~UInt(0, fetchWidth*coreInstBits) << (nBufValid << log2Ceil(coreInstBits)))(fetchWidth*coreInstBits-1,0)$/;"	l
icShiftAmt	src/main/scala/rocket/IBuf.scala	/^  val icShiftAmt = (fetchWidth + nBufValid - pcWordBits)(log2Ceil(fetchWidth), 0)$/;"	l
ic_replay	src/main/scala/rocket/IBuf.scala	/^  val ic_replay = buf_replay | Mux(io.imem.bits.replay, valid & ~bufMask, UInt(0))$/;"	l
icache	scripts/debug_rom/debug_rom_nonzero.S	/^icache:$/;"	l
icache	src/main/scala/groundtest/Tile.scala	/^  val icache = Some(ICacheParams())$/;"	l
icache	src/main/scala/rocket/Frontend.scala	/^  val icache = LazyModule(new ICache(icacheParams, staticIdForMetadataUseOnly))$/;"	l
icache	src/main/scala/rocket/Frontend.scala	/^  val icache = outer.icache.module$/;"	l
icache	src/main/scala/tile/BaseTile.scala	/^    val icache = tileParams.icache.map(i => Map($/;"	l
icache	src/main/scala/tile/BaseTile.scala	/^  val icache: Option[ICacheParams]$/;"	l
icache	src/main/scala/tile/BusErrorUnit.scala	/^  val icache = new ICacheErrors$/;"	l
icache_blocked	src/main/scala/rocket/RocketCore.scala	/^  val icache_blocked = !(io.imem.resp.valid || RegNext(io.imem.resp.valid))$/;"	l
icodeSelects	src/main/scala/jtag/JtagTap.scala	/^        val icodeSelects = icodes map { controllerInternal.io.output.instruction === _.asUInt(irLength.W) }$/;"	l
id	src/main/scala/amba/axi4/Bundles.scala	/^  val id     = UInt(width = params.idBits)$/;"	l
id	src/main/scala/amba/axi4/Bundles.scala	/^  val id   = UInt(width = params.idBits)$/;"	l
id	src/main/scala/amba/axi4/ToTL.scala	/^  val id   = UInt(width = params.idBits)$/;"	l
id	src/main/scala/amba/axis/Bundles.scala	/^  def id   = if (params.hasId)   apply(AXISId)   else 0.U$/;"	m
id	src/main/scala/rocket/NBDcache.scala	/^    val id = cfg.nMSHRs + i$/;"	l
id	src/main/scala/tilelink/FIFOFixer.scala	/^        val id    = RegEnable(a_id, in.a.fire() && a_sel && !a_notFIFO)$/;"	l
id	src/main/scala/tilelink/ToAXI4.scala	/^          val id = axi4Id.start + (if (fifo) 0 else i)$/;"	l
idBits	src/main/scala/amba/axis/Parameters.scala	/^  val idBits:      Int,$/;"	l
idCount	src/main/scala/tilelink/ToAXI4.scala	/^      var idCount = Array.fill(edgeOut.master.endId) { None:Option[Int] }$/;"	l
idCoverCauses	src/main/scala/rocket/RocketCore.scala	/^  val idCoverCauses = List($/;"	l
idFactory	src/main/scala/tilelink/Xbar.scala	/^    var idFactory = 0$/;"	l
idLayer	src/main/scala/util/PrefixSum.scala	/^  def idLayer[T](x: Int, y: Vector[T]) = y$/;"	m
idLayer	src/main/scala/util/ScatterGather.scala	/^  def idLayer[T](layer: Int, data: Seq[T], holeSum: Seq[UInt]) = (data, holeSum)$/;"	m
idMap	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  def idMap: Seq[OMIDMapEntry]$/;"	m
idMap	src/main/scala/tilelink/Fuzzer.scala	/^    val idMap = Module(new IDMapGenerator(inFlight))$/;"	l
idOffset	src/main/scala/groundtest/Configs.scala	/^    val idOffset = overrideIdOffset.getOrElse(prev.size)$/;"	l
idOffset	src/main/scala/subsystem/Configs.scala	/^    val idOffset = overrideIdOffset.getOrElse(prev.size)$/;"	l
idStall	src/main/scala/tilelink/ToAXI4.scala	/^      val idStall = Wire(init = Vec.fill(edgeOut.master.endId) { Bool(false) })$/;"	l
idTracker	src/main/scala/amba/axi4/Xbar.scala	/^          def idTracker(port: UInt, req_fire: Bool, resp_fire: Bool) = {$/;"	m
idWidth	src/main/scala/util/IDPool.scala	/^  val idWidth = log2Up(numIds)$/;"	l
id_amo_aq	src/main/scala/rocket/RocketCore.scala	/^  val id_amo_aq = id_inst(0)(26)$/;"	l
id_amo_rl	src/main/scala/rocket/RocketCore.scala	/^  val id_amo_rl = id_inst(0)(25)$/;"	l
id_bypass_src	src/main/scala/rocket/RocketCore.scala	/^  val id_bypass_src = id_raddr.map(raddr => bypass_sources.map(s => s._1 && s._2 === raddr))$/;"	l
id_csr	src/main/scala/rocket/RocketCore.scala	/^  val id_csr = Mux(id_system_insn && id_ctrl.mem, CSR.N, Mux(id_csr_ren, CSR.R, id_ctrl.csr))$/;"	l
id_csr_en	src/main/scala/rocket/RocketCore.scala	/^  val id_csr_en = id_ctrl.csr.isOneOf(CSR.S, CSR.C, CSR.W)$/;"	l
id_csr_flush	src/main/scala/rocket/RocketCore.scala	/^  val id_csr_flush = id_system_insn || (id_csr_en && !id_csr_ren && csr.io.decode(0).write_flush)$/;"	l
id_csr_ren	src/main/scala/rocket/RocketCore.scala	/^  val id_csr_ren = id_ctrl.csr.isOneOf(CSR.S, CSR.C) && id_expanded_inst(0).rs1 === UInt(0)$/;"	l
id_ctrl	src/main/scala/rocket/RocketCore.scala	/^  val id_ctrl = Wire(new IntCtrlSigs()).decode(id_inst(0), decode_table)$/;"	l
id_ctrl	src/main/scala/tile/FPU.scala	/^  val id_ctrl = fp_decoder.io.sigs$/;"	l
id_do_fence	src/main/scala/rocket/RocketCore.scala	/^  val id_do_fence = Wire(init = id_rocc_busy && id_ctrl.fence ||$/;"	l
id_ex_hazard	src/main/scala/rocket/RocketCore.scala	/^  val id_ex_hazard = ex_reg_valid && (data_hazard_ex && ex_cannot_bypass || fp_data_hazard_ex)$/;"	l
id_expanded_inst	src/main/scala/rocket/RocketCore.scala	/^  val id_expanded_inst = ibuf.io.inst.map(_.bits.inst)$/;"	l
id_fence_next	src/main/scala/rocket/RocketCore.scala	/^  val id_fence_next = id_ctrl.fence || id_ctrl.amo && id_amo_aq$/;"	l
id_fence_pred	src/main/scala/rocket/RocketCore.scala	/^  val id_fence_pred = id_inst(0)(27,24)$/;"	l
id_fence_succ	src/main/scala/rocket/RocketCore.scala	/^  val id_fence_succ = id_inst(0)(23,20)$/;"	l
id_illegal_insn	src/main/scala/rocket/RocketCore.scala	/^  val id_illegal_insn = !id_ctrl.legal ||$/;"	l
id_inst	src/main/scala/rocket/RocketCore.scala	/^  val id_inst = id_expanded_inst.map(_.bits)$/;"	l
id_load_use	src/main/scala/rocket/RocketCore.scala	/^  val id_load_use = Wire(Bool())$/;"	l
id_mem_busy	src/main/scala/rocket/RocketCore.scala	/^  val id_mem_busy = !io.dmem.ordered || io.dmem.req.valid$/;"	l
id_mem_hazard	src/main/scala/rocket/RocketCore.scala	/^  val id_mem_hazard = mem_reg_valid && (data_hazard_mem && mem_cannot_bypass || fp_data_hazard_mem)$/;"	l
id_npc	src/main/scala/rocket/RocketCore.scala	/^  val id_npc = (ibuf.io.pc.asSInt + ImmGen(IMM_UJ, id_inst(0))).asUInt$/;"	l
id_raddr	src/main/scala/rocket/RocketCore.scala	/^  val id_raddr = IndexedSeq(id_raddr1, id_raddr2)$/;"	l
id_raw_inst	src/main/scala/rocket/RocketCore.scala	/^  val id_raw_inst = ibuf.io.inst.map(_.bits.raw)$/;"	l
id_reg_fence	src/main/scala/rocket/RocketCore.scala	/^  val id_reg_fence = Reg(init=Bool(false))$/;"	l
id_reg_pause	src/main/scala/rocket/RocketCore.scala	/^  val id_reg_pause = Reg(Bool())$/;"	l
id_ren	src/main/scala/rocket/RocketCore.scala	/^  val id_ren = IndexedSeq(id_ctrl.rxs1, id_ctrl.rxs2)$/;"	l
id_rocc_busy	src/main/scala/rocket/RocketCore.scala	/^  val id_rocc_busy = Bool(usingRoCC) &&$/;"	l
id_rs	src/main/scala/rocket/RocketCore.scala	/^  val id_rs = id_raddr.map(rf.read _)$/;"	l
id_sboard_clear_bypass	src/main/scala/rocket/RocketCore.scala	/^  def id_sboard_clear_bypass(r: UInt) = {$/;"	m
id_sboard_hazard	src/main/scala/rocket/RocketCore.scala	/^  val id_sboard_hazard = checkHazards(hazard_targets, rd => sboard.read(rd) && !id_sboard_clear_bypass(rd))$/;"	l
id_scie_decoder	src/main/scala/rocket/RocketCore.scala	/^  val id_scie_decoder = if (!rocketParams.useSCIE) Wire(new SCIEDecoderInterface) else {$/;"	l
id_stall_fpu	src/main/scala/rocket/RocketCore.scala	/^  val id_stall_fpu = if (usingFPU) {$/;"	l
id_system_insn	src/main/scala/rocket/RocketCore.scala	/^  val id_system_insn = id_ctrl.csr === CSR.I$/;"	l
id_virtual_insn	src/main/scala/rocket/RocketCore.scala	/^  val id_virtual_insn = id_ctrl.legal &&$/;"	l
id_wb_hazard	src/main/scala/rocket/RocketCore.scala	/^  val id_wb_hazard = wb_reg_valid && (data_hazard_wb && wb_set_sboard || fp_data_hazard_wb)$/;"	l
id_xcpt0	src/main/scala/rocket/RocketCore.scala	/^  val id_xcpt0 = ibuf.io.inst(0).bits.xcpt0$/;"	l
id_xcpt1	src/main/scala/rocket/RocketCore.scala	/^  val id_xcpt1 = ibuf.io.inst(0).bits.xcpt1$/;"	l
idcode	src/main/scala/devices/debug/DebugTransport.scala	/^  val idcode = WireInit(0.U.asTypeOf(new JTAGIdcodeBundle()))$/;"	l
idcode	src/main/scala/jtag/JtagTap.scala	/^  val idcode = if (hasIdcode) Some(Input(new JTAGIdcodeBundle())) else None$/;"	l
idcodeChain	src/main/scala/jtag/JtagTap.scala	/^        val idcodeChain = Module(CaptureChain(new JTAGIdcodeBundle()))$/;"	l
identity	src/main/scala/util/IdentityModule.scala	/^    val identity = Module(new IdentityModule(x))$/;"	l
idle	src/main/scala/amba/axi4/Xbar.scala	/^    val idle = RegInit(Bool(true))$/;"	l
idle	src/main/scala/amba/axis/Xbar.scala	/^      val idle = RegInit(true.B)$/;"	l
idle	src/main/scala/devices/tilelink/Error.scala	/^    val idle = RegInit(Bool(true))$/;"	l
idle	src/main/scala/tilelink/Arbiter.scala	/^      val idle = beatsLeft === 0.U$/;"	l
idle	src/main/scala/tilelink/Broadcast.scala	/^    val idle = Output(Bool())$/;"	l
idle	src/main/scala/tilelink/Broadcast.scala	/^  val idle    = got_e && sent_d$/;"	l
idle	src/main/scala/tilelink/ToAXI4.scala	/^        val idle = count === UInt(0)$/;"	l
ids	src/main/scala/tilelink/BankBinder.scala	/^  val ids = AddressSet.enumerateMask(mask)$/;"	l
ids	src/main/scala/util/LanePositionedQueue.scala	/^  val ids = (cycles+1) * lanes$/;"	l
ids	src/main/scala/util/MultiLaneQueue.scala	/^  val ids = (cycles+1) * lanes$/;"	l
ids	src/main/scala/util/MultiPortQueue.scala	/^  val ids = (cycles+1) * lanes$/;"	l
idx	src/main/scala/rocket/BTB.scala	/^    val idx = addr(matchBits-1, log2Up(coreInstBytes))$/;"	l
idx	src/main/scala/rocket/DCache.scala	/^  val idx = UInt(width = idxBits)$/;"	l
idx	src/main/scala/rocket/HellaCache.scala	/^  val idx    = UInt(width = idxBits)$/;"	l
idx	src/main/scala/rocket/HellaCache.scala	/^  val idx  = (usingVM && untagBits > pgIdxBits).option(UInt(coreMaxAddrBits.W))$/;"	l
idx	src/main/scala/rocket/NBDcache.scala	/^  val idx = Bits(width = idxBits)$/;"	l
idx	src/main/scala/rocket/TLB.scala	/^      val idx = sectorIdx(vpn)$/;"	l
idx	src/main/scala/rocket/TLB.scala	/^    val idx = sectorIdx(tag)$/;"	l
idx	src/main/scala/tile/CustomCSRs.scala	/^    val idx = decls.indexWhere(_.id == id)$/;"	l
idx	src/main/scala/tile/LazyRoCC.scala	/^      val idx = Cat(recv_beat - 1.U, i.U(beatOffset.W))$/;"	l
idx	src/main/scala/util/Broadcaster.scala	/^    val idx = Reg(init = UInt(0, log2Up(n)))$/;"	l
idxBits	src/main/scala/rocket/PTW.scala	/^    val idxBits = log2Ceil(nL2TLBSets)$/;"	l
idxBits	src/main/scala/rocket/PTW.scala	/^  val idxBits = log2Ceil(nSets)$/;"	l
idxBits	src/main/scala/tile/L1Cache.scala	/^  def idxBits = log2Up(cacheParams.nSets)$/;"	m
idxHit	src/main/scala/rocket/BTB.scala	/^  val idxHit = idxMatch(io.req.bits.addr)$/;"	l
idxLSB	src/main/scala/rocket/HellaCache.scala	/^  def idxLSB = blockOffBits$/;"	m
idxMSB	src/main/scala/rocket/HellaCache.scala	/^  def idxMSB = untagBits-1$/;"	m
idxMatch	src/main/scala/rocket/DCache.scala	/^    val idxMatch = s2_vaddr(untagBits-1, log2Ceil(wordBytes)) === pstore2_addr(untagBits-1, log2Ceil(wordBytes))$/;"	l
idxMatch	src/main/scala/rocket/NBDcache.scala	/^  val idxMatch = Wire(Vec(cfg.nMSHRs, Bool()))$/;"	l
idxPageRepl	src/main/scala/rocket/BTB.scala	/^  val idxPageRepl = Cat(pageHit(nPages-2,0), pageHit(nPages-1)) | Mux(usePageHit, UInt(0), UIntToOH(nextPageRepl))$/;"	l
idxPageReplEn	src/main/scala/rocket/BTB.scala	/^  val idxPageReplEn = Mux(doIdxPageRepl, idxPageRepl, UInt(0))$/;"	l
idxPageUpdate	src/main/scala/rocket/BTB.scala	/^  val idxPageUpdate = OHToUInt(idxPageUpdateOH)$/;"	l
idxPageUpdateOH	src/main/scala/rocket/BTB.scala	/^  val idxPageUpdateOH = Mux(useUpdatePageHit, updatePageHit, idxPageRepl)$/;"	l
idxPages	src/main/scala/rocket/BTB.scala	/^  val idxPages = Reg(Vec(entries, UInt(width=log2Up(nPages))))$/;"	l
idxWritesEven	src/main/scala/rocket/BTB.scala	/^    val idxWritesEven = !idxPageUpdate(0)$/;"	l
idx_match	src/main/scala/rocket/NBDcache.scala	/^    val idx_match       = Bool(OUTPUT)$/;"	l
idx_match	src/main/scala/rocket/NBDcache.scala	/^  val idx_match = req_idx === io.req_bits.addr(untagBits-1,blockOffBits)$/;"	l
idx_match	src/main/scala/rocket/NBDcache.scala	/^  var idx_match = Bool(false)$/;"	l
idxs	src/main/scala/rocket/BTB.scala	/^  val idxs = Reg(Vec(entries, UInt(width=matchBits - log2Up(coreInstBytes))))$/;"	l
idxs	src/main/scala/rocket/PTW.scala	/^    val idxs = (0 to pgLevels-minPgLevels).map(i => (vpn >> (pgLevels-i)*pgLevelBits))$/;"	l
ie	src/main/scala/tile/BaseTile.scala	/^    val ie = if (tileParams.core.useRVE) "e" else "i"$/;"	l
ieee	src/main/scala/tile/FPU.scala	/^  def ieee(x: UInt) = hardfloat.fNFromRecFN(exp, sig, x)$/;"	m
ieee	src/main/scala/tile/FPU.scala	/^  def ieee(x: UInt, t: FType = maxType): UInt = {$/;"	m
ieeeQNaN	src/main/scala/tile/FPU.scala	/^  def ieeeQNaN = UInt((BigInt(1) << (ieeeWidth - 1)) - (BigInt(1) << (sig - 2)), ieeeWidth)$/;"	m
ieeeWidth	src/main/scala/tile/FPU.scala	/^  def ieeeWidth = exp + sig$/;"	m
ifpu	src/main/scala/tile/FPU.scala	/^  val ifpu = Module(new IntToFP(2))$/;"	l
ignore	src/main/scala/rocket/PMP.scala	/^    val ignore = default && !pmp.cfg.l$/;"	l
ignore	src/main/scala/rocket/TLB.scala	/^        val ignore = level < j || superpageOnly && j == pgLevels - 1$/;"	l
iindex	src/main/scala/regmapper/RegMapper.scala	/^    val iindex = regIndexU(front.bits.index)$/;"	l
ilastsize	src/main/scala/util/TraceCoreInterface.scala	/^  val ilastsize = UInt(1.W)$/;"	l
illegal_instruction	src/main/scala/rocket/Instructions.scala	/^  val illegal_instruction = 0x2$/;"	l
illegal_rm	src/main/scala/tile/FPU.scala	/^  val illegal_rm = Bool(OUTPUT)$/;"	l
imem	src/main/scala/rocket/IBuf.scala	/^    val imem = Decoupled(new FrontendResp).flip$/;"	l
imem	src/main/scala/tile/Core.scala	/^    val imem  = new FrontendIO$/;"	l
imem_might_request_reg	src/main/scala/rocket/RocketCore.scala	/^  val imem_might_request_reg = Reg(Bool())$/;"	l
imm	src/main/scala/devices/debug/Debug.scala	/^      val imm    = UInt(12.W)$/;"	l
imm0	src/main/scala/devices/debug/Debug.scala	/^      val imm0    = UInt(10.W)$/;"	l
imm1	src/main/scala/devices/debug/Debug.scala	/^      val imm1    = UInt(1.W)$/;"	l
imm2	src/main/scala/devices/debug/Debug.scala	/^      val imm2    = UInt(8.W)$/;"	l
imm3	src/main/scala/devices/debug/Debug.scala	/^      val imm3    = UInt(1.W)$/;"	l
immBits	src/main/scala/devices/debug/Debug.scala	/^        val immBits = WireInit(VecInit(immWire.asBools))$/;"	l
immWire	src/main/scala/devices/debug/Debug.scala	/^        val immWire = WireInit(imm.S(21.W))$/;"	l
immhi	src/main/scala/devices/debug/Debug.scala	/^      val immhi  = UInt(7.W)$/;"	l
immlo	src/main/scala/devices/debug/Debug.scala	/^      val immlo  = UInt(5.W)$/;"	l
impebreak	src/main/scala/devices/debug/dm_registers.scala	/^  val impebreak = Bool()$/;"	l
in	src/main/scala/amba/ahb/Monitor.scala	/^    val in = Input(new AHBMasterBundle(args.edge.bundle))$/;"	l
in	src/main/scala/amba/ahb/Monitor.scala	/^    val in = Input(new AHBSlaveBundle(args.edge.bundle))$/;"	l
in	src/main/scala/amba/ahb/RegisterRouter.scala	/^    val in = Wire(Decoupled(new RegMapperInput(params)))$/;"	l
in	src/main/scala/amba/apb/Monitor.scala	/^    val in = Input(new APBBundle(args.edge.bundle))$/;"	l
in	src/main/scala/amba/apb/RegisterRouter.scala	/^    val in = Wire(Decoupled(new RegMapperInput(params)))$/;"	l
in	src/main/scala/amba/axi4/Monitor.scala	/^    val in = Input(new AXI4Bundle(args.edge.bundle))$/;"	l
in	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val in = Wire(Decoupled(new RegMapperInput(params)))$/;"	l
in	src/main/scala/amba/axi4/Xbar.scala	/^    val in = Wire(Vec(io_in.size, AXI4Bundle(wide_bundle)))$/;"	l
in	src/main/scala/amba/axis/Xbar.scala	/^    val in = Wire(Vec(io_in.size, AXISBundle(wide_bundle)))$/;"	l
in	src/main/scala/devices/debug/Debug.scala	/^  val in  = new DebugExtTriggerIn (p(DebugModuleKey).get.nExtTriggers)$/;"	l
in	src/main/scala/diplomacy/Nodes.scala	/^  def in: Seq[(BI, EI)] = {$/;"	m
in	src/main/scala/rocket/CSR.scala	/^    val in = that.asTypeOf(res)$/;"	l
in	src/main/scala/rocket/Multiplier.scala	/^  val in = Pipe(io.req)$/;"	l
in	src/main/scala/rocket/RVC.scala	/^    val in = Input(UInt(32.W))$/;"	l
in	src/main/scala/tile/FPU.scala	/^    val in = Valid(new FPInput).flip$/;"	l
in	src/main/scala/tile/FPU.scala	/^    val in = Valid(new IntToFPInput).flip$/;"	l
in	src/main/scala/tile/FPU.scala	/^    val in = new FPInput$/;"	l
in	src/main/scala/tile/FPU.scala	/^  val in = Pipe(io.in)$/;"	l
in	src/main/scala/tile/FPU.scala	/^  val in = Reg(new FPInput)$/;"	l
in	src/main/scala/tile/FPU.scala	/^  val in = RegEnable(io.in.bits, io.in.valid)$/;"	l
in	src/main/scala/tile/LazyRoCC.scala	/^    val in = Flipped(Decoupled(new RoCCCommand))$/;"	l
in	src/main/scala/tilelink/Monitor.scala	/^    val in = Input(new TLBundle(args.edge.bundle))$/;"	l
in	src/main/scala/tilelink/RegisterRouter.scala	/^    val in = Wire(Decoupled(new RegMapperInput(params)))$/;"	l
in	src/main/scala/tilelink/Xbar.scala	/^    val in = Wire(Vec(io_in.size, TLBundle_ACancel(wide_bundle)))$/;"	l
in	src/main/scala/util/Arbiters.scala	/^    val in = Vec(arbN, Decoupled(typ.cloneType)).flip$/;"	l
in	src/main/scala/util/AsyncQueue.scala	/^    val in = Input(Bool())$/;"	l
in	src/main/scala/util/Broadcaster.scala	/^    val in = Decoupled(typ).flip$/;"	l
in	src/main/scala/util/ClockGate.scala	/^    val in = Input(Clock())$/;"	l
in	src/main/scala/util/IdentityModule.scala	/^    val in = gen.cloneType.flip$/;"	l
in	src/main/scala/util/LatencyPipe.scala	/^    val in = Decoupled(typ).flip$/;"	l
in	src/main/scala/util/MultiWidthFifo.scala	/^    val in = Decoupled(Bits(width = inW)).flip$/;"	l
in	src/main/scala/util/ReadyValidCancel.scala	/^    val in  = Flipped(Vec(n, ReadyValidCancel(gen)))$/;"	l
in1	src/main/scala/rocket/ALU.scala	/^    val in1 = UInt(INPUT, xLen)$/;"	l
in1	src/main/scala/rocket/Multiplier.scala	/^  val in1 = Bits(dataBits.W)$/;"	l
in1	src/main/scala/tile/FPU.scala	/^  val in1 = Bits(width = fLen+1)$/;"	l
in1	src/main/scala/tile/FPU.scala	/^  val in1 = Bits(width = xLen)$/;"	l
in1_xor_in2	src/main/scala/rocket/ALU.scala	/^  val in1_xor_in2 = io.in1 ^ in2_inv$/;"	l
in2	src/main/scala/rocket/ALU.scala	/^    val in2 = UInt(INPUT, xLen)$/;"	l
in2	src/main/scala/rocket/Multiplier.scala	/^  val in2 = Bits(dataBits.W)$/;"	l
in2	src/main/scala/tile/FPU.scala	/^  val in2 = Bits(width = fLen+1)$/;"	l
in2_inv	src/main/scala/rocket/ALU.scala	/^  val in2_inv = Mux(isSub(io.fn), ~io.in2, io.in2)$/;"	l
in3	src/main/scala/tile/FPU.scala	/^  val in3 = Bits(width = fLen+1)$/;"	l
inBits	src/main/scala/regmapper/RegMapper.scala	/^    val inBits = inParams.indexBits$/;"	l
inBytes	src/main/scala/tilelink/WidthWidget.scala	/^      val inBytes = edgeIn.manager.beatBytes$/;"	l
inFlight	src/main/scala/devices/tilelink/Plic.scala	/^  val inFlight = Reg(init=Bool(false))$/;"	l
inFlight	src/main/scala/tilelink/Edges.scala	/^  def inFlight(x: TLBundle): (UInt, UInt) = {$/;"	m
inParams	src/main/scala/regmapper/RegMapper.scala	/^    val inParams = in.bits.params$/;"	l
inRange	src/main/scala/util/package.scala	/^    def inRange(base: UInt, bounds: UInt) = x >= base && x < bounds$/;"	m
inScratchpad	src/main/scala/rocket/DCache.scala	/^      val inScratchpad = s1_paddr >= baseAddr && s1_paddr < baseAddr + nSets * cacheBlockBytes$/;"	l
inSequence	src/main/scala/util/Property.scala	/^  def inSequence(search: Seq[String], find: Seq[String]): Boolean = {$/;"	m
inTag	src/main/scala/tile/FPU.scala	/^  val inTag = in.bits.typeTagIn$/;"	l
inUse	src/main/scala/groundtest/TraceGen.scala	/^  val inUse = List.fill(numTags)(Reg(init = Bool(false)))$/;"	l
inUseMap	src/main/scala/groundtest/TraceGen.scala	/^  val inUseMap = (0 to numTags-1).map(i => UInt(i)).zip(inUse)$/;"	l
inWriteback	src/main/scala/rocket/DCache.scala	/^  val inWriteback = release_state.isOneOf(s_voluntary_writeback, s_probe_rep_dirty)$/;"	l
in_a	src/main/scala/tilelink/Broadcast.scala	/^    val in_a  = Flipped(Decoupled(new TLBundleA(edgeIn.bundle)))$/;"	l
in_a	src/main/scala/tilelink/Fragmenter.scala	/^        val in_a = repeater.io.deq$/;"	l
in_a_first	src/main/scala/tilelink/Broadcast.scala	/^    val in_a_first = Input(Bool())$/;"	l
in_clock	src/main/scala/amba/axi4/AsyncCrossing.scala	/^      val in_clock  = Clock(INPUT)$/;"	l
in_clock	src/main/scala/tilelink/AsyncCrossing.scala	/^      val in_clock  = Clock(INPUT)$/;"	l
in_clock	src/main/scala/tilelink/RationalCrossing.scala	/^      val in_clock  = Clock(INPUT)$/;"	l
in_d	src/main/scala/tilelink/CacheCork.scala	/^        val in_d = Wire(in.d)$/;"	l
in_flight	src/main/scala/amba/apb/ToTL.scala	/^      val in_flight = in_flight_reg || error_in_flight_reg$/;"	l
in_flight_reg	src/main/scala/amba/apb/ToTL.scala	/^      val in_flight_reg = RegInit(false.B)$/;"	l
in_req	src/main/scala/util/Arbiters.scala	/^    val in_req = Vec(n, Decoupled(reqTyp)).flip$/;"	l
in_reset	src/main/scala/amba/axi4/AsyncCrossing.scala	/^      val in_reset  = Bool(INPUT)$/;"	l
in_reset	src/main/scala/devices/tilelink/BusBypass.scala	/^    val in_reset = RegNext(false.B, init = true.B)$/;"	l
in_reset	src/main/scala/tilelink/AsyncCrossing.scala	/^      val in_reset  = Bool(INPUT)$/;"	l
in_reset	src/main/scala/tilelink/RationalCrossing.scala	/^      val in_reset  = Bool(INPUT)$/;"	l
in_resp	src/main/scala/util/Arbiters.scala	/^    val in_resp = Vec(n, Decoupled(respTyp))$/;"	l
in_w	src/main/scala/amba/axi4/Fragmenter.scala	/^      val in_w = Queue.irrevocable(in.w, 1, flow=true)$/;"	l
in_xbar	src/main/scala/subsystem/PeripheryBus.scala	/^    val in_xbar = LazyModule(new TLXbar)$/;"	l
inactive_counter	src/main/scala/formal/FormalUtils.scala	/^      val inactive_counter = RegInit(inactive_length.U)$/;"	l
inactive_output_override	src/main/scala/formal/FormalUtils.scala	/^  def inactive_output_override[T <: Data](inactive_length: Int)$/;"	m
inc	src/main/scala/amba/axi4/Deinterleaver.scala	/^            val inc = enq_OH(i) && out.r.fire() && out.r.bits.last$/;"	l
inc	src/main/scala/rocket/CSR.scala	/^  val inc = UInt(INPUT, log2Ceil(1+retireWidth))$/;"	l
inc	src/main/scala/tilelink/Edges.scala	/^    val inc = Cat(Seq(a_inc, d_inc) ++ (if (bce) Seq(b_inc, c_inc, e_inc) else Nil))$/;"	l
inc	src/main/scala/tilelink/Fuzzer.scala	/^    val inc = Bool(INPUT)$/;"	l
inc	src/main/scala/tilelink/Fuzzer.scala	/^    val inc = Wire(Bool())$/;"	l
inc	src/main/scala/tilelink/ToAXI4.scala	/^        val inc = as && out_arw.fire()$/;"	l
inc	src/main/scala/util/Counters.scala	/^  def inc(): Bool = {$/;"	m
inc	src/main/scala/util/LCG.scala	/^    val inc = Bool(INPUT)$/;"	l
inc_addr	src/main/scala/amba/axi4/Fragmenter.scala	/^        val inc_addr = addr + (beats << a.bits.size) \/\/ address after adding transfer$/;"	l
inc_beat	src/main/scala/tilelink/Fuzzer.scala	/^    val inc_beat = Wire(Bool())$/;"	l
inc_bytes	src/main/scala/tilelink/RAMModel.scala	/^      val inc_bytes = Seq.fill(beatBytes) { Mem(endAddressHi, UInt(width = countBits)) }$/;"	l
inc_bytes_wen	src/main/scala/tilelink/RAMModel.scala	/^      val inc_bytes_wen = Wire(init = Fill(beatBytes, wipe))$/;"	l
inc_trees	src/main/scala/tilelink/RAMModel.scala	/^      val inc_trees = Seq.tabulate(decTrees) { i => Mem(endAddressHi >> (i+1), UInt(width = countBits)) }$/;"	l
inc_trees_wen	src/main/scala/tilelink/RAMModel.scala	/^      val inc_trees_wen = Wire(init = Fill(decTrees, wipe))$/;"	l
incoherent	src/main/scala/tile/BaseTile.scala	/^    val incoherent = if (!tileParams.core.useAtomicsOnlyForIO) Nil else Map($/;"	l
incoherentManager	src/main/scala/subsystem/BankedL2Params.scala	/^  val incoherentManager: CoherenceManagerInstantiationFn = { _ =>$/;"	l
increment	src/main/scala/prci/ResetWrangler.scala	/^    val increment = Wire(Bool())$/;"	l
increment	src/main/scala/tilelink/ToAHB.scala	/^      val increment = RegInit(Bool(false)) \/\/ rewrite as BURST_INCR (for same-burst EBT)$/;"	l
incremented	src/main/scala/prci/ResetWrangler.scala	/^    val incremented = Wire(UInt(slowBits.W))$/;"	l
incremented	src/main/scala/util/AsyncQueue.scala	/^    val incremented = Wire(UInt(bits.W))$/;"	l
index	src/main/scala/devices/tilelink/BootROM.scala	/^    val index = in.a.bits.address(log2Ceil(wrapSize)-1,log2Ceil(beatBytes))$/;"	l
index	src/main/scala/diplomacy/Nodes.scala	/^  val index: Int = scope.map(_.nodes.size).getOrElse(0)$/;"	l
index	src/main/scala/regmapper/RegMapper.scala	/^      val index = regIndexI(word)$/;"	l
index	src/main/scala/regmapper/RegMapper.scala	/^  val index = UInt(width = params.indexBits)$/;"	l
index	src/main/scala/rocket/BTB.scala	/^  def index(addr: UInt, history: UInt) = {$/;"	m
index	src/main/scala/rocket/ICache.scala	/^  def index(vaddr: UInt, paddr: UInt) = {$/;"	m
index	src/main/scala/tilelink/SRAM.scala	/^    val index = Cat(mask.zip((addr >> log2Ceil(beatBytes)).asBools).filter(_._1).map(_._2).reverse)$/;"	l
index	src/main/scala/tilelink/WidthWidget.scala	/^      val index  = sel | count$/;"	l
index	src/main/scala/util/AsyncQueue.scala	/^  val index = if (bits == 0) 0.U else io.async.widx(bits-1, 0) ^ (io.async.widx(bits, bits) << (bits-1))$/;"	l
index	src/main/scala/util/AsyncQueue.scala	/^  val index = if (bits == 0) 0.U else ridx(bits-1, 0) ^ (ridx(bits, bits) << (bits-1))$/;"	l
index	src/main/scala/util/AsyncQueue.scala	/^  val index = params.narrow.option(Input(UInt(params.bits.W)))$/;"	l
indexBits	src/main/scala/amba/ahb/RegisterRouter.scala	/^    val indexBits = log2Up((address.mask+1)\/beatBytes)$/;"	l
indexBits	src/main/scala/amba/apb/RegisterRouter.scala	/^    val indexBits = log2Up((address.mask+1)\/beatBytes)$/;"	l
indexBits	src/main/scala/tilelink/SRAM.scala	/^    val indexBits = (outer.address.mask & ~(beatBytes-1)).bitCount$/;"	l
indexes	src/main/scala/tilelink/AtomicAutomata.scala	/^        val indexes = Seq.tabulate(beatBytes*8) { i => Cat(a_a(i,i), a_d(i,i)) }$/;"	l
inflight	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val inflight = Reg(init = UInt(0, depth))$/;"	l
inflight	src/main/scala/tilelink/Monitor.scala	/^    val inflight         = RegInit(0.U(edge.client.endSourceId.W))$/;"	l
inflight	src/main/scala/tilelink/Monitor.scala	/^    val inflight = RegInit(0.U(edge.client.endSourceId.W))$/;"	l
inflight	src/main/scala/tilelink/Monitor.scala	/^    val inflight = RegInit(0.U(edge.manager.endSinkId.W))$/;"	l
inflight	src/main/scala/util/Timer.scala	/^  val inflight = Reg(init = Vec.fill(maxInflight) { Bool(false) })$/;"	l
inflight_opcodes	src/main/scala/tilelink/Monitor.scala	/^    val inflight_opcodes = RegInit(0.U((edge.client.endSourceId << log_a_opcode_bus_size).W))$/;"	l
inflight_opcodes	src/main/scala/tilelink/Monitor.scala	/^    val inflight_opcodes = RegInit(0.U((edge.client.endSourceId << log_c_opcode_bus_size).W))$/;"	l
inflight_sizes	src/main/scala/tilelink/Monitor.scala	/^    val inflight_sizes   = RegInit(0.U((edge.client.endSourceId << log_c_size_bus_size).W))$/;"	l
inflight_sizes	src/main/scala/tilelink/Monitor.scala	/^    val inflight_sizes = RegInit(0.U((edge.client.endSourceId << log_a_size_bus_size).W))$/;"	l
info	src/main/scala/diplomacy/Nodes.scala	/^    val info = sourceLine(sourceInfo, " at ", "")$/;"	l
info	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^        val info = MultiInfo(modules.map(_.info))$/;"	l
infoRegex	src/main/scala/linting/rule/package.scala	/^      val infoRegex = "\\\\s*(.*\\\\.scala \\\\d+:\\\\d+):(.*\\\\.fir@\\\\d+\\\\.\\\\d+)\\\\s*".r$/;"	l
infoString	src/main/scala/tilelink/Parameters.scala	/^  def infoString = "Slave Port Beatbytes = " + beatBytes + "\\n" + "Slave Port MinLatency = " + minLatency + "\\n\\n" + slaves.map(_.infoString).mkString$/;"	m
infoString	src/main/scala/tilelink/Parameters.scala	/^  def infoString = masters.map(_.infoString).mkString$/;"	m
infoString	src/main/scala/tilelink/Parameters.scala	/^  def infoString = {$/;"	m
inhibit_cycle	src/main/scala/rocket/CSR.scala	/^  val inhibit_cycle = Output(Bool())$/;"	l
initAddr	src/main/scala/groundtest/TraceGen.scala	/^  val initAddr = MuxLookup(initCount, UInt(0),$/;"	l
initBeats	src/main/scala/tilelink/Arbiter.scala	/^      val initBeats = maskedBeats.reduce(_ | _) \/\/ no winner => 0 beats$/;"	l
initBit	src/main/scala/util/SynchronizerReg.scala	/^    val initBit = ((init >> i) & 1) > 0$/;"	l
initCount	src/main/scala/groundtest/TraceGen.scala	/^  val initCount = Reg(init = UInt(0, log2Up(totalNumAddrs)))$/;"	l
initDone	src/main/scala/groundtest/TraceGen.scala	/^  val initDone = Reg(init = Bool(false))$/;"	l
initInt	src/main/scala/util/SynchronizerReg.scala	/^  val initInt = if (init) 1 else 0$/;"	l
initPostfix	src/main/scala/util/SynchronizerReg.scala	/^  val initPostfix = resetType match {$/;"	l
init_done	src/main/scala/devices/debug/Periphery.scala	/^    val init_done = Input(Bool())$/;"	l
init_done_sticky	src/main/resources/vsrc/SimJTAG.v	/^   reg          init_done_sticky;$/;"	r
initialInstruction	src/main/scala/jtag/JtagTap.scala	/^    val initialInstruction = icode.getOrElse(bypassIcode) \/\/ 7.2.1e load IDCODE or BYPASS instruction after entry into TestLogicReset$/;"	l
initialInts	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val initialInts = DevicePMP.getInitialValueInts(params.addressBits, params.pageBits, Some(initial))$/;"	l
initval	src/main/scala/tilelink/AtomicAutomata.scala	/^        val initval = Wire(new TLAtomicAutomata.CAM_S(params))$/;"	l
initvar	src/main/resources/vsrc/AsyncResetReg.v	/^    integer    initvar;$/;"	r
injectClockNode	src/main/scala/prci/ResetCrossingType.scala	/^  def injectClockNode(implicit p: Parameters): ClockNode = ClockTempNode()$/;"	m
injectClockNode	src/main/scala/prci/ResetCrossingType.scala	/^  def injectClockNode(implicit p: Parameters): ClockNode = {$/;"	m
injectClockNode	src/main/scala/prci/ResetCrossingType.scala	/^  def injectClockNode(implicit p: Parameters): ClockNode$/;"	m
injectNode	src/main/scala/subsystem/HasTiles.scala	/^  def injectNode(context: Attachable)(implicit p: Parameters): TLNode = {$/;"	m
injectNode	src/main/scala/subsystem/HasTiles.scala	/^  def injectNode(context: Attachable)(implicit p: Parameters): TLNode$/;"	m
inject_map	src/main/scala/tilelink/ErrorEvaluator.scala	/^      val inject_map = Mem(edgeIn.client.endSourceId, Bool())$/;"	l
inject_now	src/main/scala/tilelink/ErrorEvaluator.scala	/^      val inject_now = test(in.a.bits)$/;"	l
inline	src/main/scala/diplomacy/LazyModule.scala	/^  def inline[T](body: => T)(implicit p: Parameters): T = {$/;"	m
inner	src/main/scala/diplomacy/Nodes.scala	/^  def inner: InwardNodeImp[DI, UI, EI, BI] = inwardHandle.inner$/;"	m
inner	src/main/scala/diplomacy/Nodes.scala	/^  def inner: InwardNodeImp[DI, UI, EI, BI]$/;"	m
inner	src/main/scala/diplomacy/Nodes.scala	/^  val inner: InwardNodeImp [DI, UI, EI, BI],$/;"	l
innerCtrl	src/main/scala/devices/debug/Debug.scala	/^      val innerCtrl = Flipped(new AsyncBundle(new DebugInternalBundle(getNComponents()), AsyncQueueParams.singleton(safe=cfg.crossingHasSafeReset)))$/;"	l
innerCtrl	src/main/scala/devices/debug/Debug.scala	/^      val innerCtrl = Flipped(new DecoupledIO(new DebugInternalBundle(nComponents)))$/;"	l
innerCtrl	src/main/scala/devices/debug/Debug.scala	/^      val innerCtrl = new AsyncBundle(new DebugInternalBundle(nComponents), AsyncQueueParams.singleton(safe=cfg.crossingHasSafeReset))$/;"	l
innerCtrl	src/main/scala/devices/debug/Debug.scala	/^      val innerCtrl = new DecoupledIO(new DebugInternalBundle(nComponents))$/;"	l
innerCtrlAckHaveResetReg	src/main/scala/devices/debug/Debug.scala	/^    val innerCtrlAckHaveResetReg = RegInit(false.B).suggestName("innerCtrlAckHaveResetReg")$/;"	l
innerCtrlResumeReqReg	src/main/scala/devices/debug/Debug.scala	/^    val innerCtrlResumeReqReg = RegInit(false.B).suggestName("innerCtrlResumeReqReg")$/;"	l
innerCtrlValid	src/main/scala/devices/debug/Debug.scala	/^    val innerCtrlValid = Wire(Bool())$/;"	l
innerCtrlValidReg	src/main/scala/devices/debug/Debug.scala	/^    val innerCtrlValidReg = RegInit(false.B).suggestName("innerCtrlValidReg")$/;"	l
inoutGrouped	src/main/scala/diplomacy/Nodes.scala	/^  def inoutGrouped: Seq[(Seq[(BI, EI)], Seq[(BO, EO)])] = {$/;"	m
input	src/main/resources/vsrc/EICG_wrapper.v	/^  input en,$/;"	p
input	src/main/resources/vsrc/EICG_wrapper.v	/^  input in$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [0:0] rocc_cmd_bits_status_spp,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [1:0] rocc_cmd_bits_status_sxl,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [1:0] rocc_cmd_bits_status_vs,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [1:0] rocc_cmd_bits_status_xs,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [1:0] rocc_mem_resp_bits_dprv,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [4:0] rocc_cmd_bits_inst_rd,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [4:0] rocc_cmd_bits_inst_rs1,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [6:0] rocc_cmd_bits_inst_funct,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [M_SZ-1:0] rocc_mem_resp_bits_cmd,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [PRV_SZ-1:0] rocc_cmd_bits_status_dprv,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [PRV_SZ-1:0] rocc_cmd_bits_status_prv,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [coreDataBits-1:0] rocc_mem_resp_bits_data_raw,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [coreDataBytes-1:0] rocc_mem_resp_bits_mask,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [coreMaxAddrBits-1:0] rocc_mem_resp_bits_addr,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [fLen:0] rocc_fpu_resp_bits_data,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [paddrBits-1:0] rocc_mem_s2_paddr,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input [xLen-1:0] rocc_cmd_bits_rs1,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_inst_xs1,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_debug,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_hie,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_mbe,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_mpv,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_sd,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_sd_rv32,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_sum,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_tsr,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_tvm,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_ube,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_uie,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_upie,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_wfi,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_exception,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_perf_acquire,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_perf_blocked,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_perf_canAcceptStoreThenRMW,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_perf_grant,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_perf_storeBufferEmptyAfterLoad,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_replay_next,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_resp_bits_has_data,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_resp_bits_signed,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_gpa_is_pte,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_nack,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_xcpt_ae_st,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_xcpt_gf_st,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_xcpt_ma_st,$/;"	p
input	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_xcpt_pf_st,$/;"	p
input	src/main/resources/vsrc/SimDTM.v	/^  input         debug_req_ready,$/;"	p
input	src/main/resources/vsrc/SimDTM.v	/^  input         debug_resp_valid,$/;"	p
input	src/main/resources/vsrc/SimDTM.v	/^  input  [ 1:0] debug_resp_bits_resp,$/;"	p
input	src/main/resources/vsrc/SimDTM.v	/^  input reset,$/;"	p
input	src/main/resources/vsrc/SimJTAG.v	/^                   input         init_done,$/;"	p
input	src/main/resources/vsrc/SimJTAG.v	/^                   input         jtag_TDO_driven,$/;"	p
input	src/main/resources/vsrc/SimJTAG.v	/^                   input         reset,$/;"	c
input	src/main/scala/util/PrefixSum.scala	/^    val input = Seq.tabulate(size) { i => Seq(i) }$/;"	l
input	src/main/scala/util/ScatterGather.scala	/^  val input = Wire(Vec(size, Valid(UInt(bits.W))))$/;"	l
input	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^    val input =$/;"	l
inputEarlyValidVec	src/main/scala/util/ReadyValidCancel.scala	/^  val inputEarlyValidVec = Wire(Vec(n, Bool()))$/;"	l
inputIdRanges	src/main/scala/amba/axi4/Xbar.scala	/^    val inputIdRanges = AXI4Xbar.mapInputIds(edgesIn.map(_.master))$/;"	l
inputIdRanges	src/main/scala/amba/axis/Xbar.scala	/^    val inputIdRanges = AXISXbar.mapInputIds(edgesIn.map(_.master))$/;"	l
inputIdRanges	src/main/scala/tilelink/Xbar.scala	/^    val inputIdRanges = TLXbar.mapInputIds(edgesIn.map(_.client))$/;"	l
inputs	src/main/scala/diplomacy/BundleBridge.scala	/^    val inputs: Seq[T] = node.in.map(_._1)$/;"	l
inputs	src/main/scala/diplomacy/Nodes.scala	/^  def inputs:  Seq[(BaseNode, RenderedEdge)]$/;"	m
inputs	src/main/scala/diplomacy/Nodes.scala	/^  def inputs: Seq[(OutwardNode[DI, UI, BI], RenderedEdge)] = (iPorts zip edgesIn) map { case ((_, n, p, _), e) =>$/;"	m
insert	src/main/scala/rocket/TLB.scala	/^  def insert(tag: UInt, level: UInt, entry: TLBEntryData): Unit = {$/;"	m
insn	src/main/scala/rocket/CSR.scala	/^  val insn = UInt(width = iLen)$/;"	l
insn	src/main/scala/scie/SCIE.scala	/^  val insn = Input(UInt(SCIE.iLen.W))$/;"	l
insnIsRVC	src/main/scala/rocket/Frontend.scala	/^      def insnIsRVC(bits: UInt) = bits(1,0) =\/= 3$/;"	m
insn_call	src/main/scala/rocket/CSR.scala	/^  val insn_call :: insn_break :: insn_ret :: insn_cease :: insn_wfi :: _ :: _ :: _ :: _ :: Nil =$/;"	l
insns	src/main/scala/tile/FPU.scala	/^  val insns = (minFLen, fLen) match {$/;"	l
inst	src/main/scala/devices/debug/Debug.scala	/^      val inst = Wire(new GeneratedCSR())$/;"	l
inst	src/main/scala/devices/debug/Debug.scala	/^      val inst = Wire(new GeneratedI())$/;"	l
inst	src/main/scala/devices/debug/Debug.scala	/^      val inst = Wire(new GeneratedS())$/;"	l
inst	src/main/scala/rocket/CSR.scala	/^  val inst = Input(UInt(iLen.W))$/;"	l
inst	src/main/scala/rocket/CSR.scala	/^  val inst = Vec(retireWidth, UInt(width = iLen)).asInput$/;"	l
inst	src/main/scala/rocket/Frontend.scala	/^    val inst = Bool()$/;"	l
inst	src/main/scala/rocket/IBuf.scala	/^    val inst = Vec(retireWidth, Decoupled(new Instruction))$/;"	l
inst	src/main/scala/rocket/IBuf.scala	/^  val inst = icData & icMask | buf.data & ~icMask$/;"	l
inst	src/main/scala/rocket/IBuf.scala	/^  val inst = new ExpandedInstruction$/;"	l
inst	src/main/scala/rocket/RVC.scala	/^  def inst(bits: UInt, rd: UInt = x(11,7), rs1: UInt = x(19,15), rs2: UInt = x(24,20), rs3: UInt = x(31,27)) = {$/;"	m
inst	src/main/scala/rocket/RocketCore.scala	/^      val inst = Mux(ibuf.io.inst(0).bits.rvc, id_raw_inst(0)(15, 0), id_raw_inst(0))$/;"	l
inst	src/main/scala/rocket/TLB.scala	/^  val inst = Bool()$/;"	l
inst	src/main/scala/tile/FPU.scala	/^    val inst = Bits(INPUT, 32)$/;"	l
inst	src/main/scala/tile/FPU.scala	/^  val inst = Bits(INPUT, 32)$/;"	l
inst	src/main/scala/tile/LazyRoCC.scala	/^  val inst = new RoCCInstruction$/;"	l
inst	src/main/scala/util/CoreMonitor.scala	/^  val inst = UInt(width = 32.W)$/;"	l
instBits	src/main/scala/rocket/RocketCore.scala	/^  val instBits: Int = if (useCompressed) 16 else 32$/;"	l
instBits	src/main/scala/tile/Core.scala	/^  val instBits: Int$/;"	l
instBytes	src/main/scala/tile/Core.scala	/^  def instBytes: Int = instBits \/ 8$/;"	m
instanceName	src/main/scala/diplomacy/LazyModule.scala	/^  lazy val instanceName: String = pathName.split('.').last$/;"	l
instantiate	src/main/scala/groundtest/TraceGen.scala	/^  def instantiate(crossing: TileCrossingParamsLike, lookup: LookupByHartIdImpl)(implicit p: Parameters): TraceGenTile = {$/;"	m
instantiate	src/main/scala/subsystem/Attachable.scala	/^  def instantiate(context: HasTileLinkLocations)(implicit p: Parameters): Unit$/;"	m
instantiate	src/main/scala/subsystem/BankedL2Params.scala	/^  def instantiate(context: HasTileLinkLocations, loc: Location[TLBusWrapper])(implicit p: Parameters): CoherenceManagerWrapper = {$/;"	m
instantiate	src/main/scala/subsystem/FrontBus.scala	/^  def instantiate(context: HasTileLinkLocations, loc: Location[TLBusWrapper])(implicit p: Parameters): FrontBus = {$/;"	m
instantiate	src/main/scala/subsystem/HasTiles.scala	/^  def instantiate(implicit p: Parameters): TilePRCIDomain[TileType] = {$/;"	m
instantiate	src/main/scala/subsystem/MemoryBus.scala	/^  def instantiate(context: HasTileLinkLocations, loc: Location[TLBusWrapper])(implicit p: Parameters): MemoryBus = {$/;"	m
instantiate	src/main/scala/subsystem/PeripheryBus.scala	/^  def instantiate(context: HasTileLinkLocations, loc: Location[TLBusWrapper])(implicit p: Parameters): PeripheryBus = {$/;"	m
instantiate	src/main/scala/subsystem/SystemBus.scala	/^  def instantiate(context: HasTileLinkLocations, loc: Location[TLBusWrapper])(implicit p: Parameters): SystemBus = {$/;"	m
instantiate	src/main/scala/tile/BaseTile.scala	/^  def instantiate(crossing: TileCrossingParamsLike, lookup: LookupByHartIdImpl)$/;"	m
instantiate	src/main/scala/tile/RocketTile.scala	/^  def instantiate(crossing: TileCrossingParamsLike, lookup: LookupByHartIdImpl)(implicit p: Parameters): RocketTile = {$/;"	m
instantiate	src/main/scala/tilelink/BusWrapper.scala	/^  def instantiate(context: HasTileLinkLocations)(implicit p: Parameters): Unit = {$/;"	m
instantiate	src/main/scala/tilelink/BusWrapper.scala	/^  def instantiate(context: HasTileLinkLocations, loc: Location[TLBusWrapper])(implicit p: Parameters): AddressAdjusterWrapper = {$/;"	m
instantiate	src/main/scala/tilelink/BusWrapper.scala	/^  def instantiate(context: HasTileLinkLocations, loc: Location[TLBusWrapper])(implicit p: Parameters): TLBusWrapper$/;"	m
instantiate	src/main/scala/tilelink/BusWrapper.scala	/^  def instantiate(context: HasTileLinkLocations, loc: Location[TLBusWrapper])(implicit p: Parameters): TLJBarWrapper = {$/;"	m
instantiateJtagDTM	src/main/scala/devices/debug/Periphery.scala	/^  def instantiateJtagDTM(sj: SystemJTAGIO): DebugTransportModuleJTAG = {$/;"	m
instantiations	src/main/scala/tilelink/BusWrapper.scala	/^  val instantiations: Seq[(Location[TLBusWrapper], TLBusWrapperInstantiationLike)],$/;"	l
instream	src/main/scala/diplomacy/DeviceTree.scala	/^    val instream = new ByteArrayInputStream(dts.getBytes("UTF-8"))$/;"	l
instret	src/main/scala/rocket/Instructions.scala	/^  val instret = 0xc02$/;"	l
instreth	src/main/scala/rocket/Instructions.scala	/^  val instreth = 0xc82$/;"	l
instruction	src/main/scala/jtag/JtagTap.scala	/^  val instruction = Output(UInt(irLength.W))  \/\/ current active instruction$/;"	l
instructionIntKeyToBigInt	src/main/scala/jtag/package.scala	/^  implicit def instructionIntKeyToBigInt[V <: Chain](x: (Int, V)) = (BigInt(x._1), x._2)$/;"	m
instruction_hardware_breakpoint_count	scripts/RocketSim.py	/^    instruction_hardware_breakpoint_count = 2$/;"	v	class:RocketSimHart
instruction_hardware_breakpoint_count	scripts/RocketSim32.py	/^    instruction_hardware_breakpoint_count = 2$/;"	v	class:RocketSimHart
instruction_hardware_breakpoint_count	scripts/RocketSim64.py	/^    instruction_hardware_breakpoint_count = 2$/;"	v	class:RocketSimHart
int	src/main/resources/vsrc/SimDTM.v	/^  input  int        debug_resp_bits_data$/;"	p
int	src/main/resources/vsrc/SimDTM.v	/^  input  int        debug_resp_bits_resp,$/;"	p
int	src/main/resources/vsrc/SimDTM.v	/^  output int     debug_req_bits_addr,$/;"	p
int	src/main/resources/vsrc/SimDTM.v	/^  output int     debug_req_bits_data,$/;"	p
int	src/main/resources/vsrc/SimDTM.v	/^  output int     debug_req_bits_op,$/;"	p
int	src/main/scala/diplomacy/Resources.scala	/^    val int = describeInterrupts(resources)      \/\/ interrupt description$/;"	l
int	src/main/scala/diplomacy/Resources.scala	/^    val int = resources("int")$/;"	l
int	src/main/scala/diplomacy/Resources.scala	/^  def int = Seq(Resource(this, "int"))$/;"	m
int	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^    val int = resources("int")$/;"	l
int	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val int = resourceBindings("int")$/;"	l
int	src/main/scala/tilelink/Broadcast.scala	/^  val int = Output(Bool())$/;"	l
intInClockXing	src/main/scala/tile/TilePRCIDomain.scala	/^    val intInClockXing = this.crossIn(tile.intInwardNode)$/;"	l
intInXing	src/main/scala/subsystem/CrossingWrapper.scala	/^    val intInXing = this.crossIn(n)$/;"	l
intInwardNode	src/main/scala/tile/BaseTile.scala	/^  def intInwardNode: IntInwardNode    \/\/ Interrupts to the core from external devices$/;"	m
intInwardNode	src/main/scala/tile/Interrupts.scala	/^  val intInwardNode = intXbar.intnode :=* IntIdentityNode()(ValName("int_local"))$/;"	l
intNode	src/main/scala/tile/BusErrorUnit.scala	/^  val intNode = IntSourceNode(IntSourcePortSimple(resources = device.int))$/;"	l
intNode	src/main/scala/tilelink/Broadcast.scala	/^  val intNode = if (params.control.isEmpty) None else Some(IntSourceNode(IntSourcePortSimple(num = 1)))$/;"	l
intOutClockXing	src/main/scala/tile/TilePRCIDomain.scala	/^    val intOutClockXing = this.crossOut(intOutResetXing)$/;"	l
intOutResetXing	src/main/scala/tile/TilePRCIDomain.scala	/^    val intOutResetXing = this { tile_reset_domain.crossIntOut(tileNode) }$/;"	l
intOutXing	src/main/scala/subsystem/CrossingWrapper.scala	/^    val intOutXing = this.crossOut(n)$/;"	l
intOutwardNode	src/main/scala/groundtest/Tile.scala	/^  val intOutwardNode: IntOutwardNode = IntIdentityNode()$/;"	l
intOutwardNode	src/main/scala/tile/BaseTile.scala	/^  def intOutwardNode: IntOutwardNode  \/\/ Interrupts from tile-internal devices (e.g. BEU)$/;"	m
intOutwardNode	src/main/scala/tile/RocketTile.scala	/^  val intOutwardNode = IntIdentityNode()$/;"	l
intToDoctype	src/main/scala/util/PlusArg.scala	/^  implicit val intToDoctype    = new Doctypeable[Int]    { def toDoctype(a: Option[Int])    = "INT"    }$/;"	l
intType	src/main/scala/tile/FPU.scala	/^  val intType = Wire(init = in.fmt(0))$/;"	l
intValue	src/main/scala/tile/FPU.scala	/^  val intValue = {$/;"	l
intXing	src/main/scala/interrupts/RegisterRouter.scala	/^  val intXing: IntOutwardClockCrossingHelper = this.crossOut(intnode)$/;"	l
int_bus	src/main/scala/subsystem/InterruptBus.scala	/^  val int_bus = LazyModule(new IntXbar)   \/\/ Interrupt crossbar$/;"	l
intcDevice	src/main/scala/tile/Interrupts.scala	/^  val intcDevice = new DeviceSnippet {$/;"	l
interfaces	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^      val interfaces = klass.getInterfaces$/;"	l
internalIo	src/main/scala/jtag/JtagTap.scala	/^    val internalIo = Wire(new JtagBlockIO(irLength, icode.isDefined))$/;"	l
interrupt	src/main/scala/devices/tilelink/Plic.scala	/^    val interrupt = Bool(INPUT)$/;"	l
interrupt	src/main/scala/rocket/CSR.scala	/^  val interrupt = Bool()$/;"	l
interrupt	src/main/scala/rocket/CSR.scala	/^  val interrupt = Bool(OUTPUT)$/;"	l
interrupt	src/main/scala/tile/BusErrorUnit.scala	/^      val interrupt = Bool().asOutput$/;"	l
interrupt	src/main/scala/tile/LazyRoCC.scala	/^  val interrupt = Output(Bool())$/;"	l
interruptCause	src/main/scala/rocket/CSR.scala	/^  val interruptCause = UInt(interruptMSB) + (nmiFlag << (xLen-2)) + whichInterrupt$/;"	l
interruptLatency	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^  def interruptLatency: Int$/;"	m
interruptMSB	src/main/scala/rocket/CSR.scala	/^  val interruptMSB = BigInt(1) << (xLen-1)$/;"	l
interruptOffset	src/main/scala/rocket/CSR.scala	/^    val interruptOffset = cause(mtvecInterruptAlign-1, 0) << mtvecBaseAlign$/;"	l
interruptTargets	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val interruptTargets = int.map {$/;"	l
interruptVec	src/main/scala/rocket/CSR.scala	/^    val interruptVec = Cat(base >> (mtvecInterruptAlign + mtvecBaseAlign), interruptOffset)$/;"	l
interrupt_cause	src/main/scala/rocket/CSR.scala	/^  val interrupt_cause = UInt(OUTPUT, xLen)$/;"	l
interrupts	src/main/scala/amba/ahb/RegisterRouter.scala	/^  val interrupts = if (router.intnode.out.isEmpty) Vec(0, Bool()) else router.intnode.out(0)._1$/;"	l
interrupts	src/main/scala/amba/apb/RegisterRouter.scala	/^  val interrupts = if (router.intnode.out.isEmpty) Vec(0, Bool()) else router.intnode.out(0)._1$/;"	l
interrupts	src/main/scala/amba/axi4/RegisterRouter.scala	/^  val interrupts = if (router.intnode.out.isEmpty) Vec(0, Bool()) else router.intnode.out(0)._1$/;"	l
interrupts	src/main/scala/devices/tilelink/Error.scala	/^      val interrupts = DiplomaticObjectModelAddressing.describeInterrupts(name, resourceBindings)$/;"	l
interrupts	src/main/scala/devices/tilelink/Plic.scala	/^    val interrupts = intnode.in.map { case (i, e) => i.take(e.source.num) }.flatten$/;"	l
interrupts	src/main/scala/devices/tilelink/Zero.scala	/^      val interrupts = DiplomaticObjectModelAddressing.describeInterrupts(name, resourceBindings)$/;"	l
interrupts	src/main/scala/diplomacy/Resources.scala	/^    val interrupts =$/;"	l
interrupts	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def interrupts(): Seq[OMInterrupt]$/;"	m
interrupts	src/main/scala/diplomaticobjectmodel/model/OMDevice.scala	/^  def interrupts: Seq[OMInterrupt]$/;"	m
interrupts	src/main/scala/interrupts/RegisterRouter.scala	/^  val interrupts: ModuleValue[Vec[Bool]] = InModuleBody { if (intnode.out.isEmpty) Vec(0, Bool()) else intnode.out(0)._1 }$/;"	l
interrupts	src/main/scala/regmapper/RegField.scala	/^  val interrupts: Vec[Bool]$/;"	l
interrupts	src/main/scala/rocket/CSR.scala	/^  val interrupts = new CoreInterrupts().asInput$/;"	l
interrupts	src/main/scala/subsystem/InterruptBus.scala	/^  val interrupts = IO(UInt(INPUT, width = outer.nExtInterrupts))$/;"	l
interrupts	src/main/scala/subsystem/InterruptBus.scala	/^  val interrupts: UInt$/;"	l
interrupts	src/main/scala/tile/Core.scala	/^    val interrupts = new CoreInterrupts().asInput$/;"	l
interrupts	src/main/scala/tilelink/RegisterRouter.scala	/^     val interrupts:  Int     = 0,$/;"	l
interrupts	src/main/scala/tilelink/RegisterRouter.scala	/^  val interrupts = if (router.intnode.out.isEmpty) Vec(0, Bool()) else router.intnode.out(0)._1$/;"	l
interrupts	src/main/scala/util/Annotations.scala	/^  def interrupts(component: InstanceId, name: String, interrupts: Seq[Int]): Unit = {$/;"	m
interrupts_extended	src/main/scala/diplomacy/Resources.scala	/^    val interrupts_extended =$/;"	l
intersect	src/main/scala/diplomacy/Parameters.scala	/^  def intersect(seq: Seq[TransferSizes]) = seq.reduce(_ intersect _)$/;"	m
intersect	src/main/scala/diplomacy/Parameters.scala	/^  def intersect(x: AddressSet): Option[AddressSet] = {$/;"	m
intersect	src/main/scala/diplomacy/Parameters.scala	/^  def intersect(x: TransferSizes) =$/;"	m
intersect	src/main/scala/tilelink/Parameters.scala	/^  def intersect(rhs: TLMasterToSlaveTransferSizes) = TLMasterToSlaveTransferSizes($/;"	m
intersect	src/main/scala/tilelink/Parameters.scala	/^  def intersect(rhs: TLSlaveToMasterTransferSizes) = TLSlaveToMasterTransferSizes($/;"	m
intersection	src/main/scala/tilelink/AddressAdjuster.scala	/^        val intersection = m.address.flatMap(a => params.region.intersect(a))$/;"	l
intersects	src/main/scala/rocket/Decode.scala	/^  def intersects(x: Term) = ((value ^ x.value) &~ mask &~ x.mask).signum == 0$/;"	m
intnode	src/main/scala/amba/ahb/RegisterRouter.scala	/^  val intnode = IntSourceNode(IntSourcePortSimple(num = interrupts))$/;"	l
intnode	src/main/scala/amba/apb/RegisterRouter.scala	/^  val intnode = IntSourceNode(IntSourcePortSimple(num = interrupts))$/;"	l
intnode	src/main/scala/amba/axi4/RegisterRouter.scala	/^  val intnode = IntSourceNode(IntSourcePortSimple(num = interrupts))$/;"	l
intnode	src/main/scala/devices/debug/Debug.scala	/^  val intnode = IntNexusNode($/;"	l
intnode	src/main/scala/devices/debug/Debug.scala	/^  val intnode = IntSyncCrossingSource(alreadyRegistered = true) :*= dmOuter.intnode$/;"	l
intnode	src/main/scala/devices/debug/Debug.scala	/^  val intnode = dmOuter.intnode$/;"	l
intnode	src/main/scala/devices/tilelink/CLINT.scala	/^  val intnode : IntNexusNode = IntNexusNode($/;"	l
intnode	src/main/scala/devices/tilelink/Plic.scala	/^  val intnode: IntNexusNode = IntNexusNode($/;"	l
intnode	src/main/scala/interrupts/BlockDuringReset.scala	/^  val intnode = IntAdapterNode()$/;"	l
intnode	src/main/scala/interrupts/Crossing.scala	/^  val intnode = IntAdapterNode()$/;"	l
intnode	src/main/scala/interrupts/NullIntSource.scala	/^  val intnode = IntSourceNode(IntSourcePortSimple(num, ports, sources))$/;"	l
intnode	src/main/scala/interrupts/Xbar.scala	/^  val intnode = new IntNexusNode($/;"	l
intnode	src/main/scala/tilelink/RegisterRouter.scala	/^  val intnode = IntSourceNode(IntSourcePortSimple(num = interrupts, resources = Seq(Resource(device, "int"))))$/;"	l
ints	src/main/scala/devices/tilelink/CLINT.scala	/^  def ints = 2$/;"	m
ints	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val ints = DiplomaticObjectModelAddressing.describeInterrupts(name, resourceBindings)$/;"	l
intsink	src/main/scala/interrupts/Crossing.scala	/^    val intsink = LazyModule(new IntSyncAsyncCrossingSink(sync))$/;"	l
intsink	src/main/scala/interrupts/Crossing.scala	/^    val intsink = LazyModule(new IntSyncRationalCrossingSink())$/;"	l
intsink	src/main/scala/interrupts/Crossing.scala	/^    val intsink = LazyModule(new IntSyncSyncCrossingSink())$/;"	l
intsource	src/main/scala/interrupts/Crossing.scala	/^    val intsource = LazyModule(new IntSyncCrossingSource(alreadyRegistered))$/;"	l
inv_d	src/main/scala/tilelink/Atomics.scala	/^  val inv_d = Mux(adder, io.data_in, ~io.data_in)$/;"	l
invalid	src/main/scala/tile/FPU.scala	/^          val invalid = conv.io.intExceptionFlags(2) || narrow.io.intExceptionFlags(1)$/;"	l
invalidate	src/main/scala/rocket/ICache.scala	/^  val invalidate = Bool(INPUT)$/;"	l
invalidate	src/main/scala/rocket/ICache.scala	/^  val invalidate = Wire(init = io.invalidate)$/;"	l
invalidate	src/main/scala/rocket/TLB.scala	/^  def invalidate(): Unit = { valid.foreach(_ := false) }$/;"	m
invalidate	src/main/scala/rocket/TLB.scala	/^  def invalidate(virtual: Bool, guestPhys: Bool): Unit = {$/;"	m
invalidateNonGlobal	src/main/scala/rocket/TLB.scala	/^  def invalidateNonGlobal(virtual: Bool): Unit = {$/;"	m
invalidateVPN	src/main/scala/rocket/TLB.scala	/^  def invalidateVPN(vpn: UInt, virtual: Bool): Unit = {$/;"	m
invalidate_refill	src/main/scala/rocket/TLB.scala	/^  val invalidate_refill = state.isOneOf(s_request \/* don't care *\/, s_wait_invalidate) || io.sfence.valid$/;"	l
invalidated	src/main/scala/rocket/ICache.scala	/^  val invalidated = Reg(Bool())$/;"	l
invalidated	src/main/scala/rocket/PTW.scala	/^  val invalidated = Reg(Bool())$/;"	l
inward	src/main/scala/diplomacy/Nodes.scala	/^  def inward: InwardNode[DI, UI, BI]$/;"	m
inward	src/main/scala/diplomacy/Nodes.scala	/^  val inward = this$/;"	l
inward	src/main/scala/diplomacy/Nodes.scala	/^  val inward: InwardNode[DI, UI, BI] = inwardHandle.inward$/;"	l
inwardNode	src/main/scala/subsystem/BankedL2Params.scala	/^  val inwardNode = tempIn :*= coherent_jbar.node$/;"	l
inwardNode	src/main/scala/subsystem/MemoryBus.scala	/^  val inwardNode: TLInwardNode =$/;"	l
inwardNode	src/main/scala/subsystem/PeripheryBus.scala	/^  def inwardNode: TLInwardNode = node$/;"	m
inwardNode	src/main/scala/subsystem/SystemBus.scala	/^  val inwardNode: TLInwardNode = system_bus_xbar.node :=* TLFIFOFixer(TLFIFOFixer.allVolatile) :=* replicator.map(_.node).getOrElse(TLTempNode())$/;"	l
inwardNode	src/main/scala/tilelink/BusWrapper.scala	/^  def inwardNode: TLInwardNode = xbar.node$/;"	m
inwardNode	src/main/scala/tilelink/BusWrapper.scala	/^  def inwardNode: TLInwardNode$/;"	m
inwardNode	src/main/scala/tilelink/BusWrapper.scala	/^  val inwardNode: TLInwardNode = address_adjuster.map(_.node :*=* TLFIFOFixer(params.policy) :*=* viewNode).getOrElse(viewNode)$/;"	l
inwardNode	src/main/scala/tilelink/BusWrapper.scala	/^  val inwardNode: TLInwardNode = jbar.node$/;"	l
io	src/main/scala/amba/ahb/Monitor.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/amba/ahb/RegisterRouter.scala	/^  val io = IO(bundleBuilder)$/;"	l
io	src/main/scala/amba/ahb/Test.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/amba/apb/Monitor.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/amba/apb/RegisterRouter.scala	/^  val io = IO(bundleBuilder)$/;"	l
io	src/main/scala/amba/axi4/AsyncCrossing.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/amba/axi4/Monitor.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/amba/axi4/RegisterRouter.scala	/^  val io = IO(bundleBuilder)$/;"	l
io	src/main/scala/amba/axi4/Test.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/devices/debug/DMI.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/devices/debug/Debug.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/devices/debug/DebugTransport.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/devices/debug/Periphery.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/devices/debug/SBA.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/devices/tilelink/BusBypass.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/devices/tilelink/CLINT.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/devices/tilelink/MasterMux.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/devices/tilelink/Plic.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/diplomacy/BundleBridge.scala	/^    val io: T = IO(if (inferInput) Input(chiselTypeOf(bundle)) else Flipped(chiselTypeClone(bundle)))$/;"	l
io	src/main/scala/diplomacy/BundleBridge.scala	/^    val io: T = IO(if (inferOutput) Output(chiselTypeOf(bundle)) else chiselTypeClone(bundle))$/;"	l
io	src/main/scala/diplomacy/CloneModule.scala	/^  val io = IO(new ClonePorts(model.getPorts.map(_.id): _*))$/;"	l
io	src/main/scala/groundtest/DummyPTW.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/groundtest/TestHarness.scala	/^  val io = new Bundle { val success = Bool(OUTPUT) }$/;"	l
io	src/main/scala/groundtest/TraceGen.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/jtag/JtagShifter.scala	/^  val io = IO(new ModIO)$/;"	l
io	src/main/scala/jtag/JtagShifter.scala	/^  val io: ChainIO$/;"	l
io	src/main/scala/jtag/JtagStateMachine.scala	/^  val io = IO(new StateMachineIO)$/;"	l
io	src/main/scala/jtag/JtagTap.scala	/^  val io = IO(new JtagControllerIO(irLength))$/;"	l
io	src/main/scala/jtag/Utils.scala	/^  val io = IO(new CountIO)$/;"	l
io	src/main/scala/prci/ClockGroupDriver.scala	/^      val io = IO(Flipped(RecordMap(elements.map { case (name, data) =>$/;"	l
io	src/main/scala/prci/TestClockSource.scala	/^  val io = IO(new ClockSourceIO)$/;"	l
io	src/main/scala/regmapper/RegisterCrossing.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/regmapper/RegisterCrossing.scala	/^  val io = new RegisterReadCrossingIO(gen)$/;"	l
io	src/main/scala/regmapper/RegisterCrossing.scala	/^  val io = new RegisterWriteCrossingIO(gen)$/;"	l
io	src/main/scala/regmapper/Test.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/ALU.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/AMOALU.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/BTB.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/Breakpoint.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/rocket/CSR.scala	/^  val io = new CSRFileIO {$/;"	l
io	src/main/scala/rocket/DCache.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/Frontend.scala	/^  val io = IO(new FrontendBundle(outer))$/;"	l
io	src/main/scala/rocket/HellaCache.scala	/^  val io = IO(new HellaCacheBundle(outer))$/;"	l
io	src/main/scala/rocket/HellaCache.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/HellaCacheArbiter.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/IBuf.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/ICache.scala	/^  val io = IO(new ICacheBundle(outer))$/;"	l
io	src/main/scala/rocket/Multiplier.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/rocket/Multiplier.scala	/^  val io = IO(new MultiplierIO(width, log2Up(nXpr)))$/;"	l
io	src/main/scala/rocket/NBDcache.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/PMP.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/rocket/PTW.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/RVC.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/rocket/ScratchpadSlavePort.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/rocket/TLB.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/scie/SCIE.scala	/^  val io = IO(new SCIEDecoderInterface)$/;"	l
io	src/main/scala/scie/SCIE.scala	/^  val io = IO(new SCIEPipelinedInterface(xLen))$/;"	l
io	src/main/scala/scie/SCIE.scala	/^  val io = IO(new SCIEUnpipelinedInterface(xLen))$/;"	l
io	src/main/scala/system/TestHarness.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/tile/BusErrorUnit.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/tile/Core.scala	/^  val io = new CoreBundle()(p) {$/;"	l
io	src/main/scala/tile/FPU.scala	/^    val io = new Bundle {$/;"	l
io	src/main/scala/tile/FPU.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/tile/FPU.scala	/^  val io = new FPUIO$/;"	l
io	src/main/scala/tile/LazyRoCC.scala	/^        val io = IO( new Bundle {$/;"	l
io	src/main/scala/tile/LazyRoCC.scala	/^  val io = IO(new RoCCIO(outer.nPTWPorts))$/;"	l
io	src/main/scala/tile/LazyRoCC.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/tilelink/AsyncCrossing.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/tilelink/Atomics.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/tilelink/Broadcast.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/tilelink/Broadcast.scala	/^  val io = IO(new ProbeFilterIO(params))$/;"	l
io	src/main/scala/tilelink/Fuzzer.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/tilelink/Fuzzer.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/tilelink/Isolation.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/tilelink/Monitor.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/tilelink/PatternPusher.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/tilelink/RationalCrossing.scala	/^    val io = IO(new Bundle {$/;"	l
io	src/main/scala/tilelink/RegisterRouter.scala	/^  val io = IO(bundleBuilder)$/;"	l
io	src/main/scala/unittest/TestHarness.scala	/^  val io = new Bundle { val success = Bool(OUTPUT) }$/;"	l
io	src/main/scala/unittest/UnitTest.scala	/^  val io = IO(new Bundle with UnitTestIO)$/;"	l
io	src/main/scala/unittest/UnitTest.scala	/^  val io = new Bundle with UnitTestIO$/;"	l
io	src/main/scala/unittest/UnitTest.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/unittest/UnitTest.scala	/^  val io: UnitTestIO$/;"	l
io	src/main/scala/util/Arbiters.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/util/AsyncQueue.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/util/AsyncQueue.scala	/^  val io = IO(new CrossingIO(gen))$/;"	l
io	src/main/scala/util/AsyncResetReg.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/util/AsyncResetReg.scala	/^  val io = IO(new SimpleRegIO(w))$/;"	l
io	src/main/scala/util/Broadcaster.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/util/ClockDivider.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/util/ClockGate.scala	/^  val io = IO(new Bundle{$/;"	l
io	src/main/scala/util/Crossing.scala	/^  val io: CrossingIO[T]$/;"	l
io	src/main/scala/util/HellaQueue.scala	/^  val io = new QueueIO(data, entries)$/;"	l
io	src/main/scala/util/IDPool.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/util/IdentityModule.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/util/LCG.scala	/^  val io = new Bundle { $/;"	l
io	src/main/scala/util/LanePositionedQueue.scala	/^  val io = IO(new LanePositionedQueueIO(gen, args))$/;"	l
io	src/main/scala/util/LanePositionedQueue.scala	/^  val io: LanePositionedQueueIO[T]$/;"	l
io	src/main/scala/util/LatencyPipe.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/util/MultiLaneQueue.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/util/MultiPortQueue.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/util/MultiWidthFifo.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/util/PlusArg.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/util/ROMGenerator.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/util/RationalCrossing.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/util/RationalCrossing.scala	/^  val io = IO(new CrossingIO(gen))$/;"	l
io	src/main/scala/util/ReadyValidCancel.scala	/^  val io = IO(new Bundle{$/;"	l
io	src/main/scala/util/ReorderQueue.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/util/Repeater.scala	/^  val io = IO( new Bundle {$/;"	l
io	src/main/scala/util/ResetCatchAndSync.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/util/ShiftQueue.scala	/^  val io = IO(new QueueIO(gen, entries) {$/;"	l
io	src/main/scala/util/ShiftReg.scala	/^  val io = IO(new Bundle {$/;"	l
io	src/main/scala/util/SynchronizerReg.scala	/^  val io = IO(new Bundle{$/;"	l
io	src/main/scala/util/Timer.scala	/^  val io = new Bundle {$/;"	l
io	src/main/scala/util/package.scala	/^      val io = IO(new Bundle {$/;"	l
ioClockGroupSourceNode	src/main/scala/prci/ClockGroupDriver.scala	/^    val ioClockGroupSourceNode = ClockGroupSourceNode(List.fill(num) { ClockGroupSourceParameters() })$/;"	l
ioNode	src/main/scala/regmapper/RegisterRouter.scala	/^  val ioNode = BundleBridgeSource(() => portBundle.cloneType)$/;"	l
io_axi4	src/main/scala/system/SimAXIMem.scala	/^  val io_axi4 = InModuleBody { node.makeIOs() }$/;"	l
io_hartid	src/main/scala/rocket/HellaCache.scala	/^  val io_hartid = outer.hartIdSinkNodeOpt.map(_.bundle)$/;"	l
io_hartid	src/main/scala/rocket/ICache.scala	/^  val io_hartid = outer.hartIdSinkNodeOpt.map(_.bundle)$/;"	l
io_mmio_address_prefix	src/main/scala/rocket/HellaCache.scala	/^  val io_mmio_address_prefix = outer.mmioAddressPrefixSinkNodeOpt.map(_.bundle)$/;"	l
io_mmio_address_prefix	src/main/scala/rocket/ICache.scala	/^  val io_mmio_address_prefix = outer.mmioAddressPrefixSinkNodeOpt.map(_.bundle)$/;"	l
io_name	src/main/scala/diplomacy/Nodes.scala	/^      val io_name = orig_module.auto.elements.find(_._2 eq orig.get.data).get._1$/;"	l
io_reset_vector	src/main/scala/rocket/Frontend.scala	/^  val io_reset_vector = outer.resetVectorSinkNode.bundle$/;"	l
ios	src/main/scala/diplomacy/Nodes.scala	/^    val ios = IO(Flipped(new HeterogeneousBag(bundles.map(_.cloneType))))$/;"	l
ios	src/main/scala/diplomacy/Nodes.scala	/^    val ios = IO(new HeterogeneousBag(bundles.map(_.cloneType)))$/;"	l
ip	src/main/scala/devices/tilelink/Plic.scala	/^    val ip   = UInt(width = nDevices).flip$/;"	l
ipi	src/main/scala/devices/tilelink/CLINT.scala	/^    val ipi = Seq.fill(nTiles) { RegInit(UInt(0, width = 1)) }$/;"	l
ipiWidth	src/main/scala/devices/tilelink/CLINT.scala	/^  def ipiWidth = 32$/;"	m
irChain	src/main/scala/jtag/JtagTap.scala	/^  val irChain = Module(CaptureUpdateChain(UInt(irLength.W)))$/;"	l
iready	src/main/scala/regmapper/RegMapper.scala	/^    val iready = Mux(front.bits.read, rifireMux, wifireMux)$/;"	l
iready	src/main/scala/regmapper/Test.scala	/^      val iready = progress && !busy$/;"	l
iretire	src/main/scala/util/TraceCoreInterface.scala	/^  val iretire = UInt(params.iretireWidth.W)$/;"	l
iretireWidth	src/main/scala/util/TraceCoreInterface.scala	/^  val iretireWidth: Int = 1,$/;"	l
irr	src/main/scala/util/CreditedIO.scala	/^    val irr = res.toReceiver(depth, flow)$/;"	l
irrevocable	src/main/scala/diplomacy/Parameters.scala	/^  def irrevocable[T <: Data](x: ReadyValidIO[T]) =$/;"	m
isA	src/main/scala/tilelink/Bundles.scala	/^  def isA(x: UInt) = x <= AcquirePerm$/;"	m
isAMO	src/main/scala/rocket/Consts.scala	/^  def isAMO(cmd: UInt) = isAMOLogical(cmd) || isAMOArithmetic(cmd)$/;"	m
isAMOArithmetic	src/main/scala/rocket/Consts.scala	/^  def isAMOArithmetic(cmd: UInt) = cmd.isOneOf(M_XA_ADD, M_XA_MIN, M_XA_MAX, M_XA_MINU, M_XA_MAXU)$/;"	m
isAMOLogical	src/main/scala/rocket/Consts.scala	/^  def isAMOLogical(cmd: UInt) = cmd.isOneOf(M_XA_SWAP, M_XA_XOR, M_XA_OR, M_XA_AND)$/;"	m
isAdjustable	src/main/scala/tilelink/AddressAdjuster.scala	/^      def isAdjustable(addr: UInt) = params.region.contains(addr) || totalContainment.B$/;"	m
isAligned	src/main/scala/amba/axis/Parameters.scala	/^  val isAligned:    Boolean, \/* there are no 'Position byte's in transfers *\/$/;"	l
isAligned	src/main/scala/tilelink/Edges.scala	/^  def isAligned(address: UInt, lgSize: UInt): Bool = {$/;"	m
isArithmetic	src/main/scala/tilelink/Bundles.scala	/^  def isArithmetic(x: UInt) = x <= ADD$/;"	m
isB	src/main/scala/tilelink/Bundles.scala	/^  def isB(x: UInt) = x <= Probe$/;"	m
isBranch	src/main/scala/rocket/BTB.scala	/^    val isBranch = (idxHit & cfiType.map(_ === CFIType.branch).asUInt).orR$/;"	l
isC	src/main/scala/tilelink/Bundles.scala	/^  def isC(x: UInt) = x <= ReleaseData$/;"	m
isCache	src/main/scala/amba/axi4/Parameters.scala	/^  val isCache = false$/;"	l
isCache	src/main/scala/amba/axi4/ToTL.scala	/^  val isCache = false$/;"	l
isCache	src/main/scala/diplomacy/Parameters.scala	/^  def isCache: Boolean$/;"	m
isCache	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^                   val isCache: Boolean,$/;"	l
isCap	src/main/scala/tilelink/Bundles.scala	/^  def isCap(x: UInt) = x <= toN$/;"	m
isCmp	src/main/scala/rocket/ALU.scala	/^  def isCmp(cmd: UInt) = cmd >= FN_SLT$/;"	m
isContinuous	src/main/scala/amba/axis/Parameters.scala	/^  val isContinuous: Boolean, \/* there are no 'Null byte's except at the end of a transfer *\/$/;"	l
isControl	src/main/scala/util/BundleMap.scala	/^  def isControl: Boolean = this match {$/;"	m
isD	src/main/scala/tilelink/Bundles.scala	/^  def isD(x: UInt) = x <= ReleaseAck$/;"	m
isDM	src/main/scala/tile/L1Cache.scala	/^  def isDM = nWays == 1$/;"	m
isData	src/main/scala/util/BundleMap.scala	/^  def isData: Boolean = this match {$/;"	m
isDefined	src/main/scala/diplomacy/Parameters.scala	/^  def isDefined = depth > 0$/;"	m
isDeviceContainedBy	src/main/scala/tilelink/AddressAdjuster.scala	/^  def isDeviceContainedBy(region: Seq[AddressSet], m: TLSlaveParameters): Boolean = {$/;"	m
isDynamicallyLocal	src/main/scala/tilelink/AddressAdjuster.scala	/^      def isDynamicallyLocal(addr: UInt) = (local_prefix & mask.U) === (addr & mask.U) || containsAddress(forceLocal, addr)$/;"	m
isEmpty	src/main/scala/diplomacy/Parameters.scala	/^  def isEmpty = end == start$/;"	m
isEmpty	src/main/scala/rocket/BTB.scala	/^  def isEmpty: Bool = count === UInt(0)$/;"	m
isFullPerm	src/main/scala/rocket/PTW.scala	/^  def isFullPerm(dummy: Int = 0) = uw() && ux()$/;"	m
isGrow	src/main/scala/tilelink/Bundles.scala	/^  def isGrow(x: UInt) = x <= BtoT$/;"	m
isHi	src/main/scala/rocket/Multiplier.scala	/^  val isHi = Reg(Bool())$/;"	l
isHighSubnormalIn	src/main/scala/tile/FPU.scala	/^    val isHighSubnormalIn = x(exp + sig - 3, sig - 1) < UInt(2)$/;"	l
isHint	src/main/scala/tilelink/HintHandler.scala	/^      val isHint = in.a.bits.opcode === TLMessages.Hint$/;"	l
isHints	src/main/scala/tilelink/Bundles.scala	/^  def isHints(x: UInt) = x <= PREFETCH_WRITE$/;"	m
isInf	src/main/scala/tile/FPU.scala	/^    val isInf = isSpecial && !code(0)$/;"	l
isInvalid	src/main/scala/tile/FPU.scala	/^    val isInvalid = maxType.isSNaN(in.bits.in1) || maxType.isSNaN(in.bits.in2)$/;"	l
isLHS	src/main/scala/tile/FPU.scala	/^    val isLHS = isnan2 || in.bits.rm(0) =\/= io.lt && !isnan1$/;"	l
isLegalPrefix	src/main/scala/tilelink/RegionReplication.scala	/^  def isLegalPrefix(prefix: UInt): Bool = ~(~prefix | replicationMask.U) === 0.U$/;"	m
isLess	src/main/scala/rocket/AMOALU.scala	/^    def isLess(x: UInt, y: UInt, n: Int): Bool = {$/;"	m
isLessUnsigned	src/main/scala/rocket/AMOALU.scala	/^    def isLessUnsigned(x: UInt, y: UInt, n: Int): Bool = {$/;"	m
isLogical	src/main/scala/tilelink/Bundles.scala	/^  def isLogical(x: UInt) = x <= SWAP$/;"	m
isMulFN	src/main/scala/rocket/ALU.scala	/^  def isMulFN(fn: UInt, cmp: UInt) = fn(1,0) === cmp(1,0)$/;"	m
isMyId	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^        val isMyId = mySinkId === in.e.bits.sink$/;"	l
isNaN	src/main/scala/tile/FPU.scala	/^    val isNaN = code.andR$/;"	l
isNaN	src/main/scala/tile/FPU.scala	/^  def isNaN(x: UInt) = x(sig + exp - 1, sig + exp - 3).andR$/;"	m
isNaNOut	src/main/scala/tile/FPU.scala	/^    val isNaNOut = isnan1 && isnan2$/;"	l
isNormal	src/main/scala/tile/FPU.scala	/^    val isNormal = codeHi === UInt(1) && !isHighSubnormalIn || codeHi === UInt(2)$/;"	l
isOneOf	src/main/scala/util/package.scala	/^    def isOneOf(s: Seq[UInt]): Bool = s.map(x === _).orR$/;"	m
isOneOf	src/main/scala/util/package.scala	/^    def isOneOf(u1: UInt, u2: UInt*): Bool = isOneOf(u1 +: u2.toSeq)$/;"	m
isPrefetch	src/main/scala/rocket/Consts.scala	/^  def isPrefetch(cmd: UInt) = cmd === M_PFR || cmd === M_PFW$/;"	m
isPut	src/main/scala/tilelink/CacheCork.scala	/^        val isPut = in.a.bits.opcode === PutFullData || in.a.bits.opcode === PutPartialData$/;"	l
isQNaN	src/main/scala/tile/FPU.scala	/^    val isQNaN = isNaN && x(sig-2)$/;"	l
isRead	src/main/scala/rocket/Consts.scala	/^  def isRead(cmd: UInt) = cmd.isOneOf(M_XRD, M_HLVX, M_XLR, M_XSC) || isAMO(cmd)$/;"	m
isReport	src/main/scala/tilelink/Bundles.scala	/^  def isReport(x: UInt) = x <= NtoN$/;"	m
isRequest	src/main/scala/tilelink/Edges.scala	/^  def isRequest(x: TLChannel): Bool = {$/;"	m
isResponse	src/main/scala/tilelink/Edges.scala	/^  def isResponse(x: TLChannel): Bool = {$/;"	m
isSNaN	src/main/scala/tile/FPU.scala	/^    val isSNaN = isNaN && !x(sig-2)$/;"	l
isSNaN	src/main/scala/tile/FPU.scala	/^  def isSNaN(x: UInt) = isNaN(x) && !x(sig - 2)$/;"	m
isShrink	src/main/scala/tilelink/Bundles.scala	/^  def isShrink(x: UInt) = x <= BtoN$/;"	m
isSpecial	src/main/scala/tile/FPU.scala	/^    val isSpecial = codeHi === UInt(3)$/;"	l
isStaticallyLocal	src/main/scala/tilelink/AddressAdjuster.scala	/^      def isStaticallyLocal(addr: UInt) = containsAddress(staticLocal, addr)$/;"	m
isSub	src/main/scala/rocket/ALU.scala	/^  def isSub(cmd: UInt) = cmd(3)$/;"	m
isSubnormal	src/main/scala/tile/FPU.scala	/^    val isSubnormal = code === UInt(1) || codeHi === UInt(1) && isHighSubnormalIn$/;"	l
isTree	src/main/scala/tilelink/Parameters.scala	/^  def isTree = !slaves.exists(!_.isTree)$/;"	m
isTree	src/main/scala/tilelink/Parameters.scala	/^  def isTree = findTreeViolation() == None$/;"	m
isValid	src/main/scala/rocket/BTB.scala	/^  val isValid = Bool()$/;"	l
isValid	src/main/scala/rocket/BTB.scala	/^  val isValid = Reg(init = UInt(0, entries))$/;"	l
isValid	src/main/scala/tilelink/Metadata.scala	/^  def isValid(dummy: Int = 0): Bool = state > ClientStates.Nothing$/;"	m
isWrite	src/main/scala/rocket/Consts.scala	/^  def isWrite(cmd: UInt) = cmd === M_XWR || cmd === M_PWR || cmd === M_XSC || isAMO(cmd)$/;"	m
isWriteIntent	src/main/scala/rocket/Consts.scala	/^  def isWriteIntent(cmd: UInt) = isWrite(cmd) || cmd === M_PFW || cmd === M_XLR$/;"	m
isZero	src/main/scala/rocket/CSR.scala	/^    val isZero = vill || useZero$/;"	l
isZero	src/main/scala/tile/FPU.scala	/^    val isZero = code === UInt(0)$/;"	l
is_aligned	src/main/scala/tilelink/Monitor.scala	/^    val is_aligned = edge.isAligned(bundle.address, bundle.size)$/;"	l
is_counter	src/main/scala/rocket/CSR.scala	/^    val is_counter = (addr.inRange(CSR.firstCtr, CSR.firstCtr + CSR.nCtr) || addr.inRange(CSR.firstCtrH, CSR.firstCtrH + CSR.nCtr))$/;"	l
is_instruction	src/main/resources/csrc/comlog.cc	/^bool is_instruction (std::string& line)$/;"	f
is_partial_commit	src/main/resources/csrc/comlog.cc	/^bool is_partial_commit (std::string& line)$/;"	f
isa	src/main/scala/devices/debug/Debug.scala	/^    val isa = Wire(new GeneratedI())$/;"	l
isa	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^  def isa: OMISA$/;"	m
isa	src/main/scala/rocket/CSR.scala	/^  val isa = UInt(width = 32)$/;"	l
isaDTS	src/main/scala/tile/BaseTile.scala	/^  def isaDTS: String = {$/;"	m
isaExtSpec	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^    val isaExtSpec = ISAExtensions.specVersion _$/;"	l
isaMaskString	src/main/scala/rocket/CSR.scala	/^  val isaMaskString =$/;"	l
isaMax	src/main/scala/rocket/CSR.scala	/^  val isaMax = (BigInt(log2Ceil(xLen) - 4) << (xLen-2)) | isaStringToMask(isaString)$/;"	l
isaString	src/main/scala/rocket/CSR.scala	/^  val isaString = (if (coreParams.useRVE) "E" else "I") +$/;"	l
isaStringToMask	src/main/scala/rocket/CSR.scala	/^  def isaStringToMask(s: String) = s.map(x => 1 << (x - 'A')).foldLeft(0)(_|_)$/;"	m
isbox	src/main/scala/tile/FPU.scala	/^          val isbox = isBox(x, t)$/;"	l
island	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val island = LazyModule(new CrossingWrapper(AsynchronousCrossing()))$/;"	l
island	src/main/scala/amba/axi4/Credited.scala	/^  val island = LazyModule(new CrossingWrapper(params))$/;"	l
island	src/main/scala/tilelink/AsyncCrossing.scala	/^  val island = LazyModule(new CrossingWrapper(params))$/;"	l
island	src/main/scala/tilelink/Credited.scala	/^  val island = LazyModule(new CrossingWrapper(params))$/;"	l
isnan1	src/main/scala/tile/FPU.scala	/^    val isnan1 = maxType.isNaN(in.bits.in1)$/;"	l
isnan2	src/main/scala/tile/FPU.scala	/^    val isnan2 = maxType.isNaN(in.bits.in2)$/;"	l
iso_in	src/main/scala/tilelink/Isolation.scala	/^      val iso_in  = Bool(INPUT) \/\/ Isolate from manager to client$/;"	l
iso_out	src/main/scala/tilelink/Isolation.scala	/^      val iso_out = Bool(INPUT) \/\/ Isolate from client to manager$/;"	l
iter	src/main/scala/util/SimpleProduct.scala	/^      def iter = that.productIterator zip this.productIterator$/;"	m
iter	src/main/scala/util/SimpleProduct.scala	/^    val iter = productIterator$/;"	l
iterate_by_n	scripts/vlsi_rom_gen	/^def iterate_by_n(it, n):$/;"	f
iterator	src/main/scala/util/Location.scala	/^  def iterator = internalMap.iterator.map(kv => (new Location(kv._1), kv._2))$/;"	m
itimProperty	src/main/scala/rocket/ICache.scala	/^  def itimProperty: Option[Seq[ResourceValue]] = icacheParams.itimAddr.map(_ => device.asProperty)$/;"	m
itimProperty	src/main/scala/tile/RocketTile.scala	/^  val itimProperty = frontend.icache.itimProperty.toSeq.flatMap(p => Map("sifive,itim" -> p))$/;"	l
itim_allocated	src/main/scala/rocket/ICache.scala	/^            val itim_allocated = !scratchpadOn && enable$/;"	l
itim_control_offset	src/main/scala/rocket/ICache.scala	/^  val itim_control_offset = size - icacheParams.nSets * icacheParams.blockBytes$/;"	l
itim_deallocated	src/main/scala/rocket/ICache.scala	/^            val itim_deallocated = scratchpadOn && !enable$/;"	l
itim_increase	src/main/scala/rocket/ICache.scala	/^            val itim_increase = scratchpadOn && enable && scratchpadLine(a.address) > scratchpadMax.get$/;"	l
itlb	src/main/scala/tile/BaseTile.scala	/^    val itlb = tileParams.icache.filter(_ => tileParams.core.useVM).map(i => Map($/;"	l
itype	src/main/scala/util/TraceCoreInterface.scala	/^  val itype = TraceItype()$/;"	l
ivalid	src/main/scala/rocket/Breakpoint.scala	/^  val ivalid = Vec(n, Bool())$/;"	l
j	src/main/scala/amba/axi4/IdIndexer.scala	/^          val j = i % (1 << idBits)$/;"	l
j	src/main/scala/rocket/RVC.scala	/^    def j = inst(Cat(jImm(20), jImm(10,1), jImm(11), jImm(19,12), x0, 0x6F.U(7.W)), x0, rs1p, rs2p)$/;"	m
jImm	src/main/scala/rocket/RVC.scala	/^  def jImm = Cat(Fill(10, x(12)), x(8), x(10,9), x(6), x(7), x(2), x(11), x(5,3), 0.U(1.W))$/;"	m
jal	src/main/scala/rocket/IDecode.scala	/^  val jal = Bool()$/;"	l
jal	src/main/scala/rocket/RVC.scala	/^    def jal = {$/;"	m
jalAbstract	src/main/scala/devices/debug/Debug.scala	/^    val jalAbstract  = WireInit(Instructions.JAL.value.U.asTypeOf(new GeneratedUJ()))$/;"	l
jalr	src/main/scala/rocket/IDecode.scala	/^  val jalr = Bool()$/;"	l
jalr	src/main/scala/rocket/RVC.scala	/^      val jalr = Cat(rs2, rd, 0.U(3.W), ra, 0x67.U(7.W))$/;"	l
jalr	src/main/scala/rocket/RVC.scala	/^    def jalr = {$/;"	m
jalr_add	src/main/scala/rocket/RVC.scala	/^      val jalr_add = Mux(rs2.orR, add, jalr_ebreak)$/;"	l
jalr_ebreak	src/main/scala/rocket/RVC.scala	/^      val jalr_ebreak = inst(Mux(rd.orR, jalr, ebreak), ra, rd, rs2)$/;"	l
jbar	src/main/scala/tilelink/Jbar.scala	/^    val jbar = LazyModule(new TLJbar(policy))$/;"	l
jbar	src/main/scala/tilelink/Jbar.scala	/^  val jbar = LazyModule(new TLJbar)$/;"	l
jbarWrapper	src/main/scala/tilelink/BusWrapper.scala	/^    val jbarWrapper = LazyModule(new TLJBarWrapper(this, loc.name))$/;"	l
jr	src/main/scala/rocket/RVC.scala	/^      val jr = Cat(rs2, rd, 0.U(3.W), x0, 0x67.U(7.W))$/;"	l
jr_mv	src/main/scala/rocket/RVC.scala	/^      val jr_mv = Mux(rs2.orR, mv, jr_reserved)$/;"	l
jr_reserved	src/main/scala/rocket/RVC.scala	/^      val jr_reserved = inst(Mux(rd.orR, jr, reserved), x0, rd, rs2)$/;"	l
json	src/main/scala/subsystem/BaseSubsystem.scala	/^  lazy val json = JSON(bindingTree)$/;"	l
json	src/main/scala/tilelink/RegisterRouter.scala	/^    val json = GenRegDescsAnno.serialize(base, name, mapping:_*)$/;"	l
jtag	src/main/resources/csrc/SimJTAG.cc	/^remote_bitbang_t* jtag;$/;"	v
jtag	src/main/scala/devices/debug/DebugTransport.scala	/^    val jtag = Flipped(new JTAGIO(hasTRSTn = false)) \/\/ TODO: re-use SystemJTAGIO here?$/;"	l
jtag	src/main/scala/devices/debug/DebugTransport.scala	/^  val jtag = Flipped(new JTAGIO(hasTRSTn = false))$/;"	l
jtag	src/main/scala/devices/debug/Periphery.scala	/^        val jtag = Module(new SimJTAG(tickDelay=3)).connect(sj.jtag, c, r, ~r, out)$/;"	l
jtag	src/main/scala/devices/debug/Periphery.scala	/^    val jtag = new JTAGIO(hasTRSTn = true)$/;"	l
jtag	src/main/scala/devices/debug/Periphery.scala	/^  def jtag  = protocols.contains(JTAG)$/;"	m
jtag	src/main/scala/jtag/JtagTap.scala	/^  val jtag = Flipped(new JTAGIO())$/;"	l
jtag_TCK	src/main/resources/vsrc/SimJTAG.v	/^                   output        jtag_TCK,$/;"	p
jtag_TDI	src/main/resources/vsrc/SimJTAG.v	/^                   output        jtag_TDI,$/;"	p
jtag_TDO_data	src/main/resources/vsrc/SimJTAG.v	/^                   input         jtag_TDO_data,$/;"	p
jtag_clock	src/main/scala/devices/debug/DebugTransport.scala	/^    val jtag_clock = Input(Clock())$/;"	l
jtag_mfr_id	src/main/scala/devices/debug/DebugTransport.scala	/^    val jtag_mfr_id = Input(UInt(11.W))$/;"	l
jtag_part_number	src/main/scala/devices/debug/DebugTransport.scala	/^    val jtag_part_number = Input(UInt(16.W))$/;"	l
jtag_reset	src/main/scala/devices/debug/DebugTransport.scala	/^    val jtag_reset = Input(Reset()) \/\/ This is internally converted to AsyncReset.$/;"	l
jtag_reset	src/main/scala/jtag/JtagTap.scala	/^  val jtag_reset = Input(AsyncReset())$/;"	l
jtag_tick	src/main/resources/csrc/SimJTAG.cc	/^extern "C" int jtag_tick$/;"	f
jtag_version	src/main/scala/devices/debug/DebugTransport.scala	/^    val jtag_version = Input(UInt(4.W))$/;"	l
jump	src/main/scala/rocket/BTB.scala	/^  def jump = 1.U$/;"	m
k	src/main/scala/rocket/BTB.scala	/^      val k = math.sqrt(3)\/2$/;"	l
k	src/main/scala/util/ECC.scala	/^    val k = n - log2Ceil(n)$/;"	l
k	src/main/scala/util/ECC.scala	/^    val k = x.getWidth$/;"	l
k	src/main/scala/util/ReadyValidCancel.scala	/^      val k = (i + j) % n$/;"	l
kMaxPdst	src/main/resources/csrc/comlog.cc	/^const int kMaxPdst = 64;$/;"	v
kebab	src/main/scala/util/package.scala	/^    def kebab: String = x.toLowerCase map {$/;"	m
keep	src/main/scala/amba/axis/Bundles.scala	/^  def keep = if (params.hasKeep) apply(AXISKeep) else ~0.U(params.keepBits.W)$/;"	m
keep	src/main/scala/diplomacy/AddressDecoder.scala	/^    val keep = (new_partitions.init zip new_partitions.tail) filter { case (a,b) => partitionOrder.compare(a,b) != 0 } map { _._2 }$/;"	l
keepB	src/main/scala/tilelink/Broadcast.scala	/^  val keepB   = Bool()$/;"	l
keepBits	src/main/scala/amba/axis/Parameters.scala	/^  val keepBits = dataBits\/8$/;"	l
keepBits	src/main/scala/tilelink/WidthWidget.scala	/^        val keepBits = log2Ceil(edgeOut.manager.beatBytes)$/;"	l
keepBits	src/main/scala/tilelink/WidthWidget.scala	/^      val keepBits  = log2Ceil(inBytes)$/;"	l
keepBits	src/main/scala/tilelink/WidthWidget.scala	/^      val keepBits  = log2Ceil(outBytes)$/;"	l
keepDomains	src/main/scala/tilelink/FIFOFixer.scala	/^    val keepDomains = Set(keepManagers.flatMap(_.fifoId):_*) -- flatDomains \/\/ => IDs compacted$/;"	l
keepLast	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def keepLast(names: Seq[String]): Seq[String] = {$/;"	m
keepMap	src/main/scala/tilelink/FIFOFixer.scala	/^    val keepMap = keepDomains.scanLeft((-1,0)) { case ((_,s),x) => (x, s+1) }.toMap$/;"	l
keep_clock_enabled	src/main/scala/rocket/HellaCache.scala	/^  val keep_clock_enabled = Bool(OUTPUT) \/\/ should D$ avoid clock-gating itself?$/;"	l
keep_clock_enabled	src/main/scala/rocket/ICache.scala	/^  val keep_clock_enabled = Bool(OUTPUT)$/;"	l
keep_clock_enabled	src/main/scala/tile/FPU.scala	/^  val keep_clock_enabled = Bool(INPUT)$/;"	l
keepers	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^    var keepers = List[String]()$/;"	l
key	src/main/scala/util/BundleMap.scala	/^  def key: BundleKeyBase$/;"	m
key	src/main/scala/util/package.scala	/^      val key = f(x)$/;"	l
keydata	src/main/scala/util/BundleMap.scala	/^  def keydata: Seq[(BundleKeyBase, Data)] = (fields zip elements) map { case (field, (_, data)) => (field.key, data) }$/;"	m
keys	src/main/scala/amba/axis/Bundles.scala	/^  def keys(params: AXISBundleParameters) =$/;"	m
keys	src/main/scala/diplomacy/Resources.scala	/^    val keys = keys_p.groupBy(_.path.head).toList.map { case (key, seq) =>$/;"	l
keys	src/main/scala/diplomacy/Resources.scala	/^    val keys = name.split("\/")$/;"	l
kill	src/main/scala/rocket/IBuf.scala	/^    val kill = Bool(INPUT)$/;"	l
kill	src/main/scala/rocket/Multiplier.scala	/^  val kill = Input(Bool())$/;"	l
kill	src/main/scala/rocket/TLB.scala	/^    val kill = Bool(INPUT) \/\/ suppress a TLB refill, one cycle after a miss$/;"	l
killm	src/main/scala/tile/FPU.scala	/^  val killm = (io.killm || io.nack_mem) && !mem_cp_valid$/;"	l
killm	src/main/scala/tile/FPU.scala	/^  val killm = Bool(INPUT)$/;"	l
killm_common	src/main/scala/rocket/RocketCore.scala	/^  val killm_common = dcache_kill_mem || take_pc_wb || mem_reg_xcpt || !mem_reg_valid$/;"	l
killx	src/main/scala/tile/FPU.scala	/^  val killx = Bool(INPUT)$/;"	l
killx	src/main/scala/tile/FPU.scala	/^  val killx = io.killx || mem_reg_valid && killm$/;"	l
kind	src/main/scala/system/RocketTestSuite.scala	/^  def kind = "asm"$/;"	m
kind	src/main/scala/system/RocketTestSuite.scala	/^  def kind = "bmark"$/;"	m
kind	src/main/scala/system/RocketTestSuite.scala	/^  def kind = "regression"$/;"	m
kind	src/main/scala/system/RocketTestSuite.scala	/^  def kind: String$/;"	m
l	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val l = UInt(width = 1) \/\/ locked$/;"	l
l	src/main/scala/rocket/PMP.scala	/^  val l = Bool()$/;"	l
l	src/main/scala/util/package.scala	/^      val l = map.getOrElseUpdate(key, mutable.ListBuffer.empty[A])$/;"	l
l2FrontendAXI4Node	src/main/scala/subsystem/Ports.scala	/^  val l2FrontendAXI4Node = AXI4MasterNode($/;"	l
l2FrontendTLNode	src/main/scala/subsystem/Ports.scala	/^  val l2FrontendTLNode = TLClientNode($/;"	l
l2_frontend_bus_axi4	src/main/scala/subsystem/Ports.scala	/^  val l2_frontend_bus_axi4 = InModuleBody { l2FrontendAXI4Node.makeIOs() }$/;"	l
l2_frontend_bus_tl	src/main/scala/subsystem/Ports.scala	/^  val l2_frontend_bus_tl = InModuleBody { l2FrontendTLNode.makeIOs() }$/;"	l
l2_plru	src/main/scala/rocket/PTW.scala	/^    val l2_plru = new SetAssocLRU(nL2TLBSets, coreParams.nL2TLBWays, "plru")$/;"	l
l2_refill	src/main/scala/rocket/PTW.scala	/^  val l2_refill = RegNext(false.B)$/;"	l
l2_refill_wire	src/main/scala/rocket/PTW.scala	/^  val l2_refill_wire = Wire(Bool())$/;"	l
l2hit	src/main/scala/rocket/PTW.scala	/^  val l2hit = Bool()$/;"	l
l2miss	src/main/scala/rocket/PTW.scala	/^  val l2miss = Bool()$/;"	l
lDesc	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val lDesc = RegFieldDesc("l",$/;"	l
la	src/main/scala/tilelink/AddressAdjuster.scala	/^    val la = prefix0(local .flatMap(_.address))$/;"	l
label	src/main/scala/diplomacy/Resources.scala	/^  val label = "L" + Device.index.toString$/;"	l
label	src/main/scala/util/Property.scala	/^  val label: String$/;"	l
labels	src/main/scala/diplomacy/Resources.scala	/^    val labels = values_p.flatMap(_.labels)$/;"	l
lane	src/main/scala/util/LanePositionedQueue.scala	/^  def lane(add: UInt): (UInt, Bool) = {$/;"	m
laneBits	src/main/scala/util/LanePositionedQueue.scala	/^  val laneBits  = log2Ceil(lanes)$/;"	l
laneBits1	src/main/scala/util/LanePositionedQueue.scala	/^  val laneBits1 = log2Ceil(lanes+1) \/\/ [0, lanes]$/;"	l
laneBits1	src/main/scala/util/MultiLaneQueue.scala	/^  val laneBits1 = log2Ceil(lanes+1) \/\/ [0, lanes]$/;"	l
laneBitsU	src/main/scala/util/LanePositionedQueue.scala	/^  val laneBitsU = log2Up(lanes)$/;"	l
laneDataBits	src/main/scala/amba/ahb/SRAM.scala	/^    val laneDataBits = 8$/;"	l
laneDataBits	src/main/scala/amba/apb/SRAM.scala	/^    val laneDataBits = 8$/;"	l
laneDataBits	src/main/scala/amba/axi4/SRAM.scala	/^    val laneDataBits = 8$/;"	l
laneDataBits	src/main/scala/diplomacy/SRAM.scala	/^  def laneDataBits: Int$/;"	m
laneDataBits	src/main/scala/tilelink/SRAM.scala	/^    val laneDataBits = eccBytes * 8$/;"	l
lanes	src/main/scala/tilelink/SRAM.scala	/^    val lanes = beatBytes\/eccBytes$/;"	l
lanes	src/main/scala/util/LanePositionedQueue.scala	/^  val lanes = args.lanes$/;"	l
lanes	src/main/scala/util/LanePositionedQueue.scala	/^  val lanes = maxValid min maxReady \/\/ at most this many element flow per-cycle$/;"	l
largestDeltaBit	src/main/scala/diplomacy/Parameters.scala	/^      val largestDeltaBit = log2Floor(start ^ (end-1))$/;"	l
last	src/main/scala/amba/axi4/Bundles.scala	/^  val last = Bool()$/;"	l
last	src/main/scala/amba/axi4/Fragmenter.scala	/^        val last = beats1 === len$/;"	l
last	src/main/scala/amba/axi4/ToTL.scala	/^  val last = Bool()$/;"	l
last	src/main/scala/amba/axi4/Xbar.scala	/^              val last = Reg(UInt(width = log2Ceil(io_out.size)))$/;"	l
last	src/main/scala/amba/axis/Bundles.scala	/^  def last = if (params.hasLast) apply(AXISLast) else true.B$/;"	m
last	src/main/scala/tilelink/Edges.scala	/^    val last  = counter === UInt(1) || beats1 === UInt(0)$/;"	l
last	src/main/scala/tilelink/Edges.scala	/^  def last(bits: TLChannel, fire: Bool): Bool = firstlastHelper(bits, fire)._2$/;"	m
last	src/main/scala/tilelink/Edges.scala	/^  def last(x: DecoupledIO[TLChannel]): Bool = last(x.bits, x.fire())$/;"	m
last	src/main/scala/tilelink/Edges.scala	/^  def last(x: ValidIO[TLChannel]): Bool = last(x.bits, x.valid)$/;"	m
last	src/main/scala/tilelink/HintHandler.scala	/^        val last = edgeOut.last(out.d)$/;"	l
last	src/main/scala/tilelink/ToAHB.scala	/^  val last   = Bool()$/;"	l
last	src/main/scala/tilelink/WidthWidget.scala	/^      val last   = count === limit || !hasData$/;"	l
last	src/main/scala/tilelink/WidthWidget.scala	/^      val last  = count === limit || !hasData$/;"	l
last	src/main/scala/util/ECC.scala	/^  val last = test(n)$/;"	l
last	src/main/scala/util/PrefixSum.scala	/^    var last: Int = 0$/;"	l
lastWinner	src/main/scala/tilelink/Arbiter.scala	/^  val lastWinner = RegInit((numSources+1).U)$/;"	l
latch	src/main/scala/tilelink/Arbiter.scala	/^      val latch = idle && sink.ready \/\/ winner (if any) claims sink$/;"	l
latched	src/main/scala/amba/axi4/Xbar.scala	/^        val latched = RegInit(Bool(false)) \/\/ cut awIn(i).enq.valid from awready$/;"	l
latched	src/main/scala/amba/axi4/Xbar.scala	/^        val latched = RegInit(Bool(false)) \/\/ cut awOut(i).enq.valid from awready$/;"	l
lateCancel	src/main/scala/util/ReadyValidCancel.scala	/^  val lateCancel = Output(Bool())$/;"	l
latency	src/main/scala/diplomacy/Parameters.scala	/^  def latency = if (isDefined && !flow) 1 else 0$/;"	m
latencyMask	src/main/scala/tile/FPU.scala	/^  def latencyMask(c: FPUCtrlSigs, offset: Int) = {$/;"	m
layers	src/main/scala/util/PrefixSum.scala	/^    def layers(layer: Int, x: Vector[Seq[Int]]) = {$/;"	m
layers	src/main/scala/util/PrefixSum.scala	/^  def layers(size: Int) = if (size <= 1) 1 else 2*log2Floor(size) +$/;"	m
layers	src/main/scala/util/PrefixSum.scala	/^  def layers(size: Int) = if (size == 0) 1 else 1+log2Ceil(size)$/;"	m
layers	src/main/scala/util/PrefixSum.scala	/^  def layers(size: Int) = if (size == 0) 1 else size$/;"	m
layers	src/main/scala/util/PrefixSum.scala	/^  def layers(size: Int): Int$/;"	m
layers	src/main/scala/util/ScatterGather.scala	/^  def layers(size: Int) = if (size == 0) 1 else 1+log2Ceil(size)$/;"	m
lazyModule	src/main/scala/diplomacy/Nodes.scala	/^  def lazyModule: LazyModule = scope.get$/;"	m
lb_data	src/main/scala/util/MultiWidthFifo.scala	/^  val lb_data = Vec.tabulate(8){i => UInt(i, 8)}$/;"	l
lb_finished	src/main/scala/util/MultiWidthFifo.scala	/^  val lb_finished = Reg(init = Bool(false))$/;"	l
lb_recv	src/main/scala/util/MultiWidthFifo.scala	/^  val lb_recv = Reg(init = Bool(false))$/;"	l
lb_recv_data	src/main/scala/util/MultiWidthFifo.scala	/^  val lb_recv_data = Cat($/;"	l
lb_send	src/main/scala/util/MultiWidthFifo.scala	/^  val lb_send = Reg(init = Bool(false))$/;"	l
lb_start_recv	src/main/scala/util/MultiWidthFifo.scala	/^  val lb_start_recv = Reg(next = lb_send_done)$/;"	l
lcg	src/main/scala/util/LCG.scala	/^    val lcg = Module(new LCG(w))$/;"	l
lcg	src/main/scala/util/LCG.scala	/^    val lcg = Module(new LCG16)$/;"	l
lcount	src/main/scala/rocket/PTW.scala	/^    val lcount = if (s2) aux_count else count$/;"	l
ld	src/main/scala/rocket/HellaCache.scala	/^  val ld = Bool()$/;"	l
ld	src/main/scala/rocket/RVC.scala	/^    def ld = inst(Cat(ldImm, rs1p, 3.U(3.W), rs2p, 0x03.U(7.W)), rs2p, rs1p, rs2p)$/;"	m
ld	src/main/scala/rocket/TLB.scala	/^  val ld = Bool()$/;"	l
ldImm	src/main/scala/rocket/RVC.scala	/^  def ldImm = Cat(x(6,5), x(12,10), 0.U(3.W))$/;"	m
ldsp	src/main/scala/rocket/RVC.scala	/^    def ldsp = inst(Cat(ldspImm, sp, 3.U(3.W), rd, load_opc), rd, sp, rs2)$/;"	m
ldspImm	src/main/scala/rocket/RVC.scala	/^  def ldspImm = Cat(x(4,2), x(12), x(6,5), 0.U(3.W))$/;"	m
ldst	src/main/scala/tile/FPU.scala	/^  val ldst = Bool()$/;"	l
ldut	src/main/scala/groundtest/TestHarness.scala	/^  val ldut = LazyModule(new GroundTestSubsystem)$/;"	l
ldut	src/main/scala/system/TestHarness.scala	/^  val ldut = LazyModule(new ExampleRocketSystem)$/;"	l
le	src/main/scala/linting/LintException.scala	/^        val le                  = lintErrors.head.linter$/;"	l
leaf	src/main/scala/rocket/PTW.scala	/^    val leaf = mem_resp_valid && !traverse && count === i$/;"	l
leaf	src/main/scala/rocket/PTW.scala	/^  def leaf(dummy: Int = 0) = v && (r || (x && !w)) && a$/;"	m
leaveB	src/main/scala/tilelink/Broadcast.scala	/^      val leaveB = !filter.io.response.bits.needT && !filter.io.response.bits.gaveT$/;"	l
left	src/main/scala/devices/tilelink/Plic.scala	/^      val left = findMax(x take half)$/;"	l
left	src/main/scala/util/LanePositionedQueue.scala	/^      val left = RotateVector.left(pad, selfRotation)$/;"	l
left	src/main/scala/util/MultiLaneQueue.scala	/^  def left[T <: Data](input: Seq[T], shift: UInt): Vec[T] = {$/;"	m
leftOR	src/main/scala/util/package.scala	/^  def leftOR(x: UInt): UInt = leftOR(x, x.getWidth, x.getWidth)$/;"	m
leftOR	src/main/scala/util/package.scala	/^  def leftOR(x: UInt, width: Integer, cap: Integer = 999999): UInt = {$/;"	m
left_nways	src/main/scala/util/Replacement.scala	/^      val left_nways:  Int = tree_nways - right_nways         \/\/ number of ways in the left sub-tree$/;"	l
left_subtree_older	src/main/scala/util/Replacement.scala	/^      val left_subtree_older  = state(tree_nways-2)$/;"	l
left_subtree_state	src/main/scala/util/Replacement.scala	/^      val left_subtree_state  = state.extract(tree_nways-3, right_nways-1)$/;"	l
legal	src/main/scala/amba/apb/SRAM.scala	/^    val legal = address.contains(in.paddr)$/;"	l
legal	src/main/scala/rocket/IDecode.scala	/^  val legal = Bool()$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = client.supportsArithmetic(toSource, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = client.supportsGet(toSource, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = client.supportsHint(toSource, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = client.supportsLogical(toSource, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = client.supportsProbe(toSource, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = client.supportsPutFull(toSource, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = client.supportsPutPartial(toSource, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = manager.supportsAcquireBFast(toAddress, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = manager.supportsArithmeticFast(toAddress, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = manager.supportsGetFast(toAddress, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = manager.supportsHintFast(toAddress, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = manager.supportsLogicalFast(toAddress, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = manager.supportsPutFullFast(toAddress, lgSize)$/;"	l
legal	src/main/scala/tilelink/Edges.scala	/^    val legal = manager.supportsPutPartialFast(toAddress, lgSize)$/;"	l
legal	src/main/scala/tilelink/Fuzzer.scala	/^    val legal = legal_dest && MuxLookup(a_type_sel, glegal, Seq($/;"	l
legal	src/main/scala/util/LanePositionedQueue.scala	/^    val legal = deq + q.io.deq.ready - abt$/;"	l
legal	src/main/scala/util/LanePositionedQueue.scala	/^    val legal = enq + q.io.enq.valid - com$/;"	l
legalFlight	src/main/scala/amba/axi4/Xbar.scala	/^              val legalFlight = master.maxFlight.getOrElse(maxFlightPerId+1)$/;"	l
legalNode	src/main/scala/diplomacy/DeviceTree.scala	/^  def legalNode(x: String): Boolean =$/;"	m
legalProperty	src/main/scala/diplomacy/DeviceTree.scala	/^  def legalProperty(x: String): Boolean =$/;"	m
legalString	src/main/scala/diplomacy/DeviceTree.scala	/^  def legalString(x: String): Boolean = x.forall(strChars.contains(_))$/;"	m
legal_address	src/main/scala/rocket/TLB.scala	/^  val legal_address = edge.manager.findSafe(mpu_physaddr).reduce(_||_)$/;"	l
legal_dest	src/main/scala/tilelink/Fuzzer.scala	/^    val legal_dest = edge.manager.containsSafe(addr)$/;"	l
legal_source	src/main/scala/tilelink/Monitor.scala	/^    val legal_source = Mux1H(edge.client.find(bundle.source), edge.client.clients.map(c => c.sourceId.start.U)) === bundle.source$/;"	l
legalize	src/main/scala/amba/ahb/Monitor.scala	/^  def legalize(bundle: AHBMasterBundle, edge: AHBEdgeParameters, reset: Reset): Unit$/;"	m
legalize	src/main/scala/amba/ahb/Monitor.scala	/^  def legalize(bundle: AHBSlaveBundle, edge: AHBEdgeParameters, reset: Reset): Unit$/;"	m
legalize	src/main/scala/amba/apb/Monitor.scala	/^  def legalize(bundle: APBBundle, edge: APBEdgeParameters, reset: Reset): Unit$/;"	m
legalize	src/main/scala/amba/axi4/Monitor.scala	/^  def legalize(bundle: AXI4Bundle, edge: AXI4EdgeParameters, reset: Reset): Unit$/;"	m
legalize	src/main/scala/diplomacy/Parameters.scala	/^  def legalize(x: UInt): UInt = base.U | (mask.U & x)$/;"	m
legalize	src/main/scala/tilelink/Monitor.scala	/^  def legalize(bundle: TLBundle, edge: TLEdge, reset: Reset): Unit = {$/;"	m
legalize	src/main/scala/tilelink/Monitor.scala	/^  def legalize(bundle: TLBundle, edge: TLEdge, reset: Reset): Unit$/;"	m
legalizeADSource	src/main/scala/tilelink/Monitor.scala	/^  def legalizeADSource(bundle: TLBundle, edge: TLEdge): Unit = {$/;"	m
legalizeADSourceFormal	src/main/scala/tilelink/Monitor.scala	/^  def legalizeADSourceFormal(bundle: TLBundle, edge: TLEdge): Unit = {$/;"	m
legalizeADSourceOld	src/main/scala/tilelink/Monitor.scala	/^  def legalizeADSourceOld(bundle: TLBundle, edge: TLEdge): Unit = {$/;"	m
legalizeCDSource	src/main/scala/tilelink/Monitor.scala	/^  def legalizeCDSource(bundle: TLBundle, edge: TLEdge): Unit = {$/;"	m
legalizeDESink	src/main/scala/tilelink/Monitor.scala	/^  def legalizeDESink(bundle: TLBundle, edge: TLEdge): Unit = {$/;"	m
legalizeFormat	src/main/scala/tilelink/Monitor.scala	/^  def legalizeFormat(bundle: TLBundle, edge: TLEdge) = {$/;"	m
legalizeFormatA	src/main/scala/tilelink/Monitor.scala	/^  def legalizeFormatA(bundle: TLBundleA, edge: TLEdge): Unit = {$/;"	m
legalizeFormatB	src/main/scala/tilelink/Monitor.scala	/^  def legalizeFormatB(bundle: TLBundleB, edge: TLEdge): Unit = {$/;"	m
legalizeFormatC	src/main/scala/tilelink/Monitor.scala	/^  def legalizeFormatC(bundle: TLBundleC, edge: TLEdge): Unit = {$/;"	m
legalizeFormatD	src/main/scala/tilelink/Monitor.scala	/^  def legalizeFormatD(bundle: TLBundleD, edge: TLEdge): Unit = {$/;"	m
legalizeFormatE	src/main/scala/tilelink/Monitor.scala	/^  def legalizeFormatE(bundle: TLBundleE, edge: TLEdge): Unit = {$/;"	m
legalizeMultibeat	src/main/scala/tilelink/Monitor.scala	/^  def legalizeMultibeat(bundle: TLBundle, edge: TLEdge): Unit = {$/;"	m
legalizeMultibeatA	src/main/scala/tilelink/Monitor.scala	/^  def legalizeMultibeatA(a: DecoupledIO[TLBundleA], edge: TLEdge): Unit = {$/;"	m
legalizeMultibeatB	src/main/scala/tilelink/Monitor.scala	/^  def legalizeMultibeatB(b: DecoupledIO[TLBundleB], edge: TLEdge): Unit = {$/;"	m
legalizeMultibeatC	src/main/scala/tilelink/Monitor.scala	/^  def legalizeMultibeatC(c: DecoupledIO[TLBundleC], edge: TLEdge): Unit = {$/;"	m
legalizeMultibeatD	src/main/scala/tilelink/Monitor.scala	/^  def legalizeMultibeatD(d: DecoupledIO[TLBundleD], edge: TLEdge): Unit = {$/;"	m
legalizePrivilege	src/main/scala/rocket/CSR.scala	/^  def legalizePrivilege(priv: UInt): UInt =$/;"	m
legalizeUnique	src/main/scala/tilelink/Monitor.scala	/^  def legalizeUnique(bundle: TLBundle, edge: TLEdge): Unit = {$/;"	m
len	src/main/scala/amba/axi4/Bundles.scala	/^  val len    = UInt(width = params.lenBits)  \/\/ number of beats - 1$/;"	l
len	src/main/scala/amba/axi4/Fragmenter.scala	/^        val len  = Mux(busy, r_len,  a.bits.len)$/;"	l
lenBits	src/main/scala/amba/axi4/Parameters.scala	/^  val lenBits   = AXI4Parameters.lenBits$/;"	l
lenBits	src/main/scala/amba/axi4/Protocol.scala	/^  val lenBits   = 8$/;"	l
length	src/main/scala/util/HeterogeneousBag.scala	/^  def length = elts.length$/;"	m
less	src/main/scala/rocket/AMOALU.scala	/^  val less = {$/;"	l
less	src/main/scala/rocket/Multiplier.scala	/^      val less = difference(w)$/;"	l
level	src/main/scala/rocket/PTW.scala	/^  val level = UInt(width = log2Ceil(pgLevels))$/;"	l
level	src/main/scala/rocket/TLB.scala	/^  val level = UInt(width = log2Ceil(pgLevels))$/;"	l
lfn	src/main/scala/rocket/TLBPermissions.scala	/^    val lfn = lowCostProperty(_.l)$/;"	l
lfsr	src/main/scala/regmapper/Test.scala	/^      val lfsr = LFSR16Seed(seed)$/;"	l
lfsr	src/main/scala/regmapper/Test.scala	/^    val lfsr = Reg(init=UInt((seed*0x7231) % 65536, width))$/;"	l
lfsr	src/main/scala/tilelink/Arbiter.scala	/^  val lfsr = LFSR(16, true.B)$/;"	l
lfsr	src/main/scala/tilelink/Fuzzer.scala	/^    val lfsr = Reg(UInt(width = wide)) \/\/ random initial value based on simulation seed$/;"	l
lfsrs	src/main/scala/tilelink/Fuzzer.scala	/^  val lfsrs = Seq.fill((wide+63)\/64) { LFSR64(io.inc) }$/;"	l
lgAlign	src/main/scala/rocket/PMP.scala	/^  def lgAlign = 2$/;"	m
lgBytes	src/main/scala/amba/axi4/Fragmenter.scala	/^      val lgBytes   = log2Ceil(beatBytes)$/;"	l
lgBytes	src/main/scala/tilelink/ToAHB.scala	/^      val lgBytes = log2Ceil(beatBytes)$/;"	l
lgBytes	src/main/scala/tilelink/ToAPB.scala	/^      val lgBytes = log2Ceil(beatBytes)$/;"	l
lgBytes	src/main/scala/util/Misc.scala	/^    val lgBytes = log2Ceil(beatBytes)$/;"	l
lgCacheBlockBytes	src/main/scala/tile/BaseTile.scala	/^  def lgCacheBlockBytes = log2Up(cacheBlockBytes)$/;"	m
lgMax	src/main/scala/tilelink/ToAHB.scala	/^      val lgMax = log2Ceil(maxTransfer)$/;"	l
lgMinSize	src/main/scala/tilelink/Fragmenter.scala	/^        val lgMinSize = UInt(log2Ceil(minSize))$/;"	l
lgNXRegs	src/main/scala/rocket/RocketCore.scala	/^  val lgNXRegs = if (coreParams.useRVE) 4 else 5$/;"	l
lgPauseCycles	src/main/scala/rocket/RocketCore.scala	/^  val lgPauseCycles = 5$/;"	l
lhs	src/main/scala/rocket/AMOALU.scala	/^    val lhs = Bits(INPUT, operandBits)$/;"	l
lhs	src/main/scala/rocket/Multiplier.scala	/^  val lhs = Cat(lhsSigned && in.bits.in1(width-1), in.bits.in1).asSInt$/;"	l
li	src/main/scala/rocket/RVC.scala	/^    def li = inst(Cat(addiImm, x0, 0.U(3.W), rd, 0x13.U(7.W)), rd, x0, rs2p)$/;"	m
lift	src/main/scala/util/BundleMap.scala	/^  def lift (key: BundleKeyBase): Option[Data] = elements.lift(key.name)$/;"	m
lift	src/main/scala/util/BundleMap.scala	/^  def lift [T <: Data](key: BundleKey[T]): Option[T] = elements.lift(key.name).map(_.asInstanceOf[T])$/;"	m
likelyNeedsRead	src/main/scala/rocket/DCache.scala	/^  def likelyNeedsRead(req: HellaCacheReq) = {$/;"	m
limit	src/main/scala/amba/axi4/Parameters.scala	/^  val limit = beatBytes * (1 << AXI4Parameters.lenBits)$/;"	l
limit	src/main/scala/tilelink/Fragmenter.scala	/^        val limit = if (alwaysMin) lgMinSize else$/;"	l
limit	src/main/scala/tilelink/Monitor.scala	/^    val limit = PlusArg("tilelink_timeout",$/;"	l
limit	src/main/scala/tilelink/WidthWidget.scala	/^      val limit   = UIntToOH1(size, keepBits) >> dropBits$/;"	l
limit	src/main/scala/util/LanePositionedQueue.scala	/^    val limit = lanes min x.lanes$/;"	l
line	src/main/scala/diplomacy/LazyModule.scala	/^  def line: String = sourceLine(info)$/;"	m
line	src/main/scala/tilelink/Broadcast.scala	/^    val line = Output(UInt())   \/\/ the line waiting for probes$/;"	l
lineInScratchpad	src/main/scala/rocket/ICache.scala	/^  def lineInScratchpad(line: UInt) = scratchpadMax.map(scratchpadOn && line <= _).getOrElse(false.B)$/;"	m
lineShift	src/main/scala/tilelink/Broadcast.scala	/^      val lineShift = log2Ceil(params.lineBytes)$/;"	l
lineShift	src/main/scala/tilelink/Broadcast.scala	/^  val lineShift = log2Ceil(lineBytes)$/;"	l
line_info	src/main/scala/formal/FormalUtils.scala	/^    val line_info = sourceInfo match {$/;"	l
lint	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^  def lint(input: String, annos: Seq[Annotation]): CircuitState = {$/;"	m
lint	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^  def lint(state: CircuitState): CircuitState = {$/;"	m
lintName	src/main/scala/linting/rule/LintAnonymousRegisters.scala	/^  val lintName: String = "anon-regs"$/;"	l
lintName	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^  val lintName: String = "conflicting-module-names"$/;"	l
lintName	src/main/scala/linting/rule/LintRule.scala	/^  val lintName: String$/;"	l
lintName	src/main/scala/linting/rule/LintTruncatingWidths.scala	/^  val lintName: String = "trunc-widths"$/;"	l
lintString	src/main/scala/linting/LintException.scala	/^        val lintString          = lintName$/;"	l
lip	src/main/scala/rocket/CSR.scala	/^  val lip = Vec(coreParams.nLocalInterrupts, Bool())$/;"	l
lip	src/main/scala/tile/Interrupts.scala	/^  val lip = Vec(coreParams.nLocalInterrupts, Bool())$/;"	l
listLess	src/main/scala/rocket/Decode.scala	/^    def listLess(a: List[Term], b: List[Term]): Boolean = !b.isEmpty && (a.isEmpty || a.head < b.head || a.head == b.head && listLess(a.tail, b.tail))$/;"	m
listProperties	src/main/scala/util/Property.scala	/^  def listProperties(c1: CoverBoolean, c2: Seq[CoverBoolean]): Seq[CoverBoolean] = {$/;"	m
litOR	src/main/scala/regmapper/RegMapper.scala	/^      def litOR(x: Bool, y: Bool) = if (x.isLit && x.litValue == 1) Bool(true) else x || y$/;"	m
little2big	src/main/scala/util/MultiWidthFifo.scala	/^  val little2big = Module(new MultiWidthFifo(8, 16, 4))$/;"	l
ll_waddr	src/main/scala/rocket/RocketCore.scala	/^  val ll_waddr = Wire(init = div.io.resp.bits.tag)$/;"	l
ll_wdata	src/main/scala/rocket/RocketCore.scala	/^  val ll_wdata = Wire(init = div.io.resp.bits.data)$/;"	l
ll_wen	src/main/scala/rocket/RocketCore.scala	/^  val ll_wen = Wire(init = div.io.resp.fire())$/;"	l
lmul_ok	src/main/scala/rocket/CSR.scala	/^  def lmul_ok: Bool = Mux(this.vlmul_sign, this.vlmul_mag =\/= 0 && ~this.vlmul_mag < max_vsew - this.vsew, true.B)$/;"	m
lo	src/main/scala/amba/axi4/Fragmenter.scala	/^        val lo = if (lgBytes == 0) UInt(0) else addr(lgBytes-1, 0)$/;"	l
lo	src/main/scala/util/Counters.scala	/^    val lo = (small ^ nextSmall) >> 1$/;"	l
lo	src/main/scala/util/LanePositionedQueue.scala	/^    val lo = if (l==1) 0.U else ready(log2Ceil(l)-1,0)$/;"	l
lo	src/main/scala/util/LanePositionedQueue.scala	/^    val lo = if (l==1) 0.U else valid(log2Ceil(l)-1,0)$/;"	l
loOut	src/main/scala/rocket/Multiplier.scala	/^  val loOut = Mux(fastMulW.B && halfWidth(req) && outMul, result(w-1,w\/2), result(w\/2-1,0))$/;"	l
lo_mask	src/main/scala/util/LanePositionedQueue.scala	/^  val lo_mask = enq_mask(lanes-1, 0)$/;"	l
load_access	src/main/scala/rocket/Instructions.scala	/^  val load_access = 0x5$/;"	l
load_guest_page_fault	src/main/scala/rocket/Instructions.scala	/^  val load_guest_page_fault = 0x15$/;"	l
load_opc	src/main/scala/rocket/RVC.scala	/^    val load_opc = Mux(rd.orR, 0x03.U(7.W), 0x1F.U(7.W))$/;"	l
load_page_fault	src/main/scala/rocket/Instructions.scala	/^  val load_page_fault = 0xd$/;"	l
load_wb	src/main/scala/tile/FPU.scala	/^  val load_wb = Reg(next=io.dmem_resp_val)$/;"	l
load_wb_data	src/main/scala/tile/FPU.scala	/^  val load_wb_data = RegEnable(io.dmem_resp_data, io.dmem_resp_val)$/;"	l
load_wb_tag	src/main/scala/tile/FPU.scala	/^  val load_wb_tag = RegEnable(io.dmem_resp_tag, io.dmem_resp_val)$/;"	l
load_wb_typeTag	src/main/scala/tile/FPU.scala	/^  val load_wb_typeTag = RegEnable(io.dmem_resp_type(1,0) - typeTagWbOffset, io.dmem_resp_val)$/;"	l
loadgen	src/main/scala/rocket/DCache.scala	/^  val loadgen = new LoadGen(s2_req.size, s2_req.signed, s2_req.addr, s2_data_word_possibly_uncached, s2_sc, wordBytes)$/;"	l
loadgen	src/main/scala/rocket/NBDcache.scala	/^  val loadgen = new LoadGen(req.size, req.signed, req.addr, grant_word, false.B, wordBytes)$/;"	l
loadgen	src/main/scala/rocket/NBDcache.scala	/^  val loadgen = new LoadGen(s2_req.size, s2_req.signed, s2_req.addr, s2_data_word, s2_sc, wordBytes)$/;"	l
local	src/main/scala/tilelink/AddressAdjuster.scala	/^          val local = RegEnable(a_dynamic_local, parent.a.fire() && a_sel)$/;"	l
local	src/main/scala/tilelink/AddressAdjuster.scala	/^      val local  = mp(0)$/;"	l
localBaseAddressDefault	src/main/scala/tilelink/AddressAdjuster.scala	/^    val localBaseAddressDefault: Option[BigInt] = None, \/\/ default local base address used for reporting manager address metadata$/;"	l
localIntCounts	src/main/scala/subsystem/HasTiles.scala	/^  def localIntCounts: Seq[Int] = tileParams.map(_.core.nLocalInterrupts)$/;"	m
local_d	src/main/scala/tilelink/AddressAdjuster.scala	/^      val local_d  = Wire(chiselTypeOf(parent.d)) \/\/ type-cast, because 'sink' width differs$/;"	l
local_interrupt	src/main/scala/tile/BusErrorUnit.scala	/^    val local_interrupt = Reg(init = Vec.fill(sources.size)(false.B))$/;"	l
local_interrupt_desc	src/main/scala/tile/BusErrorUnit.scala	/^    val local_interrupt_desc = sources.zipWithIndex.map { case (s, i) =>$/;"	l
local_prefix	src/main/scala/tilelink/AddressAdjuster.scala	/^      val local_prefix = RegNext(prefix.bundle)$/;"	l
local_prefix	src/main/scala/tilelink/RegionReplication.scala	/^      val local_prefix = RegNext(prefix.bundle)$/;"	l
locateTLBusWrapper	src/main/scala/subsystem/Attachable.scala	/^  def locateTLBusWrapper(location: Location[TLBusWrapper]): TLBusWrapper = locateTLBusWrapper(location.name)$/;"	m
locateTLBusWrapper	src/main/scala/subsystem/Attachable.scala	/^  def locateTLBusWrapper(location: TLBusWrapperLocation): TLBusWrapper = locateTLBusWrapper(location.name)$/;"	m
locateTLBusWrapper	src/main/scala/subsystem/Attachable.scala	/^  def locateTLBusWrapper(name: String): TLBusWrapper = tlBusWrapperLocationMap(Location[TLBusWrapper](name))$/;"	m
location	src/main/scala/subsystem/BaseSubsystem.scala	/^  val location: HierarchicalLocation$/;"	l
lock	src/main/scala/amba/ahb/Bundles.scala	/^  def lock():   Bool = if (params.lite) hmastlock.get else hlock.get$/;"	m
lock	src/main/scala/amba/axi4/Bundles.scala	/^  val lock   = UInt(width = params.lockBits)$/;"	l
lockBits	src/main/scala/amba/axi4/Parameters.scala	/^  val lockBits  = AXI4Parameters.lockBits$/;"	l
lockBits	src/main/scala/amba/axi4/Protocol.scala	/^  val lockBits  = 1$/;"	l
lockIdx	src/main/scala/util/Arbiters.scala	/^  val lockIdx = Reg(init = UInt(0, log2Up(arbN)))$/;"	l
lock_ctr	src/main/scala/util/Arbiters.scala	/^  val lock_ctr = Counter(count)$/;"	l
locked	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val locked = RegInit(false.B)$/;"	l
locked	src/main/scala/util/Arbiters.scala	/^  val locked = Reg(init = Bool(false))$/;"	l
log2	src/main/scala/util/package.scala	/^    def log2: Int = {$/;"	m
logAddressBagLen	src/main/scala/groundtest/TraceGen.scala	/^  val logAddressBagLen    = log2Up(addressBagLen)$/;"	l
logFlight	src/main/scala/amba/axi4/ToTL.scala	/^      val logFlight = log2Ceil(maxFlight)$/;"	l
logL	src/main/scala/util/LanePositionedQueue.scala	/^    val logL = log2Floor((rows-1)*lanes) - 1$/;"	l
logL	src/main/scala/util/LanePositionedQueue.scala	/^  val logL = log2Floor((rows-2)*lanes) - 1 \/\/ rows >= 8$/;"	l
logNumExtraAddrs	src/main/scala/groundtest/TraceGen.scala	/^  val logNumExtraAddrs    = 1$/;"	l
log_a_opcode_bus_size	src/main/scala/tilelink/Monitor.scala	/^    val log_a_opcode_bus_size = log2Ceil(a_opcode_bus_size)$/;"	l
log_a_size_bus_size	src/main/scala/tilelink/Monitor.scala	/^    val log_a_size_bus_size   = log2Ceil(a_size_bus_size)$/;"	l
log_c_opcode_bus_size	src/main/scala/tilelink/Monitor.scala	/^    val log_c_opcode_bus_size = log2Ceil(c_opcode_bus_size)$/;"	l
log_c_size_bus_size	src/main/scala/tilelink/Monitor.scala	/^    val log_c_size_bus_size   = log2Ceil(c_size_bus_size)$/;"	l
log_op	src/main/scala/tilelink/Fuzzer.scala	/^    val log_op    = noiseMaker(2, inc, 0)$/;"	l
logic	src/main/scala/rocket/ALU.scala	/^  val logic = Mux(io.fn === FN_XOR || io.fn === FN_OR, in1_xor_in2, UInt(0)) |$/;"	l
logic	src/main/scala/rocket/AMOALU.scala	/^  val logic =$/;"	l
logic	src/main/scala/rocket/Decode.scala	/^  def logic(addr: UInt, addrWidth: Int, cache: Map[Term,Bool], terms: Seq[Term]) = {$/;"	m
logic	src/main/scala/util/Replacement.scala	/^  val logic = new PseudoLRU(n_ways)$/;"	l
logic	src/main/scala/util/Replacement.scala	/^  val logic = new RandomReplacement(n_ways)$/;"	l
logic	src/main/scala/util/Replacement.scala	/^  val logic = policy.toLowerCase match {$/;"	l
logic_and	src/main/scala/rocket/AMOALU.scala	/^  val logic_and = io.cmd === M_XA_OR || io.cmd === M_XA_AND$/;"	l
logic_out	src/main/scala/tilelink/AtomicAutomata.scala	/^        val logic_out = Cat(indexes.map(x => a_cam_a.lut(x).asUInt).reverse)$/;"	l
logic_xor	src/main/scala/rocket/AMOALU.scala	/^  val logic_xor = io.cmd === M_XA_XOR || io.cmd === M_XA_OR$/;"	l
logical	src/main/scala/tilelink/Atomics.scala	/^  val logical = Cat((io.a.data.asBools zip io.data_in.asBools).map { case (a, d) =>$/;"	l
logical	src/main/scala/tilelink/Parameters.scala	/^  def logical:    TransferSizes$/;"	m
logicalTreeNode	src/main/scala/devices/debug/Debug.scala	/^  val logicalTreeNode = new DebugLogicalTreeNode($/;"	l
logicalTreeNode	src/main/scala/devices/tilelink/CLINT.scala	/^  def logicalTreeNode: CLINTLogicalTreeNode = new CLINTLogicalTreeNode(device, module.omRegMap)$/;"	m
logicalTreeNode	src/main/scala/devices/tilelink/Error.scala	/^  lazy val logicalTreeNode: LogicalTreeNode = new LogicalTreeNode(() => Some(device)) {$/;"	l
logicalTreeNode	src/main/scala/devices/tilelink/Zero.scala	/^  lazy val logicalTreeNode: LogicalTreeNode = new LogicalTreeNode(() => Some(device)) {$/;"	l
logicalTreeNode	src/main/scala/diplomaticobjectmodel/HasLogicalTreeNode.scala	/^  def logicalTreeNode: LogicalTreeNode$/;"	m
logicalTreeNode	src/main/scala/subsystem/BaseSubsystem.scala	/^  lazy val logicalTreeNode = new SubsystemLogicalTreeNode()$/;"	l
logicalTreeNode	src/main/scala/tile/BaseTile.scala	/^  val logicalTreeNode: LogicalTreeNode = new GenericLogicalTreeNode$/;"	l
longName	src/main/scala/stage/RocketChipOptions.scala	/^  lazy val longName: Option[String] = outputBaseName match {$/;"	l
long_latency_stall	src/main/scala/rocket/RocketCore.scala	/^  val long_latency_stall = Reg(Bool())$/;"	l
lookup	src/main/scala/groundtest/TraceGen.scala	/^  val lookup: LookupByHartIdImpl = HartsWontDeduplicate(tileParams)$/;"	l
lookup	src/main/scala/subsystem/HasTiles.scala	/^  def lookup: LookupByHartIdImpl$/;"	m
lookup	src/main/scala/util/ROMGenerator.scala	/^  def lookup(m: BlackBoxedROM): ROMConfig = {$/;"	m
low	src/main/scala/devices/tilelink/Plic.scala	/^      val low = if (j == 0) 1 else j*8$/;"	l
lowCostProperty	src/main/scala/rocket/TLBPermissions.scala	/^    def lowCostProperty(prop: TLBFixedPermissions => Boolean): UInt => Bool = {$/;"	m
lowHoles	src/main/scala/util/MultiPortQueue.scala	/^    val lowHoles = dense.lanes.U(popBits.W) - offset$/;"	l
low_ready	src/main/scala/util/MultiPortQueue.scala	/^    val low_ready = if (dense.lanes == 1) 0.U else dense.ready(log2Ceil(dense.lanes)-1, 0)$/;"	l
low_valid	src/main/scala/util/MultiPortQueue.scala	/^    val low_valid = if (dense.lanes == 1) 0.U else dense.valid(log2Ceil(dense.lanes)-1, 0)$/;"	l
lower	src/main/scala/rocket/AMOALU.scala	/^      val lower = Mux(addr(i), UInt(0), res)$/;"	l
lower	src/main/scala/rocket/DCache.scala	/^      val lower = Mux(io.cpu.req.bits.addr(i), 0.U, in)$/;"	l
lowerBound	src/main/scala/tilelink/Broadcast.scala	/^            val lowerBound = max(m.supportsPutFull.min, m.supportsGet.min)$/;"	l
lowerMoreRecent	src/main/scala/util/Replacement.scala	/^      val lowerMoreRecent = (if (i == 0)        true.B else moreRecentVec.map(e => !e(i)).reduce(_ && _))$/;"	l
lowest	src/main/scala/diplomacy/package.scala	/^      val lowest = x.lowestSetBit$/;"	l
lowest	src/main/scala/tilelink/Arbiter.scala	/^  def lowest[T <: TLChannel](edge: TLEdge, sink: DecoupledIO[T], sources: DecoupledIO[T]*): Unit = {$/;"	m
lowest	src/main/scala/tilelink/Arbiter.scala	/^  def lowest[T <: TLChannel](edge: TLEdge, sink: ReadyValidCancel[T], sources: ReadyValidCancel[T]*): Unit = {$/;"	m
lowestFromSeq	src/main/scala/tilelink/Arbiter.scala	/^  def lowestFromSeq[T <: TLChannel](edge: TLEdge, sink: DecoupledIO[T], sources: Seq[DecoupledIO[T]]): Unit = {$/;"	m
lowestFromSeq	src/main/scala/tilelink/Arbiter.scala	/^  def lowestFromSeq[T <: TLChannel](edge: TLEdge, sink: ReadyValidCancel[T], sources: Seq[ReadyValidCancel[T]]): Unit = {$/;"	m
lowestIndexFirst	src/main/scala/tilelink/Arbiter.scala	/^  val lowestIndexFirst: Policy = (width, valids, select) => ~(leftOR(valids) << 1)(width-1, 0)$/;"	l
lrscAddr	src/main/scala/rocket/DCache.scala	/^  val lrscAddr = Reg(UInt())$/;"	l
lrscAddrMatch	src/main/scala/rocket/DCache.scala	/^  val lrscAddrMatch = lrscAddr === (s2_req.addr >> blockOffBits)$/;"	l
lrscAllowed	src/main/scala/rocket/TLB.scala	/^  val lrscAllowed = Mux(Bool(usingDataScratchpad || usingAtomicsOnlyForIO), 0.U, c_array)$/;"	l
lrscBackingOff	src/main/scala/rocket/DCache.scala	/^  val lrscBackingOff = lrscCount > 0 && !lrscValid$/;"	l
lrscBackoff	src/main/scala/rocket/HellaCache.scala	/^  def lrscBackoff = 3 \/\/ disallow LRSC reacquisition briefly$/;"	m
lrscCount	src/main/scala/rocket/DCache.scala	/^  val lrscCount = Reg(init=UInt(0))$/;"	l
lrscCycles	src/main/scala/rocket/HellaCache.scala	/^  def lrscCycles = coreParams.lrscCycles \/\/ ISA requires 16-insn LRSC sequences to succeed$/;"	m
lrscCycles	src/main/scala/rocket/RocketCore.scala	/^  val lrscCycles: Int = 80 \/\/ worst case is 14 mispredicted branches + slop$/;"	l
lrscCycles	src/main/scala/tile/Core.scala	/^  def lrscCycles: Int$/;"	m
lrscValid	src/main/scala/rocket/DCache.scala	/^  val lrscValid = lrscCount > lrscBackoff$/;"	l
lrsc_addr	src/main/scala/rocket/NBDcache.scala	/^  val lrsc_addr = Reg(UInt())$/;"	l
lrsc_count	src/main/scala/rocket/NBDcache.scala	/^  val lrsc_count = Reg(init=UInt(0))$/;"	l
lrsc_valid	src/main/scala/rocket/NBDcache.scala	/^  val lrsc_valid = lrsc_count > lrscBackoff$/;"	l
lsb	src/main/scala/util/Replacement.scala	/^    var lsb = 0$/;"	l
lsbMask	src/main/scala/rocket/PMP.scala	/^      val lsbMask = mask | UIntToOH1(lgSize, lgMaxSize)$/;"	l
lsbMask	src/main/scala/rocket/PMP.scala	/^    val lsbMask = UIntToOH1(lgSize, lgMaxSize)$/;"	l
lsbMatch	src/main/scala/rocket/PMP.scala	/^      val lsbMatch = eval(x(lgMaxSize-1, 0), comparand(lgMaxSize-1, 0), lsbMask(lgMaxSize-1, 0))$/;"	l
lsbs	src/main/scala/rocket/ICache.scala	/^    val lsbs = paddr(pgUntagBits-1, blockOffBits)$/;"	l
lsbs	src/main/scala/rocket/PTW.scala	/^    val lsbs = Wire(t = UInt(maxHypervisorExtraAddrBits.W), init = idxs(count))$/;"	l
lsbsLess	src/main/scala/rocket/PMP.scala	/^      val lsbsLess =  (x(lgMaxSize-1, 0) | lsbMask) < comparand(lgMaxSize-1, 0)$/;"	l
lt	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val lt = Bool(false) +: pmps.map(in.a.bits.address < _.address)$/;"	l
lt	src/main/scala/tile/FPU.scala	/^    val lt = Bool()$/;"	l
lt	src/main/scala/tile/FPU.scala	/^    val lt = Bool(INPUT) \/\/ from FPToInt$/;"	l
lui	src/main/scala/rocket/RVC.scala	/^    def lui = {$/;"	m
luiImm	src/main/scala/rocket/RVC.scala	/^  def luiImm = Cat(Fill(15, x(12)), x(6,2), 0.U(12.W))$/;"	m
lut	src/main/scala/tilelink/AtomicAutomata.scala	/^    val lut     = UInt(width = 4)$/;"	l
lut	src/main/scala/tilelink/Atomics.scala	/^  val lut = Vec(Seq($/;"	l
lw	src/main/scala/rocket/RVC.scala	/^    def lw = inst(Cat(lwImm, rs1p, 2.U(3.W), rs2p, 0x03.U(7.W)), rs2p, rs1p, rs2p)$/;"	m
lwImm	src/main/scala/rocket/RVC.scala	/^  def lwImm = Cat(x(5), x(12,10), x(6), 0.U(2.W))$/;"	m
lwsp	src/main/scala/rocket/RVC.scala	/^    def lwsp = inst(Cat(lwspImm, sp, 2.U(3.W), rd, load_opc), rd, sp, rs2)$/;"	m
lwspImm	src/main/scala/rocket/RVC.scala	/^  def lwspImm = Cat(x(3,2), x(12), x(6,4), 0.U(2.W))$/;"	m
m	src/main/scala/rocket/Breakpoint.scala	/^  val m = Bool()$/;"	l
m	src/main/scala/rocket/RocketCore.scala	/^    val m = Module(new PipelinedMultiplier(xLen, 2))$/;"	l
m	src/main/scala/stage/phases/AddDefaultTests.scala	/^        val m = coreParams.mulDiv.map { case _ => "m" }$/;"	l
m	src/main/scala/tile/BaseTile.scala	/^    val m = if (tileParams.core.mulDiv.nonEmpty) "m" else ""$/;"	l
m	src/main/scala/util/CRC.scala	/^    val m = width$/;"	l
m	src/main/scala/util/ECC.scala	/^    val m = log2Floor(k) + 1$/;"	l
m	src/main/scala/util/ROMGenerator.scala	/^    val m = Module(new BlackBoxedROM(c))$/;"	l
mHideCacheable	src/main/scala/tilelink/Filter.scala	/^  def mHideCacheable: ManagerFilter = { m =>$/;"	m
mHideContained	src/main/scala/tilelink/Filter.scala	/^  def mHideContained(containedBy: AddressSet): ManagerFilter = { m =>$/;"	m
mIdentity	src/main/scala/tilelink/Filter.scala	/^  def mIdentity: ManagerFilter = { m => Some(m) }$/;"	m
mMaskCacheable	src/main/scala/tilelink/Filter.scala	/^  def mMaskCacheable: ManagerFilter = { m =>$/;"	m
mSelectAndMaskCacheable	src/main/scala/tilelink/Filter.scala	/^  def mSelectAndMaskCacheable: ManagerFilter = { m =>$/;"	m
mSelectCacheable	src/main/scala/tilelink/Filter.scala	/^  def mSelectCacheable: ManagerFilter = { m =>$/;"	m
mSelectIntersect	src/main/scala/tilelink/Filter.scala	/^  def mSelectIntersect(select: AddressSet): ManagerFilter = { m =>$/;"	m
mSubtract	src/main/scala/tilelink/Filter.scala	/^  def mSubtract(except: AddressSet): ManagerFilter = { m =>$/;"	m
m_interrupts	src/main/scala/rocket/CSR.scala	/^  val m_interrupts = Mux(nmie && (reg_mstatus.prv <= PRV.S || reg_mstatus.mie), ~(~pending_interrupts | read_mideleg), UInt(0))$/;"	l
ma	src/main/scala/rocket/HellaCache.scala	/^  val ma = new AlignmentExceptions$/;"	l
ma	src/main/scala/rocket/TLB.scala	/^  val ma = new TLBExceptions$/;"	l
machine_ecall	src/main/scala/rocket/Instructions.scala	/^  val machine_ecall = 0xb$/;"	l
main	scripts/check_comparator_trace.py	/^def main():$/;"	f
main	scripts/toaxe.py	/^def main():$/;"	f
main	scripts/tracegen.py	/^def main():$/;"	f
main	scripts/tracestats.py	/^def main():$/;"	f
main	scripts/vlsi_mem_gen	/^def main(args):$/;"	f
main	scripts/vlsi_rom_gen	/^def main():$/;"	f
main	src/main/resources/csrc/comlog.cc	/^int main (int argc, char** argv)$/;"	f
main	src/main/resources/csrc/emulator.cc	/^int main(int argc, char** argv)$/;"	f
main	src/main/resources/csrc/float_fix.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val main = nameMappings.getOrElse(circuit.main, circuit.main)$/;"	l
mainreg	src/main/scala/diplomacy/Resources.scala	/^      val mainreg = reg.head._2$/;"	l
makeFragmentedSuperpagePPN	src/main/scala/rocket/PTW.scala	/^  def makeFragmentedSuperpagePPN(ppn: UInt): Seq[UInt] = {$/;"	m
makeIO	src/main/scala/diplomacy/BundleBridge.scala	/^  def makeIO()(implicit valName: ValName): T = {$/;"	m
makeIO	src/main/scala/diplomacy/BundleBridge.scala	/^  def makeIO(name: String): T = makeIO()(ValName(name))$/;"	m
makeIOs	src/main/scala/diplomacy/Nodes.scala	/^  def makeIOs()(implicit valName: ValName): HeterogeneousBag[B] = {$/;"	m
makeMasterBoundaryBuffers	src/main/scala/tile/BaseTile.scala	/^  def makeMasterBoundaryBuffers(crossing: ClockCrossingType)(implicit p: Parameters) = TLBuffer(BufferParams.none)$/;"	m
makeOMI	src/main/scala/diplomaticobjectmodel/model/OMMulDiv.scala	/^  def makeOMI(md: MulDivParams, xLen: Int): OMMulDiv = {$/;"	m
makeOMI	src/main/scala/diplomaticobjectmodel/model/OMRocketCore.scala	/^  def makeOMI(p: BTBParams): OMRocketBranchPredictor = {$/;"	m
makeOMMemory	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def makeOMMemory[T <: Data]($/;"	m
makeOMSRAM	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def makeOMSRAM($/;"	m
makePTECache	src/main/scala/rocket/PTW.scala	/^  def makePTECache(s2: Boolean): (Bool, UInt) = {$/;"	m
makeRegMappingSer	src/main/scala/util/Annotations.scala	/^  def makeRegMappingSer($/;"	m
makeSinglePortedByteWriteSeqMem	src/main/scala/diplomacy/SRAM.scala	/^  def makeSinglePortedByteWriteSeqMem(size: BigInt, lanes: Int = beatBytes, bits: Int = 8) = {$/;"	m
makeSink	src/main/scala/diplomacy/BundleBridge.scala	/^  def makeSink()(implicit p: Parameters) = {$/;"	m
makeSlaveBoundaryBuffers	src/main/scala/tile/BaseTile.scala	/^ def makeSlaveBoundaryBuffers(crossing: ClockCrossingType)(implicit p: Parameters) = TLBuffer(BufferParams.none)$/;"	m
makeTargetName	src/main/scala/system/RocketTestSuite.scala	/^  val makeTargetName = "regression-tests"$/;"	l
makeTargetName	src/main/scala/system/RocketTestSuite.scala	/^  val makeTargetName = makePrefix + "-bmark-tests"$/;"	l
makeTargetName	src/main/scala/system/RocketTestSuite.scala	/^  val makeTargetName = prefix + "-" + envName + "-asm-tests"$/;"	l
makeTargetName	src/main/scala/system/RocketTestSuite.scala	/^  val makeTargetName: String$/;"	l
makefrag	src/main/scala/stage/phases/GenerateTestSuiteMakefrags.scala	/^        val makefrag = a.tests.groupBy(_.kind)$/;"	l
manager	src/main/scala/tilelink/Fragmenter.scala	/^        val manager   = edgeOut.manager$/;"	l
manager	src/main/scala/tilelink/Parameters.scala	/^  def manager = slave$/;"	m
managers	src/main/scala/subsystem/BaseSubsystem.scala	/^    val managers = topManagers$/;"	l
managers	src/main/scala/tilelink/AtomicAutomata.scala	/^      val managers = edgeOut.manager.managers$/;"	l
managers	src/main/scala/tilelink/Broadcast.scala	/^      val managers = edgeOut.manager.managers$/;"	l
managers	src/main/scala/tilelink/Filter.scala	/^      val managers = mp.managers.flatMap { m =>$/;"	l
managers	src/main/scala/tilelink/Fragmenter.scala	/^        val managers  = manager.managers$/;"	l
managers	src/main/scala/tilelink/Parameters.scala	/^  def managers = slaves$/;"	m
managers	src/main/scala/tilelink/ToAHB.scala	/^    val managers = sp.slaves.map { case s =>$/;"	l
managers	src/main/scala/tilelink/ToAPB.scala	/^    val managers = sp.slaves.map { case s =>$/;"	l
managersNeedingHelp	src/main/scala/tilelink/AtomicAutomata.scala	/^      val managersNeedingHelp = managers.filter { m =>$/;"	l
map	src/main/scala/diplomacy/Resources.scala	/^    val map = AddressRange.fromSets(ranges.flatMap(_.address))$/;"	l
map	src/main/scala/diplomacy/Resources.scala	/^    val map: Map[Device, ResourceBindings] = getResourceBindingsMap.map$/;"	l
map	src/main/scala/regmapper/Test.scala	/^    val map = RRTest1Map.map.drop(1) ++ Seq(0 -> Seq(x(8), x(8), x(8), x(8)))$/;"	l
map	src/main/scala/regmapper/Test.scala	/^  def map = RRTest0Map.map.take(6) ++ Seq($/;"	m
map	src/main/scala/regmapper/Test.scala	/^  def map = Seq($/;"	m
map	src/main/scala/tilelink/FIFOFixer.scala	/^    val map = flatMap ++ keepMap$/;"	l
map	src/main/scala/tilelink/Map.scala	/^    val map = LazyModule(new TLMap(fn))$/;"	l
map	src/main/scala/tilelink/ToAXI4.scala	/^      val map = new TLtoAXI4IdMap(edgeIn.client)$/;"	l
map	src/main/scala/util/Annotations.scala	/^    val map = Map[BigInt, (String, String)]() \/\/ TODO$/;"	l
map	src/main/scala/util/package.scala	/^    val map = mutable.LinkedHashMap.empty[K, mutable.ListBuffer[A]]$/;"	l
mapChildren	src/main/scala/diplomacy/Resources.scala	/^    def mapChildren(offset: BigInt) = map.value.toList.flatMap { case (key, seq) => seq.collect {$/;"	m
mapGet	src/main/scala/tilelink/HintHandler.scala	/^      val mapGet = isHint && edgeOut.manager.fastProperty(in.a.bits.address, useGet, (b:Boolean) => b.B)$/;"	l
mapInSelect	src/main/scala/jtag/JtagTap.scala	/^    def mapInSelect(x: (Chain, Bool)): Unit = {$/;"	m
mapInputIds	src/main/scala/amba/axi4/Xbar.scala	/^  def mapInputIds(ports: Seq[AXI4MasterPortParameters]) = TLXbar.assignRanges(ports.map(_.endId))$/;"	m
mapInputIds	src/main/scala/amba/axis/Xbar.scala	/^  def mapInputIds (ports: Seq[AXISMasterPortParameters]) = TLXbar.assignRanges(ports.map(_.endSourceId))$/;"	m
mapInputIds	src/main/scala/tilelink/Xbar.scala	/^  def mapInputIds (ports: Seq[TLMasterPortParameters]) = assignRanges(ports.map(_.endSourceId))$/;"	m
mapMaster	src/main/scala/amba/axi4/Fragmenter.scala	/^  def mapMaster(m: AXI4MasterParameters) = m.copy(aligned = true, maxFlight = None)$/;"	m
mapOutputIds	src/main/scala/amba/axis/Xbar.scala	/^  def mapOutputIds(ports: Seq[AXISSlavePortParameters]) = TLXbar.assignRanges(ports.map(_.endDestinationId))$/;"	m
mapOutputIds	src/main/scala/tilelink/Xbar.scala	/^  def mapOutputIds(ports: Seq[TLSlavePortParameters ]) = assignRanges(ports.map(_.endSinkId))$/;"	m
mapPP	src/main/scala/tilelink/HintHandler.scala	/^      val mapPP = WireInit(helpPP)$/;"	l
mapParamsD	src/main/scala/devices/tilelink/BusBypass.scala	/^  def mapParamsD(n: Int, p: Seq[TLMasterPortParameters]): Seq[TLMasterPortParameters] = { p ++ p }$/;"	m
mapParamsD	src/main/scala/devices/tilelink/MasterMux.scala	/^  def mapParamsD(n: Int, p: Seq[TLMasterPortParameters]): Seq[TLMasterPortParameters] = { Seq(uFn(p)) }$/;"	m
mapParamsD	src/main/scala/diplomacy/Nodes.scala	/^  def mapParamsD(n: Int, p: Seq[DI]): Seq[DO]$/;"	m
mapParamsD	src/main/scala/tilelink/BankBinder.scala	/^  def mapParamsD(n: Int, p: Seq[TLMasterPortParameters]): Seq[TLMasterPortParameters] =$/;"	m
mapParamsU	src/main/scala/devices/tilelink/BusBypass.scala	/^  def mapParamsU(n: Int, p: Seq[TLSlavePortParameters]): Seq[TLSlavePortParameters] = { Seq(dFn(p.last).v1copy(minLatency = p.map(_.minLatency).min))}$/;"	m
mapParamsU	src/main/scala/devices/tilelink/MasterMux.scala	/^  def mapParamsU(n: Int, p: Seq[TLSlavePortParameters]): Seq[TLSlavePortParameters] = { p ++ p }$/;"	m
mapParamsU	src/main/scala/diplomacy/Nodes.scala	/^  def mapParamsU(n: Int, p: Seq[UO]): Seq[UI]$/;"	m
mapParamsU	src/main/scala/tilelink/BankBinder.scala	/^  def mapParamsU(n: Int, p: Seq[TLSlavePortParameters]): Seq[TLSlavePortParameters] =$/;"	m
mapSlave	src/main/scala/amba/axi4/Fragmenter.scala	/^  def mapSlave(s: AXI4SlaveParameters, beatBytes: Int) = s.copy($/;"	m
mapping	src/main/scala/amba/axi4/Parameters.scala	/^  val mapping: Seq[AXI4IdMapEntry] = sorted.map { case c =>$/;"	l
mapping	src/main/scala/diplomacy/Parameters.scala	/^  val mapping: Seq[T]$/;"	l
mapping	src/main/scala/rocket/Decode.scala	/^    val mapping = ArrayBuffer.fill(default.size)(ArrayBuffer[(BitPat, BitPat)]())$/;"	l
mapping	src/main/scala/tilelink/Parameters.scala	/^  val mapping: Seq[TLSourceIdMapEntry] = sorted.map { case c =>$/;"	l
mapping	src/main/scala/tilelink/ToAXI4.scala	/^  val mapping: Seq[TLToAXI4IdMapEntry] = tlMasters.zip(axi4Masters).map { case (tl, axi) =>$/;"	l
marchid	src/main/scala/rocket/Instructions.scala	/^  val marchid = 0xf12$/;"	l
marchid	src/main/scala/rocket/RocketCore.scala	/^  def marchid = CustomCSR.constant(CSRs.marchid, BigInt(1))$/;"	m
mask	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val mask = MaskGen(ar.bits.addr, ar.bits.size, beatBytes)$/;"	l
mask	src/main/scala/devices/tilelink/TestRAM.scala	/^    val mask = bigBits(address.mask >> log2Ceil(beatBytes))$/;"	l
mask	src/main/scala/diplomacy/DeviceTree.scala	/^    val mask = (BigInt(1) << cellbits) - 1$/;"	l
mask	src/main/scala/diplomacy/SRAM.scala	/^  def mask: List[Boolean] = bigBits(address.mask >> log2Ceil(beatBytes))$/;"	m
mask	src/main/scala/regmapper/RegMapper.scala	/^    val mask = AddressDecoder(wordmap.keySet.toList)$/;"	l
mask	src/main/scala/regmapper/RegMapper.scala	/^  val mask  = UInt(width = params.maskBits)$/;"	l
mask	src/main/scala/rocket/AMOALU.scala	/^        val mask = M_XA_MIN ^ M_XA_MINU$/;"	l
mask	src/main/scala/rocket/AMOALU.scala	/^    val mask = UInt(INPUT, operandBits\/8)$/;"	l
mask	src/main/scala/rocket/AMOALU.scala	/^    val mask = ~(UInt(0, operandBits) +: widths.init.map(w => !io.mask(w\/8-1) << (w-1))).reduce(_|_)$/;"	l
mask	src/main/scala/rocket/AMOALU.scala	/^  def mask = {$/;"	m
mask	src/main/scala/rocket/BTB.scala	/^    val mask = UIntToOH(waddr)$/;"	l
mask	src/main/scala/rocket/BTB.scala	/^  val mask = Bits(width = fetchWidth)$/;"	l
mask	src/main/scala/rocket/Breakpoint.scala	/^  def mask(dummy: Int = 0) =$/;"	m
mask	src/main/scala/rocket/CSR.scala	/^      val mask = UInt(isaStringToMask(isaMaskString), xLen)$/;"	l
mask	src/main/scala/rocket/CSR.scala	/^      val mask = csr.mask.U(xLen.W)$/;"	l
mask	src/main/scala/rocket/DCache.scala	/^      val mask = FillInterleaved(8, Mux(s2_correct, 0.U, pstore1_mask))$/;"	l
mask	src/main/scala/rocket/DCache.scala	/^    val mask = (subWordBytes.log2 until rowOffBits).foldLeft(1.U) { case (in, i) =>$/;"	l
mask	src/main/scala/rocket/DCache.scala	/^    val mask = Reg(UInt(width = wordBytes))$/;"	l
mask	src/main/scala/rocket/Frontend.scala	/^  val mask = Bits(width = fetchWidth)$/;"	l
mask	src/main/scala/rocket/HellaCache.scala	/^  val mask = UInt(width = coreDataBytes)$/;"	l
mask	src/main/scala/rocket/ICache.scala	/^      val mask = nWays - (BigInt(1) << (i + 1))$/;"	l
mask	src/main/scala/rocket/PMP.scala	/^    val mask = ((BigInt(1) << (pmpGranularity.log2 - PMP.lgAlign)) - 1).U$/;"	l
mask	src/main/scala/rocket/PMP.scala	/^  val mask = UInt(paddrBits.W)$/;"	l
mask	src/main/scala/rocket/PTW.scala	/^      val mask = UIntToOH(r_idx)$/;"	l
mask	src/main/scala/rocket/PTW.scala	/^    val mask     = Mux(stage2 && count === r_hgatp_initial_count, ((1 << (hypervisorExtraAddrBits + pgLevelBits)) - 1).U, ((1 << pgLevelBits) - 1).U)$/;"	l
mask	src/main/scala/rocket/RocketCore.scala	/^    val mask = BigInt($/;"	l
mask	src/main/scala/rocket/TLB.scala	/^      val mask = ((BigInt(1) << vaddrBitsExtended) - (BigInt(1) << (minVAddrBits + i * pgLevelBits - signed.toInt))).U$/;"	l
mask	src/main/scala/tilelink/AddressAdjuster.scala	/^  val mask = params.replicationMask$/;"	l
mask	src/main/scala/tilelink/Arbiter.scala	/^    val mask = RegInit(((BigInt(1) << width)-1).U(width-1,0))$/;"	l
mask	src/main/scala/tilelink/AtomicAutomata.scala	/^        val mask = a_cam_a.bits.mask$/;"	l
mask	src/main/scala/tilelink/Broadcast.scala	/^  val mask = UInt((params.dataBits\/8).W)$/;"	l
mask	src/main/scala/tilelink/Bundles.scala	/^  val mask    = UInt(width = params.dataBits\/8)$/;"	l
mask	src/main/scala/tilelink/Edges.scala	/^      val mask = UIntToOH1(lgSize, maxLgSize)$/;"	l
mask	src/main/scala/tilelink/Edges.scala	/^  def mask(address: UInt, lgSize: UInt): UInt =$/;"	m
mask	src/main/scala/tilelink/Edges.scala	/^  def mask(x: TLAddrChannel): UInt = {$/;"	m
mask	src/main/scala/tilelink/Fuzzer.scala	/^    val mask      = noiseMaker(beatBytes, inc_beat, 2) & edge.mask(addr, size)$/;"	l
mask	src/main/scala/tilelink/Monitor.scala	/^    val mask = edge.full_mask(bundle)$/;"	l
mask	src/main/scala/tilelink/Parameters.scala	/^    val mask = if (safe) ~BigInt(0) else AddressDecoder(supportCases.map(_._2))$/;"	l
mask	src/main/scala/util/ScatterGather.scala	/^  val mask = RegInit(0.U(size.W))$/;"	l
mask	src/main/scala/util/ShiftQueue.scala	/^    val mask = Output(UInt(entries.W))$/;"	l
maskBits	src/main/scala/regmapper/RegMapper.scala	/^    val maskBits = maskFilter.filter(x => x).size$/;"	l
maskBits	src/main/scala/tilelink/Broadcast.scala	/^  def maskBits(address: UInt) = Cat((addressMaskBitList zip address.asBools).filter(_._1).map(_._2).reverse)$/;"	m
maskCmd	src/main/scala/rocket/CSR.scala	/^  def maskCmd(valid: Bool, cmd: UInt): UInt = {$/;"	m
maskEventSelector	src/main/scala/rocket/Events.scala	/^  def maskEventSelector(eventSel: UInt): UInt = {$/;"	m
maskFilter	src/main/scala/regmapper/RegMapper.scala	/^    val maskFilter = toBits(mask)$/;"	l
maskHomogeneous	src/main/scala/rocket/PMP.scala	/^    val maskHomogeneous = pgLevelMap { idxBits => if (idxBits > paddrBits) false.B else mask(idxBits - 1) } (pgLevel)$/;"	l
maskMask	src/main/scala/rocket/Events.scala	/^    val maskMask = ((BigInt(1) << eventSets.map(_.size).max) - 1) << maxEventSetIdBits$/;"	l
maskMatch	src/main/scala/regmapper/RegMapper.scala	/^    val maskMatch = ~UInt(mask, width = inBits)$/;"	l
maskMax	src/main/scala/rocket/Breakpoint.scala	/^  def maskMax = 4$/;"	m
maskROM	src/main/scala/devices/tilelink/MaskROM.scala	/^    val maskROM = LazyModule(new TLMaskROM(params))$/;"	l
maskROMs	src/main/scala/system/ExampleRocketSystem.scala	/^  val maskROMs = p(MaskROMLocated(location)).map { MaskROM.attach(_, this, CBUS) }$/;"	l
mask_full	src/main/scala/rocket/ScratchpadSlavePort.scala	/^      val mask_full = {$/;"	l
mask_match	src/main/scala/rocket/DCache.scala	/^      val mask_match = (concern_wmask & s1_mask_xwr).orR || c._2.cmd === M_PWR || s1_req.cmd === M_PWR$/;"	l
maskdata	src/main/scala/devices/debug/dm_registers.scala	/^  val maskdata = UInt(32.W)$/;"	l
maskedBeats	src/main/scala/tilelink/Arbiter.scala	/^      val maskedBeats = (winnerQual zip beatsIn) map { case (w,b) => Mux(w, b, 0.U) }$/;"	l
maskedNaN	src/main/scala/tile/FPU.scala	/^      val maskedNaN = x & ~UInt((BigInt(1) << (t.sig-1)) | (BigInt(1) << (t.sig+t.exp-4)), t.recodedWidth)$/;"	l
maskedVAddr	src/main/scala/rocket/TLB.scala	/^      val maskedVAddr = io.req.bits.vaddr & mask$/;"	l
masked_enable	src/main/scala/tilelink/WidthWidget.scala	/^        val masked_enable = enable.map(_ || !rdata_written_once)$/;"	l
maskmax	src/main/scala/rocket/Breakpoint.scala	/^  val maskmax = UInt(6.W)$/;"	l
masks	src/main/scala/rocket/CSR.scala	/^    val masks = masksIn.reverse$/;"	l
master	src/main/scala/amba/ahb/Test.scala	/^  val master = LazyModule(new AHBFuzzMaster(aFlow, txns))$/;"	l
master	src/main/scala/amba/axi4/Fragmenter.scala	/^      val master    = edgeIn.master$/;"	l
master	src/main/scala/amba/axi4/Test.scala	/^  val master = LazyModule(new AXI4FuzzMaster(txns))$/;"	l
master	src/main/scala/amba/axis/Parameters.scala	/^  val master:     AXISMasterPortParameters,$/;"	l
master	src/main/scala/subsystem/HasTiles.scala	/^  def master: TilePortParamsLike$/;"	m
masterBandSize	src/main/scala/amba/axi4/Xbar.scala	/^  val masterBandSize = slaveSize >> log2Ceil(nMasters)$/;"	l
masterNode	src/main/scala/groundtest/TraceGen.scala	/^  val masterNode: TLOutwardNode = TLIdentityNode() := visibilityNode := dcacheOpt.map(_.node).getOrElse(TLTempNode())$/;"	l
masterNode	src/main/scala/rocket/Frontend.scala	/^  val masterNode = icache.masterNode$/;"	l
masterNode	src/main/scala/rocket/ICache.scala	/^  val masterNode = TLClientNode(Seq(TLMasterPortParameters.v1($/;"	l
masterNode	src/main/scala/tile/BaseTile.scala	/^  def masterNode: TLOutwardNode$/;"	m
masterNode	src/main/scala/tile/RocketTile.scala	/^  val masterNode = visibilityNode$/;"	l
masterPortBeatBytes	src/main/scala/tile/BaseTile.scala	/^  def masterPortBeatBytes = p(SystemBusKey).beatBytes$/;"	m
masterTLBus	src/main/scala/tilelink/BusWrapper.scala	/^    val masterTLBus = context.locateTLBusWrapper(master)$/;"	l
master_bypass	src/main/scala/regmapper/RegisterCrossing.scala	/^    val master_bypass = Bool(INPUT)$/;"	l
master_bypass	src/main/scala/regmapper/RegisterCrossing.scala	/^  val master_bypass  = Bool(INPUT)$/;"	l
master_clock	src/main/scala/regmapper/RegisterCrossing.scala	/^  val master_clock   = Clock(INPUT)$/;"	l
master_port	src/main/scala/regmapper/RegisterCrossing.scala	/^  val master_port    = new RegisterReadIO(gen)$/;"	l
master_port	src/main/scala/regmapper/RegisterCrossing.scala	/^  val master_port    = new RegisterWriteIO(gen)$/;"	l
master_request_ready	src/main/scala/regmapper/RegisterCrossing.scala	/^    val master_request_ready    = Bool(OUTPUT)$/;"	l
master_request_valid	src/main/scala/regmapper/RegisterCrossing.scala	/^    val master_request_valid    = Bool(INPUT)$/;"	l
master_reset	src/main/scala/regmapper/RegisterCrossing.scala	/^  val master_reset   = Bool(INPUT)$/;"	l
master_response_ready	src/main/scala/regmapper/RegisterCrossing.scala	/^    val master_response_ready   = Bool(INPUT)$/;"	l
master_response_valid	src/main/scala/regmapper/RegisterCrossing.scala	/^    val master_response_valid   = Bool(OUTPUT)$/;"	l
masters	src/main/scala/amba/axi4/Fragmenter.scala	/^      val masters   = master.masters$/;"	l
masters	src/main/scala/amba/axi4/IdIndexer.scala	/^      val masters = Array.tabulate(1 << idBits) { i => AXI4MasterParameters($/;"	l
masters	src/main/scala/amba/axi4/Xbar.scala	/^  val masters = Seq.fill(nMasters) { LazyModule(new TLFuzzer(txns, 4, nOrdered = Some(1))) }$/;"	l
masters	src/main/scala/amba/axis/Parameters.scala	/^  val masters:      Seq[AXISMasterParameters],$/;"	l
masters	src/main/scala/tilelink/Parameters.scala	/^  val masters:       Seq[TLMasterParameters],$/;"	l
matchBits	src/main/scala/rocket/BTB.scala	/^  val matchBits = btbParams.nMatchBits max log2Ceil(p(CacheBlockBytes) * tileParams.icache.get.nSets)$/;"	l
matchTracker	src/main/scala/tilelink/Broadcast.scala	/^      val matchTracker = matchTrackers.orR()$/;"	l
matchTrackers	src/main/scala/tilelink/Broadcast.scala	/^      val matchTrackers = VecInit(trackers.map { t => t.line === in.a.bits.address >> lineShift }).asUInt$/;"	l
matches	src/main/scala/tile/LazyRoCC.scala	/^  def matches(oc: UInt) = opcodes.map(_ === oc).reduce(_ || _)$/;"	m
matches	src/main/scala/util/ReorderQueue.scala	/^  val matches = Bool(OUTPUT)$/;"	l
materialize	macros/src/main/scala/ValName.scala	/^  implicit def materialize: ValNameImpl = macro detail$/;"	m
materialize	src/main/scala/diplomacy/ValName.scala	/^  implicit def materialize(implicit x: ValNameImpl): ValName = ValName(x.name)$/;"	m
max	src/main/scala/devices/tilelink/Plic.scala	/^    val max  = UInt(width = prioBits)$/;"	l
max	src/main/scala/diplomacy/Parameters.scala	/^  def max = { require (finite, "Max cannot be calculated on infinite mask"); base | mask }$/;"	m
max	src/main/scala/rocket/AMOALU.scala	/^  val max = io.cmd === M_XA_MAX || io.cmd === M_XA_MAXU$/;"	l
max	src/main/scala/subsystem/BaseSubsystem.scala	/^    val max = managers.flatMap(_.address).map(_.max).max$/;"	l
max	src/main/scala/util/PlusArg.scala	/^  val max = Module(new plusarg_reader(format, default, docstring, width)).io.out$/;"	l
maxAddress	src/main/scala/amba/ahb/Parameters.scala	/^  val maxAddress = address.map(_.max).max$/;"	l
maxAddress	src/main/scala/amba/ahb/Parameters.scala	/^  val maxAddress = slaves.map(_.maxAddress).max$/;"	l
maxAddress	src/main/scala/amba/apb/Parameters.scala	/^  val maxAddress = address.map(_.max).max$/;"	l
maxAddress	src/main/scala/amba/apb/Parameters.scala	/^  val maxAddress = slaves.map(_.maxAddress).max$/;"	l
maxAddress	src/main/scala/amba/axi4/Parameters.scala	/^  val maxAddress = address.map(_.max).max$/;"	l
maxAddress	src/main/scala/amba/axi4/Parameters.scala	/^  val maxAddress = slaves.map(_.maxAddress).max$/;"	l
maxAddress	src/main/scala/tilelink/Parameters.scala	/^  def maxAddress  = slaves.map(_.maxAddress).max$/;"	m
maxAddress	src/main/scala/tilelink/Parameters.scala	/^  val maxAddress = address.map(_.max).max$/;"	l
maxArithmetics	src/main/scala/tilelink/Fragmenter.scala	/^        val maxArithmetics = managers.map(_.supportsArithmetic.max)$/;"	l
maxBase	src/main/scala/diplomacy/Resources.scala	/^    val maxBase = map.map(_.end).max$/;"	l
maxBaseAlignment	src/main/scala/diplomacy/Parameters.scala	/^      val maxBaseAlignment = base & (-base) \/\/ 0 for infinite (LSB)$/;"	l
maxBeats	src/main/scala/amba/axi4/Fragmenter.scala	/^  val maxBeats = 1 << AXI4Parameters.lenBits$/;"	l
maxBits	src/main/scala/diplomacy/AddressDecoder.scala	/^      val maxBits = log2Ceil(1 + nonEmptyPorts.map(_.map(_.base).max).max)$/;"	l
maxCount	src/main/scala/tilelink/ToAXI4.scala	/^        val maxCount = n.getOrElse(1)$/;"	l
maxDevices	src/main/scala/devices/tilelink/Plic.scala	/^  def maxDevices = 1023$/;"	m
maxDevs	src/main/scala/devices/tilelink/Plic.scala	/^    val maxDevs = Reg(Vec(nHarts, UInt(width = log2Ceil(nDevices+1))))$/;"	l
maxDownSize	src/main/scala/tilelink/Fragmenter.scala	/^        val maxDownSize = if (alwaysMin) minSize else min(manager.maxTransfer, maxSize)$/;"	l
maxErrorNumber	src/main/scala/linting/LintException.scala	/^    val maxErrorNumber = groupedErrors.keys.max$/;"	l
maxExpWidth	src/main/scala/tile/FPU.scala	/^  def maxExpWidth = maxType.exp$/;"	m
maxFlight	src/main/scala/amba/axi4/ToTL.scala	/^      val maxFlight = edgeIn.master.masters.map(_.maxFlight.get).max$/;"	l
maxFlight	src/main/scala/amba/axi4/ToTL.scala	/^    val maxFlight = mp.masters.map(_.maxFlight.get).max$/;"	l
maxFlightPerId	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val maxFlightPerId = Seq.tabulate(endId) { i =>$/;"	l
maxGets	src/main/scala/tilelink/Fragmenter.scala	/^        val maxGets        = managers.map(_.supportsGet.max)$/;"	l
maxHVAddrBits	src/main/scala/tile/BaseTile.scala	/^  def maxHVAddrBits: Int = maxSVAddrBits + hypervisorExtraAddrBits$/;"	m
maxHints	src/main/scala/tilelink/Fragmenter.scala	/^        val maxHints       = managers.map(m => if (m.supportsHint) maxDownSize else 0)$/;"	l
maxHypervisorExtraAddrBits	src/main/scala/tile/BaseTile.scala	/^  def maxHypervisorExtraAddrBits: Int = 2$/;"	m
maxKey	src/main/scala/util/MuxLiteral.scala	/^    val maxKey = (BigInt(0) +: simple.map(_._1)).max$/;"	l
maxLatency	src/main/scala/tile/FPU.scala	/^  val maxLatency = pipes.map(_.lat).max$/;"	l
maxLgArithmetic	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgArithmetic  = Mux1H(find, maxLgArithmetics)$/;"	l
maxLgArithmetics	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgArithmetics = maxArithmetics.map(m => if (m == 0) lgMinSize else UInt(log2Ceil(m)))$/;"	l
maxLgBeats	src/main/scala/tilelink/Fuzzer.scala	/^    val maxLgBeats   = log2Up(maxTransfer\/beatBytes)$/;"	l
maxLgBeats	src/main/scala/tilelink/RAMModel.scala	/^      val maxLgBeats   = log2Up(maxTransfer\/beatBytes)$/;"	l
maxLgGet	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgGet         = Mux1H(find, maxLgGets)$/;"	l
maxLgGets	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgGets        = maxGets       .map(m => if (m == 0) lgMinSize else UInt(log2Ceil(m)))$/;"	l
maxLgHint	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgHint        = Mux1H(find, maxLgHints)$/;"	l
maxLgHints	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgHints       = maxHints      .map(m => if (m == 0) lgMinSize else UInt(log2Ceil(m)))$/;"	l
maxLgLogical	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgLogical     = Mux1H(find, maxLgLogicals)$/;"	l
maxLgLogicals	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgLogicals    = maxLogicals   .map(m => if (m == 0) lgMinSize else UInt(log2Ceil(m)))$/;"	l
maxLgPutFull	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgPutFull     = Mux1H(find, maxLgPutFulls)$/;"	l
maxLgPutFulls	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgPutFulls    = maxPutFulls   .map(m => if (m == 0) lgMinSize else UInt(log2Ceil(m)))$/;"	l
maxLgPutPartial	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgPutPartial  = Mux1H(find, maxLgPutPartials)$/;"	l
maxLgPutPartials	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLgPutPartials = maxPutPartials.map(m => if (m == 0) lgMinSize else UInt(log2Ceil(m)))$/;"	l
maxLgSize	src/main/scala/tilelink/Parameters.scala	/^  val maxLgSize = log2Ceil(maxTransfer)$/;"	l
maxLogicals	src/main/scala/tilelink/Fragmenter.scala	/^        val maxLogicals    = managers.map(_.supportsLogical.max)$/;"	l
maxMaxHarts	src/main/scala/devices/tilelink/Plic.scala	/^  def maxMaxHarts = 15872$/;"	m
maxPAddrBits	src/main/scala/tile/BaseTile.scala	/^  lazy val maxPAddrBits: Int = {$/;"	l
maxPMPs	src/main/scala/rocket/CSR.scala	/^  val maxPMPs = 16$/;"	l
maxPortsPerPartition	src/main/scala/diplomacy/AddressDecoder.scala	/^    val maxPortsPerPartition = partitions.map(_.size).max$/;"	l
maxPutFulls	src/main/scala/tilelink/Fragmenter.scala	/^        val maxPutFulls    = managers.map(_.supportsPutFull.max)$/;"	l
maxPutPartials	src/main/scala/tilelink/Fragmenter.scala	/^        val maxPutPartials = managers.map(_.supportsPutPartial.max)$/;"	l
maxRequests	src/main/scala/groundtest/Tile.scala	/^  val maxRequests: Int$/;"	l
maxSVAddrBits	src/main/scala/tile/BaseTile.scala	/^  def maxSVAddrBits: Int = pgIdxBits + pgLevels * pgLevelBits$/;"	m
maxSetsPerPartition	src/main/scala/diplomacy/AddressDecoder.scala	/^    val maxSetsPerPartition = partitions.map(_.map(_.size).sum).max$/;"	l
maxShift	src/main/scala/amba/axi4/Bundles.scala	/^    val maxShift = 1 << params.sizeBits$/;"	l
maxSigWidth	src/main/scala/tile/FPU.scala	/^  def maxSigWidth = maxType.sig$/;"	m
maxSize	src/main/scala/diplomacy/Resources.scala	/^    val maxSize = map.map(_.size).max$/;"	l
maxSize	src/main/scala/tilelink/ToAXI4.scala	/^      val maxSize   = UInt(log2Ceil(beatBytes))$/;"	l
maxSizeAlignment	src/main/scala/diplomacy/Parameters.scala	/^      val maxSizeAlignment = BigInt(1) << log2Floor(size) \/\/ MSB of size$/;"	l
maxSourceId	src/main/scala/tilelink/Monitor.scala	/^    val maxSourceId = Wire(UInt(edge.client.endSourceId.W))$/;"	l
maxSupported1	src/main/scala/amba/axi4/Fragmenter.scala	/^        val maxSupported1 = remain1 & align1 & support1 \/\/ Take the minimum of all the limits$/;"	l
maxTags	src/main/scala/groundtest/TraceGen.scala	/^  val maxTags             = 8$/;"	l
maxTransactionsInFlight	src/main/scala/amba/axi4/Parameters.scala	/^    val maxTransactionsInFlight = c.maxFlight.map(_ * c.id.size * 2)$/;"	l
maxTransactionsInFlight	src/main/scala/amba/axi4/ToTL.scala	/^  val maxTransactionsInFlight = Some(tlId.size)$/;"	l
maxTransactionsInFlight	src/main/scala/diplomacy/Parameters.scala	/^  def maxTransactionsInFlight: Option[Int]$/;"	m
maxTransactionsInFlight	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^                   val maxTransactionsInFlight: Option[Int],$/;"	l
maxTransactionsInFlight	src/main/scala/tilelink/Parameters.scala	/^  val maxTransactionsInFlight = Some(tlId.size)$/;"	l
maxTransactionsInFlight	src/main/scala/tilelink/ToAXI4.scala	/^  val maxTransactionsInFlight = Some(tlId.size)$/;"	l
maxTransfer	src/main/scala/amba/ahb/Parameters.scala	/^  val maxTransfer = max(supportsWrite.max, supportsRead.max)$/;"	l
maxTransfer	src/main/scala/amba/ahb/Parameters.scala	/^  val maxTransfer = slaves.map(_.maxTransfer).max$/;"	l
maxTransfer	src/main/scala/amba/ahb/Protocol.scala	/^  val maxTransfer = 16$/;"	l
maxTransfer	src/main/scala/amba/axi4/Filter.scala	/^    val maxTransfer = 1 << 30$/;"	l
maxTransfer	src/main/scala/amba/axi4/Parameters.scala	/^  val maxTransfer = max(supportsWrite.max, supportsRead.max)$/;"	l
maxTransfer	src/main/scala/amba/axi4/Parameters.scala	/^  val maxTransfer = slaves.map(_.maxTransfer).max$/;"	l
maxTransfer	src/main/scala/tilelink/Filter.scala	/^    val maxTransfer = 1 << 30$/;"	l
maxTransfer	src/main/scala/tilelink/Fuzzer.scala	/^    val maxTransfer  = edge.manager.maxTransfer$/;"	l
maxTransfer	src/main/scala/tilelink/Parameters.scala	/^  def maxTransfer = masters.map(_.maxTransfer).max$/;"	m
maxTransfer	src/main/scala/tilelink/Parameters.scala	/^  def maxTransfer = slaves.map(_.maxTransfer).max$/;"	m
maxTransfer	src/main/scala/tilelink/Parameters.scala	/^  val maxTransfer = List( \/\/ Largest supported transfer of all types$/;"	l
maxTransfer	src/main/scala/tilelink/Parameters.scala	/^  val maxTransfer = List($/;"	l
maxTransfer	src/main/scala/tilelink/Parameters.scala	/^  val maxTransfer = max(master.maxTransfer, slave.maxTransfer)$/;"	l
maxTransfer	src/main/scala/tilelink/RAMModel.scala	/^      val maxTransfer  = edge.manager.maxTransfer$/;"	l
maxTransfer	src/main/scala/tilelink/ToAHB.scala	/^      val maxTransfer = edgeOut.slave.maxTransfer$/;"	l
maxType	src/main/scala/tile/FPU.scala	/^  def maxType = floatTypes.last$/;"	m
maxUncachedInFlight	src/main/scala/rocket/HellaCache.scala	/^  def maxUncachedInFlight = cacheParams.nMMIOs$/;"	m
maxVLMax	src/main/scala/tile/Core.scala	/^  def maxVLMax = vLen$/;"	m
maxXfer	src/main/scala/amba/axi4/ToTL.scala	/^      val maxXfer = TransferSizes(1, mp.beatBytes * (1 << AXI4Parameters.lenBits))$/;"	l
maxXfer	src/main/scala/tilelink/BankBinder.scala	/^  val maxXfer = TransferSizes(1, if (bit == 0 || bit > 4096) 4096 else bit.toInt)$/;"	l
max_count	src/main/scala/rocket/PTW.scala	/^  val max_count = count max aux_count$/;"	l
max_cycles	src/main/resources/vsrc/TestDriver.v	/^  reg [63:0] max_cycles = 0;$/;"	r
max_vlmul	src/main/scala/rocket/CSR.scala	/^  def max_vlmul = (1 << vlmul_mag.getWidth) - 1$/;"	m
max_vsew	src/main/scala/rocket/CSR.scala	/^  def max_vsew = log2Ceil(eLen\/8)$/;"	m
max_width	src/main/scala/devices/debug/Custom.scala	/^        val max_width = seq.foldLeft(0){(result, current) => result max current.width}$/;"	l
maximum	src/main/scala/tilelink/Metadata.scala	/^  def maximum = ClientMetadata(ClientStates.Dirty)$/;"	m
maxt	src/main/scala/rocket/Decode.scala	/^      val maxt = termvalues.filter { case (k,t) => ((t.mask >> i) & 1) == 0 && ((t.value >> i) & 1) == 0 }.map(_._1)$/;"	l
mayDenyGet	src/main/scala/tilelink/Parameters.scala	/^  def mayDenyGet  = slaves.exists(_.mayDenyGet)$/;"	m
mayDenyGet	src/main/scala/tilelink/Parameters.scala	/^  val mayDenyGet:         Boolean, \/\/ applies to: AccessAckData, GrantData$/;"	l
mayDenyPut	src/main/scala/tilelink/Parameters.scala	/^  def mayDenyPut  = slaves.exists(_.mayDenyPut)$/;"	m
mayDenyPut	src/main/scala/tilelink/Parameters.scala	/^  val mayDenyPut:         Boolean) \/\/ applies to: AccessAck,     Grant,    HintAck$/;"	l
maybe	src/main/scala/amba/axis/Bundles.scala	/^    def maybe(b: Boolean, x: BundleFieldBase): Seq[BundleFieldBase] = if (b) List(x) else Nil$/;"	m
maybe_empty	src/main/scala/util/LanePositionedQueue.scala	/^    val maybe_empty = if (lanes <= L && L <= (rows-1)*lanes\/2) {$/;"	l
maybe_full	src/main/scala/util/HellaQueue.scala	/^  val maybe_full = Reg(init=Bool(false))$/;"	l
mbe	src/main/scala/rocket/CSR.scala	/^  val mbe = Bool()$/;"	l
mbus	src/main/scala/subsystem/BaseSubsystem.scala	/^  val mbus = tlBusWrapperLocationMap.lift(MBUS).getOrElse(sbus)$/;"	l
mbus	src/main/scala/subsystem/MemoryBus.scala	/^    val mbus = LazyModule(new MemoryBus(this, loc.name))$/;"	l
mcause	src/main/scala/rocket/Instructions.scala	/^  val mcause = 0x342$/;"	l
mcontext	src/main/scala/rocket/Breakpoint.scala	/^    val mcontext = Input(UInt(coreParams.mcontextWidth.W))$/;"	l
mcontext	src/main/scala/rocket/CSR.scala	/^  val mcontext = Output(UInt(coreParams.mcontextWidth.W))$/;"	l
mcontext	src/main/scala/rocket/Instructions.scala	/^  val mcontext = 0x7a8$/;"	l
mcontextWidth	src/main/scala/tile/Core.scala	/^  val mcontextWidth: Int$/;"	l
mcounteren	src/main/scala/rocket/Instructions.scala	/^  val mcounteren = 0x306$/;"	l
mcountinhibit	src/main/scala/rocket/Instructions.scala	/^  val mcountinhibit = 0x320$/;"	l
mcycle	src/main/scala/rocket/Instructions.scala	/^  val mcycle = 0xb00$/;"	l
mcycleh	src/main/scala/rocket/Instructions.scala	/^  val mcycleh = 0xb80$/;"	l
mdata	src/main/scala/tilelink/WidthWidget.scala	/^        val mdata = (masked_enable zip (odata zip pdata)) map { case (e, (o, p)) => Mux(e, o, p) }$/;"	l
me	src/main/scala/rocket/RVC.scala	/^      val me = inst(Cat(luiImm(31,12), rd, opc), rd, rd, rs2p)$/;"	l
me	src/main/scala/tile/LazyRoCC.scala	/^    val me = opcode.matches(cmd.bits.inst.opcode)$/;"	l
me	src/main/scala/util/ROMGenerator.scala	/^    val me = Bool(INPUT)$/;"	l
med	src/main/scala/subsystem/Configs.scala	/^    val med = RocketTileParams($/;"	l
medeleg	src/main/scala/rocket/Instructions.scala	/^  val medeleg = 0x302$/;"	l
meip	src/main/scala/rocket/CSR.scala	/^  val meip = Bool()$/;"	l
meip	src/main/scala/subsystem/HasTiles.scala	/^  val meip = if(outer.meipNode.isDefined) Some(IO(Vec(outer.meipNode.get.out.size, Bool()).asInput)) else None$/;"	l
meip	src/main/scala/tile/Interrupts.scala	/^  val meip = Bool()$/;"	l
meipNode	src/main/scala/subsystem/HasTiles.scala	/^  val meipNode = p(PLICKey) match {$/;"	l
mem	src/main/scala/devices/tilelink/TestRAM.scala	/^    val mem = Mem(1 << addrBits.size, Vec(beatBytes, Bits(width = 8)))$/;"	l
mem	src/main/scala/diplomacy/SRAM.scala	/^  def mem: SyncReadMem[Vec[UInt]]$/;"	m
mem	src/main/scala/groundtest/TraceGen.scala	/^    val mem = new HellaCacheIO$/;"	l
mem	src/main/scala/rocket/HellaCacheArbiter.scala	/^    val mem = new HellaCacheIO$/;"	l
mem	src/main/scala/rocket/IDecode.scala	/^  val mem = Bool()$/;"	l
mem	src/main/scala/rocket/PTW.scala	/^    val mem = new HellaCacheIO$/;"	l
mem	src/main/scala/system/SimAXIMem.scala	/^      val mem = LazyModule(new SimAXIMem(edge, base = p(ExtMem).get.master.base, size = p(ExtMem).get.master.size))$/;"	l
mem	src/main/scala/tile/LazyRoCC.scala	/^  val mem = new HellaCacheIO$/;"	l
mem	src/main/scala/util/AsyncQueue.scala	/^  val mem   = Output(Vec(params.wires, gen))$/;"	l
mem	src/main/scala/util/AsyncQueue.scala	/^  val mem = Reg(Vec(params.depth, gen)) \/\/ This does NOT need to be reset at all.$/;"	l
mem	src/main/scala/util/DescribedSRAM.scala	/^    val mem = SyncReadMem(size, data)$/;"	l
memAXI4Node	src/main/scala/subsystem/Ports.scala	/^  val memAXI4Node = AXI4SlaveNode(memPortParamsOpt.map({ case MemoryPortParams(memPortParams, nMemoryChannels) =>$/;"	l
memAddress	src/main/scala/devices/tilelink/TestRAM.scala	/^    val memAddress = Cat(addrBits.reverse)$/;"	l
memCoverCauses	src/main/scala/rocket/RocketCore.scala	/^  val memCoverCauses = (exCoverCauses ++ List($/;"	l
memIdx	src/main/scala/rocket/TLB.scala	/^  val memIdx = vpn.extract(cfg.nSectors.log2 + cfg.nSets.log2 - 1, cfg.nSectors.log2)$/;"	l
memLatencyMask	src/main/scala/tile/FPU.scala	/^  val memLatencyMask = latencyMask(mem_ctrl, 2)$/;"	l
memOffset	src/main/scala/groundtest/Configs.scala	/^    val memOffset: BigInt = overrideMemOffset.orElse(site(ExtMem).map(_.master.base)).getOrElse(0x0L)$/;"	l
memPathTokenizer	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  implicit def memPathTokenizer[T <: Data]: Tokenizer[SyncReadMem[T]] = tokenizer((m: SyncReadMem[_]) => MemoryPathToken(m.toTarget))$/;"	m
memRegions	src/main/scala/devices/tilelink/Error.scala	/^      val memRegions = DiplomaticObjectModelAddressing.getOMMemoryRegions(name, resourceBindings, None)$/;"	l
memRegions	src/main/scala/devices/tilelink/Zero.scala	/^      val memRegions = DiplomaticObjectModelAddressing.getOMMemoryRegions(name, resourceBindings, None)$/;"	l
memRegions	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val memRegions : Seq[OMMemoryRegion]= DiplomaticObjectModelAddressing.getOMMemoryRegions("BusError", resourceBindings, Some(f))$/;"	l
memRegions	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val memRegions : Seq[OMMemoryRegion]= DiplomaticObjectModelAddressing.getOMMemoryRegions("CLINT", resourceBindings, Some(f))$/;"	l
memRegions	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val memRegions : Seq[OMMemoryRegion]= DiplomaticObjectModelAddressing.getOMMemoryRegions("PLIC", resourceBindings, Some(omRegMap))$/;"	l
memRegions	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val memRegions :Seq[OMMemoryRegion] = DiplomaticObjectModelAddressing$/;"	l
memRegions	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val memRegions: Seq[OMMemoryRegion] = DiplomaticObjectModelAddressing.getOMMemoryRegions("OMMemory", resourceBindings, None)$/;"	l
memRegions	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^        val memRegions = DiplomaticObjectModelAddressing.getOMPortMemoryRegions(name = documentationName, rb)$/;"	l
memRespTag	src/main/scala/tile/LazyRoCC.scala	/^  val memRespTag = io.mem.resp.bits.tag(log2Up(outer.n)-1,0)$/;"	l
memRespTimeout	src/main/scala/groundtest/TraceGen.scala	/^  val memRespTimeout      = 8192$/;"	l
memStart	src/main/scala/groundtest/Tile.scala	/^  val memStart: BigInt$/;"	l
memStart	src/main/scala/groundtest/TraceGen.scala	/^  val memStart            = params.memStart$/;"	l
mem_access	src/main/scala/rocket/NBDcache.scala	/^    val mem_access = Decoupled(new TLBundleA(edge.bundle))$/;"	l
mem_ack	src/main/scala/rocket/NBDcache.scala	/^    val mem_ack = Valid(new TLBundleD(edge.bundle)).flip$/;"	l
mem_acquire	src/main/scala/rocket/NBDcache.scala	/^    val mem_acquire  = Decoupled(new TLBundleA(edge.bundle))$/;"	l
mem_active_valid	src/main/scala/rocket/ICache.scala	/^  val mem_active_valid = Seq(property.CoverBoolean(s2_valid, Seq("mem_active")))$/;"	l
mem_active_valid	src/main/scala/tilelink/SRAM.scala	/^    val mem_active_valid = Seq(property.CoverBoolean(in.d.valid, Seq("mem_active")))$/;"	l
mem_axi4	src/main/scala/subsystem/Ports.scala	/^  val mem_axi4 = InModuleBody { memAXI4Node.makeIOs() }$/;"	l
mem_br_taken	src/main/scala/rocket/RocketCore.scala	/^  val mem_br_taken = Reg(Bool())$/;"	l
mem_br_target	src/main/scala/rocket/RocketCore.scala	/^  val mem_br_target = mem_reg_pc.asSInt +$/;"	l
mem_breakpoint	src/main/scala/rocket/RocketCore.scala	/^  val mem_breakpoint = (mem_reg_load && bpu.io.xcpt_ld) || (mem_reg_store && bpu.io.xcpt_st)$/;"	l
mem_cannot_bypass	src/main/scala/rocket/RocketCore.scala	/^  val mem_cannot_bypass = mem_ctrl.csr =\/= CSR.N || mem_ctrl.mem && mem_mem_cmd_bh || mem_ctrl.mul || mem_ctrl.div || mem_ctrl.fp || mem_ctrl.rocc$/;"	l
mem_cfi	src/main/scala/rocket/RocketCore.scala	/^  val mem_cfi = mem_ctrl.branch || mem_ctrl.jalr || mem_ctrl.jal$/;"	l
mem_cfi_taken	src/main/scala/rocket/RocketCore.scala	/^  val mem_cfi_taken = (mem_ctrl.branch && mem_br_taken) || mem_ctrl.jalr || mem_ctrl.jal$/;"	l
mem_cmd	src/main/scala/rocket/IDecode.scala	/^  val mem_cmd = Bits(width = M_SZ)$/;"	l
mem_cp_valid	src/main/scala/tile/FPU.scala	/^  val mem_cp_valid = Reg(next=ex_cp_valid, init=Bool(false))$/;"	l
mem_ctrl	src/main/scala/rocket/RocketCore.scala	/^  val mem_ctrl = Reg(new IntCtrlSigs)$/;"	l
mem_ctrl	src/main/scala/tile/FPU.scala	/^  val mem_ctrl = RegEnable(ex_ctrl, req_valid)$/;"	l
mem_debug_breakpoint	src/main/scala/rocket/RocketCore.scala	/^  val mem_debug_breakpoint = (mem_reg_load && bpu.io.debug_ld) || (mem_reg_store && bpu.io.debug_st)$/;"	l
mem_direction_misprediction	src/main/scala/rocket/RocketCore.scala	/^  val mem_direction_misprediction = mem_ctrl.branch && mem_br_taken =\/= (usingBTB && mem_reg_btb_resp.taken)$/;"	l
mem_finish	src/main/scala/rocket/NBDcache.scala	/^    val mem_finish = Decoupled(new TLBundleE(edge.bundle))$/;"	l
mem_gen	vsim/Makefile	/^mem_gen = $(VLSI_MEM_GEN)$/;"	m
mem_grant	src/main/scala/rocket/NBDcache.scala	/^    val mem_grant = Valid(new TLBundleD(edge.bundle)).flip$/;"	l
mem_idx	src/main/scala/rocket/ICache.scala	/^    val mem_idx = Mux(refill_one_beat, (refill_idx << log2Ceil(refillCycles)) | refill_cnt,$/;"	l
mem_int_wdata	src/main/scala/rocket/RocketCore.scala	/^  val mem_int_wdata = Mux(!mem_reg_xcpt && (mem_ctrl.jalr ^ mem_npc_misaligned), mem_br_target, mem_reg_wdata.asSInt).asUInt$/;"	l
mem_mem_cmd_bh	src/main/scala/rocket/RocketCore.scala	/^  val mem_mem_cmd_bh =$/;"	l
mem_misprediction	src/main/scala/rocket/RocketCore.scala	/^  val mem_misprediction = if (usingBTB) mem_wrong_npc else mem_cfi_taken$/;"	l
mem_mode	src/main/scala/rocket/ICache.scala	/^  val mem_mode = Seq($/;"	l
mem_npc	src/main/scala/rocket/RocketCore.scala	/^  val mem_npc = (Mux(mem_ctrl.jalr || mem_reg_sfence, encodeVirtualAddress(mem_reg_wdata, mem_reg_wdata).asSInt, mem_br_target) & SInt(-2)).asUInt$/;"	l
mem_npc_misaligned	src/main/scala/rocket/RocketCore.scala	/^  val mem_npc_misaligned = !csr.io.status.isa('c'-'a') && mem_npc(1) && !mem_reg_sfence$/;"	l
mem_part	src/main/scala/rocket/ICache.scala	/^     val mem_part = AddressSet.misaligned(base_address, itim_control_offset)$/;"	l
mem_pc_valid	src/main/scala/rocket/RocketCore.scala	/^  val mem_pc_valid = mem_reg_valid || mem_reg_replay || mem_reg_xcpt_interrupt$/;"	l
mem_reg_btb_resp	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_btb_resp        = Reg(new BTBResp)$/;"	l
mem_reg_cause	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_cause           = Reg(UInt())$/;"	l
mem_reg_flush_pipe	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_flush_pipe      = Reg(Bool())$/;"	l
mem_reg_hls_or_dv	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_hls_or_dv = Reg(Bool())$/;"	l
mem_reg_inst	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_inst = Reg(Bits())$/;"	l
mem_reg_inst	src/main/scala/tile/FPU.scala	/^  val mem_reg_inst = RegEnable(ex_reg_inst, ex_reg_valid)$/;"	l
mem_reg_load	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_load            = Reg(Bool())$/;"	l
mem_reg_mem_size	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_mem_size = Reg(UInt())$/;"	l
mem_reg_pc	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_pc = Reg(UInt())$/;"	l
mem_reg_raw_inst	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_raw_inst = Reg(UInt())$/;"	l
mem_reg_replay	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_replay          = Reg(Bool())$/;"	l
mem_reg_rs2	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_rs2 = Reg(Bits())$/;"	l
mem_reg_rvc	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_rvc             = Reg(Bool())$/;"	l
mem_reg_sfence	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_sfence = Reg(Bool())$/;"	l
mem_reg_slow_bypass	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_slow_bypass     = Reg(Bool())$/;"	l
mem_reg_store	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_store           = Reg(Bool())$/;"	l
mem_reg_valid	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_valid           = Reg(Bool())$/;"	l
mem_reg_valid	src/main/scala/tile/FPU.scala	/^  val mem_reg_valid = RegInit(false.B)$/;"	l
mem_reg_wdata	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_wdata = Reg(Bits())$/;"	l
mem_reg_wphit	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_wphit          = Reg(Vec(nBreakpoints, Bool()))$/;"	l
mem_reg_xcpt	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_xcpt            = Reg(Bool())$/;"	l
mem_reg_xcpt_interrupt	src/main/scala/rocket/RocketCore.scala	/^  val mem_reg_xcpt_interrupt  = Reg(Bool())$/;"	l
mem_resp_data	src/main/scala/rocket/PTW.scala	/^  val mem_resp_data = RegNext(io.mem.resp.bits.data)$/;"	l
mem_resp_valid	src/main/scala/rocket/PTW.scala	/^  val mem_resp_valid = RegNext(io.mem.resp.valid)$/;"	l
mem_scie_pipelined	src/main/scala/rocket/RocketCore.scala	/^  val mem_scie_pipelined = Reg(Bool())$/;"	l
mem_scie_pipelined_wdata	src/main/scala/rocket/RocketCore.scala	/^  val mem_scie_pipelined_wdata = if (!rocketParams.useSCIE) 0.U else {$/;"	l
mem_scie_unpipelined	src/main/scala/rocket/RocketCore.scala	/^  val mem_scie_unpipelined = Reg(Bool())$/;"	l
mem_waddr	src/main/scala/rocket/RocketCore.scala	/^  val mem_waddr = mem_reg_inst(11,7) & regAddrMask$/;"	l
mem_wen	src/main/scala/tile/FPU.scala	/^  val mem_wen = mem_reg_valid && (mem_ctrl.fma || mem_ctrl.fastpipe || mem_ctrl.fromint)$/;"	l
mem_wrong_npc	src/main/scala/rocket/RocketCore.scala	/^  val mem_wrong_npc =$/;"	l
member	src/main/scala/prci/ClockBundles.scala	/^  val member: RecordMap[ClockBundle] = RecordMap(params.members.map { case (k, v) =>$/;"	l
members	src/main/scala/prci/ClockParameters.scala	/^  val members: ListMap[String, ClockEdgeParameters] = ListMap($/;"	l
members	src/main/scala/tilelink/Parameters.scala	/^  def members = Seq(a, b, c, d)$/;"	m
memories	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def memories: Seq[OMSRAM]$/;"	m
memory	scripts/check_comparator_trace.py	/^memory = [[list() for _ in range(0, N_BEATS)] for _ in range(0, N_BLOCKS)]$/;"	v
memoryRegions	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def memoryRegions(): Seq[OMMemoryRegion]$/;"	m
memoryRegions	src/main/scala/diplomaticobjectmodel/model/OMDevice.scala	/^  def memoryRegions: Seq[OMMemoryRegion]$/;"	m
mepc	src/main/scala/rocket/Instructions.scala	/^  val mepc = 0x341$/;"	l
merge	src/main/scala/rocket/Decode.scala	/^  def merge(x: Term) = {$/;"	m
merge	src/main/scala/tilelink/ProbePicker.scala	/^          val merge = head.v1copy($/;"	l
merge	src/main/scala/tilelink/WidthWidget.scala	/^    def merge[T <: TLDataChannel](edgeIn: TLEdge, in: DecoupledIO[T], edgeOut: TLEdge, out: DecoupledIO[T]) = {$/;"	m
mergedMask	src/main/scala/rocket/DCache.scala	/^      val mergedMask = pstore1_mask | Mux(pstore1_merge, mask, 0.U)$/;"	l
merged_pte	src/main/scala/rocket/PTW.scala	/^  val merged_pte = {$/;"	l
message	src/main/scala/linting/rule/LintTruncatingWidths.scala	/^          val message = s"${c.copy(info = NoInfo).serialize} \/\/ Connecting width ${exprWidth} to width ${locWidth}"$/;"	l
message	src/main/scala/util/Property.scala	/^  val message: String$/;"	l
meta	src/main/scala/rocket/HellaCache.scala	/^    val meta = Wire(new L1Metadata)$/;"	l
meta	src/main/scala/rocket/NBDcache.scala	/^  val meta = Module(new L1MetadataArray(onReset _))$/;"	l
meta	src/main/scala/tilelink/Metadata.scala	/^    val meta = Wire(new ClientMetadata)$/;"	l
metaArb	src/main/scala/rocket/DCache.scala	/^  val metaArb = Module(new Arbiter(new DCacheMetadataReq, 8) with InlineInstance)$/;"	l
metaIdx	src/main/scala/rocket/DCache.scala	/^      val metaIdx = metaReq.bits.idx$/;"	l
metaReadArb	src/main/scala/rocket/NBDcache.scala	/^  val metaReadArb = Module(new Arbiter(new L1MetaReadReq, 5))$/;"	l
metaReq	src/main/scala/rocket/DCache.scala	/^      val metaReq = metaArb.io.out$/;"	l
metaWriteArb	src/main/scala/rocket/NBDcache.scala	/^  val metaWriteArb = Module(new Arbiter(new L1MetaWriteReq, 2))$/;"	l
meta_hazard	src/main/scala/rocket/NBDcache.scala	/^  val meta_hazard = Reg(init=UInt(0,2))$/;"	l
meta_read	src/main/scala/rocket/NBDcache.scala	/^    val meta_read = Decoupled(new L1MetaReadReq)$/;"	l
meta_read_arb	src/main/scala/rocket/NBDcache.scala	/^  val meta_read_arb = Module(new Arbiter(new L1MetaReadReq, cfg.nMSHRs))$/;"	l
meta_write	src/main/scala/rocket/NBDcache.scala	/^    val meta_write = Decoupled(new L1MetaWriteReq)$/;"	l
meta_write_arb	src/main/scala/rocket/NBDcache.scala	/^  val meta_write_arb = Module(new Arbiter(new L1MetaWriteReq, cfg.nMSHRs))$/;"	l
metabits	src/main/scala/rocket/HellaCache.scala	/^  val metabits = rstVal.getWidth$/;"	l
method	src/main/scala/diplomacy/CloneModule.scala	/^    val method = classOf[RawModule].getDeclaredMethod("_commands")$/;"	l
mfrId	src/main/scala/jtag/JtagUtils.scala	/^  val mfrId = UInt(11.W)$/;"	l
mfr_id	src/main/scala/devices/debug/DebugTransport.scala	/^  val mfr_id = Input(UInt(11.W))$/;"	l
mhartid	src/main/scala/rocket/Instructions.scala	/^  val mhartid = 0xf14$/;"	l
mhpmcounter10	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter10 = 0xb0a$/;"	l
mhpmcounter10h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter10h = 0xb8a$/;"	l
mhpmcounter11	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter11 = 0xb0b$/;"	l
mhpmcounter11h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter11h = 0xb8b$/;"	l
mhpmcounter12	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter12 = 0xb0c$/;"	l
mhpmcounter12h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter12h = 0xb8c$/;"	l
mhpmcounter13	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter13 = 0xb0d$/;"	l
mhpmcounter13h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter13h = 0xb8d$/;"	l
mhpmcounter14	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter14 = 0xb0e$/;"	l
mhpmcounter14h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter14h = 0xb8e$/;"	l
mhpmcounter15	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter15 = 0xb0f$/;"	l
mhpmcounter15h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter15h = 0xb8f$/;"	l
mhpmcounter16	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter16 = 0xb10$/;"	l
mhpmcounter16h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter16h = 0xb90$/;"	l
mhpmcounter17	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter17 = 0xb11$/;"	l
mhpmcounter17h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter17h = 0xb91$/;"	l
mhpmcounter18	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter18 = 0xb12$/;"	l
mhpmcounter18h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter18h = 0xb92$/;"	l
mhpmcounter19	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter19 = 0xb13$/;"	l
mhpmcounter19h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter19h = 0xb93$/;"	l
mhpmcounter20	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter20 = 0xb14$/;"	l
mhpmcounter20h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter20h = 0xb94$/;"	l
mhpmcounter21	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter21 = 0xb15$/;"	l
mhpmcounter21h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter21h = 0xb95$/;"	l
mhpmcounter22	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter22 = 0xb16$/;"	l
mhpmcounter22h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter22h = 0xb96$/;"	l
mhpmcounter23	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter23 = 0xb17$/;"	l
mhpmcounter23h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter23h = 0xb97$/;"	l
mhpmcounter24	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter24 = 0xb18$/;"	l
mhpmcounter24h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter24h = 0xb98$/;"	l
mhpmcounter25	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter25 = 0xb19$/;"	l
mhpmcounter25h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter25h = 0xb99$/;"	l
mhpmcounter26	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter26 = 0xb1a$/;"	l
mhpmcounter26h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter26h = 0xb9a$/;"	l
mhpmcounter27	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter27 = 0xb1b$/;"	l
mhpmcounter27h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter27h = 0xb9b$/;"	l
mhpmcounter28	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter28 = 0xb1c$/;"	l
mhpmcounter28h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter28h = 0xb9c$/;"	l
mhpmcounter29	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter29 = 0xb1d$/;"	l
mhpmcounter29h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter29h = 0xb9d$/;"	l
mhpmcounter3	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter3 = 0xb03$/;"	l
mhpmcounter30	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter30 = 0xb1e$/;"	l
mhpmcounter30h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter30h = 0xb9e$/;"	l
mhpmcounter31	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter31 = 0xb1f$/;"	l
mhpmcounter31h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter31h = 0xb9f$/;"	l
mhpmcounter3h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter3h = 0xb83$/;"	l
mhpmcounter4	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter4 = 0xb04$/;"	l
mhpmcounter4h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter4h = 0xb84$/;"	l
mhpmcounter5	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter5 = 0xb05$/;"	l
mhpmcounter5h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter5h = 0xb85$/;"	l
mhpmcounter6	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter6 = 0xb06$/;"	l
mhpmcounter6h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter6h = 0xb86$/;"	l
mhpmcounter7	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter7 = 0xb07$/;"	l
mhpmcounter7h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter7h = 0xb87$/;"	l
mhpmcounter8	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter8 = 0xb08$/;"	l
mhpmcounter8h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter8h = 0xb88$/;"	l
mhpmcounter9	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter9 = 0xb09$/;"	l
mhpmcounter9h	src/main/scala/rocket/Instructions.scala	/^  val mhpmcounter9h = 0xb89$/;"	l
mhpmevent10	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent10 = 0x32a$/;"	l
mhpmevent11	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent11 = 0x32b$/;"	l
mhpmevent12	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent12 = 0x32c$/;"	l
mhpmevent13	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent13 = 0x32d$/;"	l
mhpmevent14	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent14 = 0x32e$/;"	l
mhpmevent15	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent15 = 0x32f$/;"	l
mhpmevent16	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent16 = 0x330$/;"	l
mhpmevent17	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent17 = 0x331$/;"	l
mhpmevent18	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent18 = 0x332$/;"	l
mhpmevent19	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent19 = 0x333$/;"	l
mhpmevent20	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent20 = 0x334$/;"	l
mhpmevent21	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent21 = 0x335$/;"	l
mhpmevent22	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent22 = 0x336$/;"	l
mhpmevent23	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent23 = 0x337$/;"	l
mhpmevent24	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent24 = 0x338$/;"	l
mhpmevent25	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent25 = 0x339$/;"	l
mhpmevent26	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent26 = 0x33a$/;"	l
mhpmevent27	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent27 = 0x33b$/;"	l
mhpmevent28	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent28 = 0x33c$/;"	l
mhpmevent29	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent29 = 0x33d$/;"	l
mhpmevent3	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent3 = 0x323$/;"	l
mhpmevent30	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent30 = 0x33e$/;"	l
mhpmevent31	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent31 = 0x33f$/;"	l
mhpmevent4	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent4 = 0x324$/;"	l
mhpmevent5	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent5 = 0x325$/;"	l
mhpmevent6	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent6 = 0x326$/;"	l
mhpmevent7	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent7 = 0x327$/;"	l
mhpmevent8	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent8 = 0x328$/;"	l
mhpmevent9	src/main/scala/rocket/Instructions.scala	/^  val mhpmevent9 = 0x329$/;"	l
mideleg	src/main/scala/rocket/Instructions.scala	/^  val mideleg = 0x303$/;"	l
mie	src/main/scala/rocket/CSR.scala	/^  val mie   = Bool()$/;"	l
mie	src/main/scala/rocket/CSR.scala	/^  val mie = Bool()$/;"	l
mie	src/main/scala/rocket/Instructions.scala	/^  val mie = 0x304$/;"	l
mightFire	src/main/scala/util/ReadyValidCancel.scala	/^  def mightFire(): Bool = ready && earlyValid$/;"	m
might_request	src/main/scala/rocket/Frontend.scala	/^  val might_request = Bool(OUTPUT)$/;"	l
mimpid	src/main/scala/rocket/Instructions.scala	/^  val mimpid = 0xf13$/;"	l
mimpid	src/main/scala/rocket/RocketCore.scala	/^  def mimpid = CustomCSR.constant(CSRs.mimpid, BigInt(rocketParams.mimpid))$/;"	m
min	src/main/scala/rocket/AMOALU.scala	/^  val min = io.cmd === M_XA_MIN || io.cmd === M_XA_MINU$/;"	l
min	src/main/scala/util/LanePositionedQueue.scala	/^  def min(x: UInt, y: UInt, lanes: Int) = {$/;"	m
minAlignment	src/main/scala/amba/ahb/Parameters.scala	/^  val minAlignment = address.map(_.alignment).min$/;"	l
minAlignment	src/main/scala/amba/apb/Parameters.scala	/^  val minAlignment = address.map(_.alignment).min$/;"	l
minAlignment	src/main/scala/amba/axi4/Parameters.scala	/^  val minAlignment = address.map(_.alignment).min$/;"	l
minAlignment	src/main/scala/tilelink/Parameters.scala	/^  val minAlignment = address.map(_.alignment).min$/;"	l
minBase	src/main/scala/diplomacy/Resources.scala	/^    val minBase = map.map(_.base).min$/;"	l
minFLen	src/main/scala/tile/Core.scala	/^  def minFLen: Int = 32$/;"	m
minFLen	src/main/scala/tile/Core.scala	/^  val minFLen = coreParams.fpu.map(_ => coreParams.minFLen).getOrElse(0)$/;"	l
minFLen	src/main/scala/tile/FPU.scala	/^  val minFLen: Int$/;"	l
minLatency	src/main/scala/rocket/Multiplier.scala	/^  def minLatency: Int = (minDivLatency ++ minMulLatency).min$/;"	m
minLatency	src/main/scala/tilelink/Parameters.scala	/^  val minLatency:     Int,$/;"	l
minLatency	src/main/scala/tilelink/Parameters.scala	/^  val minLatency:    Int,$/;"	l
minMaxTransfer	src/main/scala/amba/ahb/Parameters.scala	/^  val minMaxTransfer = min(supportsWrite.max, supportsRead.max)$/;"	l
minMaxTransfer	src/main/scala/amba/ahb/Parameters.scala	/^  val minMaxTransfer = slaves.map(_.minMaxTransfer).min \/\/ useful for fragmentation$/;"	l
minPgLevels	src/main/scala/tile/BaseTile.scala	/^  def minPgLevels: Int = {$/;"	m
minPriorities	src/main/scala/devices/tilelink/Plic.scala	/^  def minPriorities = min(params.maxPriorities, nDevices)$/;"	m
minType	src/main/scala/tile/FPU.scala	/^  def minType = floatTypes.head$/;"	m
minVAddrBits	src/main/scala/rocket/TLB.scala	/^    val minVAddrBits = pgIdxBits + minPgLevels * pgLevelBits + extraBits$/;"	l
minVLMax	src/main/scala/rocket/CSR.scala	/^  def minVLMax: Int = ((maxVLMax \/ eLen) >> ((1 << vlmul_mag.getWidth) - 1)) max 1$/;"	m
minXLen	src/main/scala/rocket/AMOALU.scala	/^  val minXLen = 32$/;"	l
minXLen	src/main/scala/tile/FPU.scala	/^  val minXLen = 32$/;"	l
mincover	src/main/scala/diplomacy/Parameters.scala	/^  def mincover(seq: Seq[TransferSizes]) = seq.foldLeft(none)(_ mincover _)$/;"	m
mincover	src/main/scala/diplomacy/Parameters.scala	/^  def mincover(x: TransferSizes) = {$/;"	m
mincover	src/main/scala/tilelink/Parameters.scala	/^  def mincover(rhs: TLMasterToSlaveTransferSizes) = TLMasterToSlaveTransferSizes($/;"	m
mincover	src/main/scala/tilelink/Parameters.scala	/^  def mincover(rhs: TLSlaveToMasterTransferSizes) = TLSlaveToMasterTransferSizes($/;"	m
minmax	src/main/scala/rocket/AMOALU.scala	/^  val minmax = Mux(Mux(less, min, max), io.lhs, io.rhs)$/;"	l
minstret	src/main/scala/rocket/Instructions.scala	/^  val minstret = 0xb02$/;"	l
minstreth	src/main/scala/rocket/Instructions.scala	/^  val minstreth = 0xb82$/;"	l
mint	src/main/scala/rocket/Decode.scala	/^      val mint = termvalues.filter { case (k,t) => ((t.mask >> i) & 1) == 0 && ((t.value >> i) & 1) == 1 }.map(_._1)$/;"	l
mint	src/main/scala/rocket/Decode.scala	/^    var mint = minterms.map(t => new Term(t.value, t.mask))$/;"	l
mintstatus	src/main/scala/rocket/Instructions.scala	/^  val mintstatus = 0x346$/;"	l
mip	src/main/scala/rocket/CSR.scala	/^  val mip = Wire(init=reg_mip)$/;"	l
mip	src/main/scala/rocket/Instructions.scala	/^  val mip = 0x344$/;"	l
misa	src/main/scala/rocket/Instructions.scala	/^  val misa = 0x301$/;"	l
misaWritable	src/main/scala/tile/Core.scala	/^  val misaWritable: Boolean$/;"	l
misaligned	src/main/scala/diplomacy/Parameters.scala	/^  def misaligned(base: BigInt, size: BigInt, tail: Seq[AddressSet] = Seq()): Seq[AddressSet] = {$/;"	m
misaligned	src/main/scala/rocket/AMOALU.scala	/^  def misaligned =$/;"	m
misaligned	src/main/scala/rocket/TLB.scala	/^  val misaligned = (io.req.bits.vaddr & (UIntToOH(io.req.bits.size) - 1)).orR$/;"	l
misaligned_fetch	src/main/scala/rocket/Instructions.scala	/^  val misaligned_fetch = 0x0$/;"	l
misaligned_load	src/main/scala/rocket/Instructions.scala	/^  val misaligned_load = 0x4$/;"	l
misaligned_store	src/main/scala/rocket/Instructions.scala	/^  val misaligned_store = 0x6$/;"	l
mismatch	src/main/scala/tilelink/ToAXI4.scala	/^        val mismatch = if (maxCount > 1) { write =\/= arw.wen } else { Bool(false) }$/;"	l
mispredict	src/main/scala/rocket/BTB.scala	/^  val mispredict = Bool()$/;"	l
miss	src/main/scala/rocket/TLB.scala	/^  val miss = Bool()$/;"	l
miss	src/main/scala/util/Replacement.scala	/^  def miss = access(way)$/;"	m
miss	src/main/scala/util/Replacement.scala	/^  def miss = replace := true.B$/;"	m
miss	src/main/scala/util/Replacement.scala	/^  def miss: Unit$/;"	m
miss_coh	src/main/scala/rocket/NBDcache.scala	/^  val miss_coh = ClientMetadata.onReset$/;"	l
mixI	src/main/scala/diplomacy/Nodes.scala	/^  def mixI(pu: UI, node: InwardNode[DI, UI, BI]): UI = pu$/;"	m
mixO	src/main/scala/diplomacy/Nodes.scala	/^  def mixO(pd: DO, node: OutwardNode[DO, UO, BO]): DO = pd$/;"	m
mmioAXI4Node	src/main/scala/subsystem/Ports.scala	/^  val mmioAXI4Node = AXI4SlaveNode($/;"	l
mmioAddressPrefixNexusNode	src/main/scala/tile/BaseTile.scala	/^  val mmioAddressPrefixNexusNode = BundleBridgeNexus[UInt]($/;"	l
mmioAddressPrefixNode	src/main/scala/tile/BaseTile.scala	/^  val mmioAddressPrefixNode: BundleBridgeInwardNode[UInt] =$/;"	l
mmioAddressPrefixSinkNodeOpt	src/main/scala/rocket/HellaCache.scala	/^  val mmioAddressPrefixSinkNodeOpt = cfg.scratch.map(_ => BundleBridgeSink[UInt]())$/;"	l
mmioAddressPrefixSinkNodeOpt	src/main/scala/rocket/ICache.scala	/^  val mmioAddressPrefixSinkNodeOpt = icacheParams.itimAddr.map(_ => BundleBridgeSink[UInt]())$/;"	l
mmioBaseAddressPrefixWhere	src/main/scala/subsystem/HasTiles.scala	/^  def mmioBaseAddressPrefixWhere: TLBusWrapperLocation$/;"	m
mmioOffset	src/main/scala/rocket/DCache.scala	/^  val mmioOffset = outer.firstMMIO$/;"	l
mmioTLNode	src/main/scala/subsystem/Ports.scala	/^  val mmioTLNode = TLManagerNode($/;"	l
mmio_alloc_arb	src/main/scala/rocket/NBDcache.scala	/^  val mmio_alloc_arb = Module(new Arbiter(Bool(), nIOMSHRs))$/;"	l
mmio_axi4	src/main/scala/subsystem/Ports.scala	/^  val mmio_axi4 = InModuleBody { mmioAXI4Node.makeIOs() }$/;"	l
mmio_mem	src/main/scala/system/SimAXIMem.scala	/^      val mmio_mem = LazyModule(new SimAXIMem(edge, base = p(ExtBus).get.base, size = 4096))$/;"	l
mmio_rdy	src/main/scala/rocket/NBDcache.scala	/^  var mmio_rdy = Bool(false)$/;"	l
mmio_tl	src/main/scala/subsystem/Ports.scala	/^  val mmio_tl = InModuleBody {$/;"	l
mmios	src/main/scala/rocket/NBDcache.scala	/^  val mmios = (0 until nIOMSHRs) map { i =>$/;"	l
mmu	src/main/scala/tile/BaseTile.scala	/^    val mmu =$/;"	l
mncause	src/main/scala/rocket/Instructions.scala	/^  val mncause = 0x352$/;"	l
mnepc	src/main/scala/rocket/Instructions.scala	/^  val mnepc = 0x351$/;"	l
mnscratch	src/main/scala/rocket/Instructions.scala	/^  val mnscratch = 0x350$/;"	l
mnstatus	src/main/scala/rocket/Instructions.scala	/^  val mnstatus = 0x353$/;"	l
mnxti	src/main/scala/rocket/Instructions.scala	/^  val mnxti = 0x345$/;"	l
mod	src/main/scala/diplomacy/CloneModule.scala	/^    val mod = Module(new CloneModule(model.asInstanceOf[RawModule]))$/;"	l
mod	src/main/scala/diplomacy/LazyModule.scala	/^      val mod = Module(c.module)$/;"	l
modMap	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^    val modMap = state.circuit.modules.collect {$/;"	l
modMap	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val modMap = state.circuit.modules.collect {$/;"	l
mode	src/main/scala/rocket/CSR.scala	/^  def mode(addr: Int): Int = (addr >> modeLSB) % (1 << PRV.SZ)$/;"	m
mode	src/main/scala/rocket/CSR.scala	/^  def mode(addr: UInt): UInt = addr(modeLSB + PRV.SZ - 1, modeLSB)$/;"	m
mode	src/main/scala/rocket/CSR.scala	/^  val mode = UInt(width = modeBits)$/;"	l
modeLSB	src/main/scala/rocket/CSR.scala	/^  def modeLSB: Int = 8$/;"	m
mode_ok	src/main/scala/rocket/CSR.scala	/^        val mode_ok = new_vsatp.mode.isOneOf(satp_valid_modes.map(_.U))$/;"	l
model	src/main/scala/amba/ahb/Test.scala	/^  val model = LazyModule(new TLRAMModel("AHBFuzzMaster", ignoreCorruptData=false))$/;"	l
model	src/main/scala/amba/ahb/Test.scala	/^  val model = LazyModule(new TLRAMModel("AHBFuzzNative"))$/;"	l
model	src/main/scala/amba/apb/Test.scala	/^  val model = LazyModule(new TLRAMModel("APBFuzzMaster"))$/;"	l
model	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val model = LazyModule(new TLRAMModel("AsyncCrossing"))$/;"	l
model	src/main/scala/amba/axi4/Credited.scala	/^  val model = LazyModule(new TLRAMModel("AXI4CreditedCrossing"))$/;"	l
model	src/main/scala/amba/axi4/Test.scala	/^  val model = LazyModule(new TLRAMModel("AXI4FullFuzzRAM"))$/;"	l
model	src/main/scala/amba/axi4/Test.scala	/^  val model = LazyModule(new TLRAMModel("AXI4FuzzMaster"))$/;"	l
model	src/main/scala/amba/axi4/Test.scala	/^  val model = LazyModule(new TLRAMModel("AXI4LiteFuzzRAM"))$/;"	l
model	src/main/scala/devices/tilelink/TestRAM.scala	/^  val model = LazyModule(new TLRAMModel("ZeroDelay"))$/;"	l
model	src/main/scala/diplomacy/Resources.scala	/^      val model = resources("model").map(_.value)$/;"	l
model	src/main/scala/subsystem/BaseSubsystem.scala	/^    val model = p(DTSModel)$/;"	l
model	src/main/scala/tilelink/AsyncCrossing.scala	/^  val model = LazyModule(new TLRAMModel("AsyncCrossing"))$/;"	l
model	src/main/scala/tilelink/AtomicAutomata.scala	/^  val model = LazyModule(new TLRAMModel("AtomicAutomata"))$/;"	l
model	src/main/scala/tilelink/Credited.scala	/^  val model = LazyModule(new TLRAMModel("CreditedCrossing"))$/;"	l
model	src/main/scala/tilelink/Fragmenter.scala	/^  val model = LazyModule(new TLRAMModel("Fragmenter"))$/;"	l
model	src/main/scala/tilelink/Fuzzer.scala	/^  val model = LazyModule(new TLRAMModel("TLFuzzRAM"))$/;"	l
model	src/main/scala/tilelink/HintHandler.scala	/^  val model = LazyModule(new TLRAMModel("HintHandler"))$/;"	l
model	src/main/scala/tilelink/RAMModel.scala	/^    val model = LazyModule(new TLRAMModel(log, ignoreCorruptData, ignoreDeniedData))$/;"	l
model	src/main/scala/tilelink/RationalCrossing.scala	/^  val model = LazyModule(new TLRAMModel(name))$/;"	l
model	src/main/scala/tilelink/SRAM.scala	/^  val model = LazyModule(new TLRAMModel("SRAMSimple"))$/;"	l
model	src/main/scala/tilelink/WidthWidget.scala	/^  val model = LazyModule(new TLRAMModel("WidthWidget"))$/;"	l
model	src/main/scala/tilelink/Xbar.scala	/^  val model = LazyModule(new TLRAMModel("Xbar"))$/;"	l
model1	src/main/scala/devices/tilelink/MasterMux.scala	/^  val model1 = LazyModule(new TLRAMModel("MasterMux1"))$/;"	l
model2	src/main/scala/devices/tilelink/MasterMux.scala	/^  val model2 = LazyModule(new TLRAMModel("MasterMux2"))$/;"	l
modes	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^      val modes = targets.map {$/;"	l
modifiable	src/main/scala/amba/package.scala	/^    val modifiable = Bool() \/\/ legal to read\/write-combine\/expand this request?$/;"	l
mods	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^        val mods = violations.getOrElse((info, msg), Set.empty)$/;"	l
mods	src/main/scala/linting/rule/package.scala	/^      val mods = violations.getOrElse((info, message), Set.empty)$/;"	l
module	src/main/scala/amba/ahb/AHBLite.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/ahb/RegisterRouter.scala	/^  lazy val module = moduleBuilder(bundleBuilder(AHBRegBundleArg()), this)$/;"	l
module	src/main/scala/amba/ahb/SRAM.scala	/^  lazy val module = new LazyModuleImp(this) with HasJustOneSeqMem {$/;"	l
module	src/main/scala/amba/ahb/Test.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/amba/ahb/Test.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/ahb/ToTL.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/ahb/Xbar.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/apb/RegisterRouter.scala	/^  lazy val module = moduleBuilder(bundleBuilder(APBRegBundleArg()), this)$/;"	l
module	src/main/scala/amba/apb/SRAM.scala	/^  lazy val module = new LazyModuleImp(this) with HasJustOneSeqMem {$/;"	l
module	src/main/scala/amba/apb/Test.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/amba/apb/ToTL.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/apb/Xbar.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/Buffer.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/Credited.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/amba/axi4/Credited.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/Deinterleaver.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/Delayer.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/Filter.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/Fragmenter.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/IdIndexer.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/RegisterRouter.scala	/^  lazy val module = moduleBuilder(bundleBuilder(AXI4RegBundleArg()), this)$/;"	l
module	src/main/scala/amba/axi4/SRAM.scala	/^  lazy val module = new LazyModuleImp(this) with HasJustOneSeqMem {$/;"	l
module	src/main/scala/amba/axi4/Test.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/amba/axi4/Test.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/ToTL.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/UserYanker.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axi4/Xbar.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/amba/axi4/Xbar.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axis/Buffer.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/amba/axis/Xbar.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/debug/APB.scala	/^  lazy val module = new LazyModuleImp(this){$/;"	l
module	src/main/scala/devices/debug/Custom.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/debug/DMI.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/debug/Debug.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/debug/Debug.scala	/^  lazy val module = new LazyModuleImp(this){$/;"	l
module	src/main/scala/devices/debug/Debug.scala	/^  lazy val module = new LazyRawModuleImp(this) {$/;"	l
module	src/main/scala/devices/debug/SBA.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/BootROM.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/BusBlocker.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/BusBypass.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/CLINT.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/ClockBlocker.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/Deadlock.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/Error.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/MaskROM.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/MasterMux.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/devices/tilelink/MasterMux.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/Plic.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/TestRAM.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/devices/tilelink/TestRAM.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/devices/tilelink/Zero.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/diplomacy/BundleBridge.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/diplomacy/LazyModule.scala	/^  def module: LazyModuleImpLike$/;"	m
module	src/main/scala/diplomacy/LazyModule.scala	/^  lazy val module = new LazyModuleImp(this)$/;"	l
module	src/main/scala/examples/ExampleDevice.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/interrupts/BlockDuringReset.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/interrupts/Crossing.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/interrupts/NullIntSource.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/interrupts/Xbar.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/prci/ClockDivider.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/prci/ClockDomain.scala	/^  lazy val module = new LazyRawModuleImp(this) {$/;"	l
module	src/main/scala/prci/ClockGroup.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/prci/ClockGroup.scala	/^  lazy val module = new LazyRawModuleImp(this) {$/;"	l
module	src/main/scala/prci/ResetStretcher.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/prci/ResetSynchronizer.scala	/^  lazy val module = new LazyRawModuleImp(this) {$/;"	l
module	src/main/scala/prci/ResetWrangler.scala	/^  lazy val module = new LazyRawModuleImp(this) {$/;"	l
module	src/main/scala/prci/TestClockSource.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/regmapper/Test.scala	/^  lazy val module = new LazyModuleImp(this) { regmap(RRTest0Map.map:_*) }$/;"	l
module	src/main/scala/regmapper/Test.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/rocket/Frontend.scala	/^  lazy val module = new FrontendModule(this)$/;"	l
module	src/main/scala/rocket/Frontend.scala	/^  val module: HasICacheFrontendModule$/;"	l
module	src/main/scala/rocket/HellaCache.scala	/^  val module: HasHellaCacheModule$/;"	l
module	src/main/scala/rocket/HellaCache.scala	/^  val module: HellaCacheModule$/;"	l
module	src/main/scala/rocket/ICache.scala	/^  lazy val module = new ICacheModule(this)$/;"	l
module	src/main/scala/rocket/PTW.scala	/^  val module: CanHavePTWModule$/;"	l
module	src/main/scala/rocket/ScratchpadSlavePort.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tile/BaseTile.scala	/^  def module: BaseTileModuleImp[BaseTile]$/;"	m
module	src/main/scala/tile/BusErrorUnit.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tile/LazyRoCC.scala	/^  val module: LazyRoCCModuleImp$/;"	l
module	src/main/scala/tilelink/AddressAdjuster.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/AsyncCrossing.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/AsyncCrossing.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/AtomicAutomata.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/AtomicAutomata.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/BankBinder.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/BlockDuringReset.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Broadcast.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Buffer.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/CacheCork.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Credited.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/Credited.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Delayer.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/ErrorEvaluator.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/FIFOFixer.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Filter.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Fragmenter.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/Fragmenter.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Fuzzer.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/Fuzzer.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/HintHandler.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/HintHandler.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Isolation.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Jbar.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/Jbar.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Map.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/PatternPusher.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/ProbePicker.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/RAMModel.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/RationalCrossing.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/RationalCrossing.scala	/^  lazy val module = new LazyModuleImp(this) { }$/;"	l
module	src/main/scala/tilelink/RationalCrossing.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/RegionReplication.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/RegisterRouter.scala	/^    val module = Module.currentModule.get.asInstanceOf[RawModule]$/;"	l
module	src/main/scala/tilelink/RegisterRouter.scala	/^  lazy val module = moduleBuilder(bundleBuilder(TLRegBundleArg()), this)$/;"	l
module	src/main/scala/tilelink/RegisterRouterTest.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/SRAM.scala	/^  lazy val module = new LazyModuleImp(this) with HasJustOneSeqMem {$/;"	l
module	src/main/scala/tilelink/SRAM.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/SourceShrinker.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/ToAHB.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/ToAPB.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/ToAXI4.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/WidthWidget.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/WidthWidget.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/tilelink/Xbar.scala	/^  lazy val module = new LazyModuleImp(this) with UnitTestModule {$/;"	l
module	src/main/scala/tilelink/Xbar.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
module	src/main/scala/unittest/TestGenerator.scala	/^  lazy val module = new LazyModuleImp(this) {$/;"	l
moduleName	src/main/scala/diplomacy/LazyModule.scala	/^  lazy val moduleName: String = module.name$/;"	l
moduleName	src/main/scala/util/Annotations.scala	/^    val moduleName = rawModule.name$/;"	l
modulePathTokenizer	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  implicit def modulePathTokenizer: Tokenizer[BaseModule] = tokenizer((m: BaseModule) => ModulePathToken(m.toTarget))$/;"	m
moduleToDesiredName	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^    val moduleToDesiredName: mutable.Map[String, mutable.Set[String]] = mutable.Map()$/;"	l
moduleToDesiredName	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val moduleToDesiredName: mutable.Map[String, mutable.Set[String]] = mutable.Map()$/;"	l
moduleValue	src/main/scala/diplomacy/package.scala	/^  implicit def moduleValue[T](value: ModuleValue[T]): T = value.getWrappedValue$/;"	m
modules	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val modules = circuit.modules.map {$/;"	l
monAssert	src/main/scala/tilelink/Monitor.scala	/^  def monAssert(cond: Bool, message: String): Unit =$/;"	m
monitor	src/main/scala/amba/ahb/Nodes.scala	/^      val monitor = Module(builder(AHBMasterMonitorArgs(edge)))$/;"	l
monitor	src/main/scala/amba/ahb/Nodes.scala	/^      val monitor = Module(builder(AHBSlaveMonitorArgs(edge)))$/;"	l
monitor	src/main/scala/amba/apb/Nodes.scala	/^      val monitor = Module(builder(APBMonitorArgs(edge)))$/;"	l
monitor	src/main/scala/amba/axi4/Nodes.scala	/^      val monitor = Module(builder(AXI4MonitorArgs(edge)))$/;"	l
monitor	src/main/scala/diplomacy/Nodes.scala	/^  def monitor(bundle: BI, edge: EI): Unit = {}$/;"	m
monitor	src/main/scala/tilelink/Nodes.scala	/^    val monitor = Module(edge.params(TLMonitorBuilder)(TLMonitorArgs(edge)))$/;"	l
monitorAndNotCancel	src/main/scala/tilelink/Bundle_ACancel.scala	/^  def monitorAndNotCancel(): TLBundle = {$/;"	m
moreRecentVec	src/main/scala/util/Replacement.scala	/^    val moreRecentVec = Wire(Vec(n_ways-1, UInt(n_ways.W)))$/;"	l
moreRecentVec	src/main/scala/util/Replacement.scala	/^    val moreRecentVec = extractMRUVec(state)  \/\/ reconstruct lower triangular matrix$/;"	l
moved	src/main/scala/util/LanePositionedQueue.scala	/^    val moved = min(ready, x.valid, limit)$/;"	l
mpcand	src/main/scala/rocket/Multiplier.scala	/^    val mpcand = divisor.asSInt$/;"	l
mpie	src/main/scala/rocket/CSR.scala	/^  val mpie = Bool()$/;"	l
mplier	src/main/scala/rocket/Multiplier.scala	/^    val mplier = mulReg(mulw-1,0)$/;"	l
mplierSign	src/main/scala/rocket/Multiplier.scala	/^    val mplierSign = remainder(w)$/;"	l
mpp	src/main/scala/rocket/CSR.scala	/^  val mpp   = UInt(2.W)$/;"	l
mpp	src/main/scala/rocket/CSR.scala	/^  val mpp = UInt(width = 2)$/;"	l
mprv	src/main/scala/rocket/CSR.scala	/^  val mprv = Bool()$/;"	l
mpu_physaddr	src/main/scala/rocket/TLB.scala	/^  val mpu_physaddr = Cat(mpu_ppn, io.req.bits.vaddr(pgIdxBits-1, 0))$/;"	l
mpu_ppn	src/main/scala/rocket/TLB.scala	/^  val mpu_ppn = Mux(do_refill, refill_ppn,$/;"	l
mpu_priv	src/main/scala/rocket/TLB.scala	/^  val mpu_priv = Mux[UInt](Bool(usingVM) && (do_refill || io.req.bits.passthrough \/* PTW *\/), PRV.S, Cat(io.ptw.status.debug, priv))$/;"	l
mpv	src/main/scala/rocket/CSR.scala	/^  val mpv   = Bool()$/;"	l
mpv	src/main/scala/rocket/CSR.scala	/^  val mpv = Bool()$/;"	l
mruWayDec	src/main/scala/util/Replacement.scala	/^    val mruWayDec     = (0 until n_ways).map { i =>$/;"	l
msb	src/main/scala/rocket/RocketCore.scala	/^    val msb = Mux(a === 0.S || a === -1.S, ea(vaddrBits), !ea(vaddrBits-1))$/;"	l
msbMatch	src/main/scala/rocket/PMP.scala	/^      val msbMatch = eval(x >> lgMaxSize, comparand >> lgMaxSize, mask >> lgMaxSize)$/;"	l
msbs	src/main/scala/rocket/ICache.scala	/^    val msbs = (idxBits+blockOffBits > pgUntagBits).option(vaddr(idxBits+blockOffBits-1, pgUntagBits))$/;"	l
msbsEqual	src/main/scala/rocket/PMP.scala	/^      val msbsEqual = ((x >> lgMaxSize) ^ (comparand >> lgMaxSize)) === 0$/;"	l
msbsLess	src/main/scala/rocket/PMP.scala	/^      val msbsLess = (x >> lgMaxSize) < (comparand >> lgMaxSize)$/;"	l
mscratch	src/main/scala/rocket/Instructions.scala	/^  val mscratch = 0x340$/;"	l
mscratchcsw	src/main/scala/rocket/Instructions.scala	/^  val mscratchcsw = 0x348$/;"	l
mscratchcswl	src/main/scala/rocket/Instructions.scala	/^  val mscratchcswl = 0x349$/;"	l
mselect	src/main/scala/rocket/Breakpoint.scala	/^  val mselect = Bool()$/;"	l
mselectPos	src/main/scala/rocket/Breakpoint.scala	/^  def mselectPos: Int = if (xLen == 32) 25 else 50$/;"	m
msg	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^        val msg = s"Module conflicts for desired name $desiredName: ${modules.map(_.name).mkString(", ")}"$/;"	l
mshr	src/main/scala/rocket/NBDcache.scala	/^    val mshr = Module(new IOMSHR(id))$/;"	l
mshr	src/main/scala/rocket/NBDcache.scala	/^    val mshr = Module(new MSHR(i))$/;"	l
mshr	src/main/scala/tilelink/Broadcast.scala	/^  val mshr    = UInt(params.mshrBits.W)$/;"	l
mshrBits	src/main/scala/tilelink/Broadcast.scala	/^  val mshrBits = log2Ceil(mshrs)$/;"	l
mshr_rdy	src/main/scala/rocket/NBDcache.scala	/^    val mshr_rdy = Bool(INPUT)$/;"	l
mshrs	src/main/scala/rocket/NBDcache.scala	/^  val mshrs = (0 until cfg.nMSHRs) map { i =>$/;"	l
mshrs	src/main/scala/rocket/NBDcache.scala	/^  val mshrs = Module(new MSHRFile)$/;"	l
msip	src/main/scala/rocket/CSR.scala	/^  val msip = Bool()$/;"	l
msip	src/main/scala/tile/Interrupts.scala	/^  val msip = Bool()$/;"	l
msipBytes	src/main/scala/devices/tilelink/CLINT.scala	/^  def msipBytes = 4$/;"	m
msipOffset	src/main/scala/devices/tilelink/CLINT.scala	/^  def msipOffset(hart: Int) = hart * msipBytes$/;"	m
mstatus	src/main/scala/rocket/Instructions.scala	/^  val mstatus = 0x300$/;"	l
mtBmarks	src/main/scala/system/RocketTestSuite.scala	/^  val mtBmarks = new BenchmarkTestSuite("mt", "$(RISCV)\/riscv64-unknown-elf\/share\/riscv-tests\/mt",$/;"	l
mtinst	src/main/scala/rocket/Instructions.scala	/^  val mtinst = 0x34a$/;"	l
mtip	src/main/scala/rocket/CSR.scala	/^  val mtip = Bool()$/;"	l
mtip	src/main/scala/tile/Interrupts.scala	/^  val mtip = Bool()$/;"	l
mtval	src/main/scala/rocket/Instructions.scala	/^  val mtval = 0x343$/;"	l
mtval2	src/main/scala/rocket/Instructions.scala	/^  val mtval2 = 0x34b$/;"	l
mtvec	src/main/scala/rocket/Instructions.scala	/^  val mtvec = 0x305$/;"	l
mtvecBaseAlign	src/main/scala/rocket/CSR.scala	/^  def mtvecBaseAlign = 2$/;"	m
mtvecInit	src/main/scala/tile/Core.scala	/^  val mtvecInit = coreParams.mtvecInit$/;"	l
mtvecInit	src/main/scala/tile/Core.scala	/^  val mtvecInit: Option[BigInt]$/;"	l
mtvecInterruptAlign	src/main/scala/rocket/CSR.scala	/^  def mtvecInterruptAlign = {$/;"	m
mtvecWidth	src/main/scala/rocket/CSR.scala	/^  val mtvecWidth = paddrBits min xLen$/;"	l
mtvecWritable	src/main/scala/tile/Core.scala	/^  val mtvecWritable = coreParams.mtvecWritable$/;"	l
mtvecWritable	src/main/scala/tile/Core.scala	/^  val mtvecWritable: Boolean$/;"	l
mtvt	src/main/scala/rocket/Instructions.scala	/^  val mtvt = 0x307$/;"	l
mul	src/main/scala/rocket/IDecode.scala	/^  val mul = Bool()$/;"	l
mul	src/main/scala/rocket/RocketCore.scala	/^  val mul = pipelinedMul.option {$/;"	l
mulAddRecFNToRaw_postMul	src/main/scala/tile/FPU.scala	/^    val mulAddRecFNToRaw_postMul = Module(new hardfloat.MulAddRecFNToRaw_postMul(expWidth, sigWidth))$/;"	l
mulAddRecFNToRaw_preMul	src/main/scala/tile/FPU.scala	/^    val mulAddRecFNToRaw_preMul = Module(new hardfloat.MulAddRecFNToRaw_preMul(expWidth, sigWidth))$/;"	l
mulAddResult	src/main/scala/tile/FPU.scala	/^    val mulAddResult =$/;"	l
mulDecode	src/main/scala/rocket/Multiplier.scala	/^  val mulDecode = List($/;"	l
mulDiv	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^  def mulDiv: Option[OMMulDiv]$/;"	m
mulDiv	src/main/scala/tile/Core.scala	/^  val mulDiv: Option[MulDivParams]$/;"	l
mulDivParams	src/main/scala/rocket/RocketCore.scala	/^  val mulDivParams = rocketParams.mulDiv.getOrElse(MulDivParams()) \/\/ TODO ask andrew about this$/;"	l
mulMinLatency	src/main/scala/diplomaticobjectmodel/model/OMMulDiv.scala	/^    val mulMinLatency =$/;"	l
mulReg	src/main/scala/rocket/Multiplier.scala	/^    val mulReg = Cat(remainder(2*mulw+1,w+1),remainder(w-1,0))$/;"	l
multicycle	src/main/scala/scie/SCIE.scala	/^  val multicycle = Output(Bool())$/;"	l
multipleHits	src/main/scala/rocket/TLB.scala	/^  val multipleHits = PopCountAtLeast(real_hits, 2)$/;"	l
mulw	src/main/scala/rocket/Multiplier.scala	/^  val mulw = if (cfg.mulUnroll == 0) w else (w + cfg.mulUnroll - 1) \/ cfg.mulUnroll * cfg.mulUnroll$/;"	l
must_alloc	src/main/scala/rocket/TLB.scala	/^  val must_alloc = Bool()$/;"	l
must_alloc_array	src/main/scala/rocket/TLB.scala	/^  val must_alloc_array =$/;"	l
must_match	src/main/scala/tilelink/RAMModel.scala	/^            val must_match = d_crc_valid && (d_fifo || (d_valid && d_no_race))$/;"	l
mux	src/main/scala/devices/tilelink/MasterMux.scala	/^  val mux = LazyModule(new MasterMux(uFn = _.head))$/;"	l
mux	src/main/scala/regmapper/RegMapper.scala	/^    def mux(index: UInt, valid: Bool, select: Seq[Bool], guard: Seq[Bool], flow: Seq[Seq[(Bool, Bool)]]): Bool =$/;"	m
mux	src/main/scala/tile/FPU.scala	/^  val mux = Wire(init = fsgnjMux)$/;"	l
mux	src/main/scala/tile/FPU.scala	/^  val mux = Wire(new FPResult)$/;"	l
mux	src/main/scala/tilelink/HintHandler.scala	/^        val mux = Wire(chiselTypeOf(in.a))$/;"	l
mux	src/main/scala/tilelink/WidthWidget.scala	/^        val mux = VecInit.tabulate(ratio) { i => idata((i+1)*outBytes*width-1, i*outBytes*width) }$/;"	l
muxState	src/main/scala/amba/axi4/Xbar.scala	/^    val muxState = Mux(idle, winner, state)$/;"	l
muxState	src/main/scala/amba/axis/Xbar.scala	/^      val muxState = Mux(idle, winner, state)$/;"	l
muxStateEarly	src/main/scala/tilelink/Arbiter.scala	/^      val muxStateEarly = Mux(idle, earlyWinner, state)$/;"	l
muxStateQual	src/main/scala/tilelink/Arbiter.scala	/^      val muxStateQual  = Mux(idle, winnerQual,  state)$/;"	l
mux_addr	src/main/scala/amba/axi4/Fragmenter.scala	/^        val mux_addr = Wire(init = inc_addr)$/;"	l
muxdata	src/main/scala/amba/ahb/SRAM.scala	/^    val muxdata = Vec((p_mask.asBools zip (p_wdata zip d_rdata))$/;"	l
muxed	src/main/scala/rocket/Multiplier.scala	/^  val muxed = Mux(cmdHi, prod(2*width-1, width), Mux(cmdHalf, prod(width\/2-1, 0).sextTo(width), prod(width-1, 0)))$/;"	l
muxedData	src/main/scala/devices/debug/SBA.scala	/^    val muxedData = WireInit(0.U(8.W))$/;"	l
mv	src/main/scala/rocket/RVC.scala	/^      val mv = inst(Cat(rs2, x0, 0.U(3.W), rd, 0x33.U(7.W)), rd, x0, rs2)$/;"	l
mvalue	src/main/scala/rocket/Breakpoint.scala	/^  val mvalue  = UInt(mvalueBits.W)$/;"	l
mvalueBits	src/main/scala/rocket/Breakpoint.scala	/^  def mvalueBits: Int = if (xLen == 32) coreParams.mcontextWidth min  6 else coreParams.mcontextWidth min 13$/;"	m
mvaluePos	src/main/scala/rocket/Breakpoint.scala	/^  def mvaluePos : Int = mselectPos + 1$/;"	m
mvendorid	src/main/scala/rocket/Instructions.scala	/^  val mvendorid = 0xf11$/;"	l
mvendorid	src/main/scala/rocket/RocketCore.scala	/^  def mvendorid = CustomCSR.constant(CSRs.mvendorid, BigInt(rocketParams.mvendorid))$/;"	m
mxr	src/main/scala/rocket/CSR.scala	/^  val mxr = Bool()$/;"	l
mxr	src/main/scala/rocket/TLB.scala	/^  val mxr = io.ptw.status.mxr | Mux(priv_v, io.ptw.gstatus.mxr, false.B)$/;"	l
myCells	src/main/scala/diplomacy/DeviceTree.scala	/^    val myCells = Cells($/;"	l
myNil	src/main/scala/tilelink/ProbePicker.scala	/^      val myNil: Seq[TLMasterParameters] = Nil$/;"	l
mySinkId	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val mySinkId = UInt(edgeOut.manager.endSinkId)$/;"	l
my_a_first_beat	src/main/scala/tilelink/Monitor.scala	/^    val my_a_first_beat = a_first && (bundle.a.bits.source === sym_source)$/;"	l
my_clr_resp_pend	src/main/scala/tilelink/Monitor.scala	/^    val my_clr_resp_pend = (bundle.d.fire() && my_d_first_beat)$/;"	l
my_d_first_beat	src/main/scala/tilelink/Monitor.scala	/^    val my_d_first_beat = d_first && (bundle.d.bits.source === sym_source)$/;"	l
my_opcode	src/main/scala/tilelink/Monitor.scala	/^    val my_opcode    = Reg(UInt())$/;"	l
my_resp_opcode	src/main/scala/tilelink/Monitor.scala	/^    val my_resp_opcode = Mux(my_a_first_beat, bundle.a.bits.opcode, my_opcode)$/;"	l
my_resp_opcode_legal	src/main/scala/tilelink/Monitor.scala	/^    val my_resp_opcode_legal = Wire(Bool())$/;"	l
my_resp_pend	src/main/scala/tilelink/Monitor.scala	/^    val my_resp_pend = RegInit(false.B)$/;"	l
my_resp_size	src/main/scala/tilelink/Monitor.scala	/^    val my_resp_size   = Mux(my_a_first_beat, bundle.a.bits.size, my_size)$/;"	l
my_set_resp_pend	src/main/scala/tilelink/Monitor.scala	/^    val my_set_resp_pend = (bundle.a.fire() && my_a_first_beat && !my_clr_resp_pend)$/;"	l
my_size	src/main/scala/tilelink/Monitor.scala	/^    val my_size      = Reg(UInt())$/;"	l
myplus	src/main/resources/vsrc/plusarg_reader.v	/^reg [WIDTH-1:0] myplus;$/;"	r
n	src/main/scala/diplomacy/LazyModule.scala	/^    val n = c.getName.split('.').last$/;"	l
n	src/main/scala/jtag/JtagShifter.scala	/^  val n = DataMirror.widthOf(gen) match {$/;"	l
n	src/main/scala/jtag/JtagShifter.scala	/^  val n = math.max(captureWidth, updateWidth)$/;"	l
n	src/main/scala/rocket/IBuf.scala	/^  val n = fetchWidth - 1$/;"	l
n	src/main/scala/rocket/TLB.scala	/^        val n = pgLevelBits + (if (j == 0) hypervisorExtraAddrBits else 0)$/;"	l
n	src/main/scala/tilelink/Fuzzer.scala	/^    val n = nOrdered.get$/;"	l
n	src/main/scala/util/Arbiters.scala	/^    val n = norm.size$/;"	l
n	src/main/scala/util/CRC.scala	/^    val n = log2Floor(divisor)$/;"	l
n	src/main/scala/util/ECC.scala	/^    val n = width(k)$/;"	l
n	src/main/scala/util/ECC.scala	/^    val n = y.getWidth$/;"	l
n	src/main/scala/util/ECC.scala	/^  val n = code.width(k)$/;"	l
n	src/main/scala/util/Misc.scala	/^    val n = (in.size >> 1) + 1$/;"	l
nAbstractInstructions	src/main/scala/devices/debug/Debug.scala	/^  def nAbstractInstructions = if (atzero) 2 else 5$/;"	m
nBeats	src/main/scala/groundtest/Configs.scala	/^            val nBeats = site(SystemBusKey).blockBeats$/;"	l
nBeats	src/main/scala/util/MultiWidthFifo.scala	/^    val nBeats = inW \/ outW$/;"	l
nBeats	src/main/scala/util/MultiWidthFifo.scala	/^    val nBeats = outW \/ inW$/;"	l
nBits	src/main/scala/util/Replacement.scala	/^  def nBits = (n_ways * (n_ways-1)) \/ 2$/;"	m
nBits	src/main/scala/util/Replacement.scala	/^  def nBits = 16$/;"	m
nBits	src/main/scala/util/Replacement.scala	/^  def nBits = n_ways - 1$/;"	m
nBits	src/main/scala/util/Replacement.scala	/^  def nBits: Int$/;"	m
nBreakpoints	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^  def nBreakpoints: Int$/;"	m
nBreakpoints	src/main/scala/tile/Core.scala	/^  val nBreakpoints = coreParams.nBreakpoints$/;"	l
nBreakpoints	src/main/scala/tile/Core.scala	/^  val nBreakpoints: Int$/;"	l
nBufValid	src/main/scala/rocket/IBuf.scala	/^  val nBufValid = if (n == 0) UInt(0) else Reg(init=UInt(0, log2Ceil(fetchWidth)))$/;"	l
nCodes	src/main/scala/util/ECC.scala	/^  val nCodes = BigInt(1) << n$/;"	l
nCommit	src/main/scala/util/LanePositionedQueue.scala	/^  val nCommit = RegInit(       0.U(capBits1.W)) \/\/ commit.ready$/;"	l
nCommit_next	src/main/scala/util/LanePositionedQueue.scala	/^  val nCommit_next = abortSize              + io.enq.valid$/;"	l
nComponents	src/main/scala/devices/debug/Debug.scala	/^    val nComponents = dmOuter.dmOuter.intnode.edges.out.size$/;"	l
nComponents	src/main/scala/devices/debug/Debug.scala	/^    val nComponents = dmOuter.intnode.edges.out.size$/;"	l
nComponents	src/main/scala/devices/debug/Debug.scala	/^    val nComponents = getNComponents()$/;"	l
nComponents	src/main/scala/devices/debug/Debug.scala	/^    val nComponents = intnode.out.size$/;"	l
nComponents	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val nComponents: Int = dmOuter().dmOuter.module.getNComponents()$/;"	l
nCorrect	src/main/scala/util/ECC.scala	/^  val nCorrect = BigInt(1) << k$/;"	l
nCorrectable	src/main/scala/util/ECC.scala	/^  val nCorrectable = nCodes \/ 2$/;"	l
nCtr	src/main/scala/rocket/CSR.scala	/^  val nCtr = 32$/;"	l
nDCachePorts	src/main/scala/rocket/HellaCache.scala	/^  var nDCachePorts = 0$/;"	l
nDeq	src/main/scala/util/LanePositionedQueue.scala	/^  val nDeq    = RegInit(       0.U(capBits1.W)) \/\/ deq.valid$/;"	l
nDeq_next	src/main/scala/util/LanePositionedQueue.scala	/^  val nDeq_next    = nDeq    + committed    - io.deq.ready$/;"	l
nDevices	src/main/scala/devices/tilelink/Plic.scala	/^  def nDevices: Int = intnode.edges.in.map(_.source.num).sum$/;"	m
nDigits	src/main/scala/linting/LintException.scala	/^    val nDigits = max.toString.size$/;"	l
nDscratch	src/main/scala/devices/debug/Debug.scala	/^  def nDscratch: Int = if (atzero) 1 else 2$/;"	m
nEnq	src/main/scala/util/LanePositionedQueue.scala	/^  val nEnq    = RegInit(capacity.U(capBits1.W)) \/\/ enq.ready$/;"	l
nEnq_next	src/main/scala/util/LanePositionedQueue.scala	/^  val nEnq_next    = nEnq    + freed        - io.enq.valid$/;"	l
nExtInterrupts	src/main/scala/subsystem/InterruptBus.scala	/^  val nExtInterrupts = p(NExtTopInterrupts)$/;"	l
nExtTriggers	src/main/scala/devices/debug/Debug.scala	/^    val nExtTriggers = cfg.nExtTriggers$/;"	l
nFPUPorts	src/main/scala/tile/LazyRoCC.scala	/^      val nFPUPorts = outer.roccs.count(_.usesFPU)$/;"	l
nFree	src/main/scala/util/LanePositionedQueue.scala	/^  val nFree   = RegInit(       0.U(capBits1.W)) \/\/ free.ready$/;"	l
nFree_next	src/main/scala/util/LanePositionedQueue.scala	/^  val nFree_next   = rewindSize             + io.deq.ready$/;"	l
nGroups	src/main/scala/util/TraceCoreInterface.scala	/^  val nGroups: Int = 1,$/;"	l
nHPM	src/main/scala/rocket/CSR.scala	/^  val nHPM = nCtr - firstHPM$/;"	l
nHaltGroups	src/main/scala/devices/debug/Debug.scala	/^    val nHaltGroups = if ((nComponents > 1) | (nExtTriggers > 0)) cfg.nHaltGroups$/;"	l
nHarts	src/main/scala/devices/tilelink/Plic.scala	/^  def nHarts = intnode.edges.out.map(_.source.num).sum$/;"	m
nIC	src/main/scala/rocket/IBuf.scala	/^  val nIC = Mux(io.imem.bits.btb.taken, io.imem.bits.btb.bridx +& 1, UInt(fetchWidth)) - pcWordBits$/;"	l
nICReady	src/main/scala/rocket/IBuf.scala	/^  val nICReady = nReady - nBufValid$/;"	l
nIOMSHRs	src/main/scala/rocket/HellaCache.scala	/^  def nIOMSHRs = cacheParams.nMMIOs$/;"	m
nIntTypes	src/main/scala/tile/FPU.scala	/^  val nIntTypes = log2Ceil(xLen\/minXLen) + 1$/;"	l
nInterrupts	src/main/scala/examples/ExampleDevice.scala	/^  def nInterrupts = 4$/;"	m
nInterrupts	src/main/scala/interrupts/RegisterRouter.scala	/^  def nInterrupts: Int$/;"	m
nL2TLBEntries	src/main/scala/tile/Core.scala	/^  val nL2TLBEntries: Int$/;"	l
nL2TLBSets	src/main/scala/rocket/PTW.scala	/^    val nL2TLBSets = coreParams.nL2TLBEntries \/ coreParams.nL2TLBWays$/;"	l
nL2TLBWays	src/main/scala/tile/Core.scala	/^  val nL2TLBWays: Int$/;"	l
nLeading	src/main/scala/linting/LintException.scala	/^    val nLeading = nDigits - n.toString.size$/;"	l
nLocalInterrupts	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^  def nLocalInterrupts: Int$/;"	m
nLocalInterrupts	src/main/scala/tile/Core.scala	/^  val nLocalInterrupts: Int$/;"	l
nPMPs	src/main/scala/tile/Core.scala	/^  val nPMPs = coreParams.nPMPs$/;"	l
nPMPs	src/main/scala/tile/Core.scala	/^  val nPMPs: Int$/;"	l
nPTECacheEntries	src/main/scala/tile/Core.scala	/^  val nPTECacheEntries: Int$/;"	l
nPTWPorts	src/main/scala/rocket/PTW.scala	/^  var nPTWPorts = 1$/;"	l
nPTWPorts	src/main/scala/tile/LazyRoCC.scala	/^      val nPTWPorts: Int = 0,$/;"	l
nPages	src/main/scala/rocket/BTB.scala	/^  val nPages = (btbParams.nPages + 1) \/ 2 * 2 \/\/ control logic assumes 2 divides pages$/;"	l
nPerfCounters	src/main/scala/tile/Core.scala	/^  val nPerfCounters = coreParams.nPerfCounters$/;"	l
nPerfCounters	src/main/scala/tile/Core.scala	/^  val nPerfCounters: Int$/;"	l
nPgLevelChoices	src/main/scala/rocket/TLB.scala	/^    val nPgLevelChoices = pgLevels - minPgLevels + 1$/;"	l
nPhysicalEntries	src/main/scala/rocket/TLB.scala	/^  val nPhysicalEntries = 1 + special_entry.size$/;"	l
nPriorities	src/main/scala/devices/tilelink/Plic.scala	/^  def nPriorities = (1 << log2Ceil(minPriorities+1)) - 1 \/\/ round up to next 2^n-1$/;"	m
nReady	src/main/scala/rocket/IBuf.scala	/^  val nReady = Wire(init = UInt(0, log2Ceil(fetchWidth+1)))$/;"	l
nSets	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def nSets: Int$/;"	m
nSets	src/main/scala/groundtest/Configs.scala	/^            val nSets = dcp.nSets$/;"	l
nSets	src/main/scala/tile/L1Cache.scala	/^  def nSets = cacheParams.nSets$/;"	m
nSets	src/main/scala/tile/L1Cache.scala	/^  def nSets:         Int$/;"	m
nTLBSets	src/main/scala/tile/L1Cache.scala	/^  def nTLBSets = cacheParams.nTLBSets$/;"	m
nTLBSets	src/main/scala/tile/L1Cache.scala	/^  def nTLBSets:      Int$/;"	m
nTLBWays	src/main/scala/tile/L1Cache.scala	/^  def nTLBWays = cacheParams.nTLBWays$/;"	m
nTLBWays	src/main/scala/tile/L1Cache.scala	/^  def nTLBWays:      Int$/;"	m
nTiles	src/main/scala/devices/tilelink/CLINT.scala	/^    val nTiles = intnode.out.size$/;"	l
nTiles	src/main/scala/subsystem/HasTiles.scala	/^  def nTiles: Int = tileAttachParams.size$/;"	m
nUncorrectable	src/main/scala/util/ECC.scala	/^  val nUncorrectable = nCodes - nCorrectable - nCorrect$/;"	l
nValid	src/main/scala/rocket/IBuf.scala	/^  val nValid = Mux(io.imem.valid, nIC, UInt(0)) + nBufValid$/;"	l
nWays	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def nWays: Int$/;"	m
nWays	src/main/scala/groundtest/Configs.scala	/^            val nWays = dcp.nWays$/;"	l
nWays	src/main/scala/tile/L1Cache.scala	/^  def nWays = cacheParams.nWays$/;"	m
nWays	src/main/scala/tile/L1Cache.scala	/^  def nWays:         Int$/;"	m
nack	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^    val nack = Valid(Bits(width = coreParams.dcacheReqTagBits)).flip$/;"	l
nackResponseMessage	src/main/scala/rocket/DCache.scala	/^  val nackResponseMessage = edge.ProbeAck(b = probe_bits, reportPermissions = TLPermissions.NtoN)$/;"	l
nack_head	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val nack_head = io.nack.valid && nackq.io.deq.valid && io.nack.bits === next_replay_req.tag$/;"	l
nack_mem	src/main/scala/tile/FPU.scala	/^  val nack_mem = Bool(OUTPUT)$/;"	l
nack_onehot	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val nack_onehot = Cat(reqs.map(_.tag === io.nack.bits).reverse) & inflight$/;"	l
nackq	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val nackq = Module(new Queue(UInt(width = log2Up(depth)), depth))$/;"	l
name	src/main/scala/amba/ahb/Parameters.scala	/^  val name = nodePath.lastOption.map(_.lazyModule.name).getOrElse("disconnected")$/;"	l
name	src/main/scala/amba/apb/Parameters.scala	/^  val name = nodePath.lastOption.map(_.lazyModule.name).getOrElse("disconnected")$/;"	l
name	src/main/scala/amba/axi4/Parameters.scala	/^  val name = nodePath.lastOption.map(_.lazyModule.name).getOrElse("disconnected")$/;"	l
name	src/main/scala/amba/axis/Parameters.scala	/^  val name:          String,$/;"	l
name	src/main/scala/amba/axis/Parameters.scala	/^  val name:       String,$/;"	l
name	src/main/scala/diplomacy/LazyModule.scala	/^  def name: String = suggestedName \/\/ className + suggestedName ++ hashcode ?$/;"	m
name	src/main/scala/diplomacy/Nodes.scala	/^    val name = decamel.toLowerCase.stripSuffix("_opt").stripSuffix("node").stripSuffix("_")$/;"	l
name	src/main/scala/diplomacy/Nodes.scala	/^  def name: String = scope.map(_.name).getOrElse("TOP") + "." + valName.name$/;"	m
name	src/main/scala/diplomacy/Parameters.scala	/^  def name: String$/;"	m
name	src/main/scala/diplomacy/Resources.scala	/^    val name = describeName(devname, resources)  \/\/ the generated device name in device tree$/;"	l
name	src/main/scala/diplomacy/Resources.scala	/^    val name = path.headOption.getOrElse("\/")$/;"	l
name	src/main/scala/diplomaticobjectmodel/model/CustomISAExtensions.scala	/^  def name: String$/;"	m
name	src/main/scala/diplomaticobjectmodel/model/OMRTLModule.scala	/^  def name: String \/\/ This will always be the name of the signal on the top-level module$/;"	m
name	src/main/scala/groundtest/TraceGen.scala	/^  val name = None$/;"	l
name	src/main/scala/interrupts/Parameters.scala	/^  val name = nodePath.lastOption.map(_.lazyModule.name).getOrElse("disconnected")$/;"	l
name	src/main/scala/tile/BaseTile.scala	/^  val name: Option[String]$/;"	l
name	src/main/scala/tilelink/Parameters.scala	/^  val name = setName.orElse(nodePath.lastOption.map(_.lazyModule.name)).getOrElse("disconnected")$/;"	l
name	src/main/scala/tilelink/Parameters.scala	/^  val name:              String,$/;"	l
name	src/main/scala/tilelink/RegisterRouter.scala	/^    val name = s"deviceAt${baseHex}" \/\/TODO: It would be better to name this other than "Device at ...."$/;"	l
name	src/main/scala/util/BundleMap.scala	/^  def name: String$/;"	m
nameAcceptable	src/main/scala/regmapper/RegFieldDesc.scala	/^  def nameAcceptable(name: String): Boolean = name match {$/;"	m
nameMap	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^    val nameMap = desiredNameAnnos.groupBy(_.desiredName).mapValues { annos =>$/;"	l
nameMap	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val nameMap = overrideDesiredNameAnnos.groupBy(_.desiredName).mapValues { annos =>$/;"	l
nameMappings	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val nameMappings = nameMap.flatMap { case (desiredName, modules) =>$/;"	l
nameRegex	src/main/scala/regmapper/RegFieldDesc.scala	/^  val nameRegex: Regex = """^[_:A-Za-z][-._:A-Za-z0-9]*$""".r$/;"	l
named	src/main/scala/util/package.scala	/^    def named(name: Option[String]): String = {$/;"	m
named	src/main/scala/util/package.scala	/^    def named(name: String): String = named(Some(name))$/;"	m
names	src/main/scala/amba/axi4/IdIndexer.scala	/^      val names = Array.fill(1 << idBits) { new scala.collection.mutable.HashSet[String]() }$/;"	l
names	src/main/scala/diplomacy/Resources.scala	/^    val names = optDef("reg-names", named.map(x => ResourceString(DiplomacyUtils.regName(x._1).get)).toList) \/\/ names of the named address space$/;"	l
names	src/main/scala/system/RocketTestSuite.scala	/^  val names: LinkedHashSet[String]$/;"	l
napot	src/main/scala/rocket/PMP.scala	/^  def napot = cfg.a(1)$/;"	m
narrow	src/main/scala/amba/axi4/Fragmenter.scala	/^        val narrow = a.bits.size =\/= UInt(lgBytes)$/;"	l
narrow	src/main/scala/tile/FPU.scala	/^          val narrow = Module(new hardfloat.RecFNToIN(maxExpWidth, maxSigWidth, w))$/;"	l
narrowed	src/main/scala/tile/FPU.scala	/^        val narrowed = sanitizeNaN(narrower.io.out, outType)$/;"	l
narrower	src/main/scala/tile/FPU.scala	/^        val narrower = Module(new hardfloat.RecFNToRecFN(maxType.exp, maxType.sig, outType.exp, outType.sig))$/;"	l
nbase	src/main/scala/diplomacy/Parameters.scala	/^        val nbase = (remove.base ^ bit) & ~nmask$/;"	l
nbit	src/main/scala/util/Misc.scala	/^        val nbit = !bit$/;"	l
ndmreset	src/main/scala/devices/debug/dm_registers.scala	/^  val ndmreset = Bool()$/;"	l
ndmresetWrEn	src/main/scala/devices/debug/Debug.scala	/^    val ndmresetWrEn        = WireInit(false.B)$/;"	l
ndreset	src/main/scala/devices/debug/Debug.scala	/^  val ndreset         = Output(Bool())$/;"	l
ndreset	src/main/scala/devices/debug/Periphery.scala	/^  val ndreset    = Output(Bool())$/;"	l
near_end_of_refill	src/main/scala/rocket/DCache.scala	/^    val near_end_of_refill = if (cacheBlockBytes \/ beatBytes <= beatsBeforeEnd) tl_out.d.valid else {$/;"	l
needCustom	src/main/scala/devices/debug/Debug.scala	/^    val needCustom = (customs.size > 0) && (customParams.head.addrs.size > 0)$/;"	l
needCustom	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val needCustom: Boolean = dmInner().dmInner.module.getNeedCustom()$/;"	l
needR	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val needR = in.a.bits.opcode =\/= TLMessages.PutFullData &&$/;"	l
needRepeater	src/main/scala/tilelink/HintHandler.scala	/^      val needRepeater = edgeOut.manager.managers.exists { m =>$/;"	l
needSign	src/main/scala/util/Misc.scala	/^      var needSign = neg$/;"	l
needT	src/main/scala/tilelink/Broadcast.scala	/^  val needT   = Bool()$/;"	l
needT	src/main/scala/tilelink/Edges.scala	/^  def needT(a: TLBundleA): Bool = {$/;"	m
needW	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val needW = in.a.bits.opcode =\/= TLMessages.Get &&$/;"	l
need_bypass	src/main/scala/amba/axi4/UserYanker.scala	/^      val need_bypass = edgeOut.slave.minLatency < 1$/;"	l
need_d	src/main/scala/tilelink/Broadcast.scala	/^    val need_d = Output(Bool())$/;"	l
need_gpa	src/main/scala/rocket/PTW.scala	/^  val need_gpa = Bool()$/;"	l
need_gpa_mask	src/main/scala/rocket/TLB.scala	/^    val need_gpa_mask = if (instruction) gf_inst_array else gf_ld_array | gf_st_array$/;"	l
needle	src/main/scala/tile/LazyRoCC.scala	/^  val needle = Reg(UInt(8.W))$/;"	l
needle_match	src/main/scala/tile/LazyRoCC.scala	/^  val needle_match = data_bytes.map(_ === needle)$/;"	l
needsDrop	src/main/scala/tilelink/HintHandler.scala	/^      val needsDrop = edgeOut.manager.managers.exists { m =>$/;"	l
needsLock	src/main/scala/util/Arbiters.scala	/^      val needsLock: Option[T => Bool] = None,$/;"	l
needsRead	src/main/scala/rocket/DCache.scala	/^  def needsRead(req: HellaCacheReq) =$/;"	m
needs_second_acq	src/main/scala/tilelink/Metadata.scala	/^    val needs_second_acq = isWriteIntent(second_cmd) && !isWriteIntent(first_cmd)$/;"	l
needs_wb	src/main/scala/rocket/NBDcache.scala	/^    val needs_wb = old_coh.onCacheControl(M_FLUSH)._1$/;"	l
neg	src/main/scala/util/Misc.scala	/^    val neg = x < SInt(0)$/;"	l
neg_out	src/main/scala/rocket/Multiplier.scala	/^  val neg_out = Reg(Bool())$/;"	l
negated_remainder	src/main/scala/rocket/Multiplier.scala	/^  val negated_remainder = -result$/;"	l
neverReleasesData	src/main/scala/tilelink/Parameters.scala	/^  val neverReleasesData: Boolean,$/;"	l
newAnnos	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^    val newAnnos = errorList ++ state.annotations$/;"	l
newAnnos	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val newAnnos = state.annotations.flatMap {$/;"	l
newBPC	src/main/scala/rocket/CSR.scala	/^            val newBPC = readModifyWriteCSR(io.rw.cmd, bp.control.asUInt, io.rw.wdata).asTypeOf(bp.control)$/;"	l
newBytes	src/main/scala/regmapper/RegField.scala	/^    val newBytes = Wire(init = oldBytes)$/;"	l
newCfg	src/main/scala/rocket/CSR.scala	/^        val newCfg = new PMPConfig().fromBits(wdata >> ((i * pmp.cfg.getWidth) % xLen))$/;"	l
newCoh	src/main/scala/rocket/DCache.scala	/^  val newCoh = Wire(init = probeNewCoh)$/;"	l
newDesc	src/main/scala/regmapper/RegField.scala	/^      val newDesc = desc.map {d => d.copy(name = d.name + s"_$i")}$/;"	l
newDesc	src/main/scala/regmapper/RegField.scala	/^      val newDesc = desc.map {d => d.copy(name = d.name + s"_$numFullBytes")}$/;"	l
newEntry	src/main/scala/rocket/TLB.scala	/^    val newEntry = Wire(new TLBEntryData)$/;"	l
newLocals	src/main/scala/tilelink/AddressAdjuster.scala	/^      val newLocals = adjustableLocalManagers.map { l =>$/;"	l
newMain	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val newMain = CircuitTarget(circuit.main)$/;"	l
newManagerList	src/main/scala/tilelink/AddressAdjuster.scala	/^      val newManagerList =$/;"	l
newRemotes	src/main/scala/tilelink/AddressAdjuster.scala	/^      val newRemotes = adjustableRemoteManagers.map { r =>$/;"	l
new_cause	src/main/scala/tile/BusErrorUnit.scala	/^    val new_cause = Wire(UInt(causeWidth.W), DontCare)$/;"	l
new_coh	src/main/scala/rocket/NBDcache.scala	/^  val new_coh = Reg(init=ClientMetadata.onReset)$/;"	l
new_dcsr	src/main/scala/rocket/CSR.scala	/^        val new_dcsr = new DCSR().fromBits(wdata)$/;"	l
new_gennum	src/main/scala/tilelink/Fragmenter.scala	/^        val new_gennum = ~(~old_gennum1 | (aMask >> log2Ceil(beatBytes))) \/\/ ~(~x|y) is width safe$/;"	l
new_hgatp	src/main/scala/rocket/CSR.scala	/^        val new_hgatp = new PTBR().fromBits(wdata)$/;"	l
new_hip	src/main/scala/rocket/CSR.scala	/^        val new_hip = new MIP().fromBits((read_mip & ~hs_delegable_interrupts) | (wdata & hs_delegable_interrupts))$/;"	l
new_hstatus	src/main/scala/rocket/CSR.scala	/^        val new_hstatus = new HStatus().fromBits(wdata)$/;"	l
new_meta	src/main/scala/rocket/DCache.scala	/^    val new_meta = Wire(init = s2_first_meta_corrected)$/;"	l
new_mip	src/main/scala/rocket/CSR.scala	/^      val new_mip = readModifyWriteCSR(io.rw.cmd, reg_mip.asUInt, io.rw.wdata).asTypeOf(new MIP)$/;"	l
new_mnstatus	src/main/scala/rocket/CSR.scala	/^      val new_mnstatus = new MNStatus().fromBits(wdata)$/;"	l
new_mstatus	src/main/scala/rocket/CSR.scala	/^      val new_mstatus = new MStatus().fromBits(wdata)$/;"	l
new_partitions	src/main/scala/diplomacy/AddressDecoder.scala	/^    val new_partitions = (case_a_partitions ++ case_b_partitions).sorted(partitionOrder)$/;"	l
new_prv	src/main/scala/rocket/CSR.scala	/^  val new_prv = Wire(init = reg_mstatus.prv)$/;"	l
new_satp	src/main/scala/rocket/CSR.scala	/^          val new_satp = new PTBR().fromBits(wdata)$/;"	l
new_sip	src/main/scala/rocket/CSR.scala	/^        val new_sip = new MIP().fromBits((read_mip & ~hs_delegable_interrupts) | (wdata & hs_delegable_interrupts))$/;"	l
new_sip	src/main/scala/rocket/CSR.scala	/^        val new_sip = new MIP().fromBits((read_mip & ~read_mideleg) | (wdata & read_mideleg))$/;"	l
new_sstatus	src/main/scala/rocket/CSR.scala	/^        val new_sstatus = new MStatus().fromBits(wdata)$/;"	l
new_value	src/main/scala/tile/BusErrorUnit.scala	/^    val new_value = Wire(UInt(value.getWidth.W), DontCare)$/;"	l
new_vsatp	src/main/scala/rocket/CSR.scala	/^        val new_vsatp = new PTBR().fromBits(wdata)$/;"	l
new_vsip	src/main/scala/rocket/CSR.scala	/^        val new_vsip = new MIP().fromBits((read_hip & ~read_hideleg) | ((wdata << 1) & read_hideleg))$/;"	l
new_vsstatus	src/main/scala/rocket/CSR.scala	/^        val new_vsstatus = new MStatus().fromBits(wdata)$/;"	l
next	src/main/scala/amba/axi4/Deinterleaver.scala	/^            val next = Wire(chiselTypeOf(count))$/;"	l
next	src/main/scala/rocket/BTB.scala	/^    val next = nextPageRepl + Mux[UInt](both, 2, 1)$/;"	l
next	src/main/scala/tilelink/ToAHB.scala	/^      val next = Wire(init = step)$/;"	l
next	src/main/scala/util/CreditedIO.scala	/^    val next = Mux(credit, v + 1.U, v - 1.U)$/;"	l
nextChain	src/main/scala/rocket/CSR.scala	/^            val nextChain = if (i >= nBreakpoints-1) true.B else reg_bp(i+1).control.chain$/;"	l
nextDMode	src/main/scala/rocket/CSR.scala	/^            val nextDMode = if (i >= nBreakpoints-1) true.B else reg_bp(i+1).control.dmode$/;"	l
nextData	src/main/scala/groundtest/TraceGen.scala	/^  val nextData = Reg(init = UInt(1, numBitsInWord-tid.getWidth))$/;"	l
nextFree	src/main/scala/tilelink/SourceShrinker.scala	/^        val nextFree = OHToUInt(nextFreeOH)$/;"	l
nextFreeOH	src/main/scala/tilelink/SourceShrinker.scala	/^        val nextFreeOH = ~(leftOR(~allocated) << 1) & ~allocated$/;"	l
nextLevelCacheProperty	src/main/scala/tile/BaseTile.scala	/^  def nextLevelCacheProperty: PropertyOption = {$/;"	m
nextMplierSign	src/main/scala/rocket/Multiplier.scala	/^    val nextMplierSign = count === mulw\/cfg.mulUnroll-2 && neg_out$/;"	l
nextMulReg	src/main/scala/rocket/Multiplier.scala	/^    val nextMulReg = Cat(prod, mplier(mulw-1, cfg.mulUnroll))$/;"	l
nextMulReg1	src/main/scala/rocket/Multiplier.scala	/^    val nextMulReg1 = Cat(nextMulReg(2*mulw,mulw), Mux(eOut, eOutRes, nextMulReg)(mulw-1,0))$/;"	l
nextPageRepl	src/main/scala/rocket/BTB.scala	/^  val nextPageRepl = RegInit(0.U(log2Ceil(nPages).W))$/;"	l
nextPos	src/main/scala/rocket/BTB.scala	/^    val nextPos = Mux(Bool(isPow2(nras)) || pos < nras-1, pos+1, UInt(0))$/;"	l
nextState	src/main/scala/jtag/JtagStateMachine.scala	/^  val nextState = WireInit(JtagState.TestLogicReset.U)$/;"	l
nextState	src/main/scala/util/Replacement.scala	/^    val nextState     = Wire(Vec(n_ways-1, UInt(n_ways.W)))$/;"	l
nextTag	src/main/scala/groundtest/TraceGen.scala	/^  val nextTag = Reg(init = UInt(0, logNumTags))$/;"	l
nextValue	src/main/scala/util/CreditedIO.scala	/^  val nextValue = nextV + 0.U$/;"	l
next_addr	src/main/scala/tile/LazyRoCC.scala	/^  val next_addr = (addr_block + 1.U) << blockOffset.U$/;"	l
next_flight	src/main/scala/tilelink/Edges.scala	/^    val next_flight = flight + PopCount(inc) - PopCount(dec)$/;"	l
next_inflight	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val next_inflight = OHToUInt(next_inflight_onehot)$/;"	l
next_inflight_onehot	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val next_inflight_onehot = PriorityEncoderOH(~inflight)$/;"	l
next_maybe_empty	src/main/scala/util/LanePositionedQueue.scala	/^  val next_maybe_empty = if (2*lanes <= L && L <= (rows-2)*lanes\/2) {$/;"	l
next_replay	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val next_replay = nackq.io.deq.bits$/;"	l
next_replay_onehot	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val next_replay_onehot = UIntToOH(next_replay)$/;"	l
next_replay_req	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val next_replay_req = reqs(next_replay)$/;"	l
next_state	src/main/scala/rocket/PTW.scala	/^  val next_state = Wire(init = state)$/;"	l
next_state	src/main/scala/util/Replacement.scala	/^  val next_state    = Wire(UInt(logic.nBits.W))$/;"	l
nexus	src/main/scala/diplomacy/BundleBridge.scala	/^    val nexus = LazyModule(new BundleBridgeNexus[T](inputFn, outputFn, default, inputRequiresOutput, shouldBeInlined))$/;"	l
nexus	src/main/scala/prci/BundleBridgeBlockDuringReset.scala	/^    val nexus = LazyModule(new BundleBridgeNexus[T]($/;"	l
nlips	src/main/scala/tile/Interrupts.scala	/^    val nlips = tileParams.core.nLocalInterrupts$/;"	l
nm	src/main/scala/tilelink/Fuzzer.scala	/^    val nm = Module(new LFSRNoiseMaker(wide))$/;"	l
nmask	src/main/scala/diplomacy/Parameters.scala	/^        val nmask = (mask & (bit-1)) | remove.mask$/;"	l
nmi	src/main/scala/subsystem/HasTiles.scala	/^  val nmi = outer.tiles.zip(outer.tileNMIIONodes).zipWithIndex.map { case ((tile, n), i) => tile.tileParams.core.useNMI.option(n.makeIO(s"nmi_$i")) }$/;"	l
nmi	src/main/scala/tile/Interrupts.scala	/^  val nmi = usingNMI.option(new NMI(resetVectorLen))$/;"	l
nmiNexusNode	src/main/scala/tile/BaseTile.scala	/^  val nmiNexusNode: BundleBridgeNode[NMI] = BundleBroadcast[NMI]()$/;"	l
nmiNode	src/main/scala/tile/BaseTile.scala	/^  val nmiNode: BundleBridgeInwardNode[NMI] =$/;"	l
nmiSinkNode	src/main/scala/tile/BaseTile.scala	/^  val nmiSinkNode = BundleBridgeSink[NMI](Some(() => new NMI(visiblePhysAddrBits)))$/;"	l
nmiSource	src/main/scala/subsystem/HasTiles.scala	/^      val nmiSource = BundleBridgeSource[NMI]()$/;"	l
nmiTVec	src/main/scala/rocket/CSR.scala	/^  val nmiTVec = (Mux(causeIsNmi, nmiTVecInt, nmiTVecXcpt)>>1)<<1$/;"	l
nmiTVecInt	src/main/scala/rocket/CSR.scala	/^  val nmiTVecInt = io.interrupts.nmi.map(nmi => nmi.rnmi_interrupt_vector).getOrElse(0.U)$/;"	l
nmiTVecXcpt	src/main/scala/rocket/CSR.scala	/^  val nmiTVecXcpt = io.interrupts.nmi.map(nmi => nmi.rnmi_exception_vector).getOrElse(0.U)$/;"	l
nmi_csrs	src/main/scala/rocket/CSR.scala	/^  val nmi_csrs = if (!usingNMI) LinkedHashMap() else LinkedHashMap[Int,Bits]($/;"	l
nmie	src/main/scala/rocket/CSR.scala	/^  val nmie = reg_rnmie$/;"	l
noCrossing	src/main/scala/diplomacy/package.scala	/^  implicit def noCrossing(value: NoCrossing.type): ClockCrossingType = SynchronousCrossing(BufferParams.none)$/;"	m
no_alloc	src/main/scala/rocket/HellaCache.scala	/^  val no_alloc = Bool()$/;"	l
no_xcpt	src/main/scala/rocket/HellaCache.scala	/^  val no_xcpt = Bool()$/;"	l
node	src/main/scala/amba/ahb/AHBLite.scala	/^  val node = AHBMasterAdapterNode($/;"	l
node	src/main/scala/amba/ahb/RegisterRouter.scala	/^  lazy val node: AHBRegisterNode = controlNode$/;"	l
node	src/main/scala/amba/ahb/RegisterRouter.scala	/^  val node = AHBRegisterNode(address, concurrency, beatBytes, undefZero, executable)$/;"	l
node	src/main/scala/amba/ahb/SRAM.scala	/^  val node = AHBSlaveSinkNode(Seq(AHBSlavePortParameters($/;"	l
node	src/main/scala/amba/ahb/Test.scala	/^  val node  = AHBSlaveIdentityNode()$/;"	l
node	src/main/scala/amba/ahb/Test.scala	/^  val node = AHBSlaveIdentityNode()$/;"	l
node	src/main/scala/amba/ahb/ToTL.scala	/^  val node = AHBToTLNode()$/;"	l
node	src/main/scala/amba/ahb/Xbar.scala	/^  val node = AHBArbiterNode($/;"	l
node	src/main/scala/amba/ahb/Xbar.scala	/^  val node = new AHBFanoutNode($/;"	l
node	src/main/scala/amba/apb/RegisterRouter.scala	/^  lazy val node: APBInwardNode = controlNode$/;"	l
node	src/main/scala/amba/apb/RegisterRouter.scala	/^  val node = APBRegisterNode(address, concurrency, beatBytes, undefZero, executable)$/;"	l
node	src/main/scala/amba/apb/SRAM.scala	/^  val node = APBSlaveNode(Seq(APBSlavePortParameters($/;"	l
node	src/main/scala/amba/apb/ToTL.scala	/^  val node = APBToTLNode()$/;"	l
node	src/main/scala/amba/apb/Xbar.scala	/^  val node = new APBNexusNode($/;"	l
node	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val node = AXI4AsyncSinkNode(params)$/;"	l
node	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val node = AXI4AsyncSourceNode(sync)$/;"	l
node	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val node = NodeHandle(source.node, sink.node)$/;"	l
node	src/main/scala/amba/axi4/Buffer.scala	/^  val node = AXI4AdapterNode($/;"	l
node	src/main/scala/amba/axi4/Credited.scala	/^  val node = AXI4CreditedAdapterNode($/;"	l
node	src/main/scala/amba/axi4/Credited.scala	/^  val node = AXI4CreditedSinkNode(delay)$/;"	l
node	src/main/scala/amba/axi4/Credited.scala	/^  val node = AXI4CreditedSourceNode(delay)$/;"	l
node	src/main/scala/amba/axi4/Deinterleaver.scala	/^  val node = new AXI4AdapterNode($/;"	l
node	src/main/scala/amba/axi4/Delayer.scala	/^  val node = AXI4AdapterNode()$/;"	l
node	src/main/scala/amba/axi4/Filter.scala	/^  val node = AXI4AdapterNode($/;"	l
node	src/main/scala/amba/axi4/Fragmenter.scala	/^  val node = AXI4AdapterNode($/;"	l
node	src/main/scala/amba/axi4/IdIndexer.scala	/^  val node = AXI4AdapterNode($/;"	l
node	src/main/scala/amba/axi4/RegisterRouter.scala	/^  lazy val node: AXI4InwardNode = controlXing(NoCrossing)$/;"	l
node	src/main/scala/amba/axi4/RegisterRouter.scala	/^  val node = AXI4RegisterNode(address, concurrency, beatBytes, undefZero, executable)$/;"	l
node	src/main/scala/amba/axi4/SRAM.scala	/^  val node = AXI4SlaveNode(Seq(AXI4SlavePortParameters($/;"	l
node	src/main/scala/amba/axi4/Test.scala	/^  val node  = AXI4IdentityNode()$/;"	l
node	src/main/scala/amba/axi4/Test.scala	/^  val node = AXI4IdentityNode()$/;"	l
node	src/main/scala/amba/axi4/ToTL.scala	/^  val node = AXI4ToTLNode(wcorrupt)$/;"	l
node	src/main/scala/amba/axi4/UserYanker.scala	/^  val node = AXI4AdapterNode($/;"	l
node	src/main/scala/amba/axi4/Xbar.scala	/^  val node = new AXI4NexusNode($/;"	l
node	src/main/scala/amba/axis/Buffer.scala	/^  val node = AXISAdapterNode()$/;"	l
node	src/main/scala/amba/axis/Xbar.scala	/^  val node = AXISNexusNode($/;"	l
node	src/main/scala/devices/debug/APB.scala	/^  val node = APBRegisterNode($/;"	l
node	src/main/scala/devices/debug/Custom.scala	/^  val node = DebugCustomNexusNode($/;"	l
node	src/main/scala/devices/debug/DMI.scala	/^  val node = TLClientNode(Seq(TLMasterPortParameters.v2(Seq(TLMasterParameters.v2($/;"	l
node	src/main/scala/devices/debug/Debug.scala	/^  val node = dmInner.tlNode$/;"	l
node	src/main/scala/devices/debug/SBA.scala	/^  val node = TLClientNode(Seq(TLMasterPortParameters.v1($/;"	l
node	src/main/scala/devices/tilelink/BootROM.scala	/^  val node = TLManagerNode(Seq(TLSlavePortParameters.v1($/;"	l
node	src/main/scala/devices/tilelink/BusBypass.scala	/^  val node = NodeHandle(nodeIn, nodeOut)$/;"	l
node	src/main/scala/devices/tilelink/BusBypass.scala	/^  val node = new TLBypassNode(dFn)$/;"	l
node	src/main/scala/devices/tilelink/CLINT.scala	/^  val node: TLRegisterNode = TLRegisterNode($/;"	l
node	src/main/scala/devices/tilelink/DevNull.scala	/^  val node = TLManagerNode(Seq(TLSlavePortParameters.v1($/;"	l
node	src/main/scala/devices/tilelink/MaskROM.scala	/^  val node = TLManagerNode(Seq(TLSlavePortParameters.v1($/;"	l
node	src/main/scala/devices/tilelink/MasterMux.scala	/^  val node = TLClientNode(Seq(TLMasterPortParameters.v1(clients = Seq(TLMasterParameters.v1($/;"	l
node	src/main/scala/devices/tilelink/MasterMux.scala	/^  val node = new MasterMuxNode(uFn)$/;"	l
node	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val node = TLAdapterNode(managerFn = { mp => mp.v1copy($/;"	l
node	src/main/scala/devices/tilelink/Plic.scala	/^  val node : TLRegisterNode = TLRegisterNode($/;"	l
node	src/main/scala/devices/tilelink/TestRAM.scala	/^  val node = TLManagerNode(Seq(TLSlavePortParameters.v1($/;"	l
node	src/main/scala/diplomacy/BundleBridge.scala	/^  val node = BundleBridgeNexusNode[T](default, inputRequiresOutput)$/;"	l
node	src/main/scala/interrupts/Crossing.scala	/^  val node = IntSyncSinkNode(0)$/;"	l
node	src/main/scala/interrupts/Crossing.scala	/^  val node = IntSyncSinkNode(1)$/;"	l
node	src/main/scala/interrupts/Crossing.scala	/^  val node = IntSyncSinkNode(sync)$/;"	l
node	src/main/scala/interrupts/Crossing.scala	/^  val node = IntSyncSourceNode(alreadyRegistered)$/;"	l
node	src/main/scala/prci/ClockDivider.scala	/^  val node = ClockAdapterNode($/;"	l
node	src/main/scala/prci/ClockGroup.scala	/^  val node = ClockGroupAggregateNode(groupName)$/;"	l
node	src/main/scala/prci/ClockGroup.scala	/^  val node = ClockGroupNode(groupName)$/;"	l
node	src/main/scala/prci/ClockGroup.scala	/^  val node = ClockGroupSourceNode(List.fill(numSources) { ClockGroupSourceParameters() })$/;"	l
node	src/main/scala/prci/ClockGroup.scala	/^  val node = new FixedClockBroadcastNode(fixedClockOpt) {$/;"	l
node	src/main/scala/prci/ResetStretcher.scala	/^  val node = ClockAdapterNode()(ValName("reset_stretcher"))$/;"	l
node	src/main/scala/prci/ResetSynchronizer.scala	/^  val node = ClockAdapterNode()$/;"	l
node	src/main/scala/prci/ResetSynchronizer.scala	/^  val node = ClockGroupAdapterNode()$/;"	l
node	src/main/scala/prci/ResetWrangler.scala	/^  val node = ClockAdapterNode()$/;"	l
node	src/main/scala/prci/TestClockSource.scala	/^  val node = ClockSourceNode(freqs.map(f =>$/;"	l
node	src/main/scala/rocket/HellaCache.scala	/^  val node = TLClientNode(Seq(TLMasterPortParameters.v1($/;"	l
node	src/main/scala/rocket/ScratchpadSlavePort.scala	/^  val node = TLManagerNode(Seq(TLSlavePortParameters.v1($/;"	l
node	src/main/scala/subsystem/BankedL2Params.scala	/^    val node = TLNameNode("no_coherence_manager")$/;"	l
node	src/main/scala/system/SimAXIMem.scala	/^  val node = AXI4MasterNode(List(edge.master))$/;"	l
node	src/main/scala/tile/BusErrorUnit.scala	/^  val node = TLRegisterNode($/;"	l
node	src/main/scala/tilelink/AddressAdjuster.scala	/^  val node: TLJunctionNode = TLJunctionNode($/;"	l
node	src/main/scala/tilelink/AsyncCrossing.scala	/^  val node = NodeHandle(source.node, sink.node)$/;"	l
node	src/main/scala/tilelink/AsyncCrossing.scala	/^  val node = TLAsyncSinkNode(params)$/;"	l
node	src/main/scala/tilelink/AsyncCrossing.scala	/^  val node = TLAsyncSourceNode(sync)$/;"	l
node	src/main/scala/tilelink/AtomicAutomata.scala	/^  val node = TLAdapterNode($/;"	l
node	src/main/scala/tilelink/BankBinder.scala	/^  val node = BankBinderNode(mask)$/;"	l
node	src/main/scala/tilelink/BlockDuringReset.scala	/^  val node = TLAdapterNode()$/;"	l
node	src/main/scala/tilelink/Broadcast.scala	/^  val node = TLAdapterNode($/;"	l
node	src/main/scala/tilelink/Buffer.scala	/^  val node = new TLBufferNode(a, b, c, d, e)$/;"	l
node	src/main/scala/tilelink/Buffer.scala	/^  val node = new TLBufferNodeAndNotCancel(a, b, c, d, e)$/;"	l
node	src/main/scala/tilelink/CacheCork.scala	/^  val node = TLAdapterNode($/;"	l
node	src/main/scala/tilelink/Credited.scala	/^  val node = TLCreditedAdapterNode($/;"	l
node	src/main/scala/tilelink/Credited.scala	/^  val node = TLCreditedSinkNode(delay)$/;"	l
node	src/main/scala/tilelink/Credited.scala	/^  val node = TLCreditedSourceNode(delay)$/;"	l
node	src/main/scala/tilelink/Delayer.scala	/^  val node = TLAdapterNode()$/;"	l
node	src/main/scala/tilelink/ErrorEvaluator.scala	/^  val node = TLAdapterNode(managerFn = { mp => mp.v1copy(managers =$/;"	l
node	src/main/scala/tilelink/FIFOFixer.scala	/^  val node = TLAdapterNode($/;"	l
node	src/main/scala/tilelink/Filter.scala	/^  val node = new TLAdapterNode($/;"	l
node	src/main/scala/tilelink/Fragmenter.scala	/^  val node = new TLAdapterNode($/;"	l
node	src/main/scala/tilelink/Fuzzer.scala	/^  val node = TLClientNode(Seq(TLMasterPortParameters.v1(clientParams)))$/;"	l
node	src/main/scala/tilelink/HintHandler.scala	/^  val node = TLAdapterNode($/;"	l
node	src/main/scala/tilelink/Isolation.scala	/^  val node = TLAsyncAdapterNode()$/;"	l
node	src/main/scala/tilelink/Jbar.scala	/^  val node: TLJunctionNode = new TLJunctionNode($/;"	l
node	src/main/scala/tilelink/Map.scala	/^  val node = TLAdapterNode($/;"	l
node	src/main/scala/tilelink/PatternPusher.scala	/^  val node = TLClientNode(Seq(TLMasterPortParameters.v1(Seq(TLMasterParameters.v1(name = name)))))$/;"	l
node	src/main/scala/tilelink/ProbePicker.scala	/^  val node = TLAdapterNode($/;"	l
node	src/main/scala/tilelink/RAMModel.scala	/^  val node = TLAdapterNode()$/;"	l
node	src/main/scala/tilelink/RationalCrossing.scala	/^  val node = NodeHandle(source.node, sink.node)$/;"	l
node	src/main/scala/tilelink/RationalCrossing.scala	/^  val node = TLRationalIdentityNode()$/;"	l
node	src/main/scala/tilelink/RationalCrossing.scala	/^  val node = TLRationalSinkNode(direction)$/;"	l
node	src/main/scala/tilelink/RationalCrossing.scala	/^  val node = TLRationalSourceNode()$/;"	l
node	src/main/scala/tilelink/RegionReplication.scala	/^  val node = TLAdapterNode($/;"	l
node	src/main/scala/tilelink/RegisterRouter.scala	/^  lazy val node: TLInwardNode = controlXing(NoCrossing)$/;"	l
node	src/main/scala/tilelink/RegisterRouter.scala	/^  val node = TLRegisterNode(Seq(address), device, "reg\/control", concurrency, beatBytes, undefZero, executable)$/;"	l
node	src/main/scala/tilelink/SRAM.scala	/^  val node = TLManagerNode(Seq(TLSlavePortParameters.v1($/;"	l
node	src/main/scala/tilelink/SourceShrinker.scala	/^  val node = (new TLAdapterNode($/;"	l
node	src/main/scala/tilelink/ToAHB.scala	/^  val node = TLToAHBNode(supportHints)$/;"	l
node	src/main/scala/tilelink/ToAPB.scala	/^  val node = TLToAPBNode()$/;"	l
node	src/main/scala/tilelink/ToAXI4.scala	/^  val node = TLToAXI4Node(wcorrupt)$/;"	l
node	src/main/scala/tilelink/WidthWidget.scala	/^  val node = new TLAdapterNode($/;"	l
node	src/main/scala/tilelink/Xbar.scala	/^  val node = new TLNexusNode($/;"	l
node	src/main/scala/tilelink/Xbar.scala	/^  val node = new TLNexusNode_ACancel($/;"	l
nodeBinding	src/main/scala/tilelink/BusWrapper.scala	/^     val nodeBinding: NodeBinding,$/;"	l
nodeDangles	src/main/scala/diplomacy/LazyModule.scala	/^    val nodeDangles = wrapper.nodes.reverse.flatMap(_.instantiate())$/;"	l
nodeIterator	src/main/scala/diplomacy/LazyModule.scala	/^  def nodeIterator(iterfunc: BaseNode => Unit): Unit = {$/;"	m
nodePath	src/main/scala/amba/axis/Parameters.scala	/^  val nodePath:      Seq[BaseNode])$/;"	l
nodePath	src/main/scala/amba/axis/Parameters.scala	/^  val nodePath:   Seq[BaseNode])$/;"	l
nodePath	src/main/scala/tilelink/Parameters.scala	/^  val nodePath:           Seq[BaseNode],$/;"	l
nodePath	src/main/scala/tilelink/Parameters.scala	/^  val nodePath:          Seq[BaseNode],$/;"	l
nodedebugstring	src/main/scala/diplomacy/Nodes.scala	/^  lazy val nodedebugstring: String = ""$/;"	l
nonEmptyPorts	src/main/scala/diplomacy/AddressDecoder.scala	/^    val nonEmptyPorts = ports.filter(_.nonEmpty)$/;"	l
nonStringToken	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^        var nonStringToken: Option[Token] = None$/;"	l
none	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^  def none = new BuiltInDevices {$/;"	m
none	src/main/scala/diplomacy/Parameters.scala	/^  def none = min == 0$/;"	m
none	src/main/scala/diplomacy/Parameters.scala	/^  val none    = BufferParams(0)$/;"	l
none	src/main/scala/diplomacy/Parameters.scala	/^  val none = new TransferSizes(0)$/;"	l
nonessential	src/main/scala/rocket/Decode.scala	/^    val nonessential = prime.filterNot(essential contains _)$/;"	l
nonstandard	src/main/scala/rocket/CSR.scala	/^    val nonstandard = supported_interrupts.getWidth-1 to 12 by -1$/;"	l
nonzeroResp	src/main/scala/devices/debug/DebugTransport.scala	/^  val nonzeroResp = Wire(Bool())$/;"	l
nop	src/main/scala/devices/debug/Debug.scala	/^    val nop = Wire(new GeneratedI())$/;"	l
nopResp	src/main/scala/devices/debug/DebugTransport.scala	/^  val nopResp     = Wire(new DMIAccessCapture(debugAddrBits))$/;"	l
normal_entries	src/main/scala/rocket/TLB.scala	/^  val normal_entries = entries.take(ordinary_entries.size)$/;"	l
notDebugTVec	src/main/scala/rocket/CSR.scala	/^  val notDebugTVec = {$/;"	l
notifyNode	src/main/scala/tilelink/SRAM.scala	/^  val notifyNode = ecc.notifyErrors.option(BundleBridgeSource(() => new TLRAMErrors(ecc, log2Ceil(address.max)).cloneType))$/;"	l
npc	src/main/scala/rocket/Frontend.scala	/^            val npc =$/;"	l
npc	src/main/scala/rocket/Frontend.scala	/^  val npc = Mux(s2_replay, s2_pc, predicted_npc)$/;"	l
npc	src/main/scala/rocket/Frontend.scala	/^  val npc = UInt(INPUT, width = vaddrBitsExtended)$/;"	l
nscratch	src/main/scala/devices/debug/dm_registers.scala	/^  val nscratch = UInt(4.W)$/;"	l
nt	src/main/scala/tile/FPU.scala	/^      val nt = floatTypes(typeTag(t) + 1)$/;"	l
ntpc	src/main/scala/rocket/Frontend.scala	/^  val ntpc = s1_base_pc + fetchBytes.U$/;"	l
null_int_source	src/main/scala/interrupts/NullIntSource.scala	/^    val null_int_source = LazyModule(new NullIntSource(num, ports, sources))$/;"	l
num	src/main/scala/interrupts/Parameters.scala	/^  val num = sources.map(_.range.size).sum$/;"	l
numBeats	src/main/scala/tilelink/Edges.scala	/^  def numBeats(x: TLChannel): UInt = {$/;"	m
numBeats1	src/main/scala/tilelink/Edges.scala	/^  def numBeats1(x: TLChannel): UInt = {$/;"	m
numBitsInWord	src/main/scala/groundtest/TraceGen.scala	/^  val numBitsInWord       = params.wordBits$/;"	l
numBitsInWordOffset	src/main/scala/groundtest/TraceGen.scala	/^  val numBitsInWordOffset = log2Up(numBytesInWord)$/;"	l
numBytesInWord	src/main/scala/groundtest/TraceGen.scala	/^  val numBytesInWord      = numBitsInWord \/ 8$/;"	l
numExtraAddrs	src/main/scala/groundtest/TraceGen.scala	/^  val numExtraAddrs       = 1 << logNumExtraAddrs$/;"	l
numFullBytes	src/main/scala/regmapper/RegField.scala	/^    val numFullBytes = reg.getWidth\/8$/;"	l
numGens	src/main/scala/groundtest/Tile.scala	/^  val numGens: Int$/;"	l
numGens	src/main/scala/groundtest/TraceGen.scala	/^  val numGens             = params.numGens$/;"	l
numHAMASKSlices	src/main/scala/devices/debug/Debug.scala	/^      val numHAMASKSlices = ((nComponents - 1)\/haWindowSize)+1$/;"	l
numHaltedStatus	src/main/scala/devices/debug/Debug.scala	/^    val numHaltedStatus = ((nComponents - 1) \/ 32) + 1$/;"	l
numIds	src/main/scala/amba/axi4/ToTL.scala	/^      val numIds = edgeIn.master.endId$/;"	l
numLCG16s	src/main/scala/util/LCG.scala	/^  val numLCG16s : Int = (w+15)\/16$/;"	l
numPadBytes	src/main/scala/regmapper/RegField.scala	/^    val numPadBytes = numBytes - numFullBytes - numPartialBytes$/;"	l
numPartialBytes	src/main/scala/regmapper/RegField.scala	/^    val numPartialBytes  = if ((reg.getWidth % 8) > 0) 1 else 0$/;"	l
numReqsPerGen	src/main/scala/groundtest/TraceGen.scala	/^  val numReqsPerGen       = params.maxRequests$/;"	l
numSources	src/main/scala/tilelink/Arbiter.scala	/^    val numSources: Int,$/;"	l
numTags	src/main/scala/groundtest/TraceGen.scala	/^  val numTags = 1 << logNumTags$/;"	l
num_reqs	src/main/scala/tilelink/Fuzzer.scala	/^    val num_reqs = Reg(init = UInt(nOperations, log2Up(nOperations+1)))$/;"	l
num_resps	src/main/scala/tilelink/Fuzzer.scala	/^    val num_resps = Reg(init = UInt(nOperations, log2Up(nOperations+1)))$/;"	l
numberRegs	src/main/scala/tile/BusErrorUnit.scala	/^    def numberRegs(x: Seq[Seq[RegField]]) = x.zipWithIndex.map {case (f, i) => (i * regWidth \/ 8) -> f }$/;"	m
o	src/main/scala/diplomacy/Nodes.scala	/^      val o = mapParamsD(oPorts.size, diParams)$/;"	l
o	src/main/scala/diplomacy/Nodes.scala	/^    val o = y.oPushed$/;"	l
o	src/main/scala/tile/RocketTile.scala	/^  val o = outer.nDCachePorts$/;"	l
oBindingInfo	src/main/scala/diplomacy/Nodes.scala	/^  def oBindingInfo: String = s"""${oBindings.size} outward nodes bound: [${oBindings.map(n => s"${n._3}-${n._2.name}").mkString(",")}]"""$/;"	m
oGroups	src/main/scala/diplomacy/Nodes.scala	/^    val oGroups = out.grouped(multiplicity).toList.transpose$/;"	l
oKnown	src/main/scala/diplomacy/Nodes.scala	/^      val oKnown = oBindings.map { case (_, n, b, _, _) => b match {$/;"	l
oParams	src/main/scala/diplomacy/Nodes.scala	/^  def oParams: Seq[UO] = node.outward.uoParams$/;"	m
oPorts	src/main/scala/diplomacy/Nodes.scala	/^  lazy val oPorts: Seq[(Int, InwardNode[DO, UO, BO], Parameters, SourceInfo)] = oDirectPorts.map(oTrace)$/;"	l
oRightReg	src/main/scala/regmapper/RegMapper.scala	/^    val oRightReg = Array.fill(regSize) { Bool(true) }$/;"	l
oStar	src/main/scala/tilelink/BankBinder.scala	/^    val oStar = if (oStars == 0) 0 else (ports - oKnown) \/ oStars$/;"	l
oStars	src/main/scala/diplomacy/Nodes.scala	/^      val oStars = oBindings.count { case (_,n,b,_,_) => b == BIND_STAR || (b == BIND_FLEX && edgeArityDirection(n) < 0) }$/;"	l
oSum	src/main/scala/diplomacy/Nodes.scala	/^      val oSum = oBindings.map { case (_, n, b, _, _) => b match {$/;"	l
o_data	src/main/scala/tilelink/Broadcast.scala	/^  val o_data = Queue(i_data, if (bufferless) 1 else (lineBytes \/ edgeIn.manager.beatBytes), pipe=bufferless)$/;"	l
obase	src/main/scala/diplomacy/AddressRange.scala	/^      val obase = if (base < x.base) base else x.base$/;"	l
object	src/main/scala/amba/ahb/package.scala	/^package object ahb$/;"	p
object	src/main/scala/amba/apb/package.scala	/^package object apb$/;"	p
object	src/main/scala/amba/axi4/package.scala	/^package object axi4$/;"	p
object	src/main/scala/amba/axis/package.scala	/^package object axis$/;"	p
object	src/main/scala/amba/package.scala	/^package object amba {$/;"	p
object	src/main/scala/diplomacy/package.scala	/^package object diplomacy$/;"	p
object	src/main/scala/groundtest/Package.scala	/^package object groundtest {$/;"	p
object	src/main/scala/interrupts/package.scala	/^package object interrupts$/;"	p
object	src/main/scala/jtag/package.scala	/^package object jtag {$/;"	p
object	src/main/scala/linting/rule/package.scala	/^package object rule {$/;"	p
object	src/main/scala/package.scala	/^package object rocketchip {$/;"	p
object	src/main/scala/prci/package.scala	/^package object prci$/;"	p
object	src/main/scala/rocket/package.scala	/^package object rocket extends rocket.constants.ScalarOpConstants with rocket.constants.MemoryOpConstants$/;"	p
object	src/main/scala/stage/package.scala	/^package object stage {$/;"	p
object	src/main/scala/tilelink/package.scala	/^package object tilelink$/;"	p
object	src/main/scala/unittest/package.scala	/^package object unittest$/;"	p
object	src/main/scala/util/package.scala	/^package object util {$/;"	p
odata	src/main/scala/tilelink/WidthWidget.scala	/^        val odata = Seq.fill(ratio) { WireInit(idata) }$/;"	l
odd	src/main/scala/tilelink/RationalCrossing.scala	/^    val odd = Module(new ClockDivider3)$/;"	l
oe	src/main/scala/util/ROMGenerator.scala	/^    val oe = Bool(INPUT)$/;"	l
oend	src/main/scala/diplomacy/AddressRange.scala	/^      val oend  = if (end  > x.end)  end  else x.end$/;"	l
ofBits	src/main/scala/regmapper/RegMapper.scala	/^    def ofBits(bits: List[Boolean]) = bits.foldRight(0){ case (x,y) => (if (x) 1 else 0) | y << 1 }$/;"	m
ofInt	src/main/scala/diplomacy/Resources.scala	/^    def ofInt(x: Int) = Seq(ResourceInt(BigInt(x)))$/;"	m
off	src/main/scala/diplomacy/Parameters.scala	/^      val off = bitIndexes(i).foldLeft(base) { case (a, b) => a.setBit(bits(b)) }$/;"	l
off	src/main/scala/regmapper/RegMapper.scala	/^        val off = bit - 8*bytes*word$/;"	l
offset	src/main/scala/devices/debug/Debug.scala	/^      val offset = if (cfg.atzero) DATA else (DATA-0x800) & 0xFFF$/;"	l
offset	src/main/scala/interrupts/Parameters.scala	/^  def offset(x: Int) = IntRange(x+start, x+end)$/;"	m
offset	src/main/scala/rocket/TLB.scala	/^    val offset = Mux(io.resp.gpa_is_pte, r_gpa(pgIdxBits-1, 0), io.req.bits.vaddr(pgIdxBits-1, 0))$/;"	l
offset	src/main/scala/tile/LazyRoCC.scala	/^  val offset = addr(blockOffset - 1, 0)$/;"	l
offset	src/main/scala/util/ScatterGather.scala	/^    val offset = if (data.size <= 1) 0 else 1 << log2Floor(data.size-1)$/;"	l
offset1	src/main/scala/util/PrefixSum.scala	/^      val offset1 = offset - 1$/;"	l
offsetIncrement	src/main/scala/regmapper/RegFieldDesc.scala	/^      val offsetIncrement = if (addAddressOffset) addressBlockInfo.addressOffset.toInt else 0$/;"	l
offsetlsb	src/main/scala/rocket/HellaCache.scala	/^  def offsetlsb = wordOffBits$/;"	m
offsetmsb	src/main/scala/rocket/HellaCache.scala	/^  def offsetmsb = idxLSB-1$/;"	m
oindex	src/main/scala/regmapper/RegMapper.scala	/^    val oindex = regIndexU(back .bits.index)$/;"	l
ok	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val ok = pmps.map(p => (p.r(0) || !needR) && (p.w(0) || !needW))$/;"	l
ok_b	src/main/scala/amba/axi4/ToTL.scala	/^      val ok_b  = Wire(in.b)$/;"	l
ok_r	src/main/scala/amba/axi4/ToTL.scala	/^      val ok_r  = Wire(in.r)$/;"	l
oldBytes	src/main/scala/regmapper/RegField.scala	/^    val oldBytes = Vec.tabulate(numBytes) { i => pad(8*(i+1)-1, 8*i) }$/;"	l
oldMain	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val oldMain = CircuitTarget(state.circuit.main)$/;"	l
old_coh	src/main/scala/rocket/NBDcache.scala	/^    val old_coh = io.req_bits.old_meta.coh$/;"	l
old_coh	src/main/scala/rocket/NBDcache.scala	/^  val old_coh = Reg(new ClientMetadata)$/;"	l
old_gennum1	src/main/scala/tilelink/Fragmenter.scala	/^        val old_gennum1 = Mux(aFirst, aOrigOH1 >> log2Ceil(beatBytes), gennum - UInt(1))$/;"	l
old_meta	src/main/scala/rocket/NBDcache.scala	/^  val old_meta = new L1Metadata$/;"	l
om	src/main/scala/diplomaticobjectmodel/ConstructOM.scala	/^    val om: Seq[OMComponent] = LogicalModuleTree.bind()$/;"	l
omBusError	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^    val omBusError = components.collectFirst { case x: OMBusError => x }$/;"	l
omBusMemory	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val omBusMemory = OMBusMemory($/;"	l
omDCache	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^    val omDCache = components.collectFirst { case x: OMDCache => x }.get$/;"	l
omICache	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^    val omICache = components.collectFirst { case x: OMICache => x }.get$/;"	l
omInnerRegMap	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val omInnerRegMap: OMRegisterMap = dmInner().dmInner.module.omRegMap$/;"	l
omMem	src/main/scala/diplomacy/SRAM.scala	/^    val omMem: OMMemory = DiplomaticObjectModelAddressing.makeOMMemory($/;"	l
omOuterRegMap	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val omOuterRegMap: OMRegisterMap = translateDMOuterRegisterOffsets(dmOuter().dmOuter.module.omRegMap)$/;"	l
omProtocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^    val omProtocol = (protocol, subProtocol) match {$/;"	l
omRegMap	src/main/scala/devices/debug/Debug.scala	/^    val omRegMap = dmiNode.regmap($/;"	l
omRegMap	src/main/scala/devices/debug/Debug.scala	/^    val omRegMap = withReset(reset.asAsyncReset) {$/;"	l
omRegMap	src/main/scala/devices/tilelink/CLINT.scala	/^    val omRegMap : OMRegisterMap = node.regmap($/;"	l
omRegMap	src/main/scala/devices/tilelink/Plic.scala	/^    val omRegMap : OMRegisterMap = node.regmap((priorityRegFields ++ pendingRegFields ++ enableRegFields ++ hartRegFields):_*)$/;"	l
omRegMap	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val omRegMap = OMRegisterMap($/;"	l
omRegMap	src/main/scala/tile/BusErrorUnit.scala	/^    val omRegMap = node.regmap(numberRegs(Seq($/;"	l
omRocketInterruptTargets	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^    val omRocketInterruptTargets: Seq[OMInterruptTarget] = getOMRocketInterruptTargets()$/;"	l
omSRAM	src/main/scala/util/DescribedSRAM.scala	/^    val omSRAM = DiplomaticObjectModelAddressing.makeOMSRAM($/;"	l
omSRAMs	src/main/scala/rocket/PTW.scala	/^  val omSRAMs = collection.mutable.ListBuffer[OMSRAM]()$/;"	l
omUTLB	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^    val omUTLB = components.collectFirst { case x: OMUTLB => x }$/;"	l
omitGraphML	src/main/scala/diplomacy/LazyModule.scala	/^  def omitGraphML: Boolean = nodes.forall(_.omitGraphML) && children.forall(_.omitGraphML)$/;"	m
omitGraphML	src/main/scala/diplomacy/Nodes.scala	/^  def omitGraphML: Boolean = outputs.isEmpty && inputs.isEmpty$/;"	m
omplic	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^        val omplic = plic.asInstanceOf[OMPLIC]$/;"	l
onAccess	src/main/scala/tilelink/Metadata.scala	/^  def onAccess(cmd: UInt): (Bool, UInt, ClientMetadata) = {$/;"	m
onCacheControl	src/main/scala/tilelink/Metadata.scala	/^  def onCacheControl(cmd: UInt): (Bool, UInt, ClientMetadata) = {$/;"	m
onGrant	src/main/scala/tilelink/Metadata.scala	/^  def onGrant(cmd: UInt, param: UInt): ClientMetadata = ClientMetadata(growFinisher(cmd, param))$/;"	m
onProbe	src/main/scala/tilelink/Metadata.scala	/^  def onProbe(param: UInt): (Bool, UInt, ClientMetadata) = { $/;"	m
onReset	src/main/scala/rocket/NBDcache.scala	/^  def onReset = L1Metadata(UInt(0), ClientMetadata.onReset)$/;"	m
onReset	src/main/scala/tilelink/Metadata.scala	/^  def onReset = ClientMetadata(ClientStates.Nothing)$/;"	m
onSecondaryAccess	src/main/scala/tilelink/Metadata.scala	/^  def onSecondaryAccess(first_cmd: UInt, second_cmd: UInt): (Bool, Bool, UInt, ClientMetadata, UInt) = {$/;"	m
onStmt	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^  def onStmt(moduleNameMap: Map[String, String])(stmt: Statement): Statement = stmt match {$/;"	m
one	src/main/scala/tile/FPU.scala	/^    val one = UInt(1) << (t.sig + t.exp - 1)$/;"	l
oneBeat	src/main/scala/amba/axis/Parameters.scala	/^  val oneBeat:     Boolean,$/;"	l
oneHot	src/main/scala/util/Misc.scala	/^  def oneHot(mod: Int): UInt = oneHot(mod, randomizer)$/;"	m
oneHot	src/main/scala/util/Misc.scala	/^  def oneHot(mod: Int, random: UInt): UInt = {$/;"	m
op	src/main/scala/devices/debug/DMI.scala	/^  val op   = UInt(DMIConsts.dmiOpSize.W)$/;"	l
op	src/main/scala/devices/debug/DebugTransport.scala	/^  val op = UInt(DMIConsts.dmiOpSize.W)$/;"	l
op	src/main/scala/tile/FPU.scala	/^        val op = Bits(INPUT, 2)$/;"	l
opInProgress	src/main/scala/groundtest/TraceGen.scala	/^  val opInProgress = Reg(init = UInt(0, 2))$/;"	l
opc	src/main/scala/rocket/DCache.scala	/^      val opc = whole_opc(uncachedGrantOpcodes.map(_.getWidth).max - 1, 0)$/;"	l
opc	src/main/scala/rocket/RVC.scala	/^        val opc = Mux(x(12), 0x3B.U(7.W), 0x33.U(7.W))$/;"	l
opc	src/main/scala/rocket/RVC.scala	/^      val opc = Mux(addiImm.orR, 0x13.U(7.W), 0x1F.U(7.W))$/;"	l
opc	src/main/scala/rocket/RVC.scala	/^      val opc = Mux(addiImm.orR, 0x37.U(7.W), 0x3F.U(7.W))$/;"	l
opc	src/main/scala/rocket/RVC.scala	/^      val opc = Mux(rd.orR, 0x1B.U(7.W), 0x1F.U(7.W))$/;"	l
opc	src/main/scala/rocket/RVC.scala	/^      val opc = Mux(x(12,5).orR, 0x13.U(7.W), 0x1F.U(7.W))$/;"	l
opcode	src/main/scala/devices/debug/Debug.scala	/^      val opcode  = UInt(7.W)$/;"	l
opcode	src/main/scala/devices/debug/Debug.scala	/^      val opcode = UInt(7.W)$/;"	l
opcode	src/main/scala/scie/SCIE.scala	/^  val opcode = BitPat("b?????????????????????????0?01011")$/;"	l
opcode	src/main/scala/tile/LazyRoCC.scala	/^  val opcode = Bits(7.W)$/;"	l
opcode	src/main/scala/tilelink/Broadcast.scala	/^  val opcode  = Reg(io.in_a.bits.opcode)$/;"	l
opcode	src/main/scala/tilelink/Bundles.scala	/^  val opcode  = UInt(width = 3)$/;"	l
opcode	src/main/scala/tilelink/Edges.scala	/^  def opcode(x: TLDataChannel): UInt = {$/;"	m
opcode	src/main/scala/tilelink/Monitor.scala	/^    val opcode  = Reg(UInt())$/;"	l
opcode	src/main/scala/tilelink/RAMModel.scala	/^    val opcode  = UInt(width = 3)$/;"	l
opcodes	src/main/scala/tile/LazyRoCC.scala	/^      val opcodes: OpcodeSet,$/;"	l
opdata	src/main/scala/tilelink/Edges.scala	/^    val opdata = x match {$/;"	l
openocd_config_path	scripts/RocketSim.py	/^    openocd_config_path = "RocketSim.cfg"$/;"	v	class:RocketSim
openocd_config_path	scripts/RocketSim32.py	/^    openocd_config_path = "RocketSim.cfg"$/;"	v	class:RocketSim
openocd_config_path	scripts/RocketSim64.py	/^    openocd_config_path = "RocketSim.cfg"$/;"	v	class:RocketSim
optDef	src/main/scala/diplomacy/Resources.scala	/^    def optDef(x: String, seq: Seq[ResourceValue]) = if (seq.isEmpty) None else Some(x -> seq)$/;"	m
option	src/main/scala/util/package.scala	/^    def option[T](z: => T): Option[T] = if (x) Some(z) else None$/;"	m
optional	src/main/scala/stage/phases/Checks.scala	/^    def optional(annoList: mutable.ListBuffer[Annotation], option: String): Unit = {$/;"	m
optional	src/main/scala/util/Location.scala	/^  def optional[L <: T](key: Location[_]): Option[L] = internalMap.lift(key.name).map(_.asInstanceOf[L])$/;"	m
options	src/main/scala/linting/LintReporter.scala	/^    val options = grouped.getOrElse("o", Nil).headOption.getOrElse(DisplayOptions()).asInstanceOf[DisplayOptions]$/;"	l
options	src/main/scala/linting/LintReporter.scala	/^  lazy val options = Seq($/;"	l
options	src/main/scala/linting/rule/LintRule.scala	/^  lazy val options = Seq($/;"	l
opts	src/main/scala/tile/FPU.scala	/^    val opts = floatTypes.map(t => box(x, t))$/;"	l
orR	src/main/scala/util/package.scala	/^    def orR: Bool = if (x.isEmpty) false.B else x.reduce(_||_)$/;"	m
orReduction	src/main/scala/diplomacy/BundleBridge.scala	/^  def orReduction[T <: Data](registered: Boolean)(seq: Seq[T]): T = {$/;"	m
ordered	src/main/scala/rocket/HellaCache.scala	/^  val ordered = Bool(INPUT)$/;"	l
ordered	src/main/scala/tilelink/AddressAdjuster.scala	/^    val ordered: Boolean = true \/\/ the replicated region should present with FIFO ordering$/;"	l
ordinary_entries	src/main/scala/rocket/TLB.scala	/^  def ordinary_entries = sectored_entries(memIdx) ++ superpage_entries$/;"	m
oready	src/main/scala/regmapper/RegMapper.scala	/^    val oready = Mux(back .bits.read, rofireMux, wofireMux)$/;"	l
orig	src/main/scala/diplomacy/Nodes.scala	/^      val orig = orig_module.dangles.find(_.sink == HalfEdge(node.inward.serial, i))$/;"	l
orig	src/main/scala/diplomacy/Nodes.scala	/^      val orig = orig_module.dangles.find(_.source == HalfEdge(node.outward.serial, i))$/;"	l
orig	src/main/scala/diplomacy/package.scala	/^      val orig = sc.s(args: _*)$/;"	l
orig_module	src/main/scala/diplomacy/Nodes.scala	/^    val orig_module = clone.base.module$/;"	l
others	src/main/scala/tilelink/Broadcast.scala	/^      val others = filter.io.response.bits.cacheOH & ~filter.io.response.bits.allocOH$/;"	l
ourSupport	src/main/scala/tilelink/AtomicAutomata.scala	/^      val ourSupport = TransferSizes(1, beatBytes)$/;"	l
ourSupport	src/main/scala/tilelink/AtomicAutomata.scala	/^      val ourSupport = TransferSizes(1, mp.beatBytes)$/;"	l
out	src/main/resources/vsrc/EICG_wrapper.v	/^  output out,$/;"	p
out	src/main/scala/amba/ahb/RegisterRouter.scala	/^    val out = RegMapper(beatBytes, concurrency, undefZero, in, mapping:_*)$/;"	l
out	src/main/scala/amba/apb/RegisterRouter.scala	/^    val out = RegMapper(beatBytes, concurrency, undefZero, in, mapping:_*)$/;"	l
out	src/main/scala/amba/axi4/Filter.scala	/^      val out = Mfilter(m)$/;"	l
out	src/main/scala/amba/axi4/Filter.scala	/^      val out = Sfilter(s)$/;"	l
out	src/main/scala/amba/axi4/Fragmenter.scala	/^        val out = Wire(a)$/;"	l
out	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val out = Queue.irrevocable($/;"	l
out	src/main/scala/amba/axi4/Xbar.scala	/^    val out = Wire(Vec(io_out.size, AXI4Bundle(wide_bundle)))$/;"	l
out	src/main/scala/amba/axis/Xbar.scala	/^    val out = Wire(Vec(io_out.size, AXISBundle(wide_bundle)))$/;"	l
out	src/main/scala/devices/debug/Debug.scala	/^  val out = new DebugExtTriggerOut(p(DebugModuleKey).get.nExtTriggers)$/;"	l
out	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val out = Wire(new DevicePMP(DevicePMPParams(addressBits, pageBits)))$/;"	l
out	src/main/scala/diplomacy/LazyModule.scala	/^    val out = body$/;"	l
out	src/main/scala/diplomacy/LazyModule.scala	/^    val out = new ModuleValue[T] {$/;"	l
out	src/main/scala/diplomacy/Nodes.scala	/^  def out: Seq[(BO, EO)] = {$/;"	m
out	src/main/scala/groundtest/Status.scala	/^    val out = Wire(new GroundTestStatus)$/;"	l
out	src/main/scala/regmapper/RegMapper.scala	/^        val out = Wire(Bool())$/;"	l
out	src/main/scala/regmapper/RegMapper.scala	/^    val out = Wire(Decoupled(new RegMapperOutput(inParams)))$/;"	l
out	src/main/scala/rocket/ALU.scala	/^    val out = UInt(OUTPUT, xLen)$/;"	l
out	src/main/scala/rocket/ALU.scala	/^  val out = Mux(io.fn === FN_ADD || io.fn === FN_SUB, io.adder_out, shift_logic)$/;"	l
out	src/main/scala/rocket/AMOALU.scala	/^    val out = Bits(OUTPUT, operandBits)$/;"	l
out	src/main/scala/rocket/AMOALU.scala	/^  val out =$/;"	l
out	src/main/scala/rocket/RVC.scala	/^    val out = Output(new ExpandedInstruction)$/;"	l
out	src/main/scala/tile/FPU.scala	/^        val out = Bits(OUTPUT, expWidth + sigWidth + 1)$/;"	l
out	src/main/scala/tile/FPU.scala	/^    val out = Valid(new FPResult)$/;"	l
out	src/main/scala/tile/FPU.scala	/^    val out = Valid(new Output)$/;"	l
out	src/main/scala/tile/LazyRoCC.scala	/^    val out = Vec(opcodes.size, Decoupled(new RoCCCommand))$/;"	l
out	src/main/scala/tilelink/Bundle_ACancel.scala	/^    val out = Wire(new TLBundle(params))$/;"	l
out	src/main/scala/tilelink/Bundle_ACancel.scala	/^    val out = Wire(new TLBundle_ACancel(in.params))$/;"	l
out	src/main/scala/tilelink/Filter.scala	/^        val out = mfilter(m)$/;"	l
out	src/main/scala/tilelink/Filter.scala	/^      val out = cfilter(c)$/;"	l
out	src/main/scala/tilelink/RegisterRouter.scala	/^    val out = RegMapper(beatBytes, concurrency, undefZero, in, mapping:_*)$/;"	l
out	src/main/scala/tilelink/Xbar.scala	/^          val out = idFactory$/;"	l
out	src/main/scala/tilelink/Xbar.scala	/^    val out = Wire(Vec(io_out.size, TLBundle_ACancel(wide_bundle)))$/;"	l
out	src/main/scala/util/Arbiters.scala	/^    val out = Decoupled(typ.cloneType)$/;"	l
out	src/main/scala/util/AsyncQueue.scala	/^    val out = Output(Bool())$/;"	l
out	src/main/scala/util/Broadcaster.scala	/^    val out = Vec(n, Decoupled(typ))$/;"	l
out	src/main/scala/util/BundleMap.scala	/^    val out = Wire(BundleMap(fields.filter(x => fn(x.key))))$/;"	l
out	src/main/scala/util/ClockGate.scala	/^    val out = Output(Clock())$/;"	l
out	src/main/scala/util/CreditedIO.scala	/^      val out = pipeline(debitDelay-1, creditDelay)$/;"	l
out	src/main/scala/util/IdentityModule.scala	/^    val out = gen.cloneType$/;"	l
out	src/main/scala/util/LCG.scala	/^    val out = UInt(OUTPUT, 16) $/;"	l
out	src/main/scala/util/LCG.scala	/^    val out = UInt(OUTPUT, w) $/;"	l
out	src/main/scala/util/LanePositionedQueue.scala	/^      val out = RegInit(0.U(laneBits.W))$/;"	l
out	src/main/scala/util/LanePositionedQueue.scala	/^      val out = RegInit(0.U(rowBits.W))$/;"	l
out	src/main/scala/util/LatencyPipe.scala	/^    val out = Decoupled(typ)$/;"	l
out	src/main/scala/util/Misc.scala	/^    val out = Wire(Valid(valids.head.bits.cloneType))$/;"	l
out	src/main/scala/util/MultiWidthFifo.scala	/^    val out = Decoupled(Bits(width = outW))$/;"	l
out	src/main/scala/util/MuxLiteral.scala	/^      val out = Wire(init = default)$/;"	l
out	src/main/scala/util/PlusArg.scala	/^    val out = Output(UInt(width.W))$/;"	l
out	src/main/scala/util/ReadyValidCancel.scala	/^    val out = ReadyValidCancel(gen)$/;"	l
out	src/main/scala/util/ReadyValidCancel.scala	/^    val out = Wire(new DecoupledIO(gen))$/;"	l
out	src/main/scala/util/ReadyValidCancel.scala	/^    val out = Wire(new ReadyValidCancel(chiselTypeOf(in.bits)))$/;"	l
out	src/main/scala/util/ReadyValidCancel.scala	/^    val out = Wire(new Valid(gen))$/;"	l
out1	src/main/scala/util/LanePositionedQueue.scala	/^      val out1 = WireInit(out + 1.U)$/;"	l
outBytes	src/main/scala/tilelink/WidthWidget.scala	/^      val outBytes = edgeOut.manager.beatBytes$/;"	l
outInts	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val outInts = getInitialValueInts(addressBits, pageBits, initial)$/;"	l
outMul	src/main/scala/rocket/Multiplier.scala	/^  val outMul = (state & (s_done_mul ^ s_done_div)) === (s_done_mul & ~s_done_div)$/;"	l
outTag	src/main/scala/tile/FPU.scala	/^  val outTag = in.bits.typeTagOut$/;"	l
outType	src/main/scala/tile/FPU.scala	/^    val outType = exactType.getOrElse(maxType)$/;"	l
out_a	src/main/scala/tilelink/Broadcast.scala	/^    val out_a = Decoupled(new TLBundleA(edgeOut.bundle))$/;"	l
out_aad	src/main/scala/tilelink/SRAM.scala	/^    val out_aad = Mux(d_mux, d_read || d_atomic, r_read || r_atomic)$/;"	l
out_arw	src/main/scala/tilelink/ToAXI4.scala	/^      val out_arw = Wire(Decoupled(new AXI4BundleARW(out.params)))$/;"	l
out_clock	src/main/scala/amba/axi4/AsyncCrossing.scala	/^      val out_clock = Clock(INPUT)$/;"	l
out_clock	src/main/scala/tilelink/AsyncCrossing.scala	/^      val out_clock = Clock(INPUT)$/;"	l
out_clock	src/main/scala/tilelink/RationalCrossing.scala	/^      val out_clock = Clock(INPUT)$/;"	l
out_d	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val out_d = Wire(in.d.bits)$/;"	l
out_req	src/main/scala/util/Arbiters.scala	/^    val out_req = Decoupled(reqTyp)$/;"	l
out_reset	src/main/scala/amba/axi4/AsyncCrossing.scala	/^      val out_reset = Bool(INPUT)$/;"	l
out_reset	src/main/scala/tilelink/AsyncCrossing.scala	/^      val out_reset = Bool(INPUT)$/;"	l
out_reset	src/main/scala/tilelink/RationalCrossing.scala	/^      val out_reset = Bool(INPUT)$/;"	l
out_resp	src/main/scala/util/Arbiters.scala	/^    val out_resp = Decoupled(respTyp).flip$/;"	l
out_unmasked	src/main/scala/rocket/AMOALU.scala	/^    val out_unmasked = Bits(OUTPUT, operandBits)$/;"	l
out_w	src/main/scala/tilelink/ToAXI4.scala	/^      val out_w = Wire(out.w)$/;"	l
out_xbar	src/main/scala/subsystem/PeripheryBus.scala	/^    val out_xbar = LazyModule(new TLXbar)$/;"	l
outer	src/main/scala/devices/debug/Periphery.scala	/^  val outer: HasPeripheryDebug$/;"	l
outer	src/main/scala/diplomacy/Nodes.scala	/^  def outer: OutwardNodeImp[DO, UO, EO, BO] = outwardHandle.outer$/;"	m
outer	src/main/scala/diplomacy/Nodes.scala	/^  def outer: OutwardNodeImp[DO, UO, EO, BO]$/;"	m
outer	src/main/scala/diplomacy/Nodes.scala	/^  val outer: OutwardNodeImp[DO, UO, EO, BO])($/;"	l
outer	src/main/scala/rocket/Frontend.scala	/^  val outer: HasICacheFrontend$/;"	l
outer	src/main/scala/rocket/HellaCache.scala	/^  val outer: HasHellaCache with HasTileParameters$/;"	l
outer	src/main/scala/rocket/PTW.scala	/^  val outer: CanHavePTW$/;"	l
outer	src/main/scala/subsystem/BaseSubsystem.scala	/^  val outer = _outer$/;"	l
outer	src/main/scala/subsystem/HasTiles.scala	/^  val outer: HasTiles with HasTileInterruptSources with HasTileInputConstants$/;"	l
outer	src/main/scala/subsystem/InterruptBus.scala	/^  val outer: HasExtInterrupts$/;"	l
outer	src/main/scala/subsystem/RTC.scala	/^  val outer: BaseSubsystem with CanHavePeripheryCLINT$/;"	l
outer	src/main/scala/tile/BaseTile.scala	/^    val outer = visibleManagers$/;"	l
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output [1:0] rocc_fpu_req_bits_fmaCmd,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output [1:0] rocc_fpu_req_bits_fmt,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output [1:0] rocc_fpu_req_bits_typeTagIn,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output [coreDataBits-1:0] rocc_mem_s1_data_data,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output [coreDataBytes-1:0] rocc_mem_req_bits_mask,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output [dcacheReqTagBits-1:0] rocc_mem_req_bits_tag,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output [fLen:0] rocc_fpu_req_bits_in2,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output [mem_req_bits_size_width-1:0] rocc_mem_req_bits_size,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output [xLen-1:0] rocc_resp_bits_data,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_busy,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_cmd_ready,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_div,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_fastpipe,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_fromint,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_ren2,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_swap12,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_wen,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_wflags,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_valid,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_resp_ready,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_mem_keep_clock_enabled,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_mem_req_bits_dv,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_mem_req_bits_no_xcpt,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_mem_req_bits_phys,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_mem_req_valid,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_mem_s2_kill,$/;"	p
output	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_resp_valid,$/;"	p
output	src/main/resources/vsrc/SimDTM.v	/^  output [ 1:0] debug_req_bits_op,$/;"	p
output	src/main/resources/vsrc/SimDTM.v	/^  output [31:0] exit$/;"	p
output	src/main/resources/vsrc/SimJTAG.v	/^                   output        jtag_TMS,$/;"	p
output	src/main/resources/vsrc/SimJTAG.v	/^                   output        jtag_TRSTn,$/;"	p
output	src/main/scala/diplomacy/AddressDecoder.scala	/^      val output = selected.reduceLeft(_ | _) | givenBits$/;"	l
output	src/main/scala/jtag/JtagTap.scala	/^  val output = new JtagOutput(irLength)$/;"	l
output	src/main/scala/util/ScatterGather.scala	/^  val output = Gather(input)$/;"	l
output	src/main/scala/util/ScatterGather.scala	/^  val output = Scatter(input)$/;"	l
output	src/main/scala/util/SynchronizerReg.scala	/^  val output = Seq.tabulate(w) { i =>$/;"	l
outputBaseName	src/main/scala/stage/RocketChipOptions.scala	/^                                         val outputBaseName:    Option[String] = None) {$/;"	l
outputIdRanges	src/main/scala/amba/axis/Xbar.scala	/^    val outputIdRanges = AXISXbar.mapOutputIds(edgesOut.map(_.slave))$/;"	l
outputIdRanges	src/main/scala/tilelink/Xbar.scala	/^    val outputIdRanges = TLXbar.mapOutputIds(edgesOut.map(_.manager))$/;"	l
outputPortFns	src/main/scala/tilelink/Xbar.scala	/^    val outputPortFns: Map[Vector[Boolean], Seq[UInt => Bool]] = requiredAC.map { connectO =>$/;"	l
outputPorts	src/main/scala/amba/axi4/Xbar.scala	/^    val outputPorts = route_addrs.map(seq => (addr: UInt) => seq.map(_.contains(addr)).reduce(_ || _))$/;"	l
outputState	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^    val outputState = renameNames(testCase)$/;"	l
output_dir	emulator/Makefile	/^output_dir = $(sim_dir)\/output$/;"	m
output_dir	vsim/Makefile	/^output_dir = $(sim_dir)\/output$/;"	m
outputs	src/main/scala/diplomacy/BundleBridge.scala	/^    val outputs: Seq[T] = if (node.out.size > 0) {$/;"	l
outputs	src/main/scala/diplomacy/Nodes.scala	/^  def outputs: Seq[(BaseNode, RenderedEdge)]$/;"	m
outputs	src/main/scala/diplomacy/Nodes.scala	/^  def outputs: Seq[(InwardNode[DO, UO, BO], RenderedEdge)] = oPorts map { case (i, n, _, _) => (n, n.inputs(i)._2) }$/;"	m
outputs	src/main/scala/prci/ClockGroup.scala	/^    val outputs = out.flatMap(_.member.data)$/;"	l
outs	src/main/scala/util/LCG.scala	/^  val outs = Seq.fill(numLCG16s) { LCG16(io.inc) }$/;"	l
outstream	src/main/scala/diplomacy/DeviceTree.scala	/^    val outstream = new ByteArrayOutputStream$/;"	l
outward	src/main/scala/diplomacy/Nodes.scala	/^  def outward: OutwardNode[DO, UO, BO]$/;"	m
outward	src/main/scala/diplomacy/Nodes.scala	/^  val outward = this$/;"	l
outward	src/main/scala/diplomacy/Nodes.scala	/^  val outward: OutwardNode[DO, UO, BO] = outwardHandle.outward$/;"	l
outwardNode	src/main/scala/subsystem/BankedL2Params.scala	/^  val outwardNode = banked(tempOut)$/;"	l
outwardNode	src/main/scala/subsystem/MemoryBus.scala	/^  val outwardNode: TLOutwardNode = ProbePicker() :*= xbar.node$/;"	l
outwardNode	src/main/scala/subsystem/PeripheryBus.scala	/^  def outwardNode: TLOutwardNode = node$/;"	m
outwardNode	src/main/scala/subsystem/SystemBus.scala	/^  val outwardNode: TLOutwardNode = system_bus_xbar.node$/;"	l
outwardNode	src/main/scala/tilelink/BusWrapper.scala	/^  def outwardNode: TLOutwardNode = address_adjuster.map(_.node).getOrElse(viewNode)$/;"	m
outwardNode	src/main/scala/tilelink/BusWrapper.scala	/^  def outwardNode: TLOutwardNode = xbar.node$/;"	m
outwardNode	src/main/scala/tilelink/BusWrapper.scala	/^  def outwardNode: TLOutwardNode$/;"	m
outwardNode	src/main/scala/tilelink/BusWrapper.scala	/^  val outwardNode: TLOutwardNode = jbar.node$/;"	l
ovalid	src/main/scala/regmapper/Test.scala	/^      val ovalid = progress && busy$/;"	l
overlap	src/main/scala/tilelink/RAMModel.scala	/^            val overlap = ~(~(f_base ^ d_base) | (f_bits | d_bits)) === UInt(0)$/;"	l
overlaps	src/main/scala/diplomacy/Parameters.scala	/^  def overlaps(s: Seq[IdRange]) = if (s.isEmpty) None else {$/;"	m
overlaps	src/main/scala/diplomacy/Parameters.scala	/^  def overlaps(x: AddressSet) = (~(mask | x.mask) & (base ^ x.base)) == 0$/;"	m
overlaps	src/main/scala/diplomacy/Parameters.scala	/^  def overlaps(x: IdRange) = start < x.end && x.start < end$/;"	m
overlaps	src/main/scala/interrupts/Parameters.scala	/^  def overlaps(x: IntRange) = start < x.end && x.start < end$/;"	m
overlaps	src/main/scala/tilelink/ErrorEvaluator.scala	/^  def overlaps(pattern: Seq[AddressSet])(a: TLBundleA) = {$/;"	m
overrideDesiredNameAnnos	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val overrideDesiredNameAnnos = state.annotations.collect {$/;"	l
p	src/main/scala/amba/ahb/RegisterRouter.scala	/^  implicit val p = arg.p$/;"	l
p	src/main/scala/amba/apb/RegisterRouter.scala	/^  implicit val p = arg.p$/;"	l
p	src/main/scala/amba/axi4/RegisterRouter.scala	/^  implicit val p = arg.p$/;"	l
p	src/main/scala/diplomacy/LazyModule.scala	/^  implicit val p: Parameters = wrapper.p$/;"	l
p	src/main/scala/groundtest/TraceGen.scala	/^  implicit val p: Parameters$/;"	l
p	src/main/scala/rocket/BTB.scala	/^    val p = page(addr)$/;"	l
p	src/main/scala/rocket/HellaCache.scala	/^  implicit val p: Parameters$/;"	l
p	src/main/scala/subsystem/Attachable.scala	/^  implicit val p: Parameters$/;"	l
p	src/main/scala/subsystem/BankedL2Params.scala	/^    implicit val p = context.p$/;"	l
p	src/main/scala/subsystem/HasTiles.scala	/^    implicit val p = context.p$/;"	l
p	src/main/scala/subsystem/HasTiles.scala	/^  implicit val p: Parameters$/;"	l
p	src/main/scala/tile/BaseTile.scala	/^  implicit val p: Parameters$/;"	l
p	src/main/scala/tile/Core.scala	/^  implicit val p: Parameters$/;"	l
p	src/main/scala/tilelink/RegisterRouter.scala	/^  implicit val p = arg.p$/;"	l
p	src/main/scala/unittest/Configs.scala	/^    implicit val p = q$/;"	l
p	src/main/scala/util/PSDTestMode.scala	/^  implicit val p: Parameters$/;"	l
pAddrBits	src/main/scala/groundtest/TraceGen.scala	/^  val pAddrBits           = params.addrBits$/;"	l
pType	src/main/scala/util/Property.scala	/^  val pType = PropertyType.Cover$/;"	l
pType	src/main/scala/util/Property.scala	/^  val pType: PropertyType$/;"	l
p_address	src/main/scala/amba/ahb/SRAM.scala	/^    val p_address   = Reg(a_address)$/;"	l
p_latch_d	src/main/scala/amba/ahb/SRAM.scala	/^    val p_latch_d   = Reg(Bool())$/;"	l
p_mask	src/main/scala/amba/ahb/SRAM.scala	/^    val p_mask      = Reg(a_mask)$/;"	l
p_valid	src/main/scala/amba/ahb/SRAM.scala	/^    val p_valid     = RegInit(Bool(false))$/;"	l
p_wdata	src/main/scala/amba/ahb/SRAM.scala	/^    val p_wdata     = d_wdata holdUnless p_latch_d$/;"	l
paa	src/main/scala/rocket/TLB.scala	/^  val paa = Bool() \/\/ AMO arithmetic$/;"	l
paa_array	src/main/scala/rocket/TLB.scala	/^  val paa_array = Cat(Fill(nPhysicalEntries, prot_aa), normal_entries.map(_.paa).asUInt)$/;"	l
paa_array_if_cached	src/main/scala/rocket/TLB.scala	/^  val paa_array_if_cached = paa_array | Mux(usingAtomicsInCache, c_array, 0.U)$/;"	l
pad	src/main/scala/regmapper/RegField.scala	/^    val pad = reg | UInt(0, width = 8*numBytes)$/;"	l
pad	src/main/scala/util/LanePositionedQueue.scala	/^      val pad  = (right ++ padding).take(lanes)$/;"	l
pad1	src/main/scala/rocket/Breakpoint.scala	/^  val pad1    = UInt(1.W)$/;"	l
pad2	src/main/scala/rocket/Breakpoint.scala	/^  val pad2    = UInt((mselectPos - svalueBits - 2).W)$/;"	l
padBytes	src/main/scala/regmapper/RegField.scala	/^    val padBytes = Seq.fill(numPadBytes){RegField(8)}$/;"	l
padTo	src/main/scala/util/package.scala	/^    def padTo(n: Int): UInt = {$/;"	m
paddedValid	src/main/scala/util/ShiftQueue.scala	/^    def paddedValid(i: Int) = if (i == -1) true.B else if (i == entries) false.B else valid(i)$/;"	m
padding	src/main/scala/util/LanePositionedQueue.scala	/^      val padding = Wire(Vec(lanes, gen))$/;"	l
paddr	src/main/scala/amba/apb/Bundles.scala	/^  val paddr     = UInt(OUTPUT, width = params.addrBits)$/;"	l
paddr	src/main/scala/amba/apb/SRAM.scala	/^    val paddr = Cat((mask zip (in.paddr >> log2Ceil(beatBytes)).asBools).filter(_._1).map(_._2).reverse)$/;"	l
paddr	src/main/scala/rocket/TLB.scala	/^  val paddr = UInt(width = paddrBits)$/;"	l
paddrBits	src/main/scala/tile/BaseTile.scala	/^  lazy val paddrBits: Int = {$/;"	l
page	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val page = 4096$/;"	l
page	src/main/scala/rocket/TLB.scala	/^    val page = Mux(!vstage1_en, Cat(bad_va, vpn), r_gpa >> pgIdxBits)$/;"	l
pageBits	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val pageBits = log2Ceil(page)$/;"	l
pageGranularityPMPs	src/main/scala/rocket/PTW.scala	/^  val pageGranularityPMPs = pmpGranularity >= (1 << pgIdxBits)$/;"	l
pageGranularityPMPs	src/main/scala/rocket/TLB.scala	/^  val pageGranularityPMPs = pmpGranularity >= (1 << pgIdxBits)$/;"	l
pageHit	src/main/scala/rocket/BTB.scala	/^  val pageHit = pageMatch(io.req.bits.addr)$/;"	l
pageValid	src/main/scala/rocket/BTB.scala	/^  val pageValid = Reg(init = UInt(0, nPages))$/;"	l
pages	src/main/scala/rocket/BTB.scala	/^  val pages = Reg(Vec(nPages, UInt(width=vaddrBits - matchBits)))$/;"	l
pagesMasked	src/main/scala/rocket/BTB.scala	/^  val pagesMasked = (pageValid.asBools zip pages).map { case (v, p) => Mux(v, p, 0.U) }$/;"	l
pairing	src/main/scala/diplomacy/LazyModule.scala	/^    val pairing = SortedMap(allDangles.groupBy(_.source).toSeq: _*)$/;"	l
pairs	src/main/scala/tilelink/Arbiter.scala	/^      val pairs = sources.toList$/;"	l
pal	src/main/scala/rocket/TLB.scala	/^  val pal = Bool() \/\/ AMO logical$/;"	l
pal_array	src/main/scala/rocket/TLB.scala	/^  val pal_array = Cat(Fill(nPhysicalEntries, prot_al), normal_entries.map(_.pal).asUInt)$/;"	l
pal_array_if_cached	src/main/scala/rocket/TLB.scala	/^  val pal_array_if_cached = pal_array | Mux(usingAtomicsInCache, c_array, 0.U)$/;"	l
param	src/main/scala/rocket/NBDcache.scala	/^  val param = UInt(width = TLPermissions.cWidth) $/;"	l
param	src/main/scala/tilelink/Broadcast.scala	/^  val param   = Reg(io.in_a.bits.param)$/;"	l
param	src/main/scala/tilelink/Bundles.scala	/^  val param   = UInt(width = List(TLAtomics.width, TLPermissions.aWidth, TLHints.width).max) \/\/ amo_opcode || grow perms || hint$/;"	l
param	src/main/scala/tilelink/Bundles.scala	/^  val param   = UInt(width = TLPermissions.bdWidth) \/\/ cap perms$/;"	l
param	src/main/scala/tilelink/Bundles.scala	/^  val param   = UInt(width = TLPermissions.cWidth) \/\/ shrink or report perms$/;"	l
param	src/main/scala/tilelink/Edges.scala	/^  def param(x: TLDataChannel): UInt = {$/;"	m
param	src/main/scala/tilelink/Monitor.scala	/^    val param   = Reg(UInt())$/;"	l
parameter	src/main/resources/vsrc/plusarg_reader.v	/^   parameter WIDTH=1,$/;"	c
parametersInfo	src/main/scala/diplomacy/Nodes.scala	/^  def parametersInfo: String =$/;"	m
params	src/main/scala/amba/ahb/RegisterRouter.scala	/^    val params = RegMapperParams(indexBits, beatBytes)$/;"	l
params	src/main/scala/amba/apb/RegisterRouter.scala	/^    val params = RegMapperParams(indexBits, beatBytes)$/;"	l
params	src/main/scala/amba/axi4/AsyncCrossing.scala	/^      val params = edgeOut.slave.async.copy(sync = psync)$/;"	l
params	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val params = RegMapperParams(log2Up((address.mask+1)\/beatBytes), beatBytes, fields)$/;"	l
params	src/main/scala/amba/axis/Parameters.scala	/^  val params:     Parameters,$/;"	l
params	src/main/scala/groundtest/TraceGen.scala	/^  val params: TraceGenParams$/;"	l
params	src/main/scala/groundtest/TraceGen.scala	/^  val params: TraceGenParams,$/;"	l
params	src/main/scala/stage/phases/AddDefaultTests.scala	/^    val params: Parameters = getConfig(view[RocketChipOptions](annotations).configNames.get).toInstance$/;"	l
params	src/main/scala/tilelink/AddressAdjuster.scala	/^    val params: ReplicatedRegion, \/\/ only devices in this region get adjusted$/;"	l
params	src/main/scala/tilelink/AsyncCrossing.scala	/^      val params = edgeOut.manager.async.copy(sync = psync)$/;"	l
params	src/main/scala/tilelink/AtomicAutomata.scala	/^      val params = TLAtomicAutomata.CAMParams(out.a.bits.params, domainsNeedingHelp.size)$/;"	l
params	src/main/scala/tilelink/RAMModel.scala	/^      val params = TLRAMModel.MonitorParameters(addressBits, sizeBits)$/;"	l
params	src/main/scala/tilelink/RegisterRouter.scala	/^    val params = RegMapperParams(log2Up(size\/beatBytes), beatBytes, fields)$/;"	l
params	src/main/scala/util/Annotations.scala	/^  def params[T <: Product](component: InstanceId, params: T): T = {$/;"	m
pardec	src/main/scala/util/ECC.scala	/^    val pardec = par.decode(x)$/;"	l
parent	src/main/scala/diplomacy/Resources.scala	/^    val parent =$/;"	l
parent	src/main/scala/diplomacy/Resources.scala	/^  def parent: Option[Device] = None$/;"	m
parents	src/main/scala/diplomacy/LazyModule.scala	/^  def parents: Seq[LazyModule] = parent match {$/;"	m
parents	src/main/scala/diplomacy/Nodes.scala	/^  def parents: Seq[LazyModule] = scope.map(lm => lm +: lm.parents).getOrElse(Nil)$/;"	m
parents	src/main/scala/diplomacy/Resources.scala	/^    val parents = int.map(_.device.get).distinct$/;"	l
parents	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^      val parents = if (superKlass == null)  interfaces$/;"	l
parse_line	scripts/vlsi_mem_gen	/^def parse_line(line):$/;"	f
parse_line	scripts/vlsi_rom_gen	/^def parse_line(line):$/;"	f
parse_prm	scripts/check_cache_trace.py	/^def parse_prm(fname):$/;"	f
parser	scripts/vlsi_mem_gen	/^  parser = argparse.ArgumentParser(description='Memory generator for Rocket Chip')$/;"	v
partNumber	src/main/scala/jtag/JtagUtils.scala	/^  val partNumber = UInt(16.W)$/;"	l
part_number	src/main/scala/devices/debug/DebugTransport.scala	/^  val part_number = Input(UInt(16.W))$/;"	l
partialAssignL	src/main/scala/util/BundleMap.scala	/^  def partialAssignL(that: BundleMap): Unit = {$/;"	m
partialAssignR	src/main/scala/util/BundleMap.scala	/^  def partialAssignR(that: BundleMap): Unit = {$/;"	m
partialBytes	src/main/scala/regmapper/RegField.scala	/^    val partialBytes = if (numPartialBytes > 0) {$/;"	l
partitionOrder	src/main/scala/diplomacy/AddressDecoder.scala	/^  val partitionOrder = Ordering.Iterable(portOrder)$/;"	l
partitionPartitions	src/main/scala/diplomacy/AddressDecoder.scala	/^  def partitionPartitions(partitions: Partitions, bit: BigInt): Partitions = {$/;"	m
partitionPort	src/main/scala/diplomacy/AddressDecoder.scala	/^  def partitionPort(port: Port, bit: BigInt): (Port, Port) = {$/;"	m
partitionPorts	src/main/scala/diplomacy/AddressDecoder.scala	/^  def partitionPorts(ports: Ports, bit: BigInt): (Ports, Ports) = {$/;"	m
partitioned_partitions	src/main/scala/diplomacy/AddressDecoder.scala	/^    val partitioned_partitions = partitions.map(p => partitionPorts(p, bit))$/;"	l
partitioned_ports	src/main/scala/diplomacy/AddressDecoder.scala	/^    val partitioned_ports = ports.map(p => partitionPort(p, bit))$/;"	l
partitions	src/main/scala/diplomacy/AddressDecoder.scala	/^      val partitions = Seq(nonEmptyPorts.map(_.sorted).sorted(portOrder))$/;"	l
passthrough	src/main/scala/rocket/RVC.scala	/^  def passthrough = inst(x)$/;"	m
passthrough	src/main/scala/rocket/TLB.scala	/^  val passthrough = Bool()$/;"	l
pathName	src/main/scala/diplomacy/LazyModule.scala	/^  lazy val pathName: String = module.pathName$/;"	l
pats	src/main/scala/rocket/CSR.scala	/^    val pats = for (((k, _), i) <- read_mapping.zipWithIndex)$/;"	l
pattern	src/main/scala/amba/ahb/Test.scala	/^  val pattern = Seq(AddressSet(0x8,   ~0x808), \/\/ ie: 0x8-0xf, 0x18-0x1f, ... 0x7f8-0x7ff$/;"	l
pattern	src/main/scala/amba/axi4/Test.scala	/^  val pattern = Seq(AddressSet(0x8,   ~0x808), \/\/ ie: 0x8-0xf, 0x18-0x1f, ... 0x7f8-0x7ff$/;"	l
pauser	src/main/scala/amba/apb/Bundles.scala	/^  val pauser    = BundleMap(params.requestFields)$/;"	l
pb	src/main/scala/regmapper/Test.scala	/^  def pb(bits: Int) = request(bits, pipe(3), busy)$/;"	m
pbase	src/main/scala/tilelink/ErrorEvaluator.scala	/^      val pbase = UInt(p.base)$/;"	l
pbus	src/main/scala/subsystem/BaseSubsystem.scala	/^  val pbus = tlBusWrapperLocationMap.lift(PBUS).getOrElse(sbus)$/;"	l
pbus	src/main/scala/subsystem/PeripheryBus.scala	/^    val pbus = LazyModule(new PeripheryBus(this, loc.name))$/;"	l
pbus	src/main/scala/subsystem/RTC.scala	/^  val pbus = outer.locateTLBusWrapper(PBUS)$/;"	l
pc	src/main/scala/rocket/BTB.scala	/^  val pc = UInt(width = vaddrBits)$/;"	l
pc	src/main/scala/rocket/Breakpoint.scala	/^    val pc = Input(UInt(vaddrBits.W))$/;"	l
pc	src/main/scala/rocket/CSR.scala	/^  val pc = UInt(INPUT, vaddrBitsExtended)$/;"	l
pc	src/main/scala/rocket/Frontend.scala	/^            val pc = s2_base_pc | (idx*coreInstBytes)$/;"	l
pc	src/main/scala/rocket/Frontend.scala	/^  val pc = UInt(width = vaddrBitsExtended)  \/\/ ID stage PC$/;"	l
pc	src/main/scala/rocket/Frontend.scala	/^  val pc = UInt(width = vaddrBitsExtended)$/;"	l
pc	src/main/scala/rocket/IBuf.scala	/^    val pc = UInt(OUTPUT, vaddrBitsExtended)$/;"	l
pc	src/main/scala/util/CoreMonitor.scala	/^  val pc = UInt(width = xLen.W)$/;"	l
pcWordBits	src/main/scala/rocket/IBuf.scala	/^  val pcWordBits = io.imem.bits.pc.extract(log2Ceil(fetchWidth*coreInstBytes)-1, log2Ceil(coreInstBytes))$/;"	l
pcWordMask	src/main/scala/rocket/IBuf.scala	/^  val pcWordMask = UInt(coreInstBytes*fetchWidth-1, vaddrBitsExtended)$/;"	l
pdata	src/main/scala/tilelink/WidthWidget.scala	/^        val pdata = rdata :+ idata$/;"	l
pdst	src/main/resources/csrc/comlog.cc	/^   int         pdst;                \/\/ the wb physical dest. register$/;"	m	struct:RobEntry	file:
pduser	src/main/scala/amba/apb/Bundles.scala	/^  val pduser    = BundleMap(params.responseFields)$/;"	l
peek	src/main/scala/rocket/BTB.scala	/^  def peek: UInt = stack(pos)$/;"	m
penable	src/main/scala/amba/apb/Bundles.scala	/^  val penable   = Bool(OUTPUT)$/;"	l
pending	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val pending = Cat(maxFlightPerId.zipWithIndex.map {$/;"	l
pending	src/main/scala/devices/tilelink/BusBlocker.scala	/^    val pending = RegNext(bar.module.io.pending)$/;"	l
pending	src/main/scala/devices/tilelink/BusBypass.scala	/^      val pending = Bool(OUTPUT)$/;"	l
pending	src/main/scala/devices/tilelink/ClockBlocker.scala	/^    val pending = RegNext(bar.module.io.pending)$/;"	l
pending	src/main/scala/devices/tilelink/MasterMux.scala	/^      val pending = Bool(OUTPUT)$/;"	l
pending	src/main/scala/devices/tilelink/Plic.scala	/^    val pending = Reg(init=Vec.fill(nDevices max 1){Bool(false)})$/;"	l
pending	src/main/scala/examples/ExampleDevice.scala	/^    val pending = RegInit(0xf.U(nInterrupts.W))$/;"	l
pendingBase	src/main/scala/devices/tilelink/Plic.scala	/^  def pendingBase = 0x1000$/;"	m
pendingRegDesc	src/main/scala/devices/tilelink/Plic.scala	/^    def pendingRegDesc(i: Int) =$/;"	m
pendingRegFields	src/main/scala/devices/tilelink/Plic.scala	/^    val pendingRegFields = Seq(PLICConsts.pendingBase ->$/;"	l
pendingUInt	src/main/scala/devices/tilelink/Plic.scala	/^    val pendingUInt = Cat(pending.reverse)$/;"	l
pending_interrupts	src/main/scala/rocket/CSR.scala	/^  val pending_interrupts = high_interrupts | (read_mip & reg_mie)$/;"	l
perAllTotal	src/main/scala/linting/LintReporter.scala	/^  val perAllTotal = "display:\\\\*=(\\\\d+)".r$/;"	l
perErrorLimit	src/main/scala/linting/LintException.scala	/^        val perErrorLimit       = lintDisplayOptions.perErrorLimit.getOrElse(lintName, lintErrors.size)$/;"	l
perSet	src/main/scala/util/Replacement.scala	/^  def perSet = false$/;"	m
perSet	src/main/scala/util/Replacement.scala	/^  def perSet = true$/;"	m
perSet	src/main/scala/util/Replacement.scala	/^  def perSet: Boolean$/;"	m
perTotal	src/main/scala/linting/LintReporter.scala	/^  val perTotal = "display:([_a-zA-Z0-9\\\\-]+)=(\\\\d+)".r$/;"	l
perf	src/main/scala/rocket/Frontend.scala	/^  val perf = new FrontendPerfEvents().asInput$/;"	l
perf	src/main/scala/rocket/HellaCache.scala	/^  val perf = new HellaCachePerfEvents().asInput$/;"	l
perf	src/main/scala/rocket/ICache.scala	/^  val perf = new ICachePerfEvents().asOutput$/;"	l
perf	src/main/scala/rocket/PTW.scala	/^  val perf = new PTWPerfEvents().asOutput$/;"	l
perfEvents	src/main/scala/rocket/RocketCore.scala	/^  val perfEvents = new EventSets(Seq($/;"	l
perfmon	src/main/scala/diplomaticobjectmodel/model/OMPerformanceMonitor.scala	/^  def perfmon(coreParams: RocketCoreParams): Option[OMPerformanceMonitor] = {$/;"	m
performanceMonitor	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^  def performanceMonitor: Option[OMPerformanceMonitor]$/;"	m
period	src/main/scala/util/Timer.scala	/^    val period  = UInt(INPUT, w)$/;"	l
periph_ips	src/main/scala/tile/Interrupts.scala	/^    val periph_ips = Seq($/;"	l
permissions	src/main/scala/rocket/TLBPermissions.scala	/^    val permissions = managers.foreach { m =>$/;"	l
permissions	src/main/scala/rocket/TLBPermissions.scala	/^    val permissions = managers.map { m =>$/;"	l
pf	src/main/scala/rocket/Frontend.scala	/^  val pf = new Bundle {$/;"	l
pf	src/main/scala/rocket/HellaCache.scala	/^  val pf = new AlignmentExceptions$/;"	l
pf	src/main/scala/rocket/TLB.scala	/^  val pf = new TLBExceptions$/;"	l
pf_inst_array	src/main/scala/rocket/TLB.scala	/^  val pf_inst_array = ~(x_array | (ptw_ae_array | ptw_gf_array))$/;"	l
pf_ld_array	src/main/scala/rocket/TLB.scala	/^  val pf_ld_array = Mux(cmd_read, ~(Mux(cmd_readx, x_array, r_array) | (ptw_ae_array | ptw_gf_array)), 0.U)$/;"	l
pf_st_array	src/main/scala/rocket/TLB.scala	/^  val pf_st_array = Mux(cmd_write_perms, ~(w_array | (ptw_ae_array | ptw_gf_array)), 0.U)$/;"	l
pgIdxBits	src/main/scala/tile/BaseTile.scala	/^  def pgIdxBits: Int = 12$/;"	m
pgLevelBits	src/main/scala/tile/BaseTile.scala	/^  def pgLevelBits: Int = 10 - log2Ceil(xLen \/ 32)$/;"	m
pgLevels	src/main/scala/tile/BaseTile.scala	/^  def pgLevels: Int = p(PgLevels)$/;"	m
pgLevelsToMode	src/main/scala/rocket/CSR.scala	/^  def pgLevelsToMode(i: Int) = (xLen, i) match {$/;"	m
pgMask	src/main/scala/rocket/PMP.scala	/^    val pgMask = pgLevelMap { idxBits => (((BigInt(1) << paddrBits) - (BigInt(1) << idxBits)) max 0).U } (pgLevel)$/;"	l
pgSize	src/main/scala/rocket/PTW.scala	/^    val pgSize = BigInt(1) << (pgIdxBits + ((pgLevels - 1 - i) * pgLevelBits))$/;"	l
pgUntagBits	src/main/scala/tile/L1Cache.scala	/^  def pgUntagBits = if (usingVM) untagBits min pgIdxBits else untagBits$/;"	m
phys	src/main/scala/rocket/HellaCache.scala	/^  val phys = Bool()$/;"	l
pick_a	src/main/scala/tilelink/AtomicAutomata.scala	/^        val pick_a = take_max === a_bigger$/;"	l
pick_a	src/main/scala/tilelink/Atomics.scala	/^  val pick_a = take_max === a_bigger$/;"	l
picker	src/main/scala/tilelink/ProbePicker.scala	/^    val picker = LazyModule(new ProbePicker)$/;"	l
pipe	src/main/scala/diplomacy/Parameters.scala	/^  val pipe    = BufferParams(1, false, true)$/;"	l
pipe	src/main/scala/regmapper/Test.scala	/^  def pipe(x: Int): (Bool, Bool, UInt) => (Bool, Bool, UInt) = { (ivalid, oready, idata) =>$/;"	m
pipe	src/main/scala/util/LatencyPipe.scala	/^    val pipe = Module(new LatencyPipe(in.bits, latency))$/;"	l
pipeid	src/main/scala/tile/FPU.scala	/^    val pipeid = UInt(width = log2Ceil(pipes.size))$/;"	l
pipeid	src/main/scala/tile/FPU.scala	/^  def pipeid(c: FPUCtrlSigs) = pipes.zipWithIndex.map(p => Mux(p._1.cond(c), UInt(p._2), UInt(0))).reduce(_|_)$/;"	m
pipeline	src/main/scala/util/CreditedIO.scala	/^  def pipeline(debitDelay: Int, creditDelay: Int): CreditedIO[T] = {$/;"	m
pipeline	src/main/scala/util/CreditedIO.scala	/^  def pipeline(delay: CreditedDelay): CreditedIO[T] =$/;"	m
pipelineIDToWB	src/main/scala/rocket/RocketCore.scala	/^  def pipelineIDToWB[T <: Data](x: T): T =$/;"	m
pipelined	src/main/scala/regmapper/RegField.scala	/^  def pipelined = !read.combinational || !write.combinational$/;"	m
pipelined	src/main/scala/regmapper/RegMapper.scala	/^    val pipelined = wordmap.values.map(_.map(_._2.pipelined)).flatten.reduce(_ || _)$/;"	l
pipelined	src/main/scala/scie/SCIE.scala	/^  val pipelined = Output(Bool())$/;"	l
pipelinedMul	src/main/scala/rocket/RocketCore.scala	/^  val pipelinedMul = usingMulDiv && mulDivParams.mulUnroll == xLen$/;"	l
pipes	src/main/scala/tile/FPU.scala	/^  val pipes = List($/;"	l
placeSpace	src/main/scala/util/Misc.scala	/^        val placeSpace = q === UInt(0)$/;"	l
plic	src/main/scala/devices/tilelink/Plic.scala	/^    val plic = new GatewayPLICIO$/;"	l
plic	src/main/scala/devices/tilelink/Plic.scala	/^    val plic = plicDomainWrapper { LazyModule(new TLPLIC(params, tlbus.beatBytes)) }$/;"	l
plicDomainWrapper	src/main/scala/devices/tilelink/Plic.scala	/^    val plicDomainWrapper = LazyModule(new ClockSinkDomain(take = None))$/;"	l
plicOpt	src/main/scala/devices/tilelink/Plic.scala	/^  val plicOpt  = p(PLICKey).map { params =>$/;"	l
plru	src/main/scala/rocket/PTW.scala	/^    val plru = new PseudoLRU(coreParams.nPTECacheEntries)$/;"	l
plru	src/main/scala/util/Replacement.scala	/^  val plru = new PseudoLRU(n_ways)$/;"	l
plru_way	src/main/scala/util/Replacement.scala	/^  val plru_way = logic.get_replace_way(current_state)$/;"	l
plusarg_reader	src/main/resources/vsrc/plusarg_reader.v	/^module plusarg_reader #($/;"	m
plusarg_reader	src/main/scala/util/PlusArg.scala	/^class plusarg_reader(val format: String, val default: BigInt, val docstring: String, val width: Int) extends BlackBox(Map($/;"	c
pmaHomogeneous	src/main/scala/rocket/PTW.scala	/^  val pmaHomogeneous = pmaPgLevelHomogeneous(count)$/;"	l
pmaPgLevelHomogeneous	src/main/scala/rocket/PTW.scala	/^  val pmaPgLevelHomogeneous = (0 until pgLevels) map { i =>$/;"	l
pma_checker	src/main/scala/rocket/DCache.scala	/^  val pma_checker = Module(new TLB(false, log2Ceil(coreDataBytes), TLBConfig(nTLBSets, nTLBWays, cacheParams.nTLBBasePageSectors, cacheParams.nTLBSuperpages)) with InlineInstance)$/;"	l
pmask	src/main/scala/tilelink/ErrorEvaluator.scala	/^      val pmask = UInt(p.mask & ((BigInt(1) << a.params.addressBits) - 1))$/;"	l
pmp	src/main/scala/diplomaticobjectmodel/model/OMCore.scala	/^  def pmp: Option[OMPMP]$/;"	m
pmp	src/main/scala/diplomaticobjectmodel/model/OMPMP.scala	/^  def pmp(coreParams: RocketCoreParams): Option[OMPMP] = {$/;"	m
pmp	src/main/scala/rocket/CSR.scala	/^  val pmp = Vec(nPMPs, new PMP).asOutput$/;"	l
pmp	src/main/scala/rocket/PMP.scala	/^    val pmp = Input(Vec(nPMPs, new PMP))$/;"	l
pmp	src/main/scala/rocket/PMP.scala	/^    val pmp = Wire(new PMP()(reg.p))$/;"	l
pmp	src/main/scala/rocket/PTW.scala	/^  val pmp = Vec(nPMPs, new PMP).asInput$/;"	l
pmp	src/main/scala/rocket/TLB.scala	/^  val pmp = Module(new PMPChecker(lgMaxSize))$/;"	l
pmp	src/main/scala/tile/BaseTile.scala	/^    val pmp = if (tileParams.core.nPMPs > 0) Map($/;"	l
pmp0	src/main/scala/rocket/PMP.scala	/^  val pmp0 = WireInit(0.U.asTypeOf(new PMP))$/;"	l
pmpCfgIndex	src/main/scala/rocket/CSR.scala	/^  def pmpCfgIndex(i: Int) = (xLen \/ 32) * (i \/ pmpCfgPerCSR)$/;"	m
pmpCfgPerCSR	src/main/scala/rocket/CSR.scala	/^  val pmpCfgPerCSR = xLen \/ new PMPConfig().getWidth$/;"	l
pmpGranularity	src/main/scala/rocket/RocketCore.scala	/^  val pmpGranularity: Int = if (useHypervisor) 4096 else 4$/;"	l
pmpGranularity	src/main/scala/tile/Core.scala	/^  val pmpGranularity = coreParams.pmpGranularity$/;"	l
pmpGranularity	src/main/scala/tile/Core.scala	/^  val pmpGranularity: Int$/;"	l
pmpHomogeneous	src/main/scala/rocket/PTW.scala	/^  val pmpHomogeneous = new PMPHomogeneityChecker(io.dpath.pmp).apply(r_pte.ppn << pgIdxBits, count)$/;"	l
pmpaddr0	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr0 = 0x3b0$/;"	l
pmpaddr1	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr1 = 0x3b1$/;"	l
pmpaddr10	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr10 = 0x3ba$/;"	l
pmpaddr11	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr11 = 0x3bb$/;"	l
pmpaddr12	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr12 = 0x3bc$/;"	l
pmpaddr13	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr13 = 0x3bd$/;"	l
pmpaddr14	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr14 = 0x3be$/;"	l
pmpaddr15	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr15 = 0x3bf$/;"	l
pmpaddr2	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr2 = 0x3b2$/;"	l
pmpaddr3	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr3 = 0x3b3$/;"	l
pmpaddr4	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr4 = 0x3b4$/;"	l
pmpaddr5	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr5 = 0x3b5$/;"	l
pmpaddr6	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr6 = 0x3b6$/;"	l
pmpaddr7	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr7 = 0x3b7$/;"	l
pmpaddr8	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr8 = 0x3b8$/;"	l
pmpaddr9	src/main/scala/rocket/Instructions.scala	/^  val pmpaddr9 = 0x3b9$/;"	l
pmpcfg0	src/main/scala/rocket/Instructions.scala	/^  val pmpcfg0 = 0x3a0$/;"	l
pmpcfg1	src/main/scala/rocket/Instructions.scala	/^  val pmpcfg1 = 0x3a1$/;"	l
pmpcfg2	src/main/scala/rocket/Instructions.scala	/^  val pmpcfg2 = 0x3a2$/;"	l
pmpcfg3	src/main/scala/rocket/Instructions.scala	/^  val pmpcfg3 = 0x3a3$/;"	l
pmps	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val pmps = RegInit(Vec(params.pmpRegisters.map { ival => DevicePMP(addressBits, params.pageBits, Some(ival)) }))$/;"	l
poison	src/main/scala/tilelink/SRAM.scala	/^    val poison = Mux(d_wb, d_poisonv, Mux(r_replay, r_poisonv, a_poisonv))$/;"	l
poisonous	src/main/scala/util/ECC.scala	/^  def poisonous(n: Int) = !isPow2(n+1)$/;"	m
pool	src/main/scala/tilelink/CacheCork.scala	/^        val pool = Module(new IDPool(sinkIds))$/;"	l
pop	src/main/scala/rocket/BTB.scala	/^  def pop(): Unit = when (!isEmpty) {$/;"	m
popBits	src/main/scala/util/MultiPortQueue.scala	/^    val popBits = log2Ceil(dense.lanes + sparse.size)$/;"	l
popBits	src/main/scala/util/ScatterGather.scala	/^    val popBits = log2Ceil(data.size)$/;"	l
port	src/main/scala/amba/ahb/Xbar.scala	/^        val port = edge.slave$/;"	l
port	src/main/scala/amba/apb/Xbar.scala	/^        val port = edge.slave$/;"	l
port	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  def port($/;"	m
port	src/main/scala/regmapper/RegisterRouter.scala	/^  val port = InModuleBody { ioNode.bundle }$/;"	l
port	src/main/scala/util/Annotations.scala	/^  def port[T <: Data]($/;"	m
port0	src/main/scala/amba/ahb/Xbar.scala	/^      val port0 = edgesOut(0).slave$/;"	l
port0	src/main/scala/amba/apb/Xbar.scala	/^      val port0 = edgesOut(0).slave$/;"	l
portMatch	src/main/scala/amba/axi4/Xbar.scala	/^              val portMatch = if (flight == 1) { Bool(true) } else { last === port }$/;"	l
portNames	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  val portNames = Map[PortType, String]($/;"	l
portOrder	src/main/scala/diplomacy/AddressDecoder.scala	/^  val portOrder = Ordering.Iterable(addressOrder)$/;"	l
port_addrs	src/main/scala/amba/ahb/Xbar.scala	/^      val port_addrs = edgesOut.map(_.slave.slaves.map(_.address).flatten)$/;"	l
port_addrs	src/main/scala/amba/apb/Xbar.scala	/^      val port_addrs = edgesOut.map(_.slave.slaves.map(_.address).flatten)$/;"	l
port_addrs	src/main/scala/amba/axi4/Xbar.scala	/^    val port_addrs = edgesOut.map(_.slave.slaves.map(_.address).flatten)$/;"	l
port_addrs	src/main/scala/tilelink/Xbar.scala	/^      val port_addrs = edgesOut.map(_.manager.managers.flatMap(_.address))$/;"	l
ports	src/main/scala/amba/axis/Xbar.scala	/^    val ports = (in zip request) map { case (i, r) => AXISXbar.fanout(i, r) }$/;"	l
ports	src/main/scala/diplomacy/AddressDecoder.scala	/^    val ports = keys.map(b => Seq(AddressSet(b, 0)))$/;"	l
ports	src/main/scala/tilelink/BankBinder.scala	/^    val ports = ids.size$/;"	l
portsAOI	src/main/scala/tilelink/Xbar.scala	/^    val portsAOI = transpose((in  zip requestAIO) map { case (i, r) => TLXbar_ACancel.fanout(i.a, r, edgesOut.map(_.params(ForceFanoutKey).a)) })$/;"	l
portsAROI	src/main/scala/amba/axi4/Xbar.scala	/^    val portsAROI = transpose((in  zip requestARIO) map { case (i, r) => AXI4Xbar.fanout(i.ar, r) })$/;"	l
portsAWOI	src/main/scala/amba/axi4/Xbar.scala	/^    val portsAWOI = transpose((in  zip requestAWIO) map { case (i, r) => AXI4Xbar.fanout(i.aw, r) })$/;"	l
portsBIO	src/main/scala/amba/axi4/Xbar.scala	/^    val portsBIO  = transpose((out zip requestBOI)  map { case (o, r) => AXI4Xbar.fanout(o.b,  r) })$/;"	l
portsBIO	src/main/scala/tilelink/Xbar.scala	/^    val portsBIO = transpose((out zip requestBOI) map { case (o, r) => TLXbar        .fanout(o.b, r, edgesIn .map(_.params(ForceFanoutKey).b)) })$/;"	l
portsCOI	src/main/scala/tilelink/Xbar.scala	/^    val portsCOI = transpose((in  zip requestCIO) map { case (i, r) => TLXbar        .fanout(i.c, r, edgesOut.map(_.params(ForceFanoutKey).c)) })$/;"	l
portsDIO	src/main/scala/tilelink/Xbar.scala	/^    val portsDIO = transpose((out zip requestDOI) map { case (o, r) => TLXbar        .fanout(o.d, r, edgesIn .map(_.params(ForceFanoutKey).d)) })$/;"	l
portsEOI	src/main/scala/tilelink/Xbar.scala	/^    val portsEOI = transpose((in  zip requestEIO) map { case (i, r) => TLXbar        .fanout(i.e, r, edgesOut.map(_.params(ForceFanoutKey).e)) })$/;"	l
portsRIO	src/main/scala/amba/axi4/Xbar.scala	/^    val portsRIO  = transpose((out zip requestROI)  map { case (o, r) => AXI4Xbar.fanout(o.r,  r) })$/;"	l
portsWOI	src/main/scala/amba/axi4/Xbar.scala	/^    val portsWOI  = transpose((in  zip requestWIO)  map { case (i, r) => AXI4Xbar.fanout(i.w,  r) })$/;"	l
pos	src/main/scala/rocket/AMOALU.scala	/^      val pos = 8 << i$/;"	l
pos	src/main/scala/util/LanePositionedQueue.scala	/^    val pos = Mux(i.U >= q.io.deq_0_lane, i.U, (i + lanes).U) - q.io.deq_0_lane$/;"	l
pos	src/main/scala/util/LanePositionedQueue.scala	/^    val pos = Mux(i.U >= q.io.enq_0_lane, i.U, (i + lanes).U) - q.io.enq_0_lane$/;"	l
post	src/main/scala/tilelink/ToAHB.scala	/^      val post = if (aFlow) send else next$/;"	l
postScript	src/main/scala/system/RocketTestSuite.scala	/^  def postScript = s"""$/;"	m
post_psd_reset	src/main/scala/util/ResetCatchAndSync.scala	/^  val post_psd_reset = Mux(io.psd.test_mode, io.psd.test_mode_reset, reset)$/;"	l
postexec	src/main/scala/devices/debug/abstract_commands.scala	/^  val postexec = Bool()$/;"	l
postmul_regs	src/main/scala/tile/FPU.scala	/^    val postmul_regs = if(latency>0) 1 else 0$/;"	l
pow2AddressMatch	src/main/scala/rocket/Breakpoint.scala	/^  def pow2AddressMatch(x: UInt) =$/;"	m
pow2Aligned	src/main/scala/rocket/PMP.scala	/^    val pow2Aligned = (lsbMask & ~mask(lgMaxSize-1, 0)) === 0$/;"	l
pow2Sizes	src/main/scala/tilelink/Xbar.scala	/^    val pow2Sizes = sizes.map { z => if (z == 0) 0 else 1 << log2Ceil(z) }$/;"	l
power	src/main/scala/prci/TestClockSource.scala	/^  val power = Input(Bool())$/;"	l
pp	src/main/scala/prci/ClockGroupDriver.scala	/^    implicit val pp = p$/;"	l
pp	src/main/scala/regmapper/Test.scala	/^  def pp(bits: Int) = request(bits, pipe(3), pipe(3))$/;"	m
ppn	src/main/scala/groundtest/DummyPTW.scala	/^    val ppn = UInt(width = ppnBits)$/;"	l
ppn	src/main/scala/rocket/CSR.scala	/^  val ppn = UInt(width = maxPAddrBits - pgIdxBits)$/;"	l
ppn	src/main/scala/rocket/PTW.scala	/^  val ppn = UInt(width = 54)$/;"	l
ppn	src/main/scala/rocket/PTW.scala	/^  val ppn = UInt(width = ppnBits)$/;"	l
ppn	src/main/scala/rocket/TLB.scala	/^  def ppn(vpn: UInt, data: TLBEntryData) = {$/;"	m
ppn	src/main/scala/rocket/TLB.scala	/^  val ppn = Mux1H(hitsVec :+ !vm_enabled, (all_entries zip entries).map{ case (entry, data) => entry.ppn(vpn, data) } :+ vpn(ppnBits-1, 0))$/;"	l
ppn	src/main/scala/rocket/TLB.scala	/^  val ppn = UInt(width = ppnBits)$/;"	l
ppnBits	src/main/scala/tile/BaseTile.scala	/^  def ppnBits: Int = paddrBits - pgIdxBits$/;"	m
ppp	src/main/scala/rocket/TLB.scala	/^  val ppp = Bool() \/\/ PutPartial$/;"	l
ppp_array	src/main/scala/rocket/TLB.scala	/^  val ppp_array = Cat(Fill(nPhysicalEntries, prot_pp), normal_entries.map(_.ppp).asUInt)$/;"	l
ppp_array_if_cached	src/main/scala/rocket/TLB.scala	/^  val ppp_array_if_cached = ppp_array | c_array$/;"	l
pprot	src/main/scala/amba/apb/Bundles.scala	/^  val pprot     = UInt(OUTPUT, width = params.protBits)$/;"	l
pprot	src/main/scala/tilelink/ToAPB.scala	/^        val pprot = Wire(Vec(3, Bool()))$/;"	l
pr	src/main/scala/rocket/TLB.scala	/^  val pr = Bool()$/;"	l
pr_array	src/main/scala/rocket/TLB.scala	/^  val pr_array = Cat(Fill(nPhysicalEntries, prot_r), normal_entries.map(_.pr).asUInt) & ~(ptw_ae_array | final_ae_array)$/;"	l
prdata	src/main/scala/amba/apb/Bundles.scala	/^  val prdata    = UInt(INPUT, width = params.dataBits)$/;"	l
pre	src/main/scala/tilelink/ToAHB.scala	/^      val pre  = if (aFlow) reg else step$/;"	l
pre_deq_row	src/main/scala/util/LanePositionedQueue.scala	/^  val pre_deq_row = Mux(deq_wrap, deq_row1, deq_row)$/;"	l
pre_enq_row	src/main/scala/util/LanePositionedQueue.scala	/^  val pre_enq_row = Mux(enq_wrap, enq_row1, enq_row)$/;"	l
pre_gap	src/main/scala/util/LanePositionedQueue.scala	/^  val pre_gap = (pre_enq_row >> 1).zext() - (pre_deq_row >> 1).zext()$/;"	l
pre_gap0	src/main/scala/util/LanePositionedQueue.scala	/^  val pre_gap0 = pre_gap === 0.S && next_maybe_empty$/;"	l
pre_gap1	src/main/scala/util/LanePositionedQueue.scala	/^  val pre_gap1 = pre_gap0 || pre_gap === (1-rows\/2).S || pre_gap === 1.S$/;"	l
pre_gap2	src/main/scala/util/LanePositionedQueue.scala	/^  val pre_gap2 = pre_gap1 || pre_gap === (2-rows\/2).S || pre_gap === 2.S$/;"	l
pready	src/main/scala/amba/apb/Bundles.scala	/^  val pready    = Bool(INPUT)$/;"	l
predictBranch	src/main/scala/rocket/Frontend.scala	/^      val predictBranch = predict_taken && (prevRVI && rviBranch || valid && rvcBranch)$/;"	l
predictJump	src/main/scala/rocket/Frontend.scala	/^      val predictJump = prevRVI && rviJump || valid && rvcJump$/;"	l
predictReturn	src/main/scala/rocket/Frontend.scala	/^      val predictReturn = btb.io.ras_head.valid && (prevRVI && rviReturn || valid && rvcReturn)$/;"	l
predict_taken	src/main/scala/rocket/Frontend.scala	/^      val predict_taken = s2_btb_resp_bits.bht.taken || force_taken$/;"	l
predicted_npc	src/main/scala/rocket/Frontend.scala	/^  val predicted_npc = Wire(init = ntpc)$/;"	l
predicted_taken	src/main/scala/rocket/Frontend.scala	/^  val predicted_taken = Wire(init = Bool(false))$/;"	l
prediction	src/main/scala/rocket/BTB.scala	/^  val prediction = new BHTResp$/;"	l
prediction	src/main/scala/rocket/BTB.scala	/^  val prediction = new BTBResp$/;"	l
prefetchable	src/main/scala/rocket/TLB.scala	/^  val prefetchable = Bool()$/;"	l
prefetchable_array	src/main/scala/rocket/TLB.scala	/^  val prefetchable_array = Cat((cacheable && homogeneous) << (nPhysicalEntries-1), normal_entries.map(_.c).asUInt)$/;"	l
prefix	src/main/scala/tilelink/AddressAdjuster.scala	/^  val prefix = BundleBridgeSink[UInt]()$/;"	l
prefix	src/main/scala/tilelink/RegionReplication.scala	/^  val prefix = BundleBridgeSink[UInt]()$/;"	l
prefixNode	src/main/scala/subsystem/BankedL2Params.scala	/^  val prefixNode = None$/;"	l
prefixNode	src/main/scala/subsystem/FrontBus.scala	/^  val prefixNode = None$/;"	l
prefixNode	src/main/scala/subsystem/MemoryBus.scala	/^  val prefixNode = replicator.map { r =>$/;"	l
prefixNode	src/main/scala/subsystem/PeripheryBus.scala	/^  val prefixNode = replicator.map { r =>$/;"	l
prefixNode	src/main/scala/subsystem/SystemBus.scala	/^  val prefixNode = replicator.map { r =>$/;"	l
prefixNode	src/main/scala/tilelink/BusWrapper.scala	/^  def prefixNode: Option[BundleBridgeNode[UInt]]$/;"	m
prefixNode	src/main/scala/tilelink/BusWrapper.scala	/^  val prefixNode = None$/;"	l
prefixNode	src/main/scala/tilelink/BusWrapper.scala	/^  val prefixNode = address_adjuster.map { a =>$/;"	l
prefixOR	src/main/scala/amba/axi4/Xbar.scala	/^    val prefixOR = winner.scanLeft(Bool(false))(_||_).init$/;"	l
prefixOR	src/main/scala/amba/axis/Xbar.scala	/^      val prefixOR = winner.scanLeft(false.B)(_||_).init$/;"	l
prefixOR	src/main/scala/tilelink/Arbiter.scala	/^      val prefixOR = earlyWinner.scanLeft(false.B)(_||_).init$/;"	l
prepend	src/main/scala/regmapper/RegMapper.scala	/^      val prepend = if (low == 0) { f_data } else { Cat(f_data, dataOut(reg) | UInt(0, width=low)) }$/;"	l
pretty	src/main/scala/diplomacy/Parameters.scala	/^  def pretty(fmt: String) =$/;"	m
pretty	src/main/scala/diplomacy/Parameters.scala	/^  def pretty: String = mapping.map(_.pretty(fmt)).mkString(",\\n")$/;"	m
prettySourceMapping	src/main/scala/tilelink/Edges.scala	/^  def prettySourceMapping(context: String): String = {$/;"	m
prettyTab	src/main/scala/util/PlusArg.scala	/^    val prettyTab = tab + " " * 44 \/\/ Length of 'static const ...'$/;"	l
prev	src/main/scala/groundtest/Configs.scala	/^    val prev = up(TilesLocated(InSubsystem), site)$/;"	l
prev	src/main/scala/subsystem/Configs.scala	/^    val prev = up(RocketTilesKey, site)$/;"	l
prev	src/main/scala/tile/FPU.scala	/^          val prev = helper(unswizzled, prevT)$/;"	l
prev	src/main/scala/tile/FPU.scala	/^      val prev =$/;"	l
prevChain	src/main/scala/rocket/CSR.scala	/^            val prevChain = if (i == 0) false.B else reg_bp(i-1).control.chain$/;"	l
prevDMode	src/main/scala/rocket/CSR.scala	/^            val prevDMode = if (i == 0) false.B else reg_bp(i-1).control.dmode$/;"	l
prevOK	src/main/scala/tile/FPU.scala	/^      val prevOK = !isBox(x, t) || helper(unswizzled, prevT)$/;"	l
prevRVI	src/main/scala/rocket/Frontend.scala	/^      val prevRVI = prevValid && !insnIsRVC(prevBits)$/;"	l
prevRecoded	src/main/scala/tile/FPU.scala	/^      val prevRecoded = Cat($/;"	l
prevT	src/main/scala/tile/FPU.scala	/^          val prevT = prevType(t)$/;"	l
prevT	src/main/scala/tile/FPU.scala	/^        val prevT = prevType(t)$/;"	l
prevT	src/main/scala/tile/FPU.scala	/^      val prevT = prevType(t)$/;"	l
prevType	src/main/scala/tile/FPU.scala	/^  def prevType(t: FType) = floatTypes(typeTag(t) - 1)$/;"	m
prevUnrecoded	src/main/scala/tile/FPU.scala	/^      val prevUnrecoded = ieee(prevRecoded, prevT)$/;"	l
prev_cease	src/main/scala/tile/Interrupts.scala	/^      val prev_cease = RegNext(cease, false.B)$/;"	l
pri_rdy	src/main/scala/rocket/NBDcache.scala	/^  var pri_rdy = Bool(false)$/;"	l
primary	src/main/scala/diplomacy/AddressRange.scala	/^    val primary   = (this.base - x.base).signum$/;"	l
primary	src/main/scala/diplomacy/Parameters.scala	/^    val primary   = (this.base - x.base).signum \/\/ smallest address first$/;"	l
primary	src/main/scala/diplomacy/Parameters.scala	/^    val primary   = (this.start - x.start).signum$/;"	l
prime	src/main/scala/rocket/Decode.scala	/^      val prime = getPrimeImplicants(minterms ++ dontcares, bits)$/;"	l
prime	src/main/scala/rocket/Decode.scala	/^    val prime = getPrimeImplicants(minterms, maxterms, bits)$/;"	l
prime	src/main/scala/rocket/Decode.scala	/^    var prime = List[Term]()$/;"	l
prime	src/main/scala/rocket/Decode.scala	/^  var prime = true$/;"	l
primeCovers	src/main/scala/rocket/Decode.scala	/^    val primeCovers = prime.map(p => minterms.filter(p covers _))$/;"	l
printManagers	src/main/scala/tilelink/AddressAdjuster.scala	/^  def printManagers(kind: String, managers: Seq[TLSlaveParameters]): Unit = {$/;"	m
print_usage	regression/run-test-bucket	/^print_usage() {$/;"	f
printf_cond	src/main/resources/vsrc/TestDriver.v	/^  wire printf_cond = verbose && !reset;$/;"	n
prio	src/main/scala/devices/tilelink/Plic.scala	/^    val prio = Vec(nDevices, UInt(width = prioBits)).flip$/;"	l
prioBits	src/main/scala/devices/tilelink/Plic.scala	/^    val prioBits = log2Ceil(nPriorities+1)$/;"	l
priority	src/main/scala/devices/tilelink/Plic.scala	/^    val priority =$/;"	l
priority	src/main/scala/rocket/CSR.scala	/^    val priority = nonstandard ++ standard$/;"	l
priorityBase	src/main/scala/devices/tilelink/Plic.scala	/^  def priorityBase = 0x0$/;"	m
priorityBytes	src/main/scala/devices/tilelink/Plic.scala	/^  def priorityBytes = 4$/;"	m
priorityRegDesc	src/main/scala/devices/tilelink/Plic.scala	/^    def priorityRegDesc(i: Int) =$/;"	m
priorityRegField	src/main/scala/devices/tilelink/Plic.scala	/^    def priorityRegField(x: UInt, i: Int) =$/;"	m
priorityRegFields	src/main/scala/devices/tilelink/Plic.scala	/^    val priorityRegFields = priority.zipWithIndex.map { case (p, i) =>$/;"	l
priv	src/main/scala/rocket/CSR.scala	/^  val priv = UInt(width = 3)$/;"	l
priv	src/main/scala/rocket/TLB.scala	/^  val priv = io.req.bits.prv$/;"	l
priv	src/main/scala/util/TraceCoreInterface.scala	/^  val priv = UInt(4.W)$/;"	l
priv_mode	src/main/scala/util/CoreMonitor.scala	/^  val priv_mode = UInt(width = 3.W)$/;"	l
priv_rw_ok	src/main/scala/rocket/TLB.scala	/^  val priv_rw_ok = Mux(!priv_s || sum, entries.map(_.u).asUInt, 0.U) | Mux(priv_s, ~entries.map(_.u).asUInt, 0.U)$/;"	l
priv_s	src/main/scala/rocket/TLB.scala	/^  val priv_s = priv(0)$/;"	l
priv_uses_vm	src/main/scala/rocket/TLB.scala	/^  val priv_uses_vm = priv <= PRV.S$/;"	l
priv_v	src/main/scala/rocket/TLB.scala	/^  val priv_v = usingHypervisor && io.req.bits.v$/;"	l
priv_x_ok	src/main/scala/rocket/TLB.scala	/^  val priv_x_ok = Mux(priv_s, ~entries.map(_.u).asUInt, entries.map(_.u).asUInt)$/;"	l
privileged	src/main/scala/amba/package.scala	/^    val privileged = Bool() \/\/ machine_mode=true,   user_mode=false$/;"	l
probe	src/main/scala/tilelink/Broadcast.scala	/^    val probe = Input(Valid(new ProbeTrackInfo(caches)))$/;"	l
probeIO	src/main/scala/tilelink/Xbar.scala	/^    val probeIO = (edgesIn zip reachableIO).map { case (cp, reachableO) =>$/;"	l
probeIdx	src/main/scala/rocket/DCache.scala	/^  def probeIdx(b: TLBundleB): UInt = b.address(idxMSB, idxLSB)$/;"	m
probeNack	src/main/scala/rocket/DCache.scala	/^      val probeNack = Wire(init = true.B)$/;"	l
probeResponse	src/main/scala/rocket/NBDcache.scala	/^  val probeResponse = edge.ProbeAck($/;"	l
probe_bits	src/main/scala/rocket/DCache.scala	/^  val probe_bits = RegEnable(tl_out.b.bits, tl_out.b.fire()) \/\/ TODO has data now :($/;"	l
probe_busy	src/main/scala/tilelink/Broadcast.scala	/^      val probe_busy = probe_todo.orR()$/;"	l
probe_done	src/main/scala/tilelink/Broadcast.scala	/^  val probe_done = count === 0.U$/;"	l
probe_line	src/main/scala/tilelink/Broadcast.scala	/^      val probe_line = Reg(UInt())$/;"	l
probe_next	src/main/scala/tilelink/Broadcast.scala	/^      val probe_next = probe_todo & ~(leftOR(probe_todo) << 1)$/;"	l
probe_perms	src/main/scala/tilelink/Broadcast.scala	/^      val probe_perms = Reg(UInt(2.W))$/;"	l
probe_rdy	src/main/scala/rocket/NBDcache.scala	/^    val probe_rdy = Bool(OUTPUT)$/;"	l
probe_target	src/main/scala/tilelink/Broadcast.scala	/^      val probe_target = if (caches.size == 0) 0.U else Mux1H(probe_next, cache_targets)$/;"	l
probe_todo	src/main/scala/tilelink/Broadcast.scala	/^      val probe_todo = RegInit(0.U(max(1, caches.size).W))$/;"	l
probedack	src/main/scala/tilelink/Broadcast.scala	/^    val probedack = Input(Bool())$/;"	l
probenack	src/main/scala/tilelink/Broadcast.scala	/^    val probenack = Input(Bool())$/;"	l
prober	src/main/scala/rocket/NBDcache.scala	/^  val prober = Module(new ProbeUnit)$/;"	l
probesack	src/main/scala/tilelink/Broadcast.scala	/^    val probesack = Input(Bool())$/;"	l
proc	src/main/scala/diplomacy/DeviceTree.scala	/^    val proc = "dtc -O dtb" #< instream #> outstream$/;"	l
process_acquire	scripts/check_comparator_trace.py	/^def process_acquire(acq_id, body):$/;"	f
process_get	scripts/check_cache_trace.py	/^def process_get(addr_block, addr_beat, data):$/;"	f
process_input	scripts/check_comparator_trace.py	/^def process_input(f):$/;"	f
process_line	scripts/check_cache_trace.py	/^def process_line(line):$/;"	f
process_put	scripts/check_comparator_trace.py	/^def process_put(xid, addr_block, addr_beat, data, wmask):$/;"	f
process_put_block	scripts/check_comparator_trace.py	/^def process_put_block(xid, addr_block, data):$/;"	f
process_release	scripts/check_cache_trace.py	/^def process_release(addr_block, addr_beat, data):$/;"	f
prod	src/main/scala/rocket/Multiplier.scala	/^    val prod = Cat(mplierSign, mplier(cfg.mulUnroll-1, 0)).asSInt * mpcand + accum$/;"	l
prod	src/main/scala/rocket/Multiplier.scala	/^  val prod = lhs * rhs$/;"	l
productArity	src/main/scala/tilelink/Parameters.scala	/^  def productArity: Int = 10$/;"	m
productArity	src/main/scala/tilelink/Parameters.scala	/^  def productArity: Int = 11$/;"	m
productArity	src/main/scala/tilelink/Parameters.scala	/^  def productArity: Int = 6$/;"	m
productElement	src/main/scala/tilelink/Parameters.scala	/^  def productElement(n: Int): Any = n match {$/;"	m
progbufsize	src/main/scala/devices/debug/dm_registers.scala	/^  val progbufsize = UInt(5.W)$/;"	l
programBufferMem	src/main/scala/devices/debug/Debug.scala	/^    val programBufferMem    = Reg(Vec(cfg.nProgramBufferWords*4, UInt(8.W)))$/;"	l
programBufferNxt	src/main/scala/devices/debug/Debug.scala	/^    val programBufferNxt    = WireInit(programBufferMem)$/;"	l
progress	src/main/scala/regmapper/Test.scala	/^      val progress = lfsr(0)$/;"	l
prop_name_set	src/main/scala/formal/FormalUtils.scala	/^  var prop_name_set = collection.mutable.Set[String]()$/;"	l
proposed_src	src/main/scala/formal/FormalUtils.scala	/^    val proposed_src = if (custom_name == "") prop_type.toString + "_" + line_info else custom_name$/;"	l
prot	src/main/scala/amba/axi4/Bundles.scala	/^  val prot   = UInt(width = params.protBits)$/;"	l
prot	src/main/scala/tilelink/ToAXI4.scala	/^        val prot  = Wire(Vec(3, Bool()))$/;"	l
protBits	src/main/scala/amba/ahb/Parameters.scala	/^  val protBits  = AHBParameters.protBits$/;"	l
protBits	src/main/scala/amba/ahb/Protocol.scala	/^  val protBits  = 4$/;"	l
protBits	src/main/scala/amba/apb/Parameters.scala	/^  val protBits  = APBParameters.protBits$/;"	l
protBits	src/main/scala/amba/apb/Protocol.scala	/^  val protBits  = 3$/;"	l
protBits	src/main/scala/amba/axi4/Parameters.scala	/^  val protBits  = AXI4Parameters.protBits$/;"	l
protBits	src/main/scala/amba/axi4/Protocol.scala	/^  val protBits  = 3$/;"	l
prot_aa	src/main/scala/rocket/TLB.scala	/^  val prot_aa = fastCheck(_.supportsArithmetic)$/;"	l
prot_al	src/main/scala/rocket/TLB.scala	/^  val prot_al = fastCheck(_.supportsLogical)$/;"	l
prot_eff	src/main/scala/rocket/TLB.scala	/^  val prot_eff = fastCheck(Seq(RegionType.PUT_EFFECTS, RegionType.GET_EFFECTS) contains _.regionType)$/;"	l
prot_pp	src/main/scala/rocket/TLB.scala	/^  val prot_pp = fastCheck(_.supportsPutPartial)$/;"	l
prot_r	src/main/scala/rocket/TLB.scala	/^  val prot_r = fastCheck(_.supportsGet) && !deny_access_to_debug && pmp.io.r$/;"	l
prot_w	src/main/scala/rocket/TLB.scala	/^  val prot_w = fastCheck(_.supportsPutFull) && !deny_access_to_debug && pmp.io.w$/;"	l
prot_x	src/main/scala/rocket/TLB.scala	/^  val prot_x = fastCheck(_.executable) && !deny_access_to_debug && pmp.io.x$/;"	l
protocol	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  def protocol: OMProtocol$/;"	m
protocolSpecificationVersions	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  val protocolSpecificationVersions = Map[ProtocolType, String]($/;"	l
protocolSpecifications	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  val protocolSpecifications = Map[(ProtocolType, SubProtocolType), String]($/;"	l
prv	src/main/scala/rocket/CSR.scala	/^  val prv = UInt(width = PRV.SZ)$/;"	l
prv	src/main/scala/rocket/PMP.scala	/^    val prv = Input(UInt(PRV.SZ.W))$/;"	l
prv	src/main/scala/rocket/TLB.scala	/^  val prv = UInt(PRV.SZ.W)$/;"	l
psd	src/main/scala/devices/debug/Periphery.scala	/^  val psd = IO(new PSDIO)$/;"	l
psd	src/main/scala/util/PSDTestMode.scala	/^  val psd = p(IncludePSDTest).option(new PSDTestMode().asInput)$/;"	l
psd	src/main/scala/util/ResetCatchAndSync.scala	/^    val psd = new PSDTestMode().asInput$/;"	l
psel	src/main/scala/amba/apb/Bundles.scala	/^  val psel      = Bool(OUTPUT)$/;"	l
pslverr	src/main/scala/amba/apb/Bundles.scala	/^  val pslverr   = Bool(INPUT)$/;"	l
pstore1_addr	src/main/scala/rocket/DCache.scala	/^  val pstore1_addr = RegEnable(s1_vaddr, s1_valid_not_nacked && s1_write)$/;"	l
pstore1_cmd	src/main/scala/rocket/DCache.scala	/^  val pstore1_cmd = RegEnable(s1_req.cmd, s1_valid_not_nacked && s1_write)$/;"	l
pstore1_data	src/main/scala/rocket/DCache.scala	/^  val pstore1_data = RegEnable(io.cpu.s1_data.data, s1_valid_not_nacked && s1_write)$/;"	l
pstore1_held	src/main/scala/rocket/DCache.scala	/^  val pstore1_held = RegInit(false.B)$/;"	l
pstore1_mask	src/main/scala/rocket/DCache.scala	/^  val pstore1_mask = RegEnable(s1_mask, s1_valid_not_nacked && s1_write)$/;"	l
pstore1_merge	src/main/scala/rocket/DCache.scala	/^  val pstore1_merge = s2_store_valid && s2_store_merge$/;"	l
pstore1_merge_likely	src/main/scala/rocket/DCache.scala	/^  val pstore1_merge_likely = s2_valid_not_nacked_in_s1 && s2_write && s2_store_merge$/;"	l
pstore1_rmw	src/main/scala/rocket/DCache.scala	/^  val pstore1_rmw = Bool(usingRMW) && RegEnable(needsRead(s1_req), s1_valid_not_nacked && s1_write)$/;"	l
pstore1_storegen_data	src/main/scala/rocket/DCache.scala	/^  val pstore1_storegen_data = Wire(init = pstore1_data)$/;"	l
pstore1_valid	src/main/scala/rocket/DCache.scala	/^  val pstore1_valid = s2_store_valid || pstore1_held$/;"	l
pstore1_valid_likely	src/main/scala/rocket/DCache.scala	/^  val pstore1_valid_likely = s2_valid && s2_write || pstore1_held$/;"	l
pstore1_valid_not_rmw	src/main/scala/rocket/DCache.scala	/^  def pstore1_valid_not_rmw(s2_kill: Bool) = s2_valid_hit_pre_data_ecc && s2_write && !s2_kill || pstore1_held$/;"	m
pstore1_way	src/main/scala/rocket/DCache.scala	/^  val pstore1_way = RegEnable(s1_hit_way, s1_valid_not_nacked && s1_write)$/;"	l
pstore2_addr	src/main/scala/rocket/DCache.scala	/^  val pstore2_addr = RegEnable(Mux(s2_correct, s2_vaddr, pstore1_addr), advance_pstore1)$/;"	l
pstore2_storegen_data	src/main/scala/rocket/DCache.scala	/^  val pstore2_storegen_data = {$/;"	l
pstore2_storegen_mask	src/main/scala/rocket/DCache.scala	/^  val pstore2_storegen_mask = {$/;"	l
pstore2_valid	src/main/scala/rocket/DCache.scala	/^  val pstore2_valid = RegInit(false.B)$/;"	l
pstore2_way	src/main/scala/rocket/DCache.scala	/^  val pstore2_way = RegEnable(Mux(s2_correct, s2_hit_way, pstore1_way), advance_pstore1)$/;"	l
pstore_drain	src/main/scala/rocket/DCache.scala	/^  val pstore_drain = should_pstore_drain(true)$/;"	l
pstore_drain_on_miss	src/main/scala/rocket/DCache.scala	/^  val pstore_drain_on_miss = releaseInFlight || RegNext(io.cpu.s2_nack)$/;"	l
pstore_drain_opportunistic	src/main/scala/rocket/DCache.scala	/^  val pstore_drain_opportunistic = !(io.cpu.req.valid && likelyNeedsRead(io.cpu.req.bits)) && !(s1_valid && s1_waw_hazard)$/;"	l
pstore_drain_structural	src/main/scala/rocket/DCache.scala	/^  val pstore_drain_structural = pstore1_valid_likely && pstore2_valid && ((s1_valid && s1_write) || pstore1_rmw)$/;"	l
pstrb	src/main/scala/amba/apb/Bundles.scala	/^  val pstrb     = UInt(OUTPUT, width = params.dataBits\/8)$/;"	l
psync	src/main/scala/amba/axi4/AsyncCrossing.scala	/^      val psync = sync.getOrElse(edgeOut.slave.async.sync)$/;"	l
psync	src/main/scala/tilelink/AsyncCrossing.scala	/^      val psync = sync.getOrElse(edgeOut.manager.async.sync)$/;"	l
ptbr	src/main/scala/rocket/CSR.scala	/^  val ptbr = new PTBR().asOutput$/;"	l
ptbr	src/main/scala/rocket/PTW.scala	/^  val ptbr = new PTBR().asInput$/;"	l
pte	src/main/scala/rocket/PTW.scala	/^    val pte = Wire(init = default)$/;"	l
pte	src/main/scala/rocket/PTW.scala	/^  val pte = new PTE$/;"	l
pte	src/main/scala/rocket/TLB.scala	/^    val pte = io.ptw.resp.bits.pte$/;"	l
pte	src/main/scala/tile/LazyRoCC.scala	/^  val pte = Reg(new PTE)$/;"	l
pte_addr	src/main/scala/rocket/PTW.scala	/^  val pte_addr = if (!usingVM) 0.U else {$/;"	l
pte_cache_addr	src/main/scala/rocket/PTW.scala	/^  val pte_cache_addr = if (!usingHypervisor) pte_addr else {$/;"	l
pte_hit	src/main/scala/rocket/PTW.scala	/^  val pte_hit = Bool()$/;"	l
pte_hit	src/main/scala/rocket/PTW.scala	/^  val pte_hit = RegNext(false.B)$/;"	l
pte_miss	src/main/scala/rocket/PTW.scala	/^  val pte_miss = Bool()$/;"	l
ptr_match	src/main/scala/util/HellaQueue.scala	/^  val ptr_match = enq_ptr === deq_ptr$/;"	l
ptw	src/main/scala/groundtest/Tile.scala	/^    val ptw = Module(new DummyPTW(1))$/;"	l
ptw	src/main/scala/rocket/Frontend.scala	/^  val ptw = new TLBPTWIO()$/;"	l
ptw	src/main/scala/rocket/HellaCache.scala	/^  val ptw = new TLBPTWIO()$/;"	l
ptw	src/main/scala/rocket/PTW.scala	/^  val ptw = Module(new PTW(outer.nPTWPorts)(outer.dcache.node.edges.out(0), outer.p))$/;"	l
ptw	src/main/scala/rocket/TLB.scala	/^    val ptw = new TLBPTWIO$/;"	l
ptw	src/main/scala/tile/Core.scala	/^    val ptw = new DatapathPTWIO().flip$/;"	l
ptw	src/main/scala/tile/LazyRoCC.scala	/^  val ptw = Vec(nPTWPorts, new TLBPTWIO)$/;"	l
ptwPorts	src/main/scala/rocket/PTW.scala	/^  val ptwPorts = ListBuffer(outer.dcache.module.io.ptw)$/;"	l
ptw_ae_array	src/main/scala/rocket/TLB.scala	/^  val ptw_ae_array = Cat(false.B, entries.map(_.ae_ptw).asUInt)$/;"	l
ptw_gf_array	src/main/scala/rocket/TLB.scala	/^  val ptw_gf_array = Cat(false.B, entries.map(_.gf).asUInt)$/;"	l
push	src/main/resources/csrc/comlog.cc	/^void push (std::string& line)$/;"	f
push	src/main/scala/rocket/BTB.scala	/^  def push(addr: UInt): Unit = {$/;"	m
pusher	src/main/scala/tilelink/PatternPusher.scala	/^    val pusher = LazyModule(new TLPatternPusher(name, pattern))$/;"	l
put	src/main/scala/groundtest/TraceGen.scala	/^    val put       = Bool(INPUT)$/;"	l
put	src/main/scala/rocket/DCache.scala	/^  val put     = edge.Put(a_source, access_address, a_size, a_data)._2$/;"	l
put	src/main/scala/rocket/NBDcache.scala	/^  val put     = edge.Put(a_source, a_address, a_size, a_data)._2$/;"	l
putFull	src/main/scala/tilelink/Parameters.scala	/^  def putFull:    TransferSizes$/;"	m
putPartial	src/main/scala/tilelink/Parameters.scala	/^  def putPartial: TransferSizes$/;"	m
put_what	src/main/scala/tilelink/Broadcast.scala	/^      val put_what = Mux(c_releasedata, TRANSFORM_B, DROP)$/;"	l
put_who	src/main/scala/tilelink/Broadcast.scala	/^      val put_who  = Mux(c_releasedata, in.c.bits.source, c_trackerSrc)$/;"	l
putfull	src/main/scala/tilelink/Broadcast.scala	/^      val putfull = Wire(out.a)$/;"	l
putpartial	src/main/scala/rocket/DCache.scala	/^  val putpartial = edge.Put(a_source, access_address, a_size, a_data, a_mask)._2$/;"	l
pw	src/main/scala/rocket/TLB.scala	/^  val pw = Bool()$/;"	l
pw_array	src/main/scala/rocket/TLB.scala	/^  val pw_array = Cat(Fill(nPhysicalEntries, prot_w), normal_entries.map(_.pw).asUInt) & ~(ptw_ae_array | final_ae_array)$/;"	l
pwdata	src/main/scala/amba/apb/Bundles.scala	/^  val pwdata    = UInt(OUTPUT, width = params.dataBits)$/;"	l
pwrite	src/main/scala/amba/apb/Bundles.scala	/^  val pwrite    = Bool(OUTPUT)$/;"	l
px	src/main/scala/rocket/TLB.scala	/^  val px = Bool()$/;"	l
px_array	src/main/scala/rocket/TLB.scala	/^  val px_array = Cat(Fill(nPhysicalEntries, prot_x), normal_entries.map(_.px).asUInt) & ~(ptw_ae_array | final_ae_array)$/;"	l
q	src/main/scala/amba/axi4/Deinterleaver.scala	/^            val q = Module(new Queue(out.r.bits.cloneType, entries = beats))$/;"	l
q	src/main/scala/amba/axi4/Deinterleaver.scala	/^            val q = Wire(new QueueIO(out.r.bits.cloneType, beats))$/;"	l
q	src/main/scala/rocket/DCache.scala	/^      val q = Module(new Queue(tl_out.c.bits.cloneType, cacheDataBeats, flow = true))$/;"	l
q	src/main/scala/util/AsyncResetReg.scala	/^    val q = Bool(OUTPUT)$/;"	l
q	src/main/scala/util/AsyncResetReg.scala	/^  val q = UInt(OUTPUT, width = w)$/;"	l
q	src/main/scala/util/HellaQueue.scala	/^    val q = Module((new HellaQueue(entries)) { enq.bits })$/;"	l
q	src/main/scala/util/LanePositionedQueue.scala	/^  val q = Module(queueFactory(UInt(bits.W), lanes, rows, true, false, rewind, abort, rewind, abort))$/;"	l
q	src/main/scala/util/Misc.scala	/^      var q = abs$/;"	l
q	src/main/scala/util/Misc.scala	/^    var q = x$/;"	l
q	src/main/scala/util/MultiLaneQueue.scala	/^  val q = Module(new MultiLaneQueue(UInt(bits.W), lanes, rows))$/;"	l
q	src/main/scala/util/MultiPortQueue.scala	/^  val q = Module(new MultiPortQueue(UInt(bits.W), lanes, lanes, wlanes, rows))$/;"	l
q	src/main/scala/util/MultiWidthFifo.scala	/^    val q = Module(new Queue(Bits(width = inW), n))$/;"	l
q	src/main/scala/util/ROMGenerator.scala	/^    val q = UInt(OUTPUT, c.width)$/;"	l
q	src/main/scala/util/ShiftQueue.scala	/^    val q = Module(new ShiftQueue(enq.bits.cloneType, entries, pipe, flow))$/;"	l
q	src/main/scala/util/ShiftReg.scala	/^    val q = Output(UInt(w.W))$/;"	l
q	src/main/scala/util/SynchronizerReg.scala	/^    val q = Output(UInt(w.W))$/;"	l
q0	src/main/scala/rocket/RVC.scala	/^  def q0 = {$/;"	m
q1	src/main/scala/rocket/RVC.scala	/^  def q1 = {$/;"	m
q2	src/main/scala/rocket/RVC.scala	/^  def q2 = {$/;"	m
q3	src/main/scala/rocket/RVC.scala	/^  def q3 = Seq.fill(8)(passthrough)$/;"	m
qNaN	src/main/scala/tile/FPU.scala	/^  def qNaN = UInt((BigInt(7) << (exp + sig - 3)) + (BigInt(1) << (sig - 2)), recodedWidth)$/;"	m
q_b	src/main/scala/amba/axi4/ToTL.scala	/^      val q_b = Queue.irrevocable(ok_b, 1, flow=true)$/;"	l
qos	src/main/scala/amba/axi4/Bundles.scala	/^  val qos    = UInt(width = params.qosBits)  \/\/ 0=no QoS, bigger = higher priority$/;"	l
qosBits	src/main/scala/amba/axi4/Parameters.scala	/^  val qosBits   = AXI4Parameters.qosBits$/;"	l
qosBits	src/main/scala/amba/axi4/Protocol.scala	/^  val qosBits   = 4$/;"	l
qs	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val qs = maxFlightPerId.zipWithIndex.map { case (mf, i) =>$/;"	l
queue	src/main/scala/amba/axi4/UserYanker.scala	/^      def queue(id: Int) = {$/;"	m
queue	src/main/scala/util/MultiLaneQueue.scala	/^  val queue = Module(storage(gen, lanes, rows, flow))$/;"	l
queue	src/main/scala/util/MultiPortQueue.scala	/^  val queue = Module(storage(gen, lanes, rows, flow))$/;"	l
queue_arw	src/main/scala/tilelink/ToAXI4.scala	/^      val queue_arw = Queue.irrevocable(out_arw, entries=depth, flow=combinational)$/;"	l
quit	src/main/resources/csrc/remote_bitbang.h	/^  unsigned char quit;$/;"	m	class:remote_bitbang_t
r	src/main/scala/amba/axi4/Bundles.scala	/^  val r  = CreditedIO(new AXI4BundleR (params)).flip$/;"	l
r	src/main/scala/amba/axi4/Bundles.scala	/^  val r  = Irrevocable(new AXI4BundleR (params)).flip$/;"	l
r	src/main/scala/amba/axi4/Bundles.scala	/^  val r  = new AsyncBundle(new AXI4BundleR (params.base), params.async).flip$/;"	l
r	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val r  = io.r$/;"	l
r	src/main/scala/amba/axi4/Xbar.scala	/^      val r = inputIdRanges(i)$/;"	l
r	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val r = UInt(width = 1)$/;"	l
r	src/main/scala/regmapper/RegField.scala	/^  def r(n: Int, r: RegReadFn)                                                   : RegField = apply(n, r,  (), None)$/;"	m
r	src/main/scala/regmapper/RegField.scala	/^  def r(n: Int, r: RegReadFn,  desc: RegFieldDesc)                              : RegField = apply(n, r,  (), Some(desc.copy(access = RegFieldAccessType.R)))$/;"	m
r	src/main/scala/rocket/Breakpoint.scala	/^    val r = en && bp.control.r && bp.addressMatch(io.ea) && cx$/;"	l
r	src/main/scala/rocket/Breakpoint.scala	/^  val r = Bool()$/;"	l
r	src/main/scala/rocket/IBuf.scala	/^    val r = in.getWidth\/coreInstBits$/;"	l
r	src/main/scala/rocket/NBDcache.scala	/^        val r = Vec(resp.map(_(encDataBits*(dw+1)-1,encDataBits*dw)))$/;"	l
r	src/main/scala/rocket/PMP.scala	/^    val r = Output(Bool())$/;"	l
r	src/main/scala/rocket/PMP.scala	/^  val r = Bool()$/;"	l
r	src/main/scala/rocket/PTW.scala	/^      val r = Mux(valid.andR, plru.way, PriorityEncoder(~valid))$/;"	l
r	src/main/scala/rocket/PTW.scala	/^  val r = Bool()$/;"	l
r	src/main/scala/tilelink/AddressAdjuster.scala	/^        val r = container.get$/;"	l
r	src/main/scala/tilelink/Edges.scala	/^    val r = firstlastHelper(bits, fire)$/;"	l
r	src/main/scala/tilelink/Metadata.scala	/^    val r = growStarter(cmd)$/;"	l
r	src/main/scala/tilelink/Metadata.scala	/^    val r = shrinkHelper(cmdToPermCap(cmd))$/;"	l
r	src/main/scala/tilelink/Metadata.scala	/^    val r = shrinkHelper(param)$/;"	l
r	src/main/scala/tilelink/Xbar.scala	/^      val r = inputIdRanges(i)$/;"	l
r	src/main/scala/tilelink/Xbar.scala	/^      val r = outputIdRanges(o)$/;"	l
r	src/main/scala/util/Counters.scala	/^    val r = if (reset) Reg(init=UInt(0, width - smallWidth)) else Reg(UInt(width = width - smallWidth))$/;"	l
r	src/main/scala/util/ShiftReg.scala	/^      val r = RegNext(next, init = init)$/;"	l
r1	src/main/scala/tilelink/Metadata.scala	/^    val r1 = growStarter(first_cmd)$/;"	l
r1_data_req_fired	src/main/scala/rocket/NBDcache.scala	/^  val r1_data_req_fired = Reg(init=Bool(false))$/;"	l
r2	src/main/scala/tilelink/Metadata.scala	/^    val r2 = growStarter(second_cmd)$/;"	l
r2_data_req_fired	src/main/scala/rocket/NBDcache.scala	/^  val r2_data_req_fired = Reg(init=Bool(false))$/;"	l
rDesc	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val rDesc = RegFieldDesc("r", "Read bit. When set grants read access to the matching address range. Cannot be modified if lock bit is set.",$/;"	l
rOpts	src/main/scala/stage/phases/PreElaboration.scala	/^    val rOpts = view[RocketChipOptions](annotations)$/;"	l
rSel	src/main/scala/amba/axi4/Xbar.scala	/^        val rSel  = UIntToOH(io_in(i).r .bits.id, endId)$/;"	l
r_addr	src/main/scala/amba/axi4/Fragmenter.scala	/^        val r_addr = Reg(UInt(width = a.bits.params.addrBits))$/;"	l
r_addr	src/main/scala/amba/axi4/SRAM.scala	/^    val r_addr = Cat((mask zip (in.ar.bits.addr >> log2Ceil(beatBytes)).asBools).filter(_._1).map(_._2).reverse)$/;"	l
r_addr	src/main/scala/amba/axi4/ToTL.scala	/^      val r_addr = Mux(r_ok, in.ar.bits.addr, UInt(error) | in.ar.bits.addr(log2Up(beatBytes)-1, 0))$/;"	l
r_address	src/main/scala/rocket/NBDcache.scala	/^  val r_address = Cat(req.tag, req.idx) << blockOffBits$/;"	l
r_address	src/main/scala/tilelink/SRAM.scala	/^    val r_address   = Reg(UInt(edge.bundle.addressBits.W))$/;"	l
r_array	src/main/scala/rocket/TLB.scala	/^  val r_array = Cat(true.B, (priv_rw_ok & (entries.map(_.sr).asUInt | Mux(mxr, entries.map(_.sx).asUInt, UInt(0)))) | stage1_bypass)$/;"	l
r_atomic	src/main/scala/tilelink/SRAM.scala	/^    val r_atomic    = Reg(Bool())$/;"	l
r_base	src/main/scala/diplomacy/Parameters.scala	/^      val r_base = base | x.base$/;"	l
r_bits	src/main/scala/amba/axi4/UserYanker.scala	/^      val r_bits = Vec(rqueues.map(_.deq.bits))(rid)$/;"	l
r_btb_update	src/main/scala/rocket/BTB.scala	/^  val r_btb_update = Pipe(io.btb_update)$/;"	l
r_correctable	src/main/scala/tilelink/SRAM.scala	/^    val r_correctable   = r_decoded.map(_.correctable)$/;"	l
r_corrected	src/main/scala/tilelink/SRAM.scala	/^    val r_corrected     = Cat(r_decoded.map(_.corrected).reverse)$/;"	l
r_corrupt	src/main/scala/tilelink/ToAXI4.scala	/^      val r_corrupt = out.r.bits.resp =\/= AXI4Parameters.RESP_OKAY$/;"	l
r_count	src/main/scala/amba/axi4/ToTL.scala	/^      val r_count = RegInit(Vec.fill(numIds) { UInt(0, width = txnCountBits) })$/;"	l
r_d	src/main/scala/tilelink/ToAXI4.scala	/^      val r_d = edgeIn.AccessAck(r_source, r_size, UInt(0), denied = r_denied, corrupt = r_corrupt || r_denied)$/;"	l
r_data	src/main/scala/tilelink/SRAM.scala	/^    val r_data = VecInit(Seq.tabulate(lanes) { i => r_rmw_data(eccBytes*8*(i+1)-1, eccBytes*8*i) })$/;"	l
r_decoded	src/main/scala/tilelink/SRAM.scala	/^    val r_decoded       = r_raw_data.map(lane => code.decode(lane))$/;"	l
r_denied	src/main/scala/tilelink/Fragmenter.scala	/^          val r_denied = Reg(Bool())$/;"	l
r_denied	src/main/scala/tilelink/ToAXI4.scala	/^      val r_denied  = out.r.bits.resp === AXI4Parameters.RESP_DECERR holdUnless r_first$/;"	l
r_detect	src/main/scala/tilelink/ErrorEvaluator.scala	/^      val r_detect = Reg(Bool())$/;"	l
r_echo	src/main/scala/amba/axi4/SRAM.scala	/^    val r_echo = Reg(BundleMap(in.params.echoFields))$/;"	l
r_error	src/main/scala/tilelink/SRAM.scala	/^    val r_error         = r_lane_error.orR$/;"	l
r_first	src/main/scala/tilelink/ToAXI4.scala	/^      val r_first = RegInit(Bool(true))$/;"	l
r_full	src/main/scala/amba/axi4/SRAM.scala	/^    val r_full = RegInit(Bool(false))$/;"	l
r_full	src/main/scala/tilelink/SRAM.scala	/^    val r_full      = RegInit(false.B)$/;"	l
r_gpa	src/main/scala/rocket/TLB.scala	/^  val r_gpa = Reg(UInt(vaddrBits.W))$/;"	l
r_gpa_gf	src/main/scala/rocket/TLB.scala	/^  val r_gpa_gf = Reg(Bool())$/;"	l
r_gpa_valid	src/main/scala/rocket/TLB.scala	/^  val r_gpa_valid = Reg(Bool())$/;"	l
r_gpa_vpn	src/main/scala/rocket/TLB.scala	/^  val r_gpa_vpn = Reg(UInt(vpnBits.W))$/;"	l
r_hgatp	src/main/scala/rocket/PTW.scala	/^  val r_hgatp = Reg(new PTBR)$/;"	l
r_hgatp_initial_count	src/main/scala/rocket/PTW.scala	/^  val r_hgatp_initial_count = pgLevels - minPgLevels - r_hgatp.additionalPgLevels$/;"	l
r_holds_d	src/main/scala/tilelink/ToAXI4.scala	/^      val r_holds_d = RegInit(Bool(false))$/;"	l
r_id	src/main/scala/amba/axi4/SRAM.scala	/^    val r_id   = Reg(UInt())$/;"	l
r_id	src/main/scala/amba/axi4/ToTL.scala	/^      val r_id = if (maxFlight == 1) {$/;"	l
r_l2_plru_way	src/main/scala/rocket/PTW.scala	/^    val r_l2_plru_way = Reg(UInt(log2Ceil(coreParams.nL2TLBWays max 1).W))$/;"	l
r_lane_error	src/main/scala/tilelink/SRAM.scala	/^    val r_lane_error    = Cat(r_uncorrectable.reverse) & r_lanes$/;"	l
r_lanes	src/main/scala/tilelink/SRAM.scala	/^    val r_lanes         = Cat(Seq.tabulate(lanes) { i => r_mask(eccBytes*(i+1)-1, eccBytes*i).orR }.reverse)$/;"	l
r_last	src/main/scala/amba/axi4/Fragmenter.scala	/^      val r_last = out.r.bits.echo(AXI4FragLast)$/;"	l
r_len	src/main/scala/amba/axi4/Fragmenter.scala	/^        val r_len  = Reg(UInt(width = AXI4Parameters.lenBits))$/;"	l
r_mask	src/main/scala/diplomacy/Parameters.scala	/^      val r_mask = mask & x.mask$/;"	l
r_mask	src/main/scala/tilelink/SRAM.scala	/^    val r_mask      = Reg(UInt(beatBytes.W))$/;"	l
r_memIdx	src/main/scala/rocket/TLB.scala	/^      val r_memIdx = r_refill_tag.extract(cfg.nSectors.log2 + cfg.nSets.log2 - 1, cfg.nSectors.log2)$/;"	l
r_need_fix	src/main/scala/tilelink/SRAM.scala	/^    val r_need_fix      = r_correctable.reduce(_ || _)$/;"	l
r_need_gpa	src/main/scala/rocket/TLB.scala	/^  val r_need_gpa = Reg(Bool())$/;"	l
r_ok	src/main/scala/amba/axi4/ToTL.scala	/^      val r_ok = edgeOut.manager.supportsGetSafe(in.ar.bits.addr, r_size)$/;"	l
r_opcode	src/main/scala/tilelink/SRAM.scala	/^    val r_opcode    = Reg(UInt(3.W))$/;"	l
r_out	src/main/scala/amba/axi4/ToTL.scala	/^      val r_out = Wire(out.a)$/;"	l
r_param	src/main/scala/tilelink/SRAM.scala	/^    val r_param     = Reg(UInt(3.W))$/;"	l
r_poison	src/main/scala/tilelink/SRAM.scala	/^    val r_poison    = Reg(Bool())$/;"	l
r_poisonv	src/main/scala/tilelink/SRAM.scala	/^    val r_poisonv = VecInit(Seq.fill(lanes) { r_poison })$/;"	l
r_pte	src/main/scala/rocket/PTW.scala	/^  val r_pte = Reg(new PTE)$/;"	l
r_raddr	src/main/scala/rocket/NBDcache.scala	/^      val r_raddr = RegEnable(io.read.bits.addr, io.read.valid)$/;"	l
r_raw_data	src/main/scala/tilelink/SRAM.scala	/^    val r_raw_data  = Wire(Vec(lanes, Bits(width.W)))$/;"	l
r_read	src/main/scala/tilelink/SRAM.scala	/^    val r_read      = Reg(Bool())$/;"	l
r_ready	src/main/scala/tilelink/SRAM.scala	/^    val r_ready = !d_wb && !r_replay && (!d_full || d_ready) && (!r_respond || (!d_win && in.d.ready))$/;"	l
r_refill_tag	src/main/scala/rocket/TLB.scala	/^  val r_refill_tag = Reg(UInt(width = vpnBits))$/;"	l
r_ren	src/main/scala/tilelink/SRAM.scala	/^    val r_ren = r_read || r_atomic || r_sublane$/;"	l
r_replay	src/main/scala/tilelink/SRAM.scala	/^    val r_replay = RegNext(r_full && d_full && d_read && d_need_fix)$/;"	l
r_req	src/main/scala/rocket/PTW.scala	/^  val r_req = Reg(new PTWReq)$/;"	l
r_req_dest	src/main/scala/rocket/PTW.scala	/^  val r_req_dest = Reg(Bits())$/;"	l
r_resp	src/main/scala/rocket/BTB.scala	/^  val r_resp = Pipe(io.resp)$/;"	l
r_respond	src/main/scala/tilelink/SRAM.scala	/^    val r_respond = !sramReg.B && (!r_need_fix || !(r_read || r_atomic))$/;"	l
r_rmw_data	src/main/scala/tilelink/SRAM.scala	/^    val r_rmw_data  = Reg(UInt((8*beatBytes).W))$/;"	l
r_sectored_hit	src/main/scala/rocket/TLB.scala	/^  val r_sectored_hit = Reg(Valid(UInt(log2Ceil(sectored_entries.head.size).W)))$/;"	l
r_sectored_repl_addr	src/main/scala/rocket/TLB.scala	/^  val r_sectored_repl_addr = Reg(UInt(log2Ceil(sectored_entries.head.size).W))$/;"	l
r_sel	src/main/scala/amba/axi4/ToTL.scala	/^      val r_sel = UIntToOH(in.ar.bits.id, numIds)$/;"	l
r_sel0	src/main/scala/amba/axi4/SRAM.scala	/^    val r_sel0 = address.contains(in.ar.bits.addr)$/;"	l
r_sel1	src/main/scala/amba/axi4/SRAM.scala	/^    val r_sel1 = Reg(r_sel0)$/;"	l
r_size	src/main/scala/amba/axi4/ToTL.scala	/^      val r_size = OH1ToUInt(r_size1)$/;"	l
r_size	src/main/scala/tilelink/SRAM.scala	/^    val r_size      = Reg(UInt(edge.bundle.sizeBits.W))$/;"	l
r_size	src/main/scala/tilelink/ToAXI4.scala	/^      val r_size    = r_state.size$/;"	l
r_size1	src/main/scala/amba/axi4/ToTL.scala	/^      val r_size1 = in.ar.bits.bytes1()$/;"	l
r_source	src/main/scala/tilelink/SRAM.scala	/^    val r_source    = Reg(UInt(edge.bundle.sourceBits.W))$/;"	l
r_source	src/main/scala/tilelink/ToAXI4.scala	/^      val r_source  = r_state.source$/;"	l
r_stage2_en	src/main/scala/rocket/TLB.scala	/^  val r_stage2_en = Reg(Bool())$/;"	l
r_state	src/main/scala/tilelink/ToAXI4.scala	/^      val r_state = out.r.bits.echo(AXI4TLState)$/;"	l
r_sublane	src/main/scala/tilelink/SRAM.scala	/^    val r_sublane   = Reg(Bool())$/;"	l
r_superpage_hit	src/main/scala/rocket/TLB.scala	/^  val r_superpage_hit = Reg(Valid(UInt(log2Ceil(superpage_entries.size).W)))$/;"	l
r_superpage_repl_addr	src/main/scala/rocket/TLB.scala	/^  val r_superpage_repl_addr = Reg(UInt(log2Ceil(superpage_entries.size).W))$/;"	l
r_uncorrectable	src/main/scala/tilelink/SRAM.scala	/^    val r_uncorrectable = r_decoded.map(_.uncorrectable)$/;"	l
r_uncorrected	src/main/scala/tilelink/SRAM.scala	/^    val r_uncorrected   = Cat(r_decoded.map(_.uncorrected).reverse)$/;"	l
r_valid	src/main/scala/amba/axi4/UserYanker.scala	/^      val r_valid = Vec(rqueues.map(_.deq.valid))(rid)$/;"	l
r_valid_vec	src/main/scala/rocket/PTW.scala	/^    val r_valid_vec = valid.map(_(r_idx)).asUInt$/;"	l
r_valid_vec_q	src/main/scala/rocket/PTW.scala	/^    val r_valid_vec_q = Reg(UInt(coreParams.nL2TLBWays.W))$/;"	l
r_vstage1_en	src/main/scala/rocket/TLB.scala	/^  val r_vstage1_en = Reg(Bool())$/;"	l
r_wins	src/main/scala/tilelink/ToAXI4.scala	/^      val r_wins = (out.r.valid && b_delay =\/= UInt(7)) || r_holds_d$/;"	l
ra	src/main/scala/regmapper/Test.scala	/^  def ra(bits: Int) = combo(bits, random, always)$/;"	m
ra	src/main/scala/rocket/RVC.scala	/^  def ra = 1.U(5.W)$/;"	m
ra	src/main/scala/tilelink/AddressAdjuster.scala	/^    val ra = prefix0(remote.flatMap(_.address))$/;"	l
race	src/main/scala/tilelink/RAMModel.scala	/^          val race = (d_inc zip d_dec) map { case (i, d) => i - d =\/= UInt(1) }$/;"	l
rad	src/main/scala/util/Misc.scala	/^      val rad = UInt(radix)$/;"	l
rad	src/main/scala/util/Misc.scala	/^    val rad = UInt(radix)$/;"	l
raddr	src/main/scala/rocket/NBDcache.scala	/^  val raddr = io.read.bits.addr >> rowOffBits$/;"	l
raddr	src/main/scala/util/HellaQueue.scala	/^  val raddr = Mux(io.deq.valid, Mux(deq_done, UInt(0), deq_ptr + UInt(1)), deq_ptr)$/;"	l
ram	scripts/RocketSim.py	/^    ram = 0x80000000$/;"	v	class:RocketSimHart
ram	scripts/RocketSim32.py	/^    ram = 0x80000000$/;"	v	class:RocketSimHart
ram	scripts/RocketSim64.py	/^    ram = 0x80000000$/;"	v	class:RocketSimHart
ram	src/main/scala/amba/ahb/Test.scala	/^  val ram   = LazyModule(new AHBRAM(AddressSet(0x0, 0xff)))$/;"	l
ram	src/main/scala/amba/ahb/Test.scala	/^  val ram  = LazyModule(new TLTestRAM(fuzzAddr, trackCorruption=false))$/;"	l
ram	src/main/scala/amba/apb/Test.scala	/^  val ram   = LazyModule(new APBRAM(AddressSet(0x0, 0xff), fuzzReady = true, fuzzError = true))$/;"	l
ram	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val ram  = island { LazyModule(new AXI4RAM(AddressSet(0x0, 0x3ff))) }$/;"	l
ram	src/main/scala/amba/axi4/Credited.scala	/^  val ram  = island { LazyModule(new AXI4RAM(AddressSet(0x0, 0x3ff))) }$/;"	l
ram	src/main/scala/amba/axi4/Test.scala	/^  val ram   = LazyModule(new AXI4RAM(AddressSet(0x0, 0x3ff)))$/;"	l
ram	src/main/scala/amba/axi4/Test.scala	/^  val ram  = LazyModule(new TLRAM(fuzzAddr))$/;"	l
ram	src/main/scala/devices/tilelink/MasterMux.scala	/^  val ram = LazyModule(new TLRAM(AddressSet(0, 0x3ff), beatBytes = 4))$/;"	l
ram	src/main/scala/devices/tilelink/TestRAM.scala	/^  val ram  = LazyModule(new TLTestRAM(AddressSet(0x0, 0x3ff), beatBytes = ramBeatBytes))$/;"	l
ram	src/main/scala/tilelink/AsyncCrossing.scala	/^  val ram  = island { LazyModule(new TLRAM(AddressSet(0x0, 0x3ff))) }$/;"	l
ram	src/main/scala/tilelink/AtomicAutomata.scala	/^  val ram  = LazyModule(new TLRAM(AddressSet(0x0, 0x3ff)))$/;"	l
ram	src/main/scala/tilelink/Credited.scala	/^  val ram  = island { LazyModule(new TLRAM(AddressSet(0x0, 0x3ff))) }$/;"	l
ram	src/main/scala/tilelink/Fragmenter.scala	/^  val ram  = LazyModule(new TLRAM(AddressSet(0x0, 0x3ff), beatBytes = ramBeatBytes))$/;"	l
ram	src/main/scala/tilelink/Fuzzer.scala	/^  val ram  = LazyModule(new TLRAM(AddressSet(0x800, 0x7ff)))$/;"	l
ram	src/main/scala/tilelink/RationalCrossing.scala	/^  val ram  = LazyModule(new TLRAM(AddressSet(0x0, 0x3ff)))$/;"	l
ram	src/main/scala/tilelink/SRAM.scala	/^    val ram = LazyModule(new TLRAM(address, parentLogicalTreeNode, cacheable, executable, atomics, beatBytes, ecc, sramReg, devName))$/;"	l
ram	src/main/scala/tilelink/SRAM.scala	/^  val ram  = LazyModule(new TLRAM($/;"	l
ram	src/main/scala/tilelink/SRAM.scala	/^  val ram  = LazyModule(new TLRAM(AddressSet(0x0, 0x3ff), beatBytes = ramBeatBytes, sramReg = sramReg))$/;"	l
ram	src/main/scala/tilelink/WidthWidget.scala	/^  val ram  = LazyModule(new TLRAM(AddressSet(0x0, 0x3ff)))$/;"	l
ram	src/main/scala/tilelink/Xbar.scala	/^    val ram  = LazyModule(new TLRAM(AddressSet(0x0+0x400*n, 0x3ff)))$/;"	l
ram	src/main/scala/tilelink/Xbar.scala	/^    val ram = LazyModule(new TLRAM(AddressSet(0x0+0x400*n, 0x3ff)))$/;"	l
ram	src/main/scala/util/HellaQueue.scala	/^  val ram = SeqMem(entries, data)$/;"	l
ram	src/main/scala/util/LanePositionedQueue.scala	/^  val ram = SyncReadMem(rows\/2, UInt(codeBits.W))$/;"	l
ram1	src/main/scala/tilelink/HintHandler.scala	/^  val ram1  = LazyModule(new TLRAM(AddressSet(0x0,   0x3ff)))$/;"	l
ram2	src/main/scala/tilelink/Fuzzer.scala	/^  val ram2 = LazyModule(new TLRAM(AddressSet(0, 0x3ff), beatBytes = 16))$/;"	l
ram2	src/main/scala/tilelink/HintHandler.scala	/^  val ram2  = LazyModule(new TLRAM(AddressSet(0x400, 0x3ff)))$/;"	l
ram_i	src/main/scala/util/LanePositionedQueue.scala	/^  val ram_i = Mux(write_row(0),$/;"	l
ram_o	src/main/scala/util/LanePositionedQueue.scala	/^  val ram_o = ecc.decode(ram.read(read_row, ren)).corrected.asTypeOf(Vec(2*lanes, gen))$/;"	l
ram_out_valid	src/main/scala/util/HellaQueue.scala	/^  val ram_out_valid = Reg(next = ren)$/;"	l
ram_size	scripts/RocketSim.py	/^    ram_size = 0x4000$/;"	v	class:RocketSimHart
ram_size	scripts/RocketSim32.py	/^    ram_size = 0x4000$/;"	v	class:RocketSimHart
ram_size	scripts/RocketSim64.py	/^    ram_size = 0x4000$/;"	v	class:RocketSimHart
randAddr	src/main/scala/groundtest/TraceGen.scala	/^  val randAddr =$/;"	l
randAddrBagIndex	src/main/scala/groundtest/TraceGen.scala	/^  val randAddrBagIndex = LCG(logAddressBagLen)$/;"	l
randAddrFromBag	src/main/scala/groundtest/TraceGen.scala	/^  val randAddrFromBag = MuxLookup(randAddrBagIndex, UInt(0),$/;"	l
randAddrFromExtra	src/main/scala/groundtest/TraceGen.scala	/^          val randAddrFromExtra = Cat(UInt(0),$/;"	l
randDelay	src/main/scala/groundtest/TraceGen.scala	/^  val randDelay = Frequency(List($/;"	l
randDelayBase	src/main/scala/groundtest/TraceGen.scala	/^  val randDelayBase = LCG16()$/;"	l
randExtraAddrIndex	src/main/scala/groundtest/TraceGen.scala	/^          val randExtraAddrIndex = LCG(logNumExtraAddrs)$/;"	l
randOp	src/main/scala/groundtest/TraceGen.scala	/^  val randOp = Frequency(List($/;"	l
randVal	src/main/scala/util/Frequency.scala	/^    val randVal = LCG(log2Up(total))$/;"	l
random	src/main/scala/regmapper/Test.scala	/^  def random: Bool => Bool = { ready =>$/;"	m
random	src/main/scala/tilelink/Fuzzer.scala	/^    val random = UInt(OUTPUT)$/;"	l
random_bits	src/main/resources/vsrc/SimJTAG.v	/^   wire [31:0]  random_bits = $random;$/;"	n
range	src/main/scala/diplomacy/Parameters.scala	/^  def range = start until end$/;"	m
rangeAddressMatch	src/main/scala/rocket/Breakpoint.scala	/^  def rangeAddressMatch(x: UInt) =$/;"	m
rangeAligned	src/main/scala/rocket/PMP.scala	/^    val rangeAligned = !(straddlesLowerBound || straddlesUpperBound)$/;"	l
rangeFilter	src/main/scala/diplomacy/Resources.scala	/^  def rangeFilter(name: String): Boolean = name == "ranges"$/;"	m
ranges	src/main/scala/diplomacy/AddressRange.scala	/^    val ranges = seq.sorted$/;"	l
ranges	src/main/scala/diplomacy/DeviceTree.scala	/^    val ranges = AddressRange.fromSets(x.address)$/;"	l
ranges	src/main/scala/diplomacy/Parameters.scala	/^    val ranges = s.sorted$/;"	l
ranges	src/main/scala/diplomacy/Resources.scala	/^        val ranges = AddressRange.fromSets(value.address)$/;"	l
ranges	src/main/scala/diplomacy/Resources.scala	/^    val ranges = resources("ranges").collect {$/;"	l
ranges	src/main/scala/diplomacy/Resources.scala	/^  def ranges = Seq(Resource(this, "ranges"))$/;"	m
ranges	src/main/scala/tilelink/Xbar.scala	/^    val ranges = (tuples zip starts) map { case ((sz, i), st) =>$/;"	l
ras	src/main/scala/rocket/BTB.scala	/^    val ras = new RAS(btbParams.nRAS)$/;"	l
ras_head	src/main/scala/rocket/BTB.scala	/^    val ras_head = Valid(UInt(width = vaddrBits))$/;"	l
ras_update	src/main/scala/rocket/BTB.scala	/^    val ras_update = Valid(new RASUpdate).flip$/;"	l
ras_update	src/main/scala/rocket/Frontend.scala	/^  val ras_update = Valid(new RASUpdate)$/;"	l
ratio	src/main/scala/tilelink/WidthWidget.scala	/^      val ratio = inBytes \/ outBytes$/;"	l
ratio	src/main/scala/tilelink/WidthWidget.scala	/^      val ratio = outBytes \/ inBytes$/;"	l
raw	src/main/scala/rocket/IBuf.scala	/^  val raw = UInt(width = 32)$/;"	l
rawAddr	src/main/scala/tilelink/Fuzzer.scala	/^    val rawAddr   = noiseMaker(addressBits, inc, 2)$/;"	l
rbm	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^    val rbm = maps.find {$/;"	l
rbs	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^      val rbs = resourceBindings(node.getDevice, resourceBindingsMaps)$/;"	l
rcorrupt	src/main/scala/amba/axi4/SRAM.scala	/^    val rcorrupt = corrupt.map(_.readAndHold(r_addr, ren)(0)).getOrElse(Bool(false))$/;"	l
rd	src/main/scala/devices/debug/Debug.scala	/^      val rd      = UInt(5.W)$/;"	l
rd	src/main/scala/devices/debug/Debug.scala	/^      val rd     = UInt(5.W)$/;"	l
rd	src/main/scala/regmapper/Test.scala	/^  def rd(bits: Int) = combo(bits, random, delay(11))$/;"	m
rd	src/main/scala/rocket/RVC.scala	/^  def rd = x(11,7)$/;"	m
rd	src/main/scala/rocket/RVC.scala	/^  val rd = UInt(5.W)$/;"	l
rd	src/main/scala/rocket/RocketCore.scala	/^    val rd = wb_waddr$/;"	l
rd	src/main/scala/scie/SCIE.scala	/^  val rd = Output(UInt(xLen.W))$/;"	l
rd	src/main/scala/tile/FPU.scala	/^    val rd = UInt(width = 5)$/;"	l
rd	src/main/scala/tile/LazyRoCC.scala	/^  val rd = Bits(5.W)$/;"	l
rd	src/main/scala/tilelink/Metadata.scala	/^  def rd = Cat(Bool(false), Bool(false)) \/\/ Op only reads$/;"	m
rd0src	src/main/scala/util/CoreMonitor.scala	/^  val rd0src = UInt(width = 5.W)$/;"	l
rd0val	src/main/scala/util/CoreMonitor.scala	/^  val rd0val = UInt(width = xLen.W)$/;"	l
rd1src	src/main/scala/util/CoreMonitor.scala	/^  val rd1src = UInt(width = 5.W)$/;"	l
rd1val	src/main/scala/util/CoreMonitor.scala	/^  val rd1val = UInt(width = xLen.W)$/;"	l
rdDone	src/main/scala/devices/debug/SBA.scala	/^      val rdDone       = Output(Bool())$/;"	l
rdEn	src/main/scala/devices/debug/SBA.scala	/^      val rdEn         = Input(Bool())$/;"	l
rdLegal	src/main/scala/devices/debug/SBA.scala	/^      val rdLegal      = Output(Bool())$/;"	l
rdLegal_addr	src/main/scala/devices/debug/SBA.scala	/^    val rdLegal_addr = edge.manager.supportsGetSafe(io.addrIn, io.sizeIn, Some(TransferSizes(1,cfg.maxSupportedSBAccess\/8)))$/;"	l
rdLoad	src/main/scala/devices/debug/SBA.scala	/^      val rdLoad       = Output(Vec(cfg.maxSupportedSBAccess\/8, Bool()))$/;"	l
rdTxValid	src/main/scala/devices/debug/SBA.scala	/^    val rdTxValid = sbState === SBReadResponse.id.U && responseValid && responseReady$/;"	l
rd_crossing	src/main/scala/regmapper/RegisterCrossing.scala	/^    val rd_crossing = Module (new RegisterReadCrossing(UInt(width = width )))$/;"	l
rdata	src/main/scala/amba/axi4/SRAM.scala	/^    val rdata = mem.readAndHold(r_addr, ren)$/;"	l
rdata	src/main/scala/regmapper/Test.scala	/^    val rdata  = UInt(OUTPUT, width = bits)$/;"	l
rdata	src/main/scala/rocket/CSR.scala	/^    val rdata = Bits(OUTPUT, xLen)$/;"	l
rdata	src/main/scala/rocket/DCache.scala	/^  val rdata = for (((array, omSRAM), i) <- data_arrays zipWithIndex) yield {$/;"	l
rdata	src/main/scala/tilelink/WidthWidget.scala	/^        val rdata = Reg(Vec(ratio-1, chiselTypeOf(idata)))$/;"	l
rdata	src/main/scala/util/MultiWidthFifo.scala	/^    val rdata = Vec(wdata.flatMap { indat =>$/;"	l
rdata	src/main/scala/util/MultiWidthFifo.scala	/^    val rdata = Vec.tabulate(n) { i =>$/;"	l
rdata_written_once	src/main/scala/tilelink/WidthWidget.scala	/^        val rdata_written_once = RegInit(false.B)$/;"	l
rdesc	src/main/scala/regmapper/DescribedReg.scala	/^    val rdesc = RegFieldDesc(name, desc, None, None,$/;"	l
re	src/main/scala/diplomacy/Nodes.scala	/^    val re = inner.render(e)$/;"	l
re	src/main/scala/regmapper/Test.scala	/^  def re(bits: Int) = combo(bits, random, delay(5))$/;"	m
re	src/main/scala/stage/phases/AddDefaultTests.scala	/^      val re = s"""^rv$xlen[usm][$extensions].+""".r$/;"	l
reMap	src/main/scala/tilelink/FIFOFixer.scala	/^    val reMap = flatDomains.scanLeft((-1,-1)) { case ((_,s),x) => (x, s+1) }.toMap$/;"	l
reachableIO	src/main/scala/tilelink/Xbar.scala	/^    val reachableIO = edgesIn.map { cp => edgesOut.map { mp =>$/;"	l
read	src/main/scala/amba/ahb/SRAM.scala	/^    val read = a_request && !a_write$/;"	l
read	src/main/scala/amba/apb/SRAM.scala	/^    val read = in.psel && !in.penable && !in.pwrite$/;"	l
read	src/main/scala/regmapper/RegMapper.scala	/^  val read  = Bool()$/;"	l
read	src/main/scala/rocket/HellaCache.scala	/^    val read = Decoupled(new L1MetaReadReq).flip$/;"	l
read	src/main/scala/rocket/NBDcache.scala	/^    val read = Decoupled(new L1DataReadReq).flip$/;"	l
read	src/main/scala/rocket/RocketCore.scala	/^    def read(addr: UInt): Bool = r(addr)$/;"	m
read	src/main/scala/rocket/RocketCore.scala	/^  def read(addr: UInt) = {$/;"	m
readAddr	src/main/scala/rocket/PMP.scala	/^  def readAddr = if (pmpGranularity.log2 == PMP.lgAlign) addr else {$/;"	m
readAndHold	src/main/scala/util/package.scala	/^    def readAndHold(addr: UInt, enable: Bool): T = x.read(addr, enable) holdUnless RegNext(enable)$/;"	m
readArb	src/main/scala/rocket/NBDcache.scala	/^  val readArb = Module(new Arbiter(new L1DataReadReq, 4))$/;"	l
readBypassed	src/main/scala/rocket/RocketCore.scala	/^    def readBypassed(addr: UInt): Bool = _next(addr)$/;"	m
readCross	src/main/scala/regmapper/Test.scala	/^      val readCross = Module(new RegisterReadCrossing(field))$/;"	l
readEPC	src/main/scala/rocket/CSR.scala	/^  def readEPC(x: UInt) = ~(~x | Mux(reg_misa('c' - 'a'), 1.U, 3.U))$/;"	m
readModifyWriteCSR	src/main/scala/rocket/CSR.scala	/^  def readModifyWriteCSR(cmd: UInt, rdata: UInt, wdata: UInt) = {$/;"	m
readOnly	src/main/scala/regmapper/RegField.scala	/^  def readOnly = this.copy(write = (), desc = this.desc.map(_.copy(access = RegFieldAccessType.R)))$/;"	m
readSizes1	src/main/scala/amba/axi4/Fragmenter.scala	/^      val readSizes1  = slaves.map(s => s.supportsRead .max\/beatBytes-1)$/;"	l
read_fcsr	src/main/scala/rocket/CSR.scala	/^  val read_fcsr = Cat(reg_frm, reg_fflags)$/;"	l
read_hie	src/main/scala/rocket/CSR.scala	/^  val read_hie = reg_mie & hs_delegable_interrupts$/;"	l
read_hip	src/main/scala/rocket/CSR.scala	/^  val read_hip = read_mip & hs_delegable_interrupts$/;"	l
read_hstatus	src/main/scala/rocket/CSR.scala	/^    val read_hstatus = io.hstatus.asUInt()(xLen-1,0)$/;"	l
read_hvip	src/main/scala/rocket/CSR.scala	/^  val read_hvip = reg_mip.asUInt & hs_delegable_interrupts$/;"	l
read_illegal	src/main/scala/rocket/CSR.scala	/^  val read_illegal = Bool(OUTPUT)$/;"	l
read_mapping	src/main/scala/rocket/CSR.scala	/^  val read_mapping = LinkedHashMap[Int,Bits]($/;"	l
read_mip	src/main/scala/rocket/CSR.scala	/^  val read_mip = mip.asUInt & supported_interrupts$/;"	l
read_mnstatus	src/main/scala/rocket/CSR.scala	/^  val read_mnstatus = WireInit(0.U.asTypeOf(new MNStatus()))$/;"	l
read_mstatus	src/main/scala/rocket/CSR.scala	/^  val read_mstatus = io.status.asUInt()(xLen-1,0)$/;"	l
read_mtvec	src/main/scala/rocket/CSR.scala	/^  val read_mtvec = formTVec(reg_mtvec).padTo(xLen)$/;"	l
read_pmp	src/main/scala/rocket/CSR.scala	/^    val read_pmp = reg_pmp.padTo(CSR.maxPMPs, 0.U.asTypeOf(new PMP))$/;"	l
read_row	src/main/scala/util/LanePositionedQueue.scala	/^  val read_row =$/;"	l
read_sie	src/main/scala/rocket/CSR.scala	/^    val read_sie = reg_mie & sie_mask$/;"	l
read_sip	src/main/scala/rocket/CSR.scala	/^    val read_sip = read_mip & sie_mask$/;"	l
read_sstatus	src/main/scala/rocket/CSR.scala	/^    val read_sstatus = Wire(init = 0.U.asTypeOf(new MStatus))$/;"	l
read_stvec	src/main/scala/rocket/CSR.scala	/^  val read_stvec = formTVec(reg_stvec).sextTo(xLen)$/;"	l
read_vcsr	src/main/scala/rocket/CSR.scala	/^  val read_vcsr = Cat(reg_vxrm.getOrElse(0.U), reg_vxsat.getOrElse(0.U))$/;"	l
read_vsepc	src/main/scala/rocket/CSR.scala	/^    val read_vsepc = readEPC(reg_vsepc).sextTo(xLen)$/;"	l
read_vsie	src/main/scala/rocket/CSR.scala	/^    val read_vsie = (read_hie & read_hideleg) >> 1$/;"	l
read_vsip	src/main/scala/rocket/CSR.scala	/^    val read_vsip = (read_hip & read_hideleg) >> 1$/;"	l
read_vsstatus	src/main/scala/rocket/CSR.scala	/^    val read_vsstatus = io.gstatus.asUInt()(xLen-1,0)$/;"	l
read_vstval	src/main/scala/rocket/CSR.scala	/^    val read_vstval = reg_vstval.sextTo(xLen)$/;"	l
readalloc	src/main/scala/amba/package.scala	/^    val readalloc  = Bool()$/;"	l
ready	src/main/resources/csrc/comlog.cc	/^   bool        ready;               \/\/ is entry ready to be committed?$/;"	m	struct:RobEntry	file:
ready	src/main/scala/devices/debug/Custom.scala	/^  val ready = Output(Bool())$/;"	l
ready	src/main/scala/devices/tilelink/Plic.scala	/^  val ready = Bool(INPUT)$/;"	l
ready	src/main/scala/regmapper/Test.scala	/^    val ready = Wire(Vec(x, Bool()))$/;"	l
ready	src/main/scala/rocket/ScratchpadSlavePort.scala	/^    val ready = state === s_ready || state === s_wait2 && io.dmem.resp.valid && tl_in.d.ready$/;"	l
ready	src/main/scala/tilelink/Arbiter.scala	/^  val ready = lfsr(15)$/;"	l
ready	src/main/scala/tilelink/PatternPusher.scala	/^    val ready  = RegNext(Bool(true), Bool(false))$/;"	l
ready	src/main/scala/util/AsyncQueue.scala	/^  val ready = sink_ready && widx =\/= (ridx ^ (params.depth | params.depth >> 1).U)$/;"	l
ready	src/main/scala/util/LanePositionedQueue.scala	/^  val ready = Input (UInt(readyBits1.W))$/;"	l
ready	src/main/scala/util/MultiPortQueue.scala	/^    val ready = if (dense.lanes >= sparse.size) dense.ready else cap_ready$/;"	l
ready	src/main/scala/util/MultiPortQueue.scala	/^  val ready = LFSR64()(lanes-1, 0)$/;"	l
ready	src/main/scala/util/RationalCrossing.scala	/^  val ready  = Input(Bool())$/;"	l
ready	src/main/scala/util/ReadyValidCancel.scala	/^  val ready = Input(Bool())$/;"	l
readyBits1	src/main/scala/util/LanePositionedQueue.scala	/^  val readyBits1 = log2Ceil(maxReady+1) \/\/ [0, maxReady]$/;"	l
ready_likely	src/main/scala/rocket/ScratchpadSlavePort.scala	/^    val ready_likely = state.isOneOf(s_ready, s_wait2)$/;"	l
ready_reg	src/main/scala/util/AsyncQueue.scala	/^  val ready_reg = withReset(reset.asAsyncReset)(RegNext(next=ready, init=false.B).suggestName("ready_reg"))$/;"	l
readys	src/main/scala/amba/axi4/Xbar.scala	/^    val readys = Vec(policy(valids.size, Cat(valids.reverse), idle).asBools)$/;"	l
readys	src/main/scala/amba/axis/Xbar.scala	/^      val readys = VecInit(policy(valids.size, Cat(valids.reverse), idle).asBools)$/;"	l
readys	src/main/scala/tilelink/Arbiter.scala	/^      val readys = VecInit(policy(earlyValids.size, Cat(earlyValids.reverse), latch).asBools)$/;"	l
readys	src/main/scala/tilelink/Arbiter.scala	/^    val readys = ~((unready >> width) & unready(width-1, 0))$/;"	l
realNeedsLock	src/main/scala/util/Arbiters.scala	/^  def realNeedsLock(data: T): Bool =$/;"	m
real_hits	src/main/scala/rocket/TLB.scala	/^  val real_hits = hitsVec.asUInt$/;"	l
reason	src/main/resources/vsrc/TestDriver.v	/^  reg [255:0] reason = "";$/;"	r
rebuild	src/main/scala/tilelink/ToAHB.scala	/^      val rebuild   = RegInit(Bool(false)) \/\/ rewrite as NSEQ       (for next-beat  EBT)$/;"	l
recode	src/main/scala/tile/FPU.scala	/^  def recode(x: UInt) = hardfloat.recFNFromFN(exp, sig, x)$/;"	m
recode	src/main/scala/tile/FPU.scala	/^  def recode(x: UInt, tag: UInt): UInt = {$/;"	m
recoded	src/main/scala/util/ECC.scala	/^  val recoded = code.encode(decoded.corrected)$/;"	l
recodedWidth	src/main/scala/tile/FPU.scala	/^  def recodedWidth = ieeeWidth + 1$/;"	m
recommendedFix	src/main/scala/linting/rule/LintAnonymousRegisters.scala	/^  val recommendedFix: String = "Use named intermediate val, or if that fails use @chiselName or *.suggestName(...)"$/;"	l
recommendedFix	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^  val recommendedFix: String = "override desiredName based on module parameters ('override def desiredName = \\"...\\"') or use RenameModulesAspect"$/;"	l
recommendedFix	src/main/scala/linting/rule/LintRule.scala	/^  val recommendedFix: String$/;"	l
recommendedFix	src/main/scala/linting/rule/LintTruncatingWidths.scala	/^  val recommendedFix: String = "Truncate width prior to connections"$/;"	l
recurse	src/main/scala/diplomacy/AddressDecoder.scala	/^  def recurse(partitions: Partitions, bits: Seq[BigInt]): Seq[BigInt] = {$/;"	m
recurse	src/main/scala/unittest/TestGenerator.scala	/^  def recurse(other: TestGenerator): TestGenerator = {$/;"	m
recv_beat	src/main/scala/tile/LazyRoCC.scala	/^  val recv_beat = RegInit(0.U(log2Up(cacheDataBeats+1).W))$/;"	l
recv_buf	src/main/resources/csrc/remote_bitbang.h	/^  char recv_buf[buf_size];$/;"	m	class:remote_bitbang_t
recv_data	src/main/scala/tile/LazyRoCC.scala	/^  val recv_data = Reg(UInt(cacheDataBits.W))$/;"	l
recv_end	src/main/resources/csrc/remote_bitbang.h	/^  ssize_t recv_start, recv_end;$/;"	m	class:remote_bitbang_t
recv_start	src/main/resources/csrc/remote_bitbang.h	/^  ssize_t recv_start, recv_end;$/;"	m	class:remote_bitbang_t
redact	src/main/scala/tilelink/ProbePicker.scala	/^          def redact(x: TLMasterParameters) = x.v1copy(sourceId = IdRange(0,1), nodePath = Nil, visibility = Seq(AddressSet(0, ~0)))$/;"	m
reductionMask	src/main/scala/amba/axi4/Fragmenter.scala	/^        val reductionMask = AddressDecoder(sizes1.values.toList)$/;"	l
reductionMask	src/main/scala/tilelink/Parameters.scala	/^    val reductionMask = AddressDecoder(groups.map(_._2))$/;"	l
refPathTokenizer	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  implicit def refPathTokenizer[T <: Data]: Tokenizer[T] = tokenizer((d: T) => ReferencePathToken(d.toTarget))$/;"	m
refill	src/main/scala/rocket/NBDcache.scala	/^    val refill = new L1RefillReq().asOutput \/\/ Data is bypassed$/;"	l
refill	src/main/scala/rocket/NBDcache.scala	/^    val refill = new L1RefillReq().asOutput$/;"	l
refillCycles	src/main/scala/tile/L1Cache.scala	/^  def refillCycles = cacheDataBeats$/;"	m
refillError	src/main/scala/rocket/ICache.scala	/^  val refillError = tl_out.d.bits.corrupt || (refill_cnt > 0 && accruedRefillError)$/;"	l
refillMux	src/main/scala/rocket/NBDcache.scala	/^  val refillMux = Wire(Vec(cfg.nMSHRs, new L1RefillReq))$/;"	l
refill_count	src/main/scala/rocket/DCache.scala	/^      val refill_count = RegInit(0.U((cacheBlockBytes \/ beatBytes).log2.W))$/;"	l
refill_done	src/main/scala/rocket/ICache.scala	/^  val refill_done = refill_one_beat && d_done$/;"	l
refill_fire	src/main/scala/rocket/ICache.scala	/^  val refill_fire = tl_out.a.fire() && !send_hint$/;"	l
refill_idx	src/main/scala/rocket/ICache.scala	/^  val refill_idx = index(refill_vaddr, refill_paddr)$/;"	l
refill_one_beat	src/main/scala/rocket/ICache.scala	/^  val refill_one_beat = tl_out.d.fire() && edge_out.hasData(tl_out.d.bits)$/;"	l
refill_paddr	src/main/scala/rocket/ICache.scala	/^  val refill_paddr = RegEnable(io.s1_paddr, s1_valid && s1_can_request_refill)$/;"	l
refill_ppn	src/main/scala/rocket/TLB.scala	/^  val refill_ppn = io.ptw.resp.bits.pte.ppn(ppnBits-1, 0)$/;"	l
refill_tag	src/main/scala/rocket/ICache.scala	/^  val refill_tag = refill_paddr >> pgUntagBits$/;"	l
refill_vaddr	src/main/scala/rocket/ICache.scala	/^  val refill_vaddr = RegEnable(s1_vaddr, s1_valid && s1_can_request_refill)$/;"	l
refill_valid	src/main/scala/rocket/ICache.scala	/^  val refill_valid = RegInit(false.B)$/;"	l
refill_way	src/main/scala/rocket/DCache.scala	/^  val refill_way = Reg(UInt())$/;"	l
refilling	src/main/scala/rocket/ICache.scala	/^            val refilling = refill_valid && refill_cnt > 0$/;"	l
reg	src/main/resources/vsrc/AsyncResetReg.v	/^output reg  q;$/;"	p
reg	src/main/scala/diplomacy/BundleBridge.scala	/^    val reg = Reg(chiselTypeOf(x))$/;"	l
reg	src/main/scala/diplomacy/Resources.scala	/^    val reg = resources.map.filterKeys(DiplomacyUtils.regFilter)$/;"	l
reg	src/main/scala/diplomacy/Resources.scala	/^  def reg(name: String): Seq[Resource] = Seq(Resource(this, "reg\/" + name))$/;"	m
reg	src/main/scala/diplomacy/Resources.scala	/^  def reg: Seq[Resource] = Seq(Resource(this, "reg"))$/;"	m
reg	src/main/scala/jtag/JtagShifter.scala	/^  val reg = Reg(Bool())  \/\/ 10.1.1a single shift register stage$/;"	l
reg	src/main/scala/regmapper/DescribedReg.scala	/^    val reg = Module(new AsyncResetRegVec(w = width, init = reset))$/;"	l
reg	src/main/scala/regmapper/DescribedReg.scala	/^    val reg = reset.map{i => RegInit(i)}.getOrElse(Reg(gen))$/;"	l
reg	src/main/scala/regmapper/Test.scala	/^    val reg = RegInit(UInt(0, width = log2Ceil(x+1)))$/;"	l
reg	src/main/scala/regmapper/Test.scala	/^  val reg = RegInit(UInt(0, width = bits))$/;"	l
reg	src/main/scala/rocket/CSR.scala	/^    val reg = Reg(UInt(32.W))$/;"	l
reg	src/main/scala/rocket/CSR.scala	/^    val reg = Reg(UInt(width = vaddrBitsExtended))$/;"	l
reg	src/main/scala/rocket/CSR.scala	/^    val reg = Reg(UInt(xLen.W))$/;"	l
reg	src/main/scala/rocket/CSR.scala	/^    val reg = csr.init.map(init => RegInit(init.U(xLen.W))).getOrElse(Reg(UInt(xLen.W)))$/;"	l
reg	src/main/scala/tile/BusErrorUnit.scala	/^    def reg(r: UInt, gn: String, d: RegFieldDesc) = RegFieldGroup(gn, None, RegField.bytes(r, (r.getWidth + 7)\/8, Some(d)))$/;"	m
reg	src/main/scala/tile/BusErrorUnit.scala	/^    def reg(v: Vec[Bool], gn: String, gd: String, d: Seq[RegFieldDesc]) =$/;"	m
reg	src/main/scala/tilelink/ToAHB.scala	/^      val reg  = RegInit(resetState)$/;"	l
reg	src/main/scala/util/AsyncResetReg.scala	/^    val reg = Module(new AsyncResetReg(if (init) 1 else 0))$/;"	l
reg	src/main/scala/util/AsyncResetReg.scala	/^    val reg = Module(new AsyncResetRegVec(w, resetData))$/;"	l
reg	src/main/scala/util/AsyncResetReg.scala	/^  val reg = withClockAndReset(io.clk, io.rst.asAsyncReset)(RegInit(resetValue.U(1.W)))$/;"	l
reg	src/main/scala/util/AsyncResetReg.scala	/^  val reg = withReset(reset.asAsyncReset)(RegInit(init.U(w.W)))$/;"	l
reg	src/main/scala/util/SynchronizerReg.scala	/^    val reg = if (resetType == SynchronizerResetType.NonSync) Reg(Bool()) else RegInit(init.B)$/;"	l
regAccessRegisterCommand	src/main/scala/devices/debug/Debug.scala	/^    val regAccessRegisterCommand = autoexec    && commandRegIsAccessRegister && (ABSTRACTCSReg.cmderr === 0.U)$/;"	l
regAddrMask	src/main/scala/rocket/RocketCore.scala	/^  val regAddrMask = (1 << lgNXRegs) - 1$/;"	l
regDescs	src/main/scala/util/Annotations.scala	/^    val regDescs = mapping.flatMap { case (byte, seq) =>$/;"	l
regFieldDescSer	src/main/scala/util/Annotations.scala	/^    val regFieldDescSer = RegFieldDescSer($/;"	l
regFieldSers	src/main/scala/util/Annotations.scala	/^    val regFieldSers = mapping.flatMap {$/;"	l
regFields	src/main/scala/regmapper/RegFieldDesc.scala	/^      val regFields = regmapEntry._2$/;"	l
regFieldsWithAddressBlockAdded	src/main/scala/regmapper/RegFieldDesc.scala	/^      val regFieldsWithAddressBlockAdded = regFields.map {r =>$/;"	l
regFilter	src/main/scala/diplomacy/Resources.scala	/^  def regFilter(name: String): Boolean = name == "reg" || name.take(4) == "reg\/"$/;"	m
regIndexI	src/main/scala/regmapper/RegMapper.scala	/^    def regIndexI(x: Int) = ofBits((maskFilter zip toBits(x)).filter(_._1).map(_._2))$/;"	m
regIndexU	src/main/scala/regmapper/RegMapper.scala	/^    def regIndexU(x: UInt) = if (maskBits == 0) UInt(0) else$/;"	m
regName	src/main/scala/diplomacy/Resources.scala	/^  def regName(name: String): Option[String] = {$/;"	m
regSize	src/main/scala/regmapper/RegMapper.scala	/^    val regSize = 1 << maskBits$/;"	l
regWidth	src/main/scala/tile/BusErrorUnit.scala	/^  val regWidth = 64$/;"	l
reg_bp	src/main/scala/rocket/CSR.scala	/^  val reg_bp = Reg(Vec(1 << log2Up(nBreakpoints), new BP))$/;"	l
reg_custom	src/main/scala/rocket/CSR.scala	/^  val reg_custom = customCSRs.map { csr =>$/;"	l
reg_cycle	src/main/scala/rocket/CSR.scala	/^  val reg_cycle = if (enableCommitLog) WideCounter(64, io.retire,     inhibit = reg_mcountinhibit(0))$/;"	l
reg_dcsr	src/main/scala/rocket/CSR.scala	/^  val reg_dcsr = Reg(init=reset_dcsr)$/;"	l
reg_debug	src/main/scala/rocket/CSR.scala	/^  val reg_debug = Reg(init=Bool(false))$/;"	l
reg_dpc	src/main/scala/rocket/CSR.scala	/^  val reg_dpc = Reg(UInt(width = vaddrBitsExtended))$/;"	l
reg_dscratch	src/main/scala/rocket/CSR.scala	/^  val reg_dscratch = Reg(UInt(width = xLen))$/;"	l
reg_dscratch1	src/main/scala/rocket/CSR.scala	/^  val reg_dscratch1 = (p(DebugModuleKey).map(_.nDscratch).getOrElse(1) > 1).option(Reg(UInt(width = xLen)))$/;"	l
reg_fflags	src/main/scala/rocket/CSR.scala	/^  val reg_fflags = Reg(UInt(width = 5))$/;"	l
reg_frm	src/main/scala/rocket/CSR.scala	/^  val reg_frm = Reg(UInt(width = 3))$/;"	l
reg_hgatp	src/main/scala/rocket/CSR.scala	/^  val reg_hgatp = Reg(new PTBR)$/;"	l
reg_hpmcounter	src/main/scala/rocket/CSR.scala	/^  val reg_hpmcounter = io.counters.zipWithIndex.map { case (c, i) =>$/;"	l
reg_hpmevent	src/main/scala/rocket/CSR.scala	/^  val reg_hpmevent = io.counters.map(c => Reg(init = UInt(0, xLen)))$/;"	l
reg_hstatus	src/main/scala/rocket/CSR.scala	/^  val reg_hstatus = RegInit(0.U.asTypeOf(new HStatus))$/;"	l
reg_htval	src/main/scala/rocket/CSR.scala	/^  val reg_htval = Reg(reg_mtval2.cloneType)$/;"	l
reg_instret	src/main/scala/rocket/CSR.scala	/^  val reg_instret = WideCounter(64, io.retire, inhibit = reg_mcountinhibit(2))$/;"	l
reg_mcause	src/main/scala/rocket/CSR.scala	/^  val reg_mcause = RegInit(0.U(xLen.W))$/;"	l
reg_mcontext	src/main/scala/rocket/CSR.scala	/^  val reg_mcontext = (coreParams.mcontextWidth > 0).option(RegInit(0.U(coreParams.mcontextWidth.W)))$/;"	l
reg_mcountinhibit	src/main/scala/rocket/CSR.scala	/^  val reg_mcountinhibit = RegInit(0.U((CSR.firstHPM + nPerfCounters).W))$/;"	l
reg_mepc	src/main/scala/rocket/CSR.scala	/^  val reg_mepc = Reg(UInt(width = vaddrBitsExtended))$/;"	l
reg_mie	src/main/scala/rocket/CSR.scala	/^  val reg_mie = Reg(UInt(width = xLen))$/;"	l
reg_mip	src/main/scala/rocket/CSR.scala	/^  val reg_mip = Reg(new MIP)$/;"	l
reg_misa	src/main/scala/rocket/CSR.scala	/^  val reg_misa = Reg(init=UInt(isaMax))$/;"	l
reg_mncause	src/main/scala/rocket/CSR.scala	/^  val reg_mncause = RegInit(0.U(xLen.W))$/;"	l
reg_mnepc	src/main/scala/rocket/CSR.scala	/^  val reg_mnepc = Reg(UInt(width = vaddrBitsExtended))$/;"	l
reg_mnscratch	src/main/scala/rocket/CSR.scala	/^  val reg_mnscratch = Reg(Bits(width = xLen))$/;"	l
reg_mnstatus	src/main/scala/rocket/CSR.scala	/^  val reg_mnstatus = Reg(init=reset_mnstatus)$/;"	l
reg_mscratch	src/main/scala/rocket/CSR.scala	/^  val reg_mscratch = Reg(Bits(width = xLen))$/;"	l
reg_mstatus	src/main/scala/rocket/CSR.scala	/^  val reg_mstatus = Reg(init=reset_mstatus)$/;"	l
reg_mtval	src/main/scala/rocket/CSR.scala	/^  val reg_mtval = Reg(UInt(width = vaddrBitsExtended))$/;"	l
reg_mtval2	src/main/scala/rocket/CSR.scala	/^  val reg_mtval2 = Reg(UInt(((maxSVAddrBits + 1) min xLen).W))$/;"	l
reg_mtvec	src/main/scala/rocket/CSR.scala	/^  val reg_mtvec = mtvecInit match {$/;"	l
reg_pmp	src/main/scala/rocket/CSR.scala	/^  val reg_pmp = Reg(Vec(nPMPs, new PMPReg))$/;"	l
reg_rnmie	src/main/scala/rocket/CSR.scala	/^  val reg_rnmie = RegInit(true.B)$/;"	l
reg_satp	src/main/scala/rocket/CSR.scala	/^  val reg_satp = Reg(new PTBR)$/;"	l
reg_scause	src/main/scala/rocket/CSR.scala	/^  val reg_scause = Reg(Bits(width = xLen))$/;"	l
reg_scontext	src/main/scala/rocket/CSR.scala	/^  val reg_scontext = (coreParams.scontextWidth > 0).option(RegInit(0.U(coreParams.scontextWidth.W)))$/;"	l
reg_sepc	src/main/scala/rocket/CSR.scala	/^  val reg_sepc = Reg(UInt(width = vaddrBitsExtended))$/;"	l
reg_singleStepped	src/main/scala/rocket/CSR.scala	/^  val reg_singleStepped = Reg(Bool())$/;"	l
reg_sscratch	src/main/scala/rocket/CSR.scala	/^  val reg_sscratch = Reg(Bits(width = xLen))$/;"	l
reg_stval	src/main/scala/rocket/CSR.scala	/^  val reg_stval = Reg(UInt(width = vaddrBitsExtended))$/;"	l
reg_stvec	src/main/scala/rocket/CSR.scala	/^  val reg_stvec = Reg(UInt(width = if (usingHypervisor) vaddrBitsExtended else vaddrBits))$/;"	l
reg_tselect	src/main/scala/rocket/CSR.scala	/^  val reg_tselect = Reg(UInt(width = log2Up(nBreakpoints)))$/;"	l
reg_vconfig	src/main/scala/rocket/CSR.scala	/^  val reg_vconfig = usingVector.option(Reg(new VConfig))$/;"	l
reg_vsatp	src/main/scala/rocket/CSR.scala	/^  val reg_vsatp = Reg(new PTBR)$/;"	l
reg_vscause	src/main/scala/rocket/CSR.scala	/^  val reg_vscause = Reg(Bits(width = xLen))$/;"	l
reg_vsepc	src/main/scala/rocket/CSR.scala	/^  val reg_vsepc = Reg(UInt(width = vaddrBitsExtended))$/;"	l
reg_vsscratch	src/main/scala/rocket/CSR.scala	/^  val reg_vsscratch = Reg(Bits(width = xLen))$/;"	l
reg_vsstatus	src/main/scala/rocket/CSR.scala	/^  val reg_vsstatus = Reg(new MStatus)$/;"	l
reg_vstart	src/main/scala/rocket/CSR.scala	/^  val reg_vstart = usingVector.option(Reg(UInt(maxVLMax.log2.W)))$/;"	l
reg_vstval	src/main/scala/rocket/CSR.scala	/^  val reg_vstval = Reg(UInt(width = vaddrBitsExtended))$/;"	l
reg_vxrm	src/main/scala/rocket/CSR.scala	/^  val reg_vxrm = usingVector.option(Reg(UInt(io.vector.get.vxrm.getWidth.W)))$/;"	l
reg_vxsat	src/main/scala/rocket/CSR.scala	/^  val reg_vxsat = usingVector.option(Reg(Bool()))$/;"	l
reg_wfi	src/main/scala/rocket/CSR.scala	/^  val reg_wfi = withClock(io.ungated_clock) { Reg(init=Bool(false)) }$/;"	l
regex	src/main/scala/diplomacy/LazyModule.scala	/^    val regex = new Regex("(_[0-9]+)*$")$/;"	l
regfile	src/main/scala/tile/FPU.scala	/^  val regfile = Mem(32, Bits(width = fLen+1))$/;"	l
regfile	src/main/scala/tile/LazyRoCC.scala	/^  val regfile = Mem(outer.n, UInt(xLen.W))$/;"	l
regionType	src/main/scala/tilelink/Parameters.scala	/^  val regionType:         RegionType.T,$/;"	l
registersSer	src/main/scala/util/Annotations.scala	/^    val registersSer = RegistersSer($/;"	l
regmap	src/main/scala/amba/ahb/RegisterRouter.scala	/^  def regmap(mapping: RegField.Map*) = router.node.regmap(mapping:_*)$/;"	m
regmap	src/main/scala/amba/ahb/RegisterRouter.scala	/^  def regmap(mapping: RegField.Map*) = {$/;"	m
regmap	src/main/scala/amba/apb/RegisterRouter.scala	/^  def regmap(mapping: RegField.Map*) = router.node.regmap(mapping:_*)$/;"	m
regmap	src/main/scala/amba/apb/RegisterRouter.scala	/^  def regmap(mapping: RegField.Map*) = {$/;"	m
regmap	src/main/scala/amba/axi4/RegisterRouter.scala	/^  def regmap(mapping: RegField.Map*) = router.node.regmap(mapping:_*)$/;"	m
regmap	src/main/scala/amba/axi4/RegisterRouter.scala	/^  def regmap(mapping: RegField.Map*) = {$/;"	m
regmap	src/main/scala/regmapper/RegField.scala	/^  def regmap(mapping: RegField.Map*): Unit$/;"	m
regmap	src/main/scala/tilelink/RegisterRouter.scala	/^  def regmap(mapping: RegField.Map*) : OMRegisterMap = {$/;"	m
regmap	src/main/scala/tilelink/RegisterRouter.scala	/^  def regmap(mapping: RegField.Map*) = router.node.regmap(mapping:_*)$/;"	m
regno	src/main/scala/devices/debug/abstract_commands.scala	/^  val regno = UInt(16.W)$/;"	l
regressionTests	src/main/scala/stage/phases/AddDefaultTests.scala	/^    val regressionTests = mutable.LinkedHashSet($/;"	l
regs	src/main/scala/diplomacy/Resources.scala	/^    val regs = optDef("reg", (named ++ bulk).flatMap(_._2.map(_.value)).toList) \/\/ address ranges of all spaces (named and bulk)$/;"	l
regs	src/main/scala/jtag/JtagShifter.scala	/^  val regs = (0 until n) map (x => Reg(Bool()))$/;"	l
regs	src/main/scala/rocket/NBDcache.scala	/^    val regs = Reg(Vec(rowWords, Bits(width = encDataBits)))$/;"	l
relabelFifo	src/main/scala/tilelink/AddressAdjuster.scala	/^      def relabelFifo(managers: Seq[TLSlaveParameters]): Seq[TLSlaveParameters] = {$/;"	m
relabeler	src/main/scala/tilelink/Xbar.scala	/^  def relabeler() = {$/;"	m
release	src/main/scala/rocket/HellaCache.scala	/^  val release = Bool()$/;"	l
release	src/main/scala/rocket/NBDcache.scala	/^    val release = Decoupled(new TLBundleC(edge.bundle))$/;"	l
release	src/main/scala/tilelink/Broadcast.scala	/^  val release = Flipped(Decoupled(new ProbeFilterRelease(params)))$/;"	l
releaseDataBeat	src/main/scala/rocket/DCache.scala	/^  val releaseDataBeat = Cat(UInt(0), c_count) + Mux(releaseRejected, UInt(0), s1_release_data_valid + Cat(UInt(0), s2_release_data_valid))$/;"	l
releaseIO	src/main/scala/tilelink/Xbar.scala	/^    val releaseIO = (edgesIn zip reachableIO).map { case (cp, reachableO) =>$/;"	l
releaseInFlight	src/main/scala/rocket/DCache.scala	/^  val releaseInFlight = s1_probe || s2_probe || release_state =\/= s_ready$/;"	l
releaseRejected	src/main/scala/rocket/DCache.scala	/^  val releaseRejected = Wire(Bool())$/;"	l
releaseWay	src/main/scala/rocket/DCache.scala	/^  val releaseWay = Wire(UInt())$/;"	l
release_ack_addr	src/main/scala/rocket/DCache.scala	/^  val release_ack_addr = Reg(UInt(paddrBits.W))$/;"	l
release_ack_wait	src/main/scala/rocket/DCache.scala	/^  val release_ack_wait = Reg(init=Bool(false))$/;"	l
release_state	src/main/scala/rocket/DCache.scala	/^  val release_state = Reg(init=s_ready)$/;"	l
releaseack	src/main/scala/tilelink/Broadcast.scala	/^      val releaseack = Wire(in.d)$/;"	l
relevant	src/main/scala/tilelink/Parameters.scala	/^    val relevant = slaves.filter(m => policy(m))$/;"	l
remain1	src/main/scala/amba/axi4/Fragmenter.scala	/^        val remain1  = fillLow | wipeHigh  \/\/ MSB(a.len+1)-1$/;"	l
remainder	src/main/scala/rocket/Multiplier.scala	/^  val remainder = Reg(Bits((2*mulw+2).W)) \/\/ div only needs 2*w+1 bits$/;"	l
remainingAnnotations	src/main/scala/linting/LintReporter.scala	/^    val remainingAnnotations = grouped.getOrElse("a", Nil)$/;"	l
remainingErrorLimit	src/main/scala/linting/LintException.scala	/^        val remainingErrorLimit = totalErrorLimit.min(perErrorLimit)$/;"	l
remote	src/main/scala/tilelink/AddressAdjuster.scala	/^      val remote = mp(1)$/;"	l
remote_bitbang_t	src/main/resources/csrc/remote_bitbang.cc	/^remote_bitbang_t::remote_bitbang_t(uint16_t port) :$/;"	f	class:remote_bitbang_t
remote_bitbang_t	src/main/resources/csrc/remote_bitbang.h	/^class remote_bitbang_t$/;"	c
remote_d	src/main/scala/tilelink/AddressAdjuster.scala	/^      val remote_d = Wire(chiselTypeOf(parent.d))$/;"	l
ren	src/main/scala/amba/axi4/SRAM.scala	/^    val ren = in.ar.fire()$/;"	l
ren	src/main/scala/tilelink/SRAM.scala	/^    val ren = !wen && (a_fire || r_replay) \/\/ help Chisel infer a RW-port$/;"	l
ren	src/main/scala/util/HellaQueue.scala	/^  val ren = io.deq.ready && (atLeastTwo || !io.deq.valid && !empty)$/;"	l
ren	src/main/scala/util/LanePositionedQueue.scala	/^  val ren = (deq_push && (!enq_refill_idle || !pre_gap2)) || (enq_refill_idle && (deq_refill_ren0 || deq_refill_ren1)) || enq_refill_ren0 || enq_refill_ren1$/;"	l
ren1	src/main/scala/tile/FPU.scala	/^  val ren1 = Bool()$/;"	l
ren2	src/main/scala/tile/FPU.scala	/^  val ren2 = Bool()$/;"	l
ren3	src/main/scala/tile/FPU.scala	/^  val ren3 = Bool()$/;"	l
rename	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^  def rename(input: String, annos: Seq[Annotation]): CircuitState = {$/;"	m
renameConflicts	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val renameConflicts = finalNames.groupBy(identity).collect {$/;"	l
renameNames	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^  def renameNames(state: CircuitState): CircuitState = {$/;"	m
renameNames	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^  def renameNames(testCase: TestCase): CircuitState = {$/;"	m
renameTransform	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^  val renameTransform = new RenameDesiredNames$/;"	l
renamedDesiredNames	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val renamedDesiredNames = mutable.Set[String]()$/;"	l
renames	src/main/scala/transforms/naming/RenameDesiredNames.scala	/^    val renames = RenameMap()$/;"	l
render	src/main/scala/amba/ahb/Nodes.scala	/^  def render(e: AHBEdgeParameters) = RenderedEdge(colour = "#00ccff" \/* bluish *\/, label = (e.slave.beatBytes * 8).toString)$/;"	m
render	src/main/scala/amba/apb/Nodes.scala	/^  def render(e: APBEdgeParameters) = RenderedEdge(colour = "#00ccff" \/* bluish *\/, (e.slave.beatBytes * 8).toString)$/;"	m
render	src/main/scala/amba/axi4/Nodes.scala	/^  def render(e: AXI4AsyncEdgeParameters) = RenderedEdge(colour = "#ff0000" \/* red *\/, label = e.slave.async.depth.toString)$/;"	m
render	src/main/scala/amba/axi4/Nodes.scala	/^  def render(e: AXI4CreditedEdgeParameters) = RenderedEdge(colour = "#ffff00" \/* yellow *\/, label = e.delay.toString)$/;"	m
render	src/main/scala/amba/axi4/Nodes.scala	/^  def render(e: AXI4EdgeParameters) = RenderedEdge(colour = "#00ccff" \/* bluish *\/, label  = (e.slave.beatBytes * 8).toString)$/;"	m
render	src/main/scala/amba/axis/Nodes.scala	/^  def render(e: AXISEdgeParameters) = RenderedEdge(colour = "#00ccff" \/* bluish *\/, (e.beatBytes * 8).toString)$/;"	m
render	src/main/scala/devices/debug/Custom.scala	/^  def render(e: DebugCustomParams) = RenderedEdge(colour = "#20B2AA" \/* lightseagreen *\/)$/;"	m
render	src/main/scala/diplomacy/BundleBridge.scala	/^  def render(e: BundleBridgeEdgeParams[T]) = RenderedEdge(colour = "#cccc00" \/* yellow *\/)$/;"	m
render	src/main/scala/diplomacy/Nodes.scala	/^  def render(e: EI): RenderedEdge$/;"	m
render	src/main/scala/interrupts/Nodes.scala	/^  def render(e: IntEdge) = RenderedEdge(colour = "#0000ff" \/* blue *\/, label = e.source.sources.map(_.range.size).sum.toString, flipped = true)$/;"	m
render	src/main/scala/interrupts/Nodes.scala	/^  def render(e: IntEdge) = RenderedEdge(colour = "#ff00ff" \/* purple *\/, label = e.source.sources.map(_.range.size).sum.toString, flipped = true)$/;"	m
render	src/main/scala/prci/ClockNodes.scala	/^  def render(e: ClockEdgeParameters) = RenderedEdge(colour = "#00cc00" \/* green *\/)$/;"	m
render	src/main/scala/prci/ClockNodes.scala	/^  def render(e: ClockGroupEdgeParameters) = RenderedEdge(colour = "#00cc00" \/* green *\/)$/;"	m
render	src/main/scala/tilelink/Nodes.scala	/^  def render(e: TLAsyncEdgeParameters) = RenderedEdge(colour = "#ff0000" \/* red *\/, label = e.manager.async.depth.toString)$/;"	m
render	src/main/scala/tilelink/Nodes.scala	/^  def render(e: TLCreditedEdgeParameters) = RenderedEdge(colour = "#ffff00" \/* yellow *\/, e.delay.toString)$/;"	m
render	src/main/scala/tilelink/Nodes.scala	/^  def render(e: TLRationalEdgeParameters) = RenderedEdge(colour = "#00ff00" \/* green *\/)$/;"	m
render	src/main/scala/tilelink/Nodes.scala	/^  def render(ei: TLEdgeIn) = RenderedEdge(colour = "#000000" \/* black *\/, label = (ei.manager.beatBytes * 8).toString)$/;"	m
render	src/main/scala/tilelink/Nodes.scala	/^  def render(ei: TLEdgeIn) = TLImp.render(ei)$/;"	m
rep	src/main/scala/rocket/NBDcache.scala	/^    val rep = Decoupled(new TLBundleC(edge.bundle))$/;"	l
repeat	src/main/scala/tilelink/WidthWidget.scala	/^        val repeat = Wire(Bool())$/;"	l
repeat	src/main/scala/util/Repeater.scala	/^    val repeat = Input(Bool())$/;"	l
repeated	src/main/scala/tilelink/WidthWidget.scala	/^        val repeated = Repeater(in, repeat)$/;"	l
repeater	src/main/scala/tilelink/Fragmenter.scala	/^        val repeater = Module(new Repeater(in.a.bits))$/;"	l
repeater	src/main/scala/tilelink/HintHandler.scala	/^        val repeater = Module(new Repeater(in.a.bits))$/;"	l
repeater	src/main/scala/util/Repeater.scala	/^    val repeater = Module(new Repeater(chiselTypeOf(enq.bits)))$/;"	l
repeatfill	src/main/scala/formal/FormalUtils.scala	/^  def repeatfill[T <: Any](size: Int, base_seq: Seq[T]): Seq[T] = {$/;"	m
repl	src/main/scala/rocket/BTB.scala	/^  val repl = new PseudoLRU(entries)$/;"	l
repl_array	src/main/scala/rocket/DCache.scala	/^    val repl_array = Mem(nSets, UInt(replacer.nBits.W))$/;"	l
repl_way	src/main/scala/rocket/ICache.scala	/^  val repl_way = if (isDM) UInt(0) else {$/;"	l
replace	src/main/scala/util/Replacement.scala	/^  def replace: UInt = way$/;"	m
replacement	src/main/scala/rocket/HellaCache.scala	/^  def replacement = new RandomReplacement(nWays)$/;"	m
replacement	src/main/scala/rocket/ICache.scala	/^  def replacement = new RandomReplacement(nWays)$/;"	m
replacementEntry	src/main/scala/rocket/TLB.scala	/^  def replacementEntry(set: Seq[TLBEntry], alt: UInt) = {$/;"	m
replacer	src/main/scala/rocket/DCache.scala	/^  val replacer = ReplacementPolicy.fromString(cacheParams.replacementPolicy, nWays)$/;"	l
replacer	src/main/scala/rocket/NBDcache.scala	/^  val replacer = cacheParams.replacement$/;"	l
replay	src/main/scala/rocket/Frontend.scala	/^  val replay = Bool()$/;"	l
replay	src/main/scala/rocket/HellaCache.scala	/^  val replay = Bool()$/;"	l
replay	src/main/scala/rocket/IBuf.scala	/^      val replay = ic_replay(j) || (!exp.io.rvc && ic_replay(j+1))$/;"	l
replay	src/main/scala/rocket/IBuf.scala	/^  val replay = Bool()$/;"	l
replay	src/main/scala/rocket/ICache.scala	/^  val replay = Bool()$/;"	l
replay	src/main/scala/rocket/NBDcache.scala	/^    val replay = Decoupled(new Replay)$/;"	l
replay	src/main/scala/rocket/NBDcache.scala	/^    val replay = Decoupled(new ReplayInternal)$/;"	l
replay	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^    val replay = Decoupled(new HellaCacheReq)$/;"	l
replay_arb	src/main/scala/rocket/NBDcache.scala	/^  val replay_arb = Module(new Arbiter(new ReplayInternal, cfg.nMSHRs))$/;"	l
replay_complete	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val replay_complete = io.resp.valid && replaying && io.resp.bits.tag === next_replay_req.tag$/;"	l
replay_ex	src/main/scala/rocket/RocketCore.scala	/^  val replay_ex = ex_reg_replay || (ex_reg_valid && (replay_ex_structural || replay_ex_load_use))$/;"	l
replay_ex_load_use	src/main/scala/rocket/RocketCore.scala	/^  val replay_ex_load_use = wb_dcache_miss && ex_reg_load_use$/;"	l
replay_ex_structural	src/main/scala/rocket/RocketCore.scala	/^  val replay_ex_structural = ex_ctrl.mem && !io.dmem.req.ready ||$/;"	l
replay_mem	src/main/scala/rocket/RocketCore.scala	/^  val replay_mem  = dcache_kill_mem || mem_reg_replay || fpu_kill_mem$/;"	l
replay_next	src/main/scala/rocket/HellaCache.scala	/^  val replay_next = Bool(INPUT)$/;"	l
replay_next	src/main/scala/rocket/NBDcache.scala	/^    val replay_next = Bool(OUTPUT)$/;"	l
replay_wb	src/main/scala/rocket/RocketCore.scala	/^  val replay_wb = replay_wb_common || replay_wb_rocc$/;"	l
replay_wb_common	src/main/scala/rocket/RocketCore.scala	/^  val replay_wb_common = io.dmem.s2_nack || wb_reg_replay$/;"	l
replay_wb_rocc	src/main/scala/rocket/RocketCore.scala	/^  val replay_wb_rocc = wb_reg_valid && wb_ctrl.rocc && !io.rocc.cmd.ready$/;"	l
replaying	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val replaying = Reg(init = Bool(false))$/;"	l
replayq	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val replayq = Module(new SimpleHellaCacheIFReplayQueue(2))$/;"	l
replication	src/main/scala/tilelink/RegionReplication.scala	/^  def replication: Option[ReplicatedRegion]$/;"	m
replicationMask	src/main/scala/tilelink/RegionReplication.scala	/^  val replicationMask = region.mask & ~local.mask$/;"	l
reply_coh	src/main/scala/rocket/NBDcache.scala	/^  val reply_coh = Mux(tag_matches, old_coh, miss_coh)$/;"	l
reportCease	src/main/scala/tile/Interrupts.scala	/^  def reportCease(could_cease: Option[Bool], quiescenceCycles: Int = 8): Unit = {$/;"	m
reportHalt	src/main/scala/tile/Interrupts.scala	/^  def reportHalt(could_halt: Option[Bool]): Unit = {$/;"	m
reportHalt	src/main/scala/tile/Interrupts.scala	/^  def reportHalt(errors: Seq[CanHaveErrors]): Unit = {$/;"	m
reportWFI	src/main/scala/tile/Interrupts.scala	/^  def reportWFI(could_wfi: Option[Bool]): Unit = {$/;"	m
req	src/main/scala/devices/debug/DMI.scala	/^  val req = new  DecoupledIO(new DMIReq(p(DebugModuleKey).get.nDMIAddrSize))$/;"	l
req	src/main/scala/devices/debug/Debug.scala	/^  val req = Input(UInt(nExtTriggers.W))$/;"	l
req	src/main/scala/devices/debug/Debug.scala	/^  val req = Output(UInt(nExtTriggers.W))$/;"	l
req	src/main/scala/rocket/BTB.scala	/^    val req = Valid(new BTBReq).flip$/;"	l
req	src/main/scala/rocket/DCache.scala	/^    val req = Valid(new DCacheDataReq).flip$/;"	l
req	src/main/scala/rocket/DCache.scala	/^  val req = Flipped(Decoupled(new TLBReq(coreDataBytes.log2)))$/;"	l
req	src/main/scala/rocket/Frontend.scala	/^  val req = Valid(new FrontendReq)$/;"	l
req	src/main/scala/rocket/HellaCache.scala	/^  val req = Decoupled(new HellaCacheReq)$/;"	l
req	src/main/scala/rocket/HellaCacheArbiter.scala	/^      val req = io.requestor(i).req$/;"	l
req	src/main/scala/rocket/ICache.scala	/^  val req = Decoupled(new ICacheReq).flip$/;"	l
req	src/main/scala/rocket/Multiplier.scala	/^    val req = Flipped(Valid(new MultiplierReq(width, log2Ceil(nXpr))))$/;"	l
req	src/main/scala/rocket/Multiplier.scala	/^  val req = Flipped(Decoupled(new MultiplierReq(dataBits, tagBits)))$/;"	l
req	src/main/scala/rocket/Multiplier.scala	/^  val req = Reg(chiselTypeOf(io.req.bits))$/;"	l
req	src/main/scala/rocket/NBDcache.scala	/^    val req = Decoupled(new HellaCacheReq).flip$/;"	l
req	src/main/scala/rocket/NBDcache.scala	/^    val req = Decoupled(new MSHRReq).flip$/;"	l
req	src/main/scala/rocket/NBDcache.scala	/^    val req = Decoupled(new TLBundleB(edge.bundle)).flip$/;"	l
req	src/main/scala/rocket/NBDcache.scala	/^    val req = Decoupled(new WritebackReq(edge.bundle)).flip$/;"	l
req	src/main/scala/rocket/NBDcache.scala	/^  val req = Reg(new HellaCacheReq)$/;"	l
req	src/main/scala/rocket/NBDcache.scala	/^  val req = Reg(new MSHRReqInternal)$/;"	l
req	src/main/scala/rocket/NBDcache.scala	/^  val req = Reg(new TLBundleB(edge.bundle))$/;"	l
req	src/main/scala/rocket/NBDcache.scala	/^  val req = Reg(new WritebackReq(edge.bundle))$/;"	l
req	src/main/scala/rocket/PTW.scala	/^  val req = Decoupled(Valid(new PTWReq))$/;"	l
req	src/main/scala/rocket/ScratchpadSlavePort.scala	/^      val req = Wire(new HellaCacheReq)$/;"	l
req	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^    val req = Decoupled(new HellaCacheReq).flip$/;"	l
req	src/main/scala/rocket/TLB.scala	/^    val req = Decoupled(new TLBReq(lgMaxSize)).flip$/;"	l
req	src/main/scala/tile/FPU.scala	/^    val req = Wire(new FPInput)$/;"	l
reqAddr	src/main/scala/groundtest/TraceGen.scala	/^  val reqAddr  = Reg(init = UInt(0, numBitsInWord))$/;"	l
reqAligned	src/main/scala/amba/axis/Parameters.scala	/^  val reqAligned:    Boolean, \/* 'Position byte's are unsupported *\/$/;"	l
reqCmd	src/main/scala/groundtest/TraceGen.scala	/^  val reqCmd   = Reg(init = UInt(0, 5))$/;"	l
reqContinuous	src/main/scala/amba/axis/Parameters.scala	/^  val reqContinuous: Boolean, \/* 'Null byte's inside transfers unsupported *\/$/;"	l
reqCount	src/main/scala/groundtest/TraceGen.scala	/^  val reqCount  = Reg(init = UInt(0, 32))$/;"	l
reqData	src/main/scala/groundtest/TraceGen.scala	/^  val reqData  = Reg(init = UInt(0, numBitsInWord))$/;"	l
reqTag	src/main/scala/groundtest/TraceGen.scala	/^  val reqTag   = Reg(init = UInt(0, 7))$/;"	l
reqTimer	src/main/scala/groundtest/TraceGen.scala	/^  val reqTimer = Module(new Timer(8192, maxTags))$/;"	l
reqValid	src/main/scala/groundtest/TraceGen.scala	/^  val reqValid = Reg(init = Bool(false))$/;"	l
req_addr	src/main/scala/tile/LazyRoCC.scala	/^  val req_addr = Reg(UInt(coreMaxAddrBits.W))$/;"	l
req_arb	src/main/scala/groundtest/DummyPTW.scala	/^  val req_arb = Module(new RRArbiter(Valid(new PTWReq), n))$/;"	l
req_arb	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val req_arb = Module(new Arbiter(new HellaCacheReq, 2))$/;"	l
req_arb	src/main/scala/util/Arbiters.scala	/^    val req_arb = Module(new RRArbiter(reqTyp, n))$/;"	l
req_bits	src/main/scala/rocket/NBDcache.scala	/^    val req_bits       = new MSHRReqInternal().asInput$/;"	l
req_block_addr	src/main/scala/rocket/NBDcache.scala	/^  val req_block_addr = (req.addr >> blockOffBits) << blockOffBits$/;"	l
req_helper	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val req_helper = DecoupledHelper($/;"	l
req_helper	src/main/scala/util/Arbiters.scala	/^    val req_helper = DecoupledHelper($/;"	l
req_idx	src/main/scala/rocket/NBDcache.scala	/^  val req_idx = req.addr(untagBits-1,blockOffBits)$/;"	l
req_idx	src/main/scala/rocket/NBDcache.scala	/^  val req_idx = req.address(idxMSB, idxLSB)$/;"	l
req_offset	src/main/scala/tile/LazyRoCC.scala	/^  val req_offset = req_addr(pgIdxBits - 1, 0)$/;"	l
req_pri_rdy	src/main/scala/rocket/NBDcache.scala	/^    val req_pri_rdy    = Bool(OUTPUT)$/;"	l
req_pri_val	src/main/scala/rocket/NBDcache.scala	/^    val req_pri_val    = Bool(INPUT)$/;"	l
req_rd	src/main/scala/tile/LazyRoCC.scala	/^  val req_rd = Reg(chiselTypeOf(io.resp.bits.rd))$/;"	l
req_sec_rdy	src/main/scala/rocket/NBDcache.scala	/^    val req_sec_rdy    = Bool(OUTPUT)$/;"	l
req_sec_val	src/main/scala/rocket/NBDcache.scala	/^    val req_sec_val    = Bool(INPUT)$/;"	l
req_tag	src/main/scala/rocket/NBDcache.scala	/^  val req_tag = req.addr >> untagBits$/;"	l
req_tag	src/main/scala/rocket/NBDcache.scala	/^  val req_tag = req.address >> untagBits$/;"	l
req_valid	src/main/scala/tile/FPU.scala	/^  val req_valid = ex_reg_valid || io.cp_req.valid$/;"	l
req_vpn	src/main/scala/tile/LazyRoCC.scala	/^  val req_vpn = req_addr(coreMaxAddrBits - 1, pgIdxBits)$/;"	l
reqs	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val reqs = Reg(Vec(depth, new HellaCacheReq))$/;"	l
request	src/main/scala/amba/ahb/RegisterRouter.scala	/^    val request = ahb.htrans === AHBParameters.TRANS_NONSEQ || ahb.htrans === AHBParameters.TRANS_SEQ$/;"	l
request	src/main/scala/amba/axis/Xbar.scala	/^    val request = in.map { i => outputIdRanges.map { o => o.contains(i.bits.dest) } }$/;"	l
request	src/main/scala/regmapper/RegisterCrossing.scala	/^  val request  = Decoupled(Bool()).flip \/\/ ignore .bits$/;"	l
request	src/main/scala/regmapper/RegisterCrossing.scala	/^  val request  = Decoupled(gen).flip$/;"	l
request	src/main/scala/regmapper/Test.scala	/^    val request = Module(new RRTestRequest(bits, rflow, wflow))$/;"	l
request	src/main/scala/regmapper/Test.scala	/^  def request(bits: Int,$/;"	m
request	src/main/scala/tilelink/Broadcast.scala	/^  val request = Flipped(Decoupled(new ProbeFilterRequest(params)))$/;"	l
requestAIO	src/main/scala/tilelink/Xbar.scala	/^    val requestAIO = (connectAIO zip addressA) map { case (c, i) => outputPortFns(c).map { o => unique(c) || o(i) } }$/;"	l
requestARIO	src/main/scala/amba/axi4/Xbar.scala	/^    val requestARIO = io_in.map  { i => Vec(outputPorts.map   { o => o(i.ar.bits.addr) }) }$/;"	l
requestAWIO	src/main/scala/amba/axi4/Xbar.scala	/^    val requestAWIO = io_in.map  { i => Vec(outputPorts.map   { o => o(i.aw.bits.addr) }) }$/;"	l
requestBOI	src/main/scala/amba/axi4/Xbar.scala	/^    val requestBOI  = io_out.map { o => inputIdRanges.map { i => i.contains(o.b.bits.id) } }$/;"	l
requestBOI	src/main/scala/tilelink/Xbar.scala	/^    val requestBOI = out.map { o => inputIdRanges.map  { i => i.contains(o.b.bits.source) } }$/;"	l
requestCIO	src/main/scala/tilelink/Xbar.scala	/^    val requestCIO = (connectCIO zip addressC) map { case (c, i) => outputPortFns(c).map { o => unique(c) || o(i) } }$/;"	l
requestDOI	src/main/scala/tilelink/Xbar.scala	/^    val requestDOI = out.map { o => inputIdRanges.map  { i => i.contains(o.d.bits.source) } }$/;"	l
requestEIO	src/main/scala/tilelink/Xbar.scala	/^    val requestEIO = in.map  { i => outputIdRanges.map { o => o.contains(i.e.bits.sink) } }$/;"	l
requestFields	src/main/scala/tilelink/Parameters.scala	/^  val requestFields: Seq[BundleFieldBase],$/;"	l
requestFifo	src/main/scala/amba/axi4/Parameters.scala	/^  val requestFifo = false$/;"	l
requestFifo	src/main/scala/amba/axi4/ToTL.scala	/^  val requestFifo = false$/;"	l
requestFifo	src/main/scala/diplomacy/Parameters.scala	/^  def requestFifo: Boolean$/;"	m
requestFifo	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^                   val requestFifo: Boolean,$/;"	l
requestFifo	src/main/scala/tilelink/Parameters.scala	/^  def requestFifo(id: UInt) = Mux1H(find(id), masters.map(c => Bool(c.requestFifo)))$/;"	m
requestFifo	src/main/scala/tilelink/Parameters.scala	/^  val requestFifo:       Boolean, \/\/ only a request, not a requirement. applies to A, not C.$/;"	l
requestKeys	src/main/scala/tilelink/Parameters.scala	/^  val requestKeys:    Seq[BundleKeyBase]) extends SimpleProduct$/;"	l
requestROI	src/main/scala/amba/axi4/Xbar.scala	/^    val requestROI  = io_out.map { o => inputIdRanges.map { i => i.contains(o.r.bits.id) } }$/;"	l
requestReady	src/main/scala/devices/debug/SBA.scala	/^    val requestReady = tl.a.ready$/;"	l
requestValid	src/main/scala/devices/debug/SBA.scala	/^    val requestValid = tl.a.valid$/;"	l
requestWIO	src/main/scala/amba/axi4/Xbar.scala	/^    val requestWIO = awIn.map { q => if (io_out.size > 1) q.io.deq.bits.asBools else Seq(Bool(true)) }$/;"	l
request_source	src/main/scala/rocket/DCache.scala	/^    val request_source = Seq($/;"	l
request_source	src/main/scala/rocket/DCache.scala	/^    val request_source = if (supports_flush) {$/;"	l
request_source	src/main/scala/rocket/ICache.scala	/^  val request_source = Seq($/;"	l
requestor	src/main/scala/rocket/HellaCacheArbiter.scala	/^    val requestor = Vec(n, new HellaCacheIO).flip$/;"	l
requestor	src/main/scala/rocket/PTW.scala	/^    val requestor = Vec(n, new TLBPTWIO).flip$/;"	l
requestor	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^    val requestor = new HellaCacheIO().flip$/;"	l
requestors	src/main/scala/groundtest/DummyPTW.scala	/^    val requestors = Vec(n, new TLBPTWIO).flip$/;"	l
requireContainerSupport	src/main/scala/tilelink/AddressAdjuster.scala	/^  def requireContainerSupport(l: TLSlaveParameters, r: TLSlaveParameters): Unit = {$/;"	m
requireErrorSupport	src/main/scala/tilelink/AddressAdjuster.scala	/^  def requireErrorSupport(errorDev: TLSlaveParameters, managers: Seq[TLSlaveParameters]): Unit = managers.map { m =>$/;"	m
requireFifo	src/main/scala/tilelink/Parameters.scala	/^  def requireFifo(policy: TLFIFOFixer.Policy = TLFIFOFixer.allFIFO) = {$/;"	m
requireFifoHomogeneity	src/main/scala/tilelink/AddressAdjuster.scala	/^  def requireFifoHomogeneity(managers: Seq[TLSlaveParameters]): Unit = managers.map { m =>$/;"	m
requireMaskRepetition	src/main/scala/tilelink/AddressAdjuster.scala	/^  def requireMaskRepetition(managers: Seq[TLSlaveParameters]): Unit = managers.map { m =>$/;"	m
requireOne	src/main/scala/diplomacy/BundleBridge.scala	/^  def requireOne[T <: Data](registered: Boolean)(seq: Seq[T]): T = {$/;"	m
required	src/main/scala/stage/phases/Checks.scala	/^    def required(annoList: mutable.ListBuffer[Annotation], option: String): Unit = {$/;"	m
required	src/main/scala/util/Location.scala	/^  def required[L <: T](key: Location[_]): L = internalMap(key.name).asInstanceOf[L]$/;"	m
requiredAC	src/main/scala/tilelink/Xbar.scala	/^    val requiredAC = (connectAIO ++ connectCIO).distinct$/;"	l
requiredClocks	src/main/scala/diplomacy/Resources.scala	/^  val requiredClocks = 0 to 1$/;"	l
res	src/main/scala/rocket/AMOALU.scala	/^    var res = UInt(1)$/;"	l
res	src/main/scala/rocket/AMOALU.scala	/^    var res = dat$/;"	l
res	src/main/scala/rocket/BTB.scala	/^    val res = Wire(new BHTResp)$/;"	l
res	src/main/scala/rocket/BTB.scala	/^    val res = bht.get(io.req.bits.addr)$/;"	l
res	src/main/scala/rocket/CSR.scala	/^    val res = 0.U.asTypeOf(new VType)$/;"	l
res	src/main/scala/rocket/CSR.scala	/^    val res = debugIntCause$/;"	l
res	src/main/scala/rocket/DCache.scala	/^    val res = !req.cmd.isOneOf(M_XWR, M_PFW) || req.size < log2Ceil(eccBytes)$/;"	l
res	src/main/scala/rocket/DCache.scala	/^    val res = Wire(new TLBundleB(edge.bundle))$/;"	l
res	src/main/scala/rocket/Instructions.scala	/^    val res = collection.mutable.ArrayBuffer(all:_*)$/;"	l
res	src/main/scala/rocket/Instructions.scala	/^    val res = collection.mutable.ArrayBuffer[Int]()$/;"	l
res	src/main/scala/rocket/PMP.scala	/^  val res = (io.pmp zip (pmp0 +: io.pmp)).reverse.foldLeft(pmp0) { case (prev, (pmp, prevPMP)) =>$/;"	l
res	src/main/scala/rocket/PMP.scala	/^  val res = UInt(2.W)$/;"	l
res	src/main/scala/rocket/PTW.scala	/^    val res = Wire(init = tmp)$/;"	l
res	src/main/scala/rocket/RVC.scala	/^    val res = Wire(new ExpandedInstruction)$/;"	l
res	src/main/scala/rocket/TLB.scala	/^      var res = data.ppn >> pgLevelBits*(pgLevels - 1)$/;"	l
res	src/main/scala/tile/BaseTile.scala	/^    val res = xLen match { case 32 => 2; case 64 => 3 }$/;"	l
res	src/main/scala/tile/FPU.scala	/^    val res = Wire(init = in.bits.in1.asSInt)$/;"	l
res	src/main/scala/tile/FPU.scala	/^  val res = Wire(new FPResult)$/;"	l
res	src/main/scala/util/Blockable.scala	/^      val res = Wire(chiselTypeOf(data))$/;"	l
res	src/main/scala/util/CreditedIO.scala	/^    val res = Queue.irrevocable(enq, depth, pipe=true, flow=flow)$/;"	l
res	src/main/scala/util/CreditedIO.scala	/^    val res = Wire(CreditedIO(chiselTypeOf(x.bits)))$/;"	l
res	src/main/scala/util/CreditedIO.scala	/^    val res = Wire(CreditedIO(genType))$/;"	l
res	src/main/scala/util/CreditedIO.scala	/^    val res = Wire(DecoupledIO(genType))$/;"	l
res	src/main/scala/util/GeneratorUtils.scala	/^    val res = new StringBuilder$/;"	l
res	src/main/scala/util/Misc.scala	/^    var res = default$/;"	l
resHi	src/main/scala/rocket/Multiplier.scala	/^  val resHi = Reg(Bool())$/;"	l
reserved	src/main/scala/devices/debug/Debug.scala	/^      val reserved = UInt(6.W)$/;"	l
reserved	src/main/scala/regmapper/RegFieldDesc.scala	/^  def reserved: RegFieldDesc = RegFieldDesc("reserved", "", access=RegFieldAccessType.R, reset=Some(0))$/;"	m
reserved	src/main/scala/rocket/Breakpoint.scala	/^  val reserved = UInt((xLen - (if (coreParams.useBPWatch) 26 else 24)).W)$/;"	l
reserved	src/main/scala/rocket/CSR.scala	/^  val reserved = UInt((xLen - 9).W)$/;"	l
reserved	src/main/scala/rocket/RVC.scala	/^      val reserved = Cat(jr >> 7, 0x1F.U(7.W))$/;"	l
reserved0	src/main/scala/devices/debug/DebugTransport.scala	/^  val reserved0 = UInt(1.W)$/;"	l
reserved0	src/main/scala/devices/debug/abstract_commands.scala	/^  val reserved0 = UInt(1.W)$/;"	l
reserved0	src/main/scala/devices/debug/abstract_commands.scala	/^  val reserved0 = UInt(24.W)$/;"	l
reserved0	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved0 = UInt(1.W)$/;"	l
reserved0	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved0 = UInt(17.W)$/;"	l
reserved0	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved0 = UInt(21.W)$/;"	l
reserved0	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved0 = UInt(3.W)$/;"	l
reserved0	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved0 = UInt(4.W)$/;"	l
reserved0	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved0 = UInt(6.W)$/;"	l
reserved0	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved0 = UInt(8.W)$/;"	l
reserved0	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved0 = UInt(9.W)$/;"	l
reserved1	src/main/scala/devices/debug/DebugTransport.scala	/^  val reserved1 = UInt(15.W)$/;"	l
reserved1	src/main/scala/devices/debug/abstract_commands.scala	/^  val reserved1 = UInt(1.W)$/;"	l
reserved1	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved1 = UInt(11.W)$/;"	l
reserved1	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved1 = UInt(2.W)$/;"	l
reserved1	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved1 = UInt(3.W)$/;"	l
reserved2	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved2 = UInt(1.W)$/;"	l
reserved3	src/main/scala/devices/debug/dm_registers.scala	/^  val reserved3 = UInt(4.W)$/;"	l
reserved_for_software	src/main/scala/rocket/PTW.scala	/^  val reserved_for_software = Bits(width = 2)$/;"	l
reset	src/main/resources/csrc/remote_bitbang.cc	/^void remote_bitbang_t::reset(){$/;"	f	class:remote_bitbang_t
reset	src/main/resources/vsrc/RoccBlackBox.v	/^    input reset,$/;"	p
reset	src/main/resources/vsrc/TestDriver.v	/^  reg reset = 1'b1;$/;"	r
reset	src/main/scala/devices/debug/DebugTransport.scala	/^  val reset = Input(Reset())$/;"	l
reset	src/main/scala/devices/debug/Periphery.scala	/^    val reset = Input(Bool())$/;"	l
reset	src/main/scala/devices/debug/Periphery.scala	/^  val reset = Input(Reset())$/;"	l
reset	src/main/scala/devices/debug/Periphery.scala	/^  val reset = Reset()$/;"	l
reset	src/main/scala/prci/ClockBundles.scala	/^  val reset = Output(Reset())$/;"	l
reset	src/main/scala/prci/ClockDomain.scala	/^    val reset = IO(Output(chiselTypeOf(clockBundle.reset)))$/;"	l
reset	src/main/scala/rocket/PMP.scala	/^  def reset(): Unit = {$/;"	m
reset	src/main/scala/tile/LazyRoCC.scala	/^                      val reset = Input(Reset())$/;"	l
reset	src/main/scala/util/AsyncQueue.scala	/^  val reset = IO(Input(AsyncReset()))$/;"	l
reset	src/main/scala/util/Misc.scala	/^  val reset = Bool()  $/;"	l
resetCrossingType	src/main/scala/subsystem/HasTiles.scala	/^  def resetCrossingType: ResetCrossingType$/;"	m
resetHistory	src/main/scala/rocket/BTB.scala	/^  def resetHistory(d: BHTResp): Unit = {$/;"	m
resetState	src/main/scala/tilelink/ToAHB.scala	/^      val resetState = Wire(new AHBControlBundle(edgeIn))$/;"	l
resetVector	src/main/scala/util/Annotations.scala	/^  def resetVector(component: InstanceId, resetVec: BigInt): Unit = {$/;"	m
resetVectorLen	src/main/scala/tile/Core.scala	/^  lazy val resetVectorLen: Int = {$/;"	l
resetVectorNexusNode	src/main/scala/tile/BaseTile.scala	/^  val resetVectorNexusNode: BundleBridgeNode[UInt] = BundleBroadcast[UInt]()$/;"	l
resetVectorNode	src/main/scala/tile/BaseTile.scala	/^  val resetVectorNode: BundleBridgeInwardNode[UInt] =$/;"	l
resetVectorSinkNode	src/main/scala/rocket/Frontend.scala	/^  val resetVectorSinkNode = BundleBridgeSink[UInt](Some(() => UInt(masterNode.edges.out.head.bundle.addressBits.W)))$/;"	l
resetVectorSinkNode	src/main/scala/tile/BaseTile.scala	/^  val resetVectorSinkNode = BundleBridgeSink[UInt](Some(() => UInt(visiblePhysAddrBits.W)))$/;"	l
resetVectorSource	src/main/scala/subsystem/HasTiles.scala	/^      val resetVectorSource = BundleBridgeSource[UInt]()$/;"	l
reset_dcsr	src/main/scala/rocket/CSR.scala	/^  val reset_dcsr = Wire(init=new DCSR().fromBits(0))$/;"	l
reset_mnstatus	src/main/scala/rocket/CSR.scala	/^  val reset_mnstatus = Wire(init=new MNStatus().fromBits(0))$/;"	l
reset_mstatus	src/main/scala/rocket/CSR.scala	/^  val reset_mstatus = Wire(init=new MStatus().fromBits(0))$/;"	l
reset_prop_name	src/main/scala/formal/FormalUtils.scala	/^  def reset_prop_name: Unit = prop_name_set = collection.mutable.Set[String]()$/;"	m
reset_vector	src/main/scala/subsystem/HasTiles.scala	/^  val reset_vector = outer.tileResetVectorIONodes.zipWithIndex.map { case (n, i) => n.makeIO(s"reset_vector_$i") }$/;"	l
reset_vector	src/main/scala/tile/Core.scala	/^    val reset_vector = UInt(resetVectorLen.W).asInput$/;"	l
reset_vector_source	src/main/scala/devices/tilelink/BootROM.scala	/^      val reset_vector_source = bootROMResetVectorSourceNode.bundle$/;"	l
resetctrl	src/main/scala/devices/debug/Periphery.scala	/^    val resetctrl = IO(new ResetCtrlIO(outerdebug.dmOuter.dmOuter.intnode.edges.out.size))$/;"	l
resetctrl	src/main/scala/devices/debug/Periphery.scala	/^  val resetctrl = outer.debugOpt.map { outerdebug =>$/;"	l
resetout	src/main/scala/prci/ResetStretcher.scala	/^        val resetout = RegInit(true.B)$/;"	l
resetting	src/main/scala/rocket/DCache.scala	/^  val resetting = RegInit(false.B)$/;"	l
resolveStar	src/main/scala/devices/tilelink/BusBypass.scala	/^  def resolveStar(iKnown: Int, oKnown: Int, iStars: Int, oStars: Int): (Int, Int) = {$/;"	m
resolveStar	src/main/scala/devices/tilelink/MasterMux.scala	/^  def resolveStar(iKnown: Int, oKnown: Int, iStars: Int, oStars: Int): (Int, Int) = {$/;"	m
resolveStar	src/main/scala/diplomacy/Nodes.scala	/^  def resolveStar(iKnown: Int, oKnown: Int, iStars: Int, oStars: Int): (Int, Int)$/;"	m
resolveStar	src/main/scala/tilelink/BankBinder.scala	/^  def resolveStar(iKnown: Int, oKnown: Int, iStars: Int, oStars: Int): (Int, Int) = {$/;"	m
resolveStarInfo	src/main/scala/diplomacy/Nodes.scala	/^    def resolveStarInfo: String =$/;"	m
resourceBindings	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^  def resourceBindings(deviceOpt: () => Option[Device], maps: ArrayBuffer[ResourceBindingsMap]): ResourceBindings = deviceOpt() match {$/;"	m
resourceBindingsMaps	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^    val resourceBindingsMaps= cache()$/;"	l
resources	src/main/scala/amba/axis/Parameters.scala	/^  val resources:     Seq[Resource],$/;"	l
resources	src/main/scala/amba/axis/Parameters.scala	/^  val resources:  Seq[Resource],$/;"	l
resources	src/main/scala/diplomacy/SRAM.scala	/^  val resources = device.reg("mem")$/;"	l
resources	src/main/scala/tilelink/Parameters.scala	/^  val resources:          Seq[Resource],$/;"	l
resources	src/main/scala/tilelink/Parameters.scala	/^  val resources:         Seq[Resource],$/;"	l
resp	src/main/scala/amba/axi4/Bundles.scala	/^  val resp = UInt(width = params.respBits)$/;"	l
resp	src/main/scala/devices/debug/DMI.scala	/^  val resp = Flipped(new DecoupledIO(new DMIResp))$/;"	l
resp	src/main/scala/devices/debug/DMI.scala	/^  val resp = UInt(DMIConsts.dmiRespSize.W)$/;"	l
resp	src/main/scala/devices/debug/DebugTransport.scala	/^  val resp = UInt(DMIConsts.dmiRespSize.W)$/;"	l
resp	src/main/scala/rocket/BTB.scala	/^    val resp = Valid(new BTBResp)$/;"	l
resp	src/main/scala/rocket/DCache.scala	/^    val resp = Vec(nWays, UInt(width = req.bits.wdata.getWidth)).asOutput$/;"	l
resp	src/main/scala/rocket/Frontend.scala	/^  val resp = Decoupled(new FrontendResp).flip$/;"	l
resp	src/main/scala/rocket/HellaCache.scala	/^    val resp = Vec(nWays, rstVal.cloneType).asOutput$/;"	l
resp	src/main/scala/rocket/HellaCache.scala	/^  val resp = Valid(new HellaCacheResp).flip$/;"	l
resp	src/main/scala/rocket/HellaCacheArbiter.scala	/^      val resp = io.requestor(i).resp$/;"	l
resp	src/main/scala/rocket/ICache.scala	/^  val resp = Valid(new ICacheResp(outer))$/;"	l
resp	src/main/scala/rocket/Multiplier.scala	/^    val resp = Valid(new MultiplierResp(width, log2Ceil(nXpr)))$/;"	l
resp	src/main/scala/rocket/Multiplier.scala	/^  val resp = Decoupled(new MultiplierResp(dataBits, tagBits))$/;"	l
resp	src/main/scala/rocket/Multiplier.scala	/^  val resp = Pipe(in, latency-1)$/;"	l
resp	src/main/scala/rocket/NBDcache.scala	/^      val resp = Wire(Vec(rowWords, Bits(width = encRowBits)))$/;"	l
resp	src/main/scala/rocket/NBDcache.scala	/^    val resp = Decoupled(new HellaCacheResp)$/;"	l
resp	src/main/scala/rocket/NBDcache.scala	/^    val resp = Vec(nWays, Bits(OUTPUT, encRowBits))$/;"	l
resp	src/main/scala/rocket/PTW.scala	/^  val resp = Valid(new PTWResp).flip$/;"	l
resp	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^    val resp = Valid(new HellaCacheResp).flip$/;"	l
resp	src/main/scala/rocket/TLB.scala	/^    val resp = new TLBResp().asOutput$/;"	l
resp	src/main/scala/tile/LazyRoCC.scala	/^  val resp = Decoupled(new RoCCResponse)$/;"	l
respArb	src/main/scala/tile/LazyRoCC.scala	/^    val respArb = Module(new RRArbiter(new RoCCResponse()(outer.p), outer.roccs.size))$/;"	l
respBits	src/main/scala/amba/axi4/Parameters.scala	/^  val respBits  = AXI4Parameters.respBits$/;"	l
respBits	src/main/scala/amba/axi4/Protocol.scala	/^  val respBits  = 2$/;"	l
respCount	src/main/scala/groundtest/TraceGen.scala	/^  val respCount = Reg(init = UInt(0, 32))$/;"	l
respError	src/main/scala/devices/debug/SBA.scala	/^      val respError    = Output(Bool())$/;"	l
respError	src/main/scala/devices/debug/SBA.scala	/^    val respError = d.bits.denied || d.bits.corrupt$/;"	l
respError	src/main/scala/rocket/ICache.scala	/^        val respError = RegEnable(s2_scratchpad_hit && s2_data_decoded.uncorrectable && !s1s2_full_word_write, s2_slaveValid)$/;"	l
respValid	src/main/scala/rocket/ICache.scala	/^        val respValid = RegInit(false.B)$/;"	l
resp_ae_final	src/main/scala/rocket/PTW.scala	/^  val resp_ae_final = Reg(Bool())$/;"	l
resp_ae_ptw	src/main/scala/rocket/PTW.scala	/^  val resp_ae_ptw = Reg(Bool())$/;"	l
resp_arb	src/main/scala/rocket/NBDcache.scala	/^  val resp_arb = Module(new Arbiter(new HellaCacheResp, nIOMSHRs))$/;"	l
resp_fragmented_superpage	src/main/scala/rocket/PTW.scala	/^  val resp_fragmented_superpage = Reg(Bool())$/;"	l
resp_gf	src/main/scala/rocket/PTW.scala	/^  val resp_gf = Reg(Bool())$/;"	l
resp_helper	src/main/scala/util/Arbiters.scala	/^    val resp_helper = DecoupledHelper($/;"	l
resp_hr	src/main/scala/rocket/PTW.scala	/^  val resp_hr = Reg(Bool())$/;"	l
resp_hw	src/main/scala/rocket/PTW.scala	/^  val resp_hw = Reg(Bool())$/;"	l
resp_hx	src/main/scala/rocket/PTW.scala	/^  val resp_hx = Reg(Bool())$/;"	l
resp_mux	src/main/scala/rocket/NBDcache.scala	/^        val resp_mux =$/;"	l
resp_onehot	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val resp_onehot = Cat(reqs.map(_.tag === io.resp.bits.tag).reverse) & inflight$/;"	l
resp_rd	src/main/scala/tile/LazyRoCC.scala	/^  val resp_rd = Reg(chiselTypeOf(io.resp.bits.rd))$/;"	l
resp_ready	src/main/scala/util/Arbiters.scala	/^    val resp_ready = io.in_resp(resp_sel).ready$/;"	l
resp_sel	src/main/scala/util/Arbiters.scala	/^    val resp_sel = route_q.io.deq.bits$/;"	l
resp_valid	src/main/scala/rocket/PTW.scala	/^  val resp_valid = Reg(next = Vec.fill(io.requestor.size)(Bool(false)))$/;"	l
resp_valid	src/main/scala/util/Arbiters.scala	/^    val resp_valid = resp_helper.fire(resp_ready)$/;"	l
response	src/main/scala/regmapper/RegisterCrossing.scala	/^  val response = Irrevocable(Bool()) \/\/ ignore .bits$/;"	l
response	src/main/scala/regmapper/RegisterCrossing.scala	/^  val response = Irrevocable(gen)$/;"	l
response	src/main/scala/tilelink/Broadcast.scala	/^  val response = Decoupled(new ProbeFilterResponse(params))$/;"	l
responseCache	src/main/scala/tilelink/Broadcast.scala	/^      val responseCache = filter.io.response.bits.cacheOH | filter.io.response.bits.allocOH$/;"	l
responseCount	src/main/scala/tilelink/Broadcast.scala	/^      val responseCount = PopCount(todo)$/;"	l
responseFields	src/main/scala/tilelink/Parameters.scala	/^  val responseFields: Seq[BundleFieldBase],$/;"	l
responseKeys	src/main/scala/tilelink/Parameters.scala	/^  val responseKeys:  Seq[BundleKeyBase]) extends SimpleProduct$/;"	l
responseMSHR	src/main/scala/tilelink/Broadcast.scala	/^      val responseMSHR = UIntToOH(filter.io.response.bits.mshr, params.numTrackers).asBools$/;"	l
responseMap	src/main/scala/tilelink/Monitor.scala	/^    val responseMap             = VecInit(Seq(TLMessages.AccessAck, TLMessages.AccessAck, TLMessages.AccessAckData, TLMessages.AccessAckData, TLMessages.AccessAckData, TLMessages.HintAck, TLMessages.Grant,     TLMessages.Grant))$/;"	l
responseMapSecondOption	src/main/scala/tilelink/Monitor.scala	/^    val responseMapSecondOption = VecInit(Seq(TLMessages.AccessAck, TLMessages.AccessAck, TLMessages.AccessAckData, TLMessages.AccessAckData, TLMessages.AccessAckData, TLMessages.HintAck, TLMessages.GrantData, TLMessages.Grant))$/;"	l
responseReady	src/main/scala/devices/debug/SBA.scala	/^    val responseReady = d.ready$/;"	l
responseValid	src/main/scala/devices/debug/SBA.scala	/^    val responseValid = d.valid$/;"	l
result	src/main/scala/diplomacy/AddressDecoder.scala	/^        val result = partitionPartitions(partitions, bit)$/;"	l
result	src/main/scala/diplomacy/LazyModule.scala	/^      var result: Option[T] = None$/;"	l
result	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^    val result =  resourceBindings.map.collect {$/;"	l
result	src/main/scala/rocket/Multiplier.scala	/^  val result = Mux(resHi, remainder(2*w, w+1), remainder(w-1, 0))$/;"	l
result	src/main/scala/util/Frequency.scala	/^    val result = Wire(Bits(width = firstVal.getWidth))$/;"	l
resume	scripts/debug_rom/debug_rom.S	/^resume:$/;"	l
resume	src/main/scala/devices/debug/Debug.scala	/^      val resume = Bool()$/;"	l
resumeAcks	src/main/scala/devices/debug/Debug.scala	/^    val resumeAcks       = Wire(UInt(nComponents.W))$/;"	l
resumeReqRegs	src/main/scala/devices/debug/Debug.scala	/^    val resumeReqRegs    = Reg(UInt(nComponents.W))$/;"	l
resumereq	src/main/scala/devices/debug/Debug.scala	/^    val resumereq = io.innerCtrl.fire() && io.innerCtrl.bits.resumereq$/;"	l
resumereq	src/main/scala/devices/debug/Debug.scala	/^  val resumereq    = Bool()$/;"	l
resumereq	src/main/scala/devices/debug/dm_registers.scala	/^  val resumereq = Bool()$/;"	l
resumereqWrEn	src/main/scala/devices/debug/Debug.scala	/^    val resumereqWrEn       = WireInit(false.B)$/;"	l
ret	src/main/scala/rocket/BTB.scala	/^  def ret = 3.U$/;"	m
ret_prv	src/main/scala/rocket/CSR.scala	/^    val ret_prv = WireInit(UInt(), DontCare)$/;"	l
ret_val	src/main/scala/formal/FormalUtils.scala	/^      val ret_val = Wire(Bool())$/;"	l
ret_val	src/main/scala/formal/FormalUtils.scala	/^    val ret_val = Wire(then_clause)$/;"	l
retire	src/main/scala/rocket/CSR.scala	/^  val retire = UInt(INPUT, log2Up(1+retireWidth))$/;"	l
retireWidth	src/main/scala/rocket/RocketCore.scala	/^  val retireWidth: Int = 1$/;"	l
retireWidth	src/main/scala/tile/Core.scala	/^  val retireWidth = coreParams.retireWidth$/;"	l
retireWidth	src/main/scala/tile/Core.scala	/^  val retireWidth: Int$/;"	l
retry	src/main/scala/tilelink/ToAHB.scala	/^      val retry = Wire(Bool())$/;"	l
returnAddr	src/main/scala/rocket/BTB.scala	/^  val returnAddr = UInt(width = vaddrBits)$/;"	l
returnWinner	src/main/scala/amba/axi4/Xbar.scala	/^  def returnWinner[T <: Data](policy: TLArbiter.Policy)(sink: IrrevocableIO[T], sources: IrrevocableIO[T]*) = {$/;"	m
rewind	src/main/scala/util/LanePositionedQueue.scala	/^  val rewind = if (args.rewind) Some(Input(Bool())) else None$/;"	l
rewindSize	src/main/scala/util/LanePositionedQueue.scala	/^  val rewindSize   = nFree   - freed$/;"	l
rf	src/main/scala/rocket/RocketCore.scala	/^  val rf = Mem(n, UInt(width = w))$/;"	l
rf	src/main/scala/rocket/RocketCore.scala	/^  val rf = new RegFile(regAddrMask, xLen)$/;"	l
rf_reset	src/main/scala/devices/debug/Debug.scala	/^    val rf_reset = IO(Input(Reset()))    \/\/ RF transform$/;"	l
rf_reset	src/main/scala/devices/debug/DebugTransport.scala	/^  val rf_reset = IO(Input(Reset()))    \/\/ RF transform$/;"	l
rf_reset	src/main/scala/devices/debug/SBA.scala	/^    val rf_reset       = IO(Input(Reset()))$/;"	l
rf_waddr	src/main/scala/rocket/RocketCore.scala	/^  val rf_waddr = Mux(ll_wen, ll_waddr, wb_waddr)$/;"	l
rf_wdata	src/main/scala/rocket/RocketCore.scala	/^  val rf_wdata = Mux(dmem_resp_valid && dmem_resp_xpu, io.dmem.resp.bits.data(xLen-1, 0),$/;"	l
rf_wen	src/main/scala/rocket/RocketCore.scala	/^  val rf_wen = wb_wen || ll_wen$/;"	l
rfn	src/main/scala/rocket/TLBPermissions.scala	/^    val rfn = lowCostProperty(_.r)$/;"	l
rfs1	src/main/scala/rocket/IDecode.scala	/^  val rfs1 = Bool()$/;"	l
rfs2	src/main/scala/rocket/IDecode.scala	/^  val rfs2 = Bool()$/;"	l
rfs3	src/main/scala/rocket/IDecode.scala	/^  val rfs3 = Bool()$/;"	l
rhs	src/main/scala/rocket/AMOALU.scala	/^    val rhs = Bits(INPUT, operandBits)$/;"	l
rhs	src/main/scala/rocket/Multiplier.scala	/^  val rhs = Cat(rhsSigned && in.bits.in2(width-1), in.bits.in2).asSInt$/;"	l
rid	src/main/scala/amba/axi4/UserYanker.scala	/^      val rid = out.r.bits.id$/;"	l
ridx	src/main/scala/util/AsyncQueue.scala	/^  val ridx  = Input (UInt((params.bits+1).W))$/;"	l
ridx	src/main/scala/util/AsyncQueue.scala	/^  val ridx = AsyncResetSynchronizerShiftReg(io.async.ridx, params.sync, Some("ridx_gray"))$/;"	l
ridx	src/main/scala/util/AsyncQueue.scala	/^  val ridx = withReset(reset.asAsyncReset)(GrayCounter(bits+1, io.deq.fire(), !source_ready, "ridx_bin"))$/;"	l
ridx_reg	src/main/scala/util/AsyncQueue.scala	/^  val ridx_reg = withReset(reset.asAsyncReset)(RegNext(next=ridx, init=0.U).suggestName("ridx_gray"))$/;"	l
ridx_valid	src/main/scala/util/AsyncQueue.scala	/^  val ridx_valid     = Input (Bool())$/;"	l
rifire	src/main/scala/regmapper/RegMapper.scala	/^    val rifire = Array.fill(regSize) { Nil:List[(Bool, Bool)] }$/;"	l
rifireMux	src/main/scala/regmapper/RegMapper.scala	/^    val rifireMux = mux(iindex, in.valid && front.ready &&  front.bits.read, frontSel, iRightReg, rifire)$/;"	l
right	src/main/scala/devices/tilelink/Plic.scala	/^      val right = findMax(x drop half)$/;"	l
right	src/main/scala/util/LanePositionedQueue.scala	/^      val right = RotateVector.right(x.bits, xRotation)$/;"	l
right	src/main/scala/util/MultiLaneQueue.scala	/^  def right[T <: Data](input: Seq[T], shift: UInt): Vec[T] = {$/;"	m
rightOR	src/main/scala/util/package.scala	/^  def rightOR(x: UInt): UInt = rightOR(x, x.getWidth, x.getWidth)$/;"	m
rightOR	src/main/scala/util/package.scala	/^  def rightOR(x: UInt, width: Integer, cap: Integer = 999999): UInt = {$/;"	m
right_nways	src/main/scala/util/Replacement.scala	/^      val right_nways: Int = 1 << (log2Ceil(tree_nways) - 1)  \/\/ number of ways in the right sub-tree$/;"	l
right_subtree_state	src/main/scala/util/Replacement.scala	/^      val right_subtree_state = state(right_nways-2, 0)$/;"	l
rimask	src/main/scala/regmapper/RegMapper.scala	/^      val rimask = frontMask(high, low).orR()$/;"	l
ripple	src/main/scala/util/PrefixSum.scala	/^    val ripple = RipplePrefixSum(input)(_ ++ _, layers)$/;"	l
rippleL	src/main/scala/util/PrefixSum.scala	/^    val rippleL = RipplePrefixSum.layers(input.size)$/;"	l
riready	src/main/scala/regmapper/Test.scala	/^    val riready = Bool(OUTPUT)$/;"	l
rivalid	src/main/scala/regmapper/RegMapper.scala	/^    val rivalid = Wire(Vec(flat.size, Bool()))$/;"	l
rivalid	src/main/scala/regmapper/Test.scala	/^    val rivalid = Bool(INPUT)$/;"	l
rm	src/main/scala/tile/FPU.scala	/^  val rm = Bits(width = FPConstants.RM_SZ)$/;"	l
rmask	src/main/scala/rocket/HellaCache.scala	/^  val rmask = Mux(rst || Bool(nWays == 1), SInt(-1), io.read.bits.way_en.asSInt).asBools$/;"	l
rmw	src/main/scala/tilelink/SRAM.scala	/^        val rmw = d_rmw_data (8*(i+1)-1, 8*i)$/;"	l
rn	src/main/scala/util/LanePositionedQueue.scala	/^      val rn = (r+3) % 4$/;"	l
rnmi	src/main/scala/tile/Interrupts.scala	/^  val rnmi = Bool()$/;"	l
rnmiBEUCause	src/main/scala/rocket/CSR.scala	/^  def rnmiBEUCause = 12$/;"	m
rnmiIntCause	src/main/scala/rocket/CSR.scala	/^  def rnmiIntCause = 13  \/\/ NMI: Higher numbers = higher priority, must not reuse debugIntCause$/;"	m
rnmi_exception_vector	src/main/scala/tile/Interrupts.scala	/^  val rnmi_exception_vector = UInt(w.W)$/;"	l
rnmi_interrupt_vector	src/main/scala/tile/Interrupts.scala	/^  val rnmi_interrupt_vector = UInt(w.W)$/;"	l
rnoise	src/main/scala/amba/axi4/Delayer.scala	/^      val rnoise  = Wire(in.r .bits)$/;"	l
rob	src/main/resources/csrc/comlog.cc	/^std::deque <RobEntry> rob;$/;"	v
robin	src/main/scala/tilelink/Arbiter.scala	/^  def robin[T <: TLChannel](edge: TLEdge, sink: DecoupledIO[T], sources: DecoupledIO[T]*): Unit = {$/;"	m
robin	src/main/scala/tilelink/Arbiter.scala	/^  def robin[T <: TLChannel](edge: TLEdge, sink: ReadyValidCancel[T], sources: ReadyValidCancel[T]*): Unit = {$/;"	m
rocc	src/main/scala/groundtest/Tile.scala	/^  val rocc = Nil$/;"	l
rocc	src/main/scala/rocket/CSR.scala	/^  val rocc = Bool()$/;"	l
rocc	src/main/scala/rocket/IDecode.scala	/^  val rocc = Bool()$/;"	l
rocc	src/main/scala/tile/Core.scala	/^    val rocc = new RoCCCoreIO().flip$/;"	l
rocc	src/main/scala/tile/LazyRoCC.scala	/^                      val rocc = chiselTypeOf(roccIo)$/;"	l
roccIo	src/main/scala/tile/LazyRoCC.scala	/^    val roccIo = io$/;"	l
rocc_blocked	src/main/scala/rocket/RocketCore.scala	/^  val rocc_blocked = Reg(Bool())$/;"	l
rocc_cmd_bits_inst_opcode	src/main/resources/vsrc/RoccBlackBox.v	/^    input [6:0] rocc_cmd_bits_inst_opcode,$/;"	p
rocc_cmd_bits_inst_rd_d	src/main/resources/vsrc/RoccBlackBox.v	/^  reg [4:0] rocc_cmd_bits_inst_rd_d;$/;"	r
rocc_cmd_bits_inst_rs2	src/main/resources/vsrc/RoccBlackBox.v	/^    input [4:0] rocc_cmd_bits_inst_rs2,$/;"	p
rocc_cmd_bits_inst_xd	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_inst_xd,$/;"	p
rocc_cmd_bits_inst_xs2	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_inst_xs2,$/;"	p
rocc_cmd_bits_rs2	src/main/resources/vsrc/RoccBlackBox.v	/^    input [xLen-1:0] rocc_cmd_bits_rs2,$/;"	p
rocc_cmd_bits_status_cease	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_cease,$/;"	p
rocc_cmd_bits_status_dv	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_dv,$/;"	p
rocc_cmd_bits_status_fs	src/main/resources/vsrc/RoccBlackBox.v	/^    input [1:0] rocc_cmd_bits_status_fs,$/;"	p
rocc_cmd_bits_status_gva	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_gva,$/;"	p
rocc_cmd_bits_status_isa	src/main/resources/vsrc/RoccBlackBox.v	/^    input [31:0] rocc_cmd_bits_status_isa,$/;"	p
rocc_cmd_bits_status_mie	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_mie,$/;"	p
rocc_cmd_bits_status_mpie	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_mpie,$/;"	p
rocc_cmd_bits_status_mpp	src/main/resources/vsrc/RoccBlackBox.v	/^    input [1:0] rocc_cmd_bits_status_mpp,$/;"	p
rocc_cmd_bits_status_mprv	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_mprv,$/;"	p
rocc_cmd_bits_status_mxr	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_mxr,$/;"	p
rocc_cmd_bits_status_sbe	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_sbe,$/;"	p
rocc_cmd_bits_status_sie	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_sie,$/;"	p
rocc_cmd_bits_status_spie	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_spie,$/;"	p
rocc_cmd_bits_status_tw	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_tw,$/;"	p
rocc_cmd_bits_status_uxl	src/main/resources/vsrc/RoccBlackBox.v	/^    input [1:0] rocc_cmd_bits_status_uxl,$/;"	p
rocc_cmd_bits_status_v	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_bits_status_v,$/;"	p
rocc_cmd_bits_status_zero1	src/main/resources/vsrc/RoccBlackBox.v	/^    input [7:0] rocc_cmd_bits_status_zero1,$/;"	p
rocc_cmd_bits_status_zero2	src/main/resources/vsrc/RoccBlackBox.v	/^    input [22:0] rocc_cmd_bits_status_zero2,$/;"	p
rocc_cmd_valid	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_cmd_valid,$/;"	p
rocc_fpu_req_bits_fma	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_fma,$/;"	p
rocc_fpu_req_bits_in1	src/main/resources/vsrc/RoccBlackBox.v	/^    output [fLen:0] rocc_fpu_req_bits_in1,$/;"	p
rocc_fpu_req_bits_in3	src/main/resources/vsrc/RoccBlackBox.v	/^    output [fLen:0] rocc_fpu_req_bits_in3,$/;"	p
rocc_fpu_req_bits_ldst	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_ldst,$/;"	p
rocc_fpu_req_bits_ren1	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_ren1,$/;"	p
rocc_fpu_req_bits_ren3	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_ren3,$/;"	p
rocc_fpu_req_bits_rm	src/main/resources/vsrc/RoccBlackBox.v	/^    output [FPConstants_RM_SZ-1:0] rocc_fpu_req_bits_rm,$/;"	p
rocc_fpu_req_bits_sqrt	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_sqrt,$/;"	p
rocc_fpu_req_bits_swap23	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_swap23,$/;"	p
rocc_fpu_req_bits_toint	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_fpu_req_bits_toint,$/;"	p
rocc_fpu_req_bits_typ	src/main/resources/vsrc/RoccBlackBox.v	/^    output [1:0] rocc_fpu_req_bits_typ,$/;"	p
rocc_fpu_req_bits_typeTagOut	src/main/resources/vsrc/RoccBlackBox.v	/^    output [1:0] rocc_fpu_req_bits_typeTagOut,$/;"	p
rocc_fpu_req_ready	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_fpu_req_ready,$/;"	p
rocc_fpu_resp_bits_exc	src/main/resources/vsrc/RoccBlackBox.v	/^    input [FPConstants_FLAGS_SZ-1:0] rocc_fpu_resp_bits_exc );$/;"	p
rocc_fpu_resp_valid	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_fpu_resp_valid,$/;"	p
rocc_illegal	src/main/scala/rocket/CSR.scala	/^  val rocc_illegal = Bool(OUTPUT)$/;"	l
rocc_interrupt	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_interrupt,$/;"	p
rocc_interrupt	src/main/scala/rocket/CSR.scala	/^  val rocc_interrupt = Bool(INPUT)$/;"	l
rocc_mem_clock_enabled	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_clock_enabled,$/;"	p
rocc_mem_ordered	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_ordered,$/;"	p
rocc_mem_perf_canAcceptLoadThenLoad	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_perf_canAcceptLoadThenLoad,$/;"	p
rocc_mem_perf_canAcceptStoreThenLoad	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_perf_canAcceptStoreThenLoad,$/;"	p
rocc_mem_perf_release	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_perf_release,$/;"	p
rocc_mem_perf_storeBufferEmptyAfterStore	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_perf_storeBufferEmptyAfterStore,$/;"	p
rocc_mem_perf_tlbMiss	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_perf_tlbMiss,$/;"	p
rocc_mem_req_bits_addr	src/main/resources/vsrc/RoccBlackBox.v	/^    output [coreMaxAddrBits-1:0] rocc_mem_req_bits_addr,$/;"	p
rocc_mem_req_bits_cmd	src/main/resources/vsrc/RoccBlackBox.v	/^    output [M_SZ-1:0] rocc_mem_req_bits_cmd,$/;"	p
rocc_mem_req_bits_data	src/main/resources/vsrc/RoccBlackBox.v	/^    output [coreDataBits-1:0] rocc_mem_req_bits_data,$/;"	p
rocc_mem_req_bits_dprv	src/main/resources/vsrc/RoccBlackBox.v	/^    output [1:0] rocc_mem_req_bits_dprv,$/;"	p
rocc_mem_req_bits_no_alloc	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_mem_req_bits_no_alloc,$/;"	p
rocc_mem_req_bits_signed	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_mem_req_bits_signed,$/;"	p
rocc_mem_req_ready	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_req_ready,$/;"	p
rocc_mem_resp_bits_data	src/main/resources/vsrc/RoccBlackBox.v	/^    input [coreDataBits-1:0] rocc_mem_resp_bits_data,$/;"	p
rocc_mem_resp_bits_data_word_bypass	src/main/resources/vsrc/RoccBlackBox.v	/^    input [coreDataBits-1:0] rocc_mem_resp_bits_data_word_bypass,$/;"	p
rocc_mem_resp_bits_dv	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_resp_bits_dv,$/;"	p
rocc_mem_resp_bits_replay	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_resp_bits_replay,$/;"	p
rocc_mem_resp_bits_size	src/main/resources/vsrc/RoccBlackBox.v	/^    input [mem_req_bits_size_width-1:0] rocc_mem_resp_bits_size,$/;"	p
rocc_mem_resp_bits_store_data	src/main/resources/vsrc/RoccBlackBox.v	/^    input [coreDataBits-1:0] rocc_mem_resp_bits_store_data,$/;"	p
rocc_mem_resp_bits_tag	src/main/resources/vsrc/RoccBlackBox.v	/^    input [dcacheReqTagBits-1:0] rocc_mem_resp_bits_tag,$/;"	p
rocc_mem_resp_valid	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_resp_valid,$/;"	p
rocc_mem_s1_data_mask	src/main/resources/vsrc/RoccBlackBox.v	/^    output [coreDataBytes-1:0] rocc_mem_s1_data_mask,$/;"	p
rocc_mem_s1_kill	src/main/resources/vsrc/RoccBlackBox.v	/^    output rocc_mem_s1_kill,$/;"	p
rocc_mem_s2_gpa	src/main/resources/vsrc/RoccBlackBox.v	/^    input [vaddrBitsExtended-1:0] rocc_mem_s2_gpa,$/;"	p
rocc_mem_s2_nack_cause_raw	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_nack_cause_raw,$/;"	p
rocc_mem_s2_uncached	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_uncached,$/;"	p
rocc_mem_s2_xcpt_ae_ld	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_xcpt_ae_ld,$/;"	p
rocc_mem_s2_xcpt_gf_ld	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_xcpt_gf_ld,$/;"	p
rocc_mem_s2_xcpt_ma_ld	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_xcpt_ma_ld,$/;"	p
rocc_mem_s2_xcpt_pf_ld	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_mem_s2_xcpt_pf_ld,$/;"	p
rocc_resp_bits_rd	src/main/resources/vsrc/RoccBlackBox.v	/^    output [4:0] rocc_resp_bits_rd,$/;"	p
rocc_resp_ready	src/main/resources/vsrc/RoccBlackBox.v	/^    input rocc_resp_ready,$/;"	p
roccs	src/main/scala/tile/LazyRoCC.scala	/^  val roccs = p(BuildRoCC).map(_(p))$/;"	l
rocketISA	src/main/scala/diplomaticobjectmodel/model/OMISA.scala	/^  def rocketISA(tile: RocketTile, xLen: Int, pgLevels: Int): OMISA = {$/;"	m
rocketImpl	src/main/scala/rocket/RocketCore.scala	/^  val rocketImpl = withClock (gated_clock) { new RocketImpl }$/;"	l
rocketParams	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^    val rocketParams = tile.rocketParams$/;"	l
rocketParams	src/main/scala/rocket/RocketCore.scala	/^  lazy val rocketParams: RocketCoreParams = tileParams.core.asInstanceOf[RocketCoreParams]$/;"	l
rocketParams	src/main/scala/tile/RocketTile.scala	/^      val rocketParams: RocketTileParams,$/;"	l
rocketTiles	src/main/scala/subsystem/RocketSubsystem.scala	/^  val rocketTiles = tiles.collect { case r: RocketTile => r }$/;"	l
rofire	src/main/scala/regmapper/RegMapper.scala	/^    val rofire = Array.fill(regSize) { Nil:List[(Bool, Bool)] }$/;"	l
rofire	src/main/scala/regmapper/Test.scala	/^  val rofire = io.roready && rovalid$/;"	l
rofireMux	src/main/scala/regmapper/RegMapper.scala	/^    val rofireMux = mux(oindex, back.valid && out.ready &&  back .bits.read, backSel,  oRightReg, rofire)$/;"	l
rom	src/main/scala/devices/tilelink/BootROM.scala	/^      val rom = ByteBuffer.wrap(romdata)$/;"	l
rom	src/main/scala/devices/tilelink/BootROM.scala	/^    val rom = Vec(bigs.map(x => UInt(x, width = 8*beatBytes)))$/;"	l
rom	src/main/scala/devices/tilelink/MaskROM.scala	/^    val rom = ROMGenerator(ROMConfig(c.name, c.depth, c.width))$/;"	l
rom	src/main/scala/tilelink/HintHandler.scala	/^  val rom   = LazyModule(new TLROM(0x800, 0x400, Seq.fill(128) { 0 }))$/;"	l
romask	src/main/scala/regmapper/RegMapper.scala	/^      val romask = backMask(high, low).orR()$/;"	l
romdata	src/main/scala/devices/tilelink/BootROM.scala	/^      val romdata = Files.readAllBytes(Paths.get(params.contentFileName))$/;"	l
root	src/main/scala/diplomacy/JSON.scala	/^    val root = res match {$/;"	l
root	src/main/scala/diplomacy/Resources.scala	/^  val root = new Device {$/;"	l
rootLogicalTreeNode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^  def rootLogicalTreeNode: LogicalTreeNode = {$/;"	m
roots	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^    val roots = tree.collect { case (k, _) if !tree.exists(_._2.contains(k)) => k }$/;"	l
ropts	src/main/scala/stage/phases/AddDefaultTests.scala	/^    val ropts = view[RocketChipOptions](annotations)$/;"	l
roq_data	src/main/scala/util/ReorderQueue.scala	/^    val roq_data = Mem(tagSpaceSize, dType)$/;"	l
roq_data	src/main/scala/util/ReorderQueue.scala	/^    val roq_data = Reg(Vec(actualSize, dType))$/;"	l
roq_deq_onehot	src/main/scala/util/ReorderQueue.scala	/^    val roq_deq_onehot = PriorityEncoderOH(roq_matches)$/;"	l
roq_enq_addr	src/main/scala/util/ReorderQueue.scala	/^    val roq_enq_addr = PriorityEncoder(roq_free)$/;"	l
roq_free	src/main/scala/util/ReorderQueue.scala	/^    val roq_free = Reg(init = Vec.fill(actualSize)(Bool(true)))$/;"	l
roq_free	src/main/scala/util/ReorderQueue.scala	/^    val roq_free = Reg(init = Vec.fill(tagSpaceSize)(Bool(true)))$/;"	l
roq_matches	src/main/scala/util/ReorderQueue.scala	/^    val roq_matches = roq_tags.zip(roq_free)$/;"	l
roq_tags	src/main/scala/util/ReorderQueue.scala	/^    val roq_tags = Reg(Vec(actualSize, UInt(width = tagWidth)))$/;"	l
roready	src/main/scala/regmapper/RegMapper.scala	/^    val roready = Wire(Vec(flat.size, Bool()))$/;"	l
roready	src/main/scala/regmapper/Test.scala	/^    val roready = Bool(INPUT)$/;"	l
rotate	src/main/scala/util/package.scala	/^    def rotate(n: Int): Seq[T] = x.drop(n) ++ x.take(n)$/;"	m
rotate	src/main/scala/util/package.scala	/^    def rotate(n: UInt): Seq[T] = {$/;"	m
rotateLeft	src/main/scala/util/Arbiters.scala	/^  def rotateLeft[T <: Data](norm: Vec[T], rot: UInt): Vec[T] = {$/;"	m
rotateLeft	src/main/scala/util/package.scala	/^    def rotateLeft(n: Int): UInt = if (n == 0) x else Cat(x(x.getWidth-1-n,0), x(x.getWidth-1,x.getWidth-n))$/;"	m
rotateLeft	src/main/scala/util/package.scala	/^    def rotateLeft(n: UInt): UInt = {$/;"	m
rotateRight	src/main/scala/util/package.scala	/^    def rotateRight(n: Int): Seq[T] = x.takeRight(n) ++ x.dropRight(n)$/;"	m
rotateRight	src/main/scala/util/package.scala	/^    def rotateRight(n: Int): UInt = if (n == 0) x else Cat(x(n-1, 0), x >> n)$/;"	m
rotateRight	src/main/scala/util/package.scala	/^    def rotateRight(n: UInt): Seq[T] = {$/;"	m
rotateRight	src/main/scala/util/package.scala	/^    def rotateRight(n: UInt): UInt = {$/;"	m
roundRawFNToRecFN	src/main/scala/tile/FPU.scala	/^    val roundRawFNToRecFN = Module(new hardfloat.RoundRawFNToRecFN(expWidth, sigWidth, 0))$/;"	l
roundRobin	src/main/scala/tilelink/Arbiter.scala	/^  val roundRobin: Policy = (width, valids, select) => if (width == 1) 1.U(1.W) else {$/;"	l
round_regs	src/main/scala/tile/FPU.scala	/^    val round_regs = if(latency==2) 1 else 0$/;"	l
roundingMode	src/main/scala/tile/FPU.scala	/^        val roundingMode   = UInt(INPUT, 3)$/;"	l
roundingMode_stage0	src/main/scala/tile/FPU.scala	/^    val roundingMode_stage0 = Wire(UInt(width=3))$/;"	l
routeLocal	src/main/scala/tilelink/AddressAdjuster.scala	/^      def routeLocal(addr: UInt): Bool = Mux(isAdjustable(addr), isDynamicallyLocal(addr), isStaticallyLocal(addr))$/;"	m
route_addrs	src/main/scala/amba/ahb/Xbar.scala	/^      val route_addrs = port_addrs.map(_.map(_.widen(~routingMask)).distinct)$/;"	l
route_addrs	src/main/scala/amba/apb/Xbar.scala	/^      val route_addrs = port_addrs.map(_.map(_.widen(~routingMask)).distinct)$/;"	l
route_addrs	src/main/scala/amba/axi4/Xbar.scala	/^    val route_addrs = port_addrs.map(seq => AddressSet.unify(seq.map(_.widen(~routingMask)).distinct))$/;"	l
route_addrs	src/main/scala/tilelink/Xbar.scala	/^      val route_addrs = port_addrs.map(seq => AddressSet.unify(seq.map(_.widen(~routingMask)).distinct))$/;"	l
route_q	src/main/scala/util/Arbiters.scala	/^    val route_q = Module(new Queue(UInt(width = log2Up(n)), 2))$/;"	l
routingMask	src/main/scala/amba/ahb/Xbar.scala	/^      val routingMask = AddressDecoder(port_addrs)$/;"	l
routingMask	src/main/scala/amba/apb/Xbar.scala	/^      val routingMask = AddressDecoder(port_addrs)$/;"	l
routingMask	src/main/scala/amba/axi4/Xbar.scala	/^    val routingMask = AddressDecoder(port_addrs)$/;"	l
routingMask	src/main/scala/tilelink/Parameters.scala	/^    val routingMask = AddressDecoder(slaves.map(_.address))$/;"	l
routingMask	src/main/scala/tilelink/Xbar.scala	/^      val routingMask = AddressDecoder(filter(port_addrs, connectO))$/;"	l
rovalid	src/main/scala/regmapper/Test.scala	/^    val rovalid = Bool(OUTPUT)$/;"	l
row	src/main/scala/rocket/ICache.scala	/^    def row(addr: UInt) = addr(untagBits-1, blockOffBits-log2Ceil(refillCycles))$/;"	m
row	src/main/scala/util/LanePositionedQueue.scala	/^  def row(inc: Bool): (UInt, UInt) = {$/;"	m
row0	src/main/scala/util/LanePositionedQueue.scala	/^    val row0 = deq_row  === enq_row && maybe_empty$/;"	l
row1	src/main/scala/util/LanePositionedQueue.scala	/^    val row1 = deq_row1 === enq_row$/;"	l
rowBits	src/main/scala/tile/L1Cache.scala	/^  def rowBits = cacheParams.rowBits$/;"	m
rowBits	src/main/scala/tile/L1Cache.scala	/^  def rowBits:       Int$/;"	m
rowBits	src/main/scala/util/LanePositionedQueue.scala	/^  val rowBits   = log2Ceil(rows)$/;"	l
rowBytes	src/main/scala/tile/L1Cache.scala	/^  def rowBytes = rowBits\/8$/;"	m
rowOffBits	src/main/scala/tile/L1Cache.scala	/^  def rowOffBits = log2Up(rowBytes)$/;"	m
rowWords	src/main/scala/rocket/HellaCache.scala	/^  def rowWords = rowBits\/wordBits$/;"	m
rpq	src/main/scala/rocket/NBDcache.scala	/^  val rpq = Module(new Queue(new ReplayInternal, cfg.nRPQ))$/;"	l
rqueues	src/main/scala/amba/axi4/UserYanker.scala	/^      val rqueues = Seq.tabulate(edgeIn.master.endId) { i => queue(i) }$/;"	l
rr	src/main/scala/regmapper/Test.scala	/^  def rr(bits: Int) = combo(bits, random, random)$/;"	m
rready	src/main/scala/regmapper/Test.scala	/^    val rready = Bool(INPUT)$/;"	l
rrtr	src/main/scala/tilelink/RegisterRouterTest.scala	/^  val rrtr = LazyModule(new TLRRTest0(0x400))$/;"	l
rrtr	src/main/scala/tilelink/RegisterRouterTest.scala	/^  val rrtr = LazyModule(new TLRRTest1(0x400))$/;"	l
rs	src/main/scala/prci/ResetCrossingType.scala	/^    val rs = LazyModule(new ResetStretcher(cycles))$/;"	l
rs1	src/main/scala/devices/debug/Debug.scala	/^      val rs1    = UInt(5.W)$/;"	l
rs1	src/main/scala/rocket/RVC.scala	/^  val rs1 = UInt(5.W)$/;"	l
rs1	src/main/scala/rocket/TLB.scala	/^  val rs1 = Bool()$/;"	l
rs1	src/main/scala/scie/SCIE.scala	/^  val rs1 = Input(UInt(xLen.W))$/;"	l
rs1	src/main/scala/tile/LazyRoCC.scala	/^  val rs1 = Bits(5.W)$/;"	l
rs1	src/main/scala/tile/LazyRoCC.scala	/^  val rs1 = Bits(xLen.W)$/;"	l
rs1p	src/main/scala/rocket/RVC.scala	/^  def rs1p = Cat(1.U(2.W), x(9,7))$/;"	m
rs2	src/main/scala/devices/debug/Debug.scala	/^      val rs2    = UInt(5.W)$/;"	l
rs2	src/main/scala/rocket/RVC.scala	/^  def rs2 = x(6,2)$/;"	m
rs2	src/main/scala/rocket/RVC.scala	/^  val rs2 = UInt(5.W)$/;"	l
rs2	src/main/scala/rocket/TLB.scala	/^  val rs2 = Bool()$/;"	l
rs2	src/main/scala/scie/SCIE.scala	/^  val rs2 = Input(UInt(xLen.W))$/;"	l
rs2	src/main/scala/tile/LazyRoCC.scala	/^  val rs2 = Bits(5.W)$/;"	l
rs2	src/main/scala/tile/LazyRoCC.scala	/^  val rs2 = Bits(xLen.W)$/;"	l
rs2p	src/main/scala/rocket/RVC.scala	/^  def rs2p = Cat(1.U(2.W), x(4,2))$/;"	m
rs3	src/main/scala/rocket/RVC.scala	/^  val rs3 = UInt(5.W)$/;"	l
rsel	src/main/scala/amba/axi4/UserYanker.scala	/^      val rsel  = UIntToOH(rid,  edgeIn.master.endId).asBools$/;"	l
rsink	src/main/scala/tilelink/RationalCrossing.scala	/^    val rsink = LazyModule(new TLRationalCrossingSink(direction))$/;"	l
rsource	src/main/scala/tilelink/RationalCrossing.scala	/^    val rsource = LazyModule(new TLRationalCrossingSource)$/;"	l
rst	src/main/scala/rocket/HellaCache.scala	/^  val rst = rst_cnt < UInt(nSets)$/;"	l
rst	src/main/scala/util/AsyncResetReg.scala	/^    val rst = Bool(INPUT)$/;"	l
rstVal	src/main/scala/rocket/HellaCache.scala	/^  val rstVal = onReset()$/;"	l
rst_cnt	src/main/scala/rocket/HellaCache.scala	/^  val rst_cnt = Reg(init=UInt(0, log2Up(nSets+1)))$/;"	l
rtcTick	src/main/scala/devices/tilelink/CLINT.scala	/^      val rtcTick = Bool(INPUT)$/;"	l
rtype	src/main/scala/rocket/RVC.scala	/^      def rtype = {$/;"	m
rule	src/main/scala/linting/rule/LintAnonymousRegisters.scala	/^package rule$/;"	p
rule	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^package rule$/;"	p
rule	src/main/scala/linting/rule/LintRule.scala	/^package rule$/;"	p
rule	src/main/scala/linting/rule/LintTruncatingWidths.scala	/^package rule$/;"	p
run	src/main/scala/tilelink/PatternPusher.scala	/^      val run = Bool(INPUT)$/;"	l
rv32i	src/main/scala/system/RocketTestSuite.scala	/^  val rv32i = List(rv32ui, rv32si, rv32mi)$/;"	l
rv32mi	src/main/scala/system/RocketTestSuite.scala	/^  val rv32mi = new AssemblyTestSuite("rv32mi", rv32miNames)(_)$/;"	l
rv32miNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv32miNames = LinkedHashSet("csr", "mcsr", "illegal", "ma_addr", "ma_fetch", "sbreak", "scall")$/;"	l
rv32pi	src/main/scala/system/RocketTestSuite.scala	/^  val rv32pi = List(rv32ui, rv32mi)$/;"	l
rv32si	src/main/scala/system/RocketTestSuite.scala	/^  val rv32si = new AssemblyTestSuite("rv32si", rv32siNames)(_)$/;"	l
rv32siNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv32siNames = LinkedHashSet("csr", "ma_fetch", "scall", "sbreak", "wfi", "dirty")$/;"	l
rv32u	src/main/scala/system/RocketTestSuite.scala	/^  val rv32u = List(rv32ui, rv32um)$/;"	l
rv32ua	src/main/scala/system/RocketTestSuite.scala	/^  val rv32ua = new AssemblyTestSuite("rv32ua", rv32uaNames)(_)$/;"	l
rv32uaNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv32uaNames = rv32uaSansLRSCNames + "lrsc"$/;"	l
rv32uaSansLRSC	src/main/scala/system/RocketTestSuite.scala	/^  val rv32uaSansLRSC = new AssemblyTestSuite("rv32ua", rv32uaSansLRSCNames)(_)$/;"	l
rv32uaSansLRSCNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv32uaSansLRSCNames = LinkedHashSet("amoadd_w", "amoand_w", "amoor_w", "amoxor_w", "amoswap_w", "amomax_w", "amomaxu_w", "amomin_w", "amominu_w")$/;"	l
rv32uc	src/main/scala/system/RocketTestSuite.scala	/^  val rv32uc = new AssemblyTestSuite("rv32uc", rv32ucNames)(_)$/;"	l
rv32ucNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv32ucNames = LinkedHashSet("rvc")$/;"	l
rv32ud	src/main/scala/system/RocketTestSuite.scala	/^  val rv32ud = new AssemblyTestSuite("rv32ud", rv64ufNames - "move")(_)$/;"	l
rv32udBenchmarks	src/main/scala/system/RocketTestSuite.scala	/^  val rv32udBenchmarks = new BenchmarkTestSuite("rvd", "$(RISCV)\/riscv64-unknown-elf\/share\/riscv-tests\/benchmarks", LinkedHashSet($/;"	l
rv32uf	src/main/scala/system/RocketTestSuite.scala	/^  val rv32uf = new AssemblyTestSuite("rv32uf", rv64ufNames)(_)$/;"	l
rv32ui	src/main/scala/system/RocketTestSuite.scala	/^  val rv32ui = new AssemblyTestSuite("rv32ui", rv32uiNames)(_)$/;"	l
rv32uiNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv32uiNames = LinkedHashSet($/;"	l
rv32um	src/main/scala/system/RocketTestSuite.scala	/^  val rv32um = new AssemblyTestSuite("rv32um", rv32umNames)(_)$/;"	l
rv32umNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv32umNames = LinkedHashSet("mul", "mulh", "mulhsu", "mulhu", "div", "divu", "rem", "remu")$/;"	l
rv64i	src/main/scala/system/RocketTestSuite.scala	/^  val rv64i = List(rv64ui, rv64si, rv64mi)$/;"	l
rv64mi	src/main/scala/system/RocketTestSuite.scala	/^  val rv64mi = new AssemblyTestSuite("rv64mi", rv64miNames)(_)$/;"	l
rv64miNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv64miNames = rv32miNames + "breakpoint" + "access"$/;"	l
rv64pi	src/main/scala/system/RocketTestSuite.scala	/^  val rv64pi = List(rv64ui, rv64mi)$/;"	l
rv64si	src/main/scala/system/RocketTestSuite.scala	/^  val rv64si = new AssemblyTestSuite("rv64si", rv64siNames)(_)$/;"	l
rv64siNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv64siNames = rv32siNames$/;"	l
rv64u	src/main/scala/system/RocketTestSuite.scala	/^  val rv64u = List(rv64ui, rv64um)$/;"	l
rv64ua	src/main/scala/system/RocketTestSuite.scala	/^  val rv64ua = new AssemblyTestSuite("rv64ua", rv32uaNames ++ rv64uaNames)(_)$/;"	l
rv64uaNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv64uaNames = rv64uaSansLRSCNames + "lrsc"$/;"	l
rv64uaSansLRSC	src/main/scala/system/RocketTestSuite.scala	/^  val rv64uaSansLRSC = new AssemblyTestSuite("rv64ua", rv32uaSansLRSCNames ++ rv64uaSansLRSCNames)(_)$/;"	l
rv64uaSansLRSCNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv64uaSansLRSCNames = rv32uaSansLRSCNames.map(_.replaceAll("_w","_d"))$/;"	l
rv64uc	src/main/scala/system/RocketTestSuite.scala	/^  val rv64uc = new AssemblyTestSuite("rv64uc", rv64ucNames)(_)$/;"	l
rv64ucNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv64ucNames = rv32ucNames$/;"	l
rv64ud	src/main/scala/system/RocketTestSuite.scala	/^  val rv64ud = new AssemblyTestSuite("rv64ud", rv64udNames)(_)$/;"	l
rv64udNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv64udNames = rv64ufNames + "structural"$/;"	l
rv64uf	src/main/scala/system/RocketTestSuite.scala	/^  val rv64uf = new AssemblyTestSuite("rv64uf", rv64ufNames)(_)$/;"	l
rv64ufNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv64ufNames = LinkedHashSet("ldst", "move", "fcmp", "fcvt", "fcvt_w", "fclass", "fadd", "fdiv", "fmin", "fmadd")$/;"	l
rv64ui	src/main/scala/system/RocketTestSuite.scala	/^  val rv64ui = new AssemblyTestSuite("rv64ui", rv32uiNames ++ rv64uiNames)(_)$/;"	l
rv64uiNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv64uiNames = LinkedHashSet("addw", "addiw", "ld", "lwu", "sd", "slliw", "sllw", "sltiu", "sltu", "sraiw", "sraw", "srliw", "srlw", "subw")$/;"	l
rv64um	src/main/scala/system/RocketTestSuite.scala	/^  val rv64um = new AssemblyTestSuite("rv64um", rv32umNames ++ rv64umNames)(_)$/;"	l
rv64umNames	src/main/scala/system/RocketTestSuite.scala	/^  val rv64umNames = LinkedHashSet("divuw", "divw", "mulw", "remuw", "remw")$/;"	l
rvalid	src/main/scala/regmapper/Test.scala	/^    val rvalid = Bool(OUTPUT)$/;"	l
rvalid	src/main/scala/rocket/Breakpoint.scala	/^  val rvalid = Vec(n, Bool())$/;"	l
rvalid_s	src/main/scala/regmapper/Test.scala	/^  val rvalid_s = rvalid(io.rready)$/;"	l
rvc	src/main/scala/rocket/Frontend.scala	/^      val rvc = insnIsRVC(bits)$/;"	l
rvc	src/main/scala/rocket/IBuf.scala	/^  val rvc = Bool()$/;"	l
rvc	src/main/scala/rocket/RVC.scala	/^    val rvc = Output(Bool())$/;"	l
rvcBranch	src/main/scala/rocket/Frontend.scala	/^      val rvcBranch = bits === Instructions.C_BEQZ || bits === Instructions.C_BNEZ$/;"	l
rvcCall	src/main/scala/rocket/Frontend.scala	/^      val rvcCall = rvcJAL || rvcJALR$/;"	l
rvcImm	src/main/scala/rocket/Frontend.scala	/^      val rvcImm = Mux(bits(14), new RVCDecoder(bits, xLen).bImm.asSInt, new RVCDecoder(bits, xLen).jImm.asSInt)$/;"	l
rvcJAL	src/main/scala/rocket/Frontend.scala	/^      val rvcJAL = Bool(xLen == 32) && bits === Instructions.C_JAL$/;"	l
rvcJALR	src/main/scala/rocket/Frontend.scala	/^      val rvcJALR = bits === Instructions.C_ADD && bits(6,2) === 0$/;"	l
rvcJR	src/main/scala/rocket/Frontend.scala	/^      val rvcJR = bits === Instructions.C_MV && bits(6,2) === 0$/;"	l
rvcJump	src/main/scala/rocket/Frontend.scala	/^      val rvcJump = bits === Instructions.C_J || rvcJAL$/;"	l
rvcReturn	src/main/scala/rocket/Frontend.scala	/^      val rvcReturn = rvcJR && BitPat("b00?01") === bits(11,7)$/;"	l
rviBits	src/main/scala/rocket/Frontend.scala	/^      val rviBits = Cat(bits, prevBits)$/;"	l
rviBranch	src/main/scala/rocket/Frontend.scala	/^      val rviBranch = rviBits(6,0) === Instructions.BEQ.value.asUInt()(6,0)$/;"	l
rviCall	src/main/scala/rocket/Frontend.scala	/^      val rviCall = (rviJALR || rviJump) && rviBits(7)$/;"	l
rviImm	src/main/scala/rocket/Frontend.scala	/^      val rviImm = Mux(rviBits(3), ImmGen(IMM_UJ, rviBits), ImmGen(IMM_SB, rviBits))$/;"	l
rviJALR	src/main/scala/rocket/Frontend.scala	/^      val rviJALR = rviBits(6,0) === Instructions.JALR.value.asUInt()(6,0)$/;"	l
rviJump	src/main/scala/rocket/Frontend.scala	/^      val rviJump = rviBits(6,0) === Instructions.JAL.value.asUInt()(6,0)$/;"	l
rviReturn	src/main/scala/rocket/Frontend.scala	/^      val rviReturn = rviJALR && !rviBits(7) && BitPat("b00?01") === rviBits(19,15)$/;"	l
rw	src/main/scala/rocket/CSR.scala	/^  val rw = new Bundle {$/;"	l
rwReg	src/main/scala/regmapper/RegField.scala	/^  def rwReg(n: Int, bb: SimpleRegIO, desc: Option[RegFieldDesc] = None) : RegField =$/;"	m
rway_en	src/main/scala/rocket/NBDcache.scala	/^      val rway_en = io.read.bits.way_en(w+rowWords-1,w)$/;"	l
rxs1	src/main/scala/rocket/IDecode.scala	/^  val rxs1 = Bool()$/;"	l
rxs2	src/main/scala/rocket/IDecode.scala	/^  val rxs2 = Bool()$/;"	l
s	src/main/scala/rocket/Breakpoint.scala	/^  val s = Bool()$/;"	l
s	src/main/scala/rocket/RVC.scala	/^    val s = q0 ++ q1 ++ q2 ++ q3$/;"	l
s	src/main/scala/tile/FPU.scala	/^  val s = io.sigs$/;"	l
s	src/main/scala/util/LanePositionedQueue.scala	/^        val s = z - lanes.U$/;"	l
s	src/main/scala/util/Misc.scala	/^      var s = digit(q % rad)$/;"	l
s	src/main/scala/util/Misc.scala	/^    var s = digit(q % rad)$/;"	l
s0_clk_en	src/main/scala/rocket/DCache.scala	/^  val s0_clk_en = metaArb.io.out.valid && !metaArb.io.out.bits.write$/;"	l
s0_fq_has_space	src/main/scala/rocket/Frontend.scala	/^  val s0_fq_has_space =$/;"	l
s0_read	src/main/scala/rocket/DCache.scala	/^  val s0_read = isRead(io.cpu.req.bits.cmd)$/;"	l
s0_ren	src/main/scala/rocket/ICache.scala	/^    val s0_ren = (s0_valid && wordMatch(s0_vaddr)) || (s0_slaveValid && wordMatch(s0_slaveAddr))$/;"	l
s0_req	src/main/scala/rocket/DCache.scala	/^  val s0_req = WireInit(io.cpu.req.bits)$/;"	l
s0_req_fire	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val s0_req_fire = io.cache.req.fire()$/;"	l
s0_slaveAddr	src/main/scala/rocket/ICache.scala	/^  val s0_slaveAddr = tl_in.map(_.a.bits.address).getOrElse(0.U)$/;"	l
s0_slaveValid	src/main/scala/rocket/ICache.scala	/^  val s0_slaveValid = tl_in.map(_.a.fire()).getOrElse(false.B)$/;"	l
s0_speculative	src/main/scala/rocket/Frontend.scala	/^  val s0_speculative =$/;"	l
s0_suitable	src/main/scala/rocket/PTW.scala	/^    val s0_suitable = arb.io.out.bits.bits.vstage1 === arb.io.out.bits.bits.stage2 && !arb.io.out.bits.bits.need_gpa$/;"	l
s0_tlb_req	src/main/scala/rocket/DCache.scala	/^  val s0_tlb_req = WireInit(tlb_port.req.bits)$/;"	l
s0_vaddr	src/main/scala/rocket/ICache.scala	/^  val s0_vaddr = io.req.bits.addr$/;"	l
s0_valid	src/main/scala/rocket/Frontend.scala	/^  val s0_valid = io.cpu.req.valid || s0_fq_has_space$/;"	l
s0_valid	src/main/scala/rocket/ICache.scala	/^  val s0_valid = io.req.fire()$/;"	l
s0_valid	src/main/scala/rocket/PTW.scala	/^    val s0_valid = !l2_refill && arb.io.out.fire()$/;"	l
s1Depends	src/main/scala/rocket/DCache.scala	/^  def s1Depends(addr: UInt, mask: UInt) =$/;"	m
s1_a	src/main/scala/rocket/ICache.scala	/^        val s1_a = RegEnable(tl.a.bits, s0_slaveValid)$/;"	l
s1_addr	src/main/scala/rocket/NBDcache.scala	/^  val s1_addr = dtlb.io.resp.paddr$/;"	l
s1_all_data_ways	src/main/scala/rocket/DCache.scala	/^  val s1_all_data_ways = Vec(data.io.resp ++ (!cacheParams.separateUncachedResp).option(tl_d_data_encoded))$/;"	l
s1_base_pc	src/main/scala/rocket/Frontend.scala	/^  val s1_base_pc = ~(~s1_pc | (fetchBytes - 1))$/;"	l
s1_can_request_refill	src/main/scala/rocket/ICache.scala	/^  val s1_can_request_refill = !(s2_miss || refill_valid)$/;"	l
s1_clk_en	src/main/scala/rocket/ICache.scala	/^  val s1_clk_en = s1_valid || s1_slaveValid$/;"	l
s1_clk_en	src/main/scala/rocket/NBDcache.scala	/^  val s1_clk_en = Reg(Bool())$/;"	l
s1_cmd_uses_tlb	src/main/scala/rocket/DCache.scala	/^  val s1_cmd_uses_tlb = s1_readwrite || s1_flush_line || s1_req.cmd === M_WOK$/;"	l
s1_data	src/main/scala/rocket/HellaCache.scala	/^  val s1_data = new HellaCacheWriteData().asOutput \/\/ data for previous cycle's req$/;"	l
s1_data_way	src/main/scala/rocket/DCache.scala	/^  val s1_data_way = Wire(init = if (nWays == 1) 1.U else Mux(inWriteback, releaseWay, s1_hit_way))$/;"	l
s1_did_read	src/main/scala/rocket/DCache.scala	/^  val s1_did_read = RegEnable(dataArb.io.in(3).ready && (io.cpu.req.valid && needsRead(io.cpu.req.bits)), s0_clk_en)$/;"	l
s1_dont_read	src/main/scala/rocket/ICache.scala	/^  val s1_dont_read = s1_slaveValid && s1s2_full_word_write$/;"	l
s1_dout	src/main/scala/rocket/ICache.scala	/^  val s1_dout = Wire(Vec(nWays, UInt(width = dECC.width(wordBits))))$/;"	l
s1_flush_line	src/main/scala/rocket/DCache.scala	/^  val s1_flush_line = s1_req.cmd === M_FLUSH_ALL && s1_req.size(0)$/;"	l
s1_flush_valid	src/main/scala/rocket/DCache.scala	/^  val s1_flush_valid = Reg(Bool())$/;"	l
s1_hazard	src/main/scala/rocket/DCache.scala	/^  val s1_hazard =$/;"	l
s1_hit	src/main/scala/rocket/ICache.scala	/^  val s1_hit = s1_tag_hit.reduce(_||_) || Mux(s1_slaveValid, true.B, addrMaybeInScratchpad(io.s1_paddr))$/;"	l
s1_id	src/main/scala/rocket/HellaCacheArbiter.scala	/^    val s1_id = Reg(UInt())$/;"	l
s1_idx	src/main/scala/rocket/ICache.scala	/^    val s1_idx = index(s1_vaddr, io.s1_paddr)$/;"	l
s1_isSlavePortAccess	src/main/scala/rocket/DCache.scala	/^  val s1_isSlavePortAccess = s1_req.no_xcpt$/;"	l
s1_kill	src/main/scala/rocket/HellaCache.scala	/^  val s1_kill = Bool(OUTPUT) \/\/ kill previous cycle's req$/;"	l
s1_kill	src/main/scala/rocket/ICache.scala	/^  val s1_kill = Bool(INPUT) \/\/ delayed one cycle w.r.t. req$/;"	l
s1_mask	src/main/scala/rocket/DCache.scala	/^  val s1_mask = Mux(s1_req.cmd === M_PWR, io.cpu.s1_data.mask, s1_mask_xwr)$/;"	l
s1_mask_xwr	src/main/scala/rocket/DCache.scala	/^  val s1_mask_xwr = new StoreGen(s1_req.size, s1_req.addr, UInt(0), wordBytes).mask$/;"	l
s1_meta	src/main/scala/rocket/DCache.scala	/^      val s1_meta = tag_array.read(metaIdx, metaReq.valid && !metaReq.bits.write)$/;"	l
s1_meta_clk_en	src/main/scala/rocket/DCache.scala	/^  val s1_meta_clk_en = s1_valid_not_nacked || s1_flush_valid || s1_probe$/;"	l
s1_meta_decoded	src/main/scala/rocket/DCache.scala	/^  val s1_meta_decoded = s1_meta.map(tECC.decode(_))$/;"	l
s1_meta_hit_state	src/main/scala/rocket/DCache.scala	/^      val s1_meta_hit_state = ClientMetadata.onReset.fromBits($/;"	l
s1_meta_hit_way	src/main/scala/rocket/DCache.scala	/^      val s1_meta_hit_way = s1_meta_uncorrected.map(r => r.coh.isValid() && r.tag === s1_tag).asUInt$/;"	l
s1_meta_uncorrected	src/main/scala/rocket/DCache.scala	/^      val s1_meta_uncorrected = s1_meta.map(tECC.decode(_).uncorrected.asTypeOf(new L1Metadata))$/;"	l
s1_nack	src/main/scala/rocket/DCache.scala	/^  val s1_nack = Wire(init=Bool(false))$/;"	l
s1_nack	src/main/scala/rocket/NBDcache.scala	/^  val s1_nack = dtlb.io.req.valid && dtlb.io.resp.miss || io.cpu.s2_nack ||$/;"	l
s1_need_check	src/main/scala/rocket/DCache.scala	/^    val s1_need_check = any_no_alloc_in_flight || s2_valid && s2_req.no_alloc$/;"	l
s1_paddr	src/main/scala/rocket/DCache.scala	/^  val s1_paddr = Cat(Mux(s1_tlb_req_valid, s1_req.addr(paddrBits-1, pgIdxBits), tlb.io.resp.paddr >> pgIdxBits), s1_req.addr(pgIdxBits-1, 0))$/;"	l
s1_paddr	src/main/scala/rocket/ICache.scala	/^  val s1_paddr = UInt(INPUT, paddrBits) \/\/ delayed one cycle w.r.t. req$/;"	l
s1_pc	src/main/scala/rocket/Frontend.scala	/^  val s1_pc = Reg(UInt(width=vaddrBitsExtended))$/;"	l
s1_ppn	src/main/scala/groundtest/DummyPTW.scala	/^  val s1_ppn = vpn_to_ppn(req_arb.io.out.bits.bits.addr)$/;"	l
s1_ppns	src/main/scala/rocket/PTW.scala	/^      val s1_ppns = (0 until pgLevels-1).map(i => Cat(pte.ppn(pte.ppn.getWidth-1, (pgLevels-i-1)*pgLevelBits), r_req.addr(((pgLevels-i-1)*pgLevelBits min vpnBits)-1,0).padTo((pgLevels-i-1)*pgLevelBits))) :+ pte.ppn$/;"	l
s1_probe	src/main/scala/rocket/DCache.scala	/^  val s1_probe = Reg(next=tl_out.b.fire(), init=Bool(false))$/;"	l
s1_raw_hazard	src/main/scala/rocket/DCache.scala	/^  val s1_raw_hazard = s1_read && s1_hazard$/;"	l
s1_rdata	src/main/scala/rocket/PTW.scala	/^    val s1_rdata = ram.read(arb.io.out.bits.bits.addr(idxBits-1, 0), s0_valid)$/;"	l
s1_read	src/main/scala/rocket/DCache.scala	/^  val s1_read = isRead(s1_req.cmd)$/;"	l
s1_read	src/main/scala/rocket/NBDcache.scala	/^  val s1_read  = isRead(s1_req.cmd)$/;"	l
s1_read_mask	src/main/scala/rocket/DCache.scala	/^  val s1_read_mask = RegEnable(dataArb.io.in(3).bits.wordMask, s0_clk_en)$/;"	l
s1_readwrite	src/main/scala/rocket/DCache.scala	/^  val s1_readwrite = s1_read || s1_write$/;"	l
s1_readwrite	src/main/scala/rocket/NBDcache.scala	/^  val s1_readwrite = s1_read || s1_write || isPrefetch(s1_req.cmd)$/;"	l
s1_recycled	src/main/scala/rocket/NBDcache.scala	/^  val s1_recycled = RegEnable(s2_recycle, Bool(false), s1_clk_en)$/;"	l
s1_release_data_valid	src/main/scala/rocket/DCache.scala	/^  val s1_release_data_valid = Reg(next = dataArb.io.in(2).fire())$/;"	l
s1_repl_idx	src/main/scala/rocket/DCache.scala	/^    val s1_repl_idx = s1_req.addr(idxBits+blockOffBits-1, blockOffBits)$/;"	l
s1_repl_state	src/main/scala/rocket/DCache.scala	/^    val s1_repl_state = Mux(s2_repl_wen && s2_repl_idx === s1_repl_idx, s2_new_repl_state, repl_array(s1_repl_idx))$/;"	l
s1_replaced_way_en	src/main/scala/rocket/NBDcache.scala	/^  val s1_replaced_way_en = UIntToOH(replacer.way)$/;"	l
s1_replay	src/main/scala/rocket/NBDcache.scala	/^  val s1_replay = Reg(init=Bool(false))$/;"	l
s1_req	src/main/scala/rocket/DCache.scala	/^  val s1_req = RegEnable(s0_req, s0_clk_en)$/;"	l
s1_req	src/main/scala/rocket/NBDcache.scala	/^  val s1_req = Reg(io.cpu.req.bits)$/;"	l
s1_req_fire	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val s1_req_fire = Reg(next = s0_req_fire)$/;"	l
s1_req_tag	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val s1_req_tag = Reg(next = io.cache.req.bits.tag)$/;"	l
s1_resp	src/main/scala/rocket/DCache.scala	/^  val s1_resp = Output(new TLBResp)$/;"	l
s1_scratchpad_hit	src/main/scala/rocket/ICache.scala	/^  val s1_scratchpad_hit = Mux(s1_slaveValid, lineInScratchpad(scratchpadLine(s1s3_slaveAddr)), addrInScratchpad(io.s1_paddr))$/;"	l
s1_sfence	src/main/scala/rocket/DCache.scala	/^  val s1_sfence = s1_req.cmd === M_SFENCE || s1_req.cmd === M_HFENCEV || s1_req.cmd === M_HFENCEG$/;"	l
s1_sfence	src/main/scala/rocket/NBDcache.scala	/^  val s1_sfence = s1_req.cmd === M_SFENCE$/;"	l
s1_slaveValid	src/main/scala/rocket/ICache.scala	/^  val s1_slaveValid = RegNext(s0_slaveValid, false.B)$/;"	l
s1_speculative	src/main/scala/rocket/Frontend.scala	/^  val s1_speculative = Reg(Bool())$/;"	l
s1_tag	src/main/scala/rocket/DCache.scala	/^      val s1_tag = s1_paddr >> tagLSB$/;"	l
s1_tag	src/main/scala/rocket/ICache.scala	/^    val s1_tag = io.s1_paddr >> pgUntagBits$/;"	l
s1_tag_disparity	src/main/scala/rocket/ICache.scala	/^  val s1_tag_disparity = Wire(Vec(nWays, Bool()))$/;"	l
s1_tag_eq_way	src/main/scala/rocket/NBDcache.scala	/^  val s1_tag_eq_way = wayMap((w: Int) => meta.io.resp(w).tag === (s1_addr >> untagBits)).asUInt$/;"	l
s1_tag_hit	src/main/scala/rocket/ICache.scala	/^  val s1_tag_hit = Wire(Vec(nWays, Bool()))$/;"	l
s1_tag_match_way	src/main/scala/rocket/NBDcache.scala	/^  val s1_tag_match_way = wayMap((w: Int) => s1_tag_eq_way(w) && meta.io.resp(w).coh.isValid()).asUInt$/;"	l
s1_tl_error	src/main/scala/rocket/ICache.scala	/^  val s1_tl_error = Wire(Vec(nWays, Bool()))$/;"	l
s1_tlb_req	src/main/scala/rocket/DCache.scala	/^  val s1_tlb_req = RegEnable(s0_tlb_req, s0_clk_en || tlb_port.req.valid)$/;"	l
s1_tlb_req_valid	src/main/scala/rocket/DCache.scala	/^  val s1_tlb_req_valid = RegNext(tlb_port.req.fire(), false.B)$/;"	l
s1_uncached_data_word	src/main/scala/rocket/DCache.scala	/^  val s1_uncached_data_word = {$/;"	l
s1_uncached_hits	src/main/scala/rocket/DCache.scala	/^    val s1_uncached_hits = concerns.map { c =>$/;"	l
s1_vaddr	src/main/scala/rocket/DCache.scala	/^  val s1_vaddr = Cat(s1_req.idx.getOrElse(s1_req.addr) >> tagLSB, s1_req.addr(tagLSB-1, 0))$/;"	l
s1_vaddr	src/main/scala/rocket/ICache.scala	/^  val s1_vaddr = RegEnable(s0_vaddr, s0_valid)$/;"	l
s1_valid	src/main/scala/rocket/DCache.scala	/^  val s1_valid = Reg(next=io.cpu.req.fire(), init=Bool(false))$/;"	l
s1_valid	src/main/scala/rocket/Frontend.scala	/^  val s1_valid = Reg(Bool())$/;"	l
s1_valid	src/main/scala/rocket/ICache.scala	/^  val s1_valid = Reg(init=Bool(false))$/;"	l
s1_valid	src/main/scala/rocket/NBDcache.scala	/^  val s1_valid = Reg(next=io.cpu.req.fire(), init=Bool(false))$/;"	l
s1_valid	src/main/scala/rocket/PTW.scala	/^    val s1_valid = RegNext(s0_valid && s0_suitable && arb.io.out.bits.valid)$/;"	l
s1_valid_masked	src/main/scala/rocket/DCache.scala	/^  val s1_valid_masked = s1_valid && !io.cpu.s1_kill$/;"	l
s1_valid_masked	src/main/scala/rocket/NBDcache.scala	/^  val s1_valid_masked = s1_valid && !io.cpu.s1_kill$/;"	l
s1_valid_not_nacked	src/main/scala/rocket/DCache.scala	/^  val s1_valid_not_nacked = s1_valid && !s1_nack$/;"	l
s1_vb	src/main/scala/rocket/ICache.scala	/^    val s1_vb = vb_array(Cat(UInt(i), s1_idx)) && !s1_slaveValid$/;"	l
s1_victim_way	src/main/scala/rocket/DCache.scala	/^  val s1_victim_way = Wire(UInt())$/;"	l
s1_waw_hazard	src/main/scala/rocket/DCache.scala	/^  val s1_waw_hazard = Wire(Bool())$/;"	l
s1_way_words	src/main/scala/rocket/DCache.scala	/^    val s1_way_words = s1_all_data_ways.map(_.grouped(dECC.width(eccBits) * (subWordBits \/ eccBits)))$/;"	l
s1_word_en	src/main/scala/rocket/DCache.scala	/^      val s1_word_en = Mux(!io.cpu.replay_next, word_en, UIntToOH(uncachedResp.addr.extract(log2Up(rowBits\/8)-1, log2Up(wordBytes)), wordsPerRow))$/;"	l
s1_word_en	src/main/scala/rocket/DCache.scala	/^      val s1_word_en = Mux(io.cpu.replay_next, 0.U, word_en)$/;"	l
s1_write	src/main/scala/rocket/DCache.scala	/^  val s1_write = isWrite(s1_req.cmd)$/;"	l
s1_write	src/main/scala/rocket/NBDcache.scala	/^  val s1_write = isWrite(s1_req.cmd)$/;"	l
s1_writeback	src/main/scala/rocket/NBDcache.scala	/^  val s1_writeback = s1_clk_en && !s1_valid && !s1_replay$/;"	l
s1_xcpt	src/main/scala/rocket/NBDcache.scala	/^  val s1_xcpt = dtlb.io.resp$/;"	l
s1_xcpt_valid	src/main/scala/rocket/DCache.scala	/^  val s1_xcpt_valid = tlb.io.req.valid && !s1_isSlavePortAccess && !s1_nack$/;"	l
s1_xcpt_valid	src/main/scala/rocket/NBDcache.scala	/^  val s1_xcpt_valid = dtlb.io.req.valid && !s1_nack$/;"	l
s1s2_full_word_write	src/main/scala/rocket/ICache.scala	/^  val s1s2_full_word_write = Wire(init = false.B)$/;"	l
s1s3_slaveAddr	src/main/scala/rocket/ICache.scala	/^  val s1s3_slaveAddr = Reg(UInt(width = log2Ceil(outer.size)))$/;"	l
s1s3_slaveData	src/main/scala/rocket/ICache.scala	/^  val s1s3_slaveData = Reg(UInt(width = wordBits))$/;"	l
s2_base_pc	src/main/scala/rocket/Frontend.scala	/^    val s2_base_pc = ~(~s2_pc | (fetchBytes-1))$/;"	l
s2_btb_resp_bits	src/main/scala/rocket/Frontend.scala	/^  val s2_btb_resp_bits = Reg(new BTBResp)$/;"	l
s2_btb_resp_valid	src/main/scala/rocket/Frontend.scala	/^  val s2_btb_resp_valid = if (usingBTB) Reg(Bool()) else false.B$/;"	l
s2_btb_taken	src/main/scala/rocket/Frontend.scala	/^  val s2_btb_taken = s2_btb_resp_valid && s2_btb_resp_bits.taken$/;"	l
s2_can_speculatively_refill	src/main/scala/rocket/Frontend.scala	/^  val s2_can_speculatively_refill = s2_tlb_resp.cacheable && !io.ptw.customCSRs.asInstanceOf[RocketCustomCSRs].disableSpeculativeICacheRefill$/;"	l
s2_cannot_victimize	src/main/scala/rocket/DCache.scala	/^  val s2_cannot_victimize = !s2_flush_valid && io.cpu.s2_kill$/;"	l
s2_chosen	src/main/scala/groundtest/DummyPTW.scala	/^  val s2_chosen = RegEnable(req_arb.io.chosen, req_arb.io.out.valid)$/;"	l
s2_cmd_flush_all	src/main/scala/rocket/DCache.scala	/^  val s2_cmd_flush_all = s2_req.cmd === M_FLUSH_ALL && !s2_req.size(0)$/;"	l
s2_cmd_flush_line	src/main/scala/rocket/DCache.scala	/^  val s2_cmd_flush_line = s2_req.cmd === M_FLUSH_ALL && s2_req.size(0)$/;"	l
s2_correct	src/main/scala/rocket/DCache.scala	/^  val s2_correct = s2_data_error && !any_pstore_valid && !RegNext(any_pstore_valid || s2_valid) && Bool(usingDataScratchpad)$/;"	l
s2_data	src/main/scala/rocket/DCache.scala	/^  val s2_data = {$/;"	l
s2_data	src/main/scala/rocket/NBDcache.scala	/^  val s2_data = Wire(Vec(nWays, Bits(width=encRowBits)))$/;"	l
s2_data_correctable	src/main/scala/rocket/NBDcache.scala	/^  val s2_data_correctable = s2_data_decoded.map(_.correctable).asUInt()(s2_word_idx)$/;"	l
s2_data_corrected	src/main/scala/rocket/DCache.scala	/^  val s2_data_corrected = (s2_data_decoded.map(_.corrected): Seq[UInt]).asUInt$/;"	l
s2_data_corrected	src/main/scala/rocket/NBDcache.scala	/^  val s2_data_corrected = s2_data_decoded.map(_.corrected).asUInt$/;"	l
s2_data_decoded	src/main/scala/rocket/DCache.scala	/^  val s2_data_decoded = decodeData(s2_data)$/;"	l
s2_data_decoded	src/main/scala/rocket/ICache.scala	/^  val s2_data_decoded = dECC.decode(s2_way_mux)$/;"	l
s2_data_decoded	src/main/scala/rocket/NBDcache.scala	/^  val s2_data_decoded = (0 until rowWords).map(i => dECC.decode(s2_data_muxed(encDataBits*(i+1)-1,encDataBits*i)))$/;"	l
s2_data_error	src/main/scala/rocket/DCache.scala	/^  val s2_data_error = s2_data_decoded.map(_.error).orR$/;"	l
s2_data_error_uncorrectable	src/main/scala/rocket/DCache.scala	/^  val s2_data_error_uncorrectable = s2_data_decoded.map(_.uncorrectable).orR$/;"	l
s2_data_muxed	src/main/scala/rocket/NBDcache.scala	/^  val s2_data_muxed = Mux1H(s2_tag_match_way, s2_data)$/;"	l
s2_data_uncorrected	src/main/scala/rocket/DCache.scala	/^  val s2_data_uncorrected = (s2_data_decoded.map(_.uncorrected): Seq[UInt]).asUInt$/;"	l
s2_data_uncorrected	src/main/scala/rocket/NBDcache.scala	/^  val s2_data_uncorrected = s2_data_decoded.map(_.uncorrected).asUInt$/;"	l
s2_data_word	src/main/scala/rocket/DCache.scala	/^  val s2_data_word = (0 until rowBits by wordBits).map(i => s2_data_uncorrected(wordBits+i-1,i)).reduce(_|_)$/;"	l
s2_data_word	src/main/scala/rocket/NBDcache.scala	/^  val s2_data_word = Mux(s2_store_bypass, s2_store_bypass_data, s2_data_word_prebypass)$/;"	l
s2_data_word_corrected	src/main/scala/rocket/DCache.scala	/^  val s2_data_word_corrected = (0 until rowBits by wordBits).map(i => s2_data_corrected(wordBits+i-1,i)).reduce(_|_)$/;"	l
s2_data_word_possibly_uncached	src/main/scala/rocket/DCache.scala	/^  val s2_data_word_possibly_uncached = Mux(cacheParams.pipelineWayMux && doUncachedResp, s2_uncached_data_word, 0.U) | s2_data_word$/;"	l
s2_data_word_prebypass	src/main/scala/rocket/NBDcache.scala	/^  val s2_data_word_prebypass = s2_data_uncorrected >> Cat(s2_word_idx, Bits(0,log2Up(coreDataBits)))$/;"	l
s2_disparity	src/main/scala/rocket/ICache.scala	/^  val s2_disparity = s2_tag_disparity || s2_data_decoded.error$/;"	l
s2_dont_nack_misc	src/main/scala/rocket/DCache.scala	/^  val s2_dont_nack_misc = s2_valid_masked && !s2_meta_error &&$/;"	l
s2_dont_nack_uncached	src/main/scala/rocket/DCache.scala	/^  val s2_dont_nack_uncached = s2_valid_uncached_pending && tl_out_a.ready$/;"	l
s2_dout	src/main/scala/rocket/ICache.scala	/^  val s2_dout = RegEnable(s1_dout, s1_clk_en)$/;"	l
s2_entry_vec	src/main/scala/rocket/PTW.scala	/^    val s2_entry_vec = s2_rdata.map(_.uncorrected.asTypeOf(new L2TLBEntry(nL2TLBSets)))$/;"	l
s2_error	src/main/scala/rocket/PTW.scala	/^    val s2_error = (0 until coreParams.nL2TLBWays).map(way => s2_valid_vec(way) && s2_rdata(way).error).orR$/;"	l
s2_error_addr	src/main/scala/rocket/ICache.scala	/^  val s2_error_addr = scratchpadBase.map(base => Mux(s2_scratchpad_hit, base + s2_scratchpad_word_addr, 0.U)).getOrElse(0.U)$/;"	l
s2_first_meta_corrected	src/main/scala/rocket/DCache.scala	/^  val s2_first_meta_corrected = PriorityMux(s2_meta_correctable_errors, s2_meta_corrected)$/;"	l
s2_flush_valid	src/main/scala/rocket/DCache.scala	/^  val s2_flush_valid = s2_flush_valid_pre_tag_ecc && !s2_meta_error$/;"	l
s2_flush_valid_pre_tag_ecc	src/main/scala/rocket/DCache.scala	/^  val s2_flush_valid_pre_tag_ecc = RegNext(s1_flush_valid)$/;"	l
s2_g_vec	src/main/scala/rocket/PTW.scala	/^    val s2_g_vec = RegEnable(Vec(g.map(_(r_idx))), s1_valid)$/;"	l
s2_gpa	src/main/scala/rocket/HellaCache.scala	/^  val s2_gpa = UInt(vaddrBitsExtended.W).asInput$/;"	l
s2_gpa_is_pte	src/main/scala/rocket/HellaCache.scala	/^  val s2_gpa_is_pte = Bool(INPUT)$/;"	l
s2_hit	src/main/scala/rocket/ICache.scala	/^  val s2_hit = RegNext(s1_hit)$/;"	l
s2_hit	src/main/scala/rocket/NBDcache.scala	/^  val s2_hit = s2_tag_match && s2_has_permission && s2_hit_state === s2_new_hit_state$/;"	l
s2_hit	src/main/scala/rocket/PTW.scala	/^    val s2_hit = s2_valid && s2_hit_vec.orR$/;"	l
s2_hit_state	src/main/scala/rocket/DCache.scala	/^  val s2_hit_state = RegEnable(s1_hit_state, s1_valid_not_nacked || s1_flush_valid)$/;"	l
s2_hit_state	src/main/scala/rocket/NBDcache.scala	/^  val s2_hit_state = Mux1H(s2_tag_match_way, wayMap((w: Int) => RegEnable(meta.io.resp(w).coh, s1_clk_en)))$/;"	l
s2_hit_valid	src/main/scala/rocket/DCache.scala	/^  val s2_hit_valid = s2_hit_state.isValid()$/;"	l
s2_hit_vec	src/main/scala/rocket/PTW.scala	/^    val s2_hit_vec = (0 until coreParams.nL2TLBWays).map(way => s2_valid_vec(way) && (r_tag === s2_entry_vec(way).tag))$/;"	l
s2_hit_way	src/main/scala/rocket/DCache.scala	/^  val s2_hit_way = RegEnable(s1_hit_way, s1_valid_not_nacked)$/;"	l
s2_hit_way	src/main/scala/rocket/ICache.scala	/^  val s2_hit_way = OHToUInt(s2_tag_hit)$/;"	l
s2_id	src/main/scala/rocket/HellaCacheArbiter.scala	/^    val s2_id = Reg(next=s1_id)$/;"	l
s2_isSlavePortAccess	src/main/scala/rocket/DCache.scala	/^  val s2_isSlavePortAccess = s2_req.no_xcpt$/;"	l
s2_kill	src/main/scala/rocket/DCache.scala	/^    val s2_kill = truly && io.cpu.s2_kill$/;"	l
s2_kill	src/main/scala/rocket/DCache.scala	/^  val s2_kill = Input(Bool())$/;"	l
s2_kill	src/main/scala/rocket/HellaCache.scala	/^  val s2_kill = Bool(OUTPUT) \/\/ kill req from two cycles ago$/;"	l
s2_kill	src/main/scala/rocket/ICache.scala	/^  val s2_kill = Bool(INPUT) \/\/ delayed two cycles; prevents I$ miss emission$/;"	l
s2_lr	src/main/scala/rocket/DCache.scala	/^  val s2_lr = Bool(usingAtomics && !usingDataScratchpad) && s2_req.cmd === M_XLR$/;"	l
s2_lrsc_addr_match	src/main/scala/rocket/NBDcache.scala	/^  val s2_lrsc_addr_match = lrsc_valid && lrsc_addr === (s2_req.addr >> blockOffBits)$/;"	l
s2_meta_correctable_errors	src/main/scala/rocket/DCache.scala	/^  val s2_meta_correctable_errors = s1_meta_decoded.map(m => RegEnable(m.correctable, s1_meta_clk_en)).asUInt$/;"	l
s2_meta_corrected	src/main/scala/rocket/DCache.scala	/^  val s2_meta_corrected = s1_meta_decoded.map(m => RegEnable(m.corrected, s1_meta_clk_en).asTypeOf(new L1Metadata))$/;"	l
s2_meta_error	src/main/scala/rocket/DCache.scala	/^  val s2_meta_error = (s2_meta_uncorrectable_errors | s2_meta_correctable_errors).orR$/;"	l
s2_meta_error_uncorrectable	src/main/scala/rocket/DCache.scala	/^  val s2_meta_error_uncorrectable = s2_meta_uncorrectable_errors.orR$/;"	l
s2_meta_uncorrectable_errors	src/main/scala/rocket/DCache.scala	/^  val s2_meta_uncorrectable_errors = s1_meta_decoded.map(m => RegEnable(m.uncorrectable, s1_meta_clk_en)).asUInt$/;"	l
s2_miss	src/main/scala/rocket/ICache.scala	/^  val s2_miss = s2_valid && !s2_hit && !io.s2_kill$/;"	l
s2_nack	src/main/scala/rocket/HellaCache.scala	/^  val s2_nack = Bool(INPUT) \/\/ req from two cycles ago is rejected$/;"	l
s2_nack	src/main/scala/rocket/NBDcache.scala	/^  val s2_nack = s2_nack_hit || s2_nack_victim || s2_nack_miss$/;"	l
s2_nack_cause_raw	src/main/scala/rocket/HellaCache.scala	/^  val s2_nack_cause_raw = Bool(INPUT) \/\/ reason for nack is store-load RAW hazard (performance hint)$/;"	l
s2_nack_hit	src/main/scala/rocket/NBDcache.scala	/^  val s2_nack_hit = RegEnable(s1_nack, s1_valid || s1_replay)$/;"	l
s2_nack_miss	src/main/scala/rocket/NBDcache.scala	/^  val s2_nack_miss = !s2_hit && !mshrs.io.req.ready$/;"	l
s2_nack_victim	src/main/scala/rocket/NBDcache.scala	/^  val s2_nack_victim = s2_hit && mshrs.io.secondary_miss$/;"	l
s2_new_repl_state	src/main/scala/rocket/DCache.scala	/^    val s2_new_repl_state = replacer.get_next_state(s2_repl_state, OHToUInt(s2_hit_way))$/;"	l
s2_no_alloc_hazard	src/main/scala/rocket/DCache.scala	/^  val s2_no_alloc_hazard = if (!usingVM || pgIdxBits >= untagBits) false.B else {$/;"	l
s2_not_nacked_in_s1	src/main/scala/rocket/DCache.scala	/^  val s2_not_nacked_in_s1 = RegNext(!s1_nack)$/;"	l
s2_paddr	src/main/scala/rocket/HellaCache.scala	/^  val s2_paddr = UInt(INPUT, paddrBits) \/\/ translated address$/;"	l
s2_partial_insn	src/main/scala/rocket/Frontend.scala	/^  val s2_partial_insn = Reg(UInt(width = coreInstBits))$/;"	l
s2_partial_insn_valid	src/main/scala/rocket/Frontend.scala	/^  val s2_partial_insn_valid = RegInit(false.B)$/;"	l
s2_pc	src/main/scala/rocket/Frontend.scala	/^  val s2_pc = RegInit(t = UInt(width = vaddrBitsExtended), alignPC(io_reset_vector))$/;"	l
s2_pma	src/main/scala/rocket/DCache.scala	/^  val s2_pma = Reg(tlb.io.resp.cloneType)$/;"	l
s2_ppn	src/main/scala/groundtest/DummyPTW.scala	/^  val s2_ppn = RegEnable(s1_ppn, req_arb.io.out.valid)$/;"	l
s2_prefetch	src/main/scala/rocket/ICache.scala	/^  val s2_prefetch = Bool(INPUT) \/\/ should I$ prefetch next line on a miss?$/;"	l
s2_probe	src/main/scala/rocket/DCache.scala	/^  val s2_probe = Reg(next=s1_probe, init=Bool(false))$/;"	l
s2_probe_state	src/main/scala/rocket/DCache.scala	/^  val s2_probe_state = RegEnable(s1_hit_state, s1_probe)$/;"	l
s2_probe_way	src/main/scala/rocket/DCache.scala	/^  val s2_probe_way = RegEnable(s1_hit_way, s1_probe)$/;"	l
s2_pte	src/main/scala/rocket/PTW.scala	/^    val s2_pte = Wire(new PTE)$/;"	l
s2_rdata	src/main/scala/rocket/PTW.scala	/^    val s2_rdata = s1_rdata.map(s1_rdway => code.decode(RegEnable(s1_rdway, s1_valid)))$/;"	l
s2_read	src/main/scala/rocket/DCache.scala	/^  val s2_read = isRead(s2_req.cmd)$/;"	l
s2_readwrite	src/main/scala/rocket/DCache.scala	/^  val s2_readwrite = s2_read || s2_write$/;"	l
s2_recycle	src/main/scala/rocket/NBDcache.scala	/^  val s2_recycle = Wire(Bool())$/;"	l
s2_recycle_ecc	src/main/scala/rocket/NBDcache.scala	/^  val s2_recycle_ecc = (s2_valid || s2_replay) && s2_hit && s2_data_correctable$/;"	l
s2_recycle_next	src/main/scala/rocket/NBDcache.scala	/^  val s2_recycle_next = Reg(init=Bool(false))$/;"	l
s2_redirect	src/main/scala/rocket/Frontend.scala	/^  val s2_redirect = Wire(init = io.cpu.req.valid)$/;"	l
s2_release_data_valid	src/main/scala/rocket/DCache.scala	/^  val s2_release_data_valid = Reg(next = s1_release_data_valid && !releaseRejected)$/;"	l
s2_repl_idx	src/main/scala/rocket/DCache.scala	/^    val s2_repl_idx = s2_vaddr(idxBits+blockOffBits-1, blockOffBits)$/;"	l
s2_repl_meta	src/main/scala/rocket/NBDcache.scala	/^  val s2_repl_meta = Mux1H(s2_replaced_way_en, wayMap((w: Int) => RegEnable(meta.io.resp(w), s1_clk_en && s1_replaced_way_en(w))).toSeq)$/;"	l
s2_repl_state	src/main/scala/rocket/DCache.scala	/^    val s2_repl_state = Reg(UInt(replacer.nBits.W))$/;"	l
s2_repl_wen	src/main/scala/rocket/DCache.scala	/^    val s2_repl_wen = s2_valid_masked && s2_hit_way.orR && s2_repl_state =\/= s2_new_repl_state$/;"	l
s2_replaced_way_en	src/main/scala/rocket/NBDcache.scala	/^  val s2_replaced_way_en = UIntToOH(RegEnable(replacer.way, s1_clk_en))$/;"	l
s2_replay	src/main/scala/rocket/Frontend.scala	/^  val s2_replay = Wire(Bool())$/;"	l
s2_replay	src/main/scala/rocket/NBDcache.scala	/^  val s2_replay = Reg(next=s1_replay, init=Bool(false)) && s2_req.cmd =\/= M_FLUSH_ALL$/;"	l
s2_report_uncorrectable_error	src/main/scala/rocket/ICache.scala	/^  val s2_report_uncorrectable_error = s2_scratchpad_hit && s2_data_decoded.uncorrectable && (s2_valid || (s2_slaveValid && !s1s2_full_word_write))$/;"	l
s2_req	src/main/scala/rocket/DCache.scala	/^  val s2_req = Reg(io.cpu.req.bits)$/;"	l
s2_req	src/main/scala/rocket/NBDcache.scala	/^  val s2_req = Reg(io.cpu.req.bits)$/;"	l
s2_req_fire	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val s2_req_fire = Reg(next = s1_req_fire)$/;"	l
s2_req_tag	src/main/scala/rocket/SimpleHellaCacheIF.scala	/^  val s2_req_tag = Reg(next = s1_req_tag)$/;"	l
s2_request_refill	src/main/scala/rocket/ICache.scala	/^  val s2_request_refill = s2_miss && RegNext(s1_can_request_refill)$/;"	l
s2_resp	src/main/scala/groundtest/DummyPTW.scala	/^  val s2_resp = Wire(init = 0.U.asTypeOf(new PTWResp))$/;"	l
s2_sc	src/main/scala/rocket/DCache.scala	/^  val s2_sc = Bool(usingAtomics && !usingDataScratchpad) && s2_req.cmd === M_XSC$/;"	l
s2_sc_fail	src/main/scala/rocket/DCache.scala	/^  val s2_sc_fail = s2_sc && !(lrscValid && lrscAddrMatch)$/;"	l
s2_sc_fail	src/main/scala/rocket/NBDcache.scala	/^  val s2_sc_fail = s2_sc && !s2_lrsc_addr_match$/;"	l
s2_scratchpad_hit	src/main/scala/rocket/ICache.scala	/^  val s2_scratchpad_hit = RegEnable(s1_scratchpad_hit, s1_clk_en)$/;"	l
s2_scratchpad_word_addr	src/main/scala/rocket/ICache.scala	/^  val s2_scratchpad_word_addr = Cat(s2_hit_way, Mux(s2_slaveValid, s1s3_slaveAddr, io.s2_vaddr)(untagBits-1, log2Ceil(wordBits\/8)), UInt(0, log2Ceil(wordBits\/8)))$/;"	l
s2_slaveValid	src/main/scala/rocket/ICache.scala	/^  val s2_slaveValid = RegNext(s1_slaveValid, false.B)$/;"	l
s2_speculative	src/main/scala/rocket/Frontend.scala	/^  val s2_speculative = Reg(init=Bool(false))$/;"	l
s2_store_bypass	src/main/scala/rocket/NBDcache.scala	/^  val s2_store_bypass = Reg(Bool())$/;"	l
s2_store_bypass_data	src/main/scala/rocket/NBDcache.scala	/^  val s2_store_bypass_data = Reg(Bits(width = coreDataBits))$/;"	l
s2_store_merge	src/main/scala/rocket/DCache.scala	/^  val s2_store_merge = Wire(Bool())$/;"	l
s2_store_valid	src/main/scala/rocket/DCache.scala	/^  def s2_store_valid = s2_store_valid_pre_kill && !io.cpu.s2_kill$/;"	m
s2_store_valid_pre_kill	src/main/scala/rocket/DCache.scala	/^  def s2_store_valid_pre_kill = s2_valid_hit && s2_write && !s2_sc_fail$/;"	m
s2_tag_disparity	src/main/scala/rocket/ICache.scala	/^  val s2_tag_disparity = RegEnable(s1_tag_disparity, s1_clk_en).asUInt.orR$/;"	l
s2_tag_hit	src/main/scala/rocket/ICache.scala	/^  val s2_tag_hit = RegEnable(Mux(s1_dont_read, 0.U.asTypeOf(s1_tag_hit), s1_tag_hit), s1_clk_en)$/;"	l
s2_tag_match	src/main/scala/rocket/NBDcache.scala	/^  val s2_tag_match = s2_tag_match_way.orR$/;"	l
s2_tag_match_way	src/main/scala/rocket/NBDcache.scala	/^  val s2_tag_match_way = RegEnable(s1_tag_match_way, s1_clk_en)$/;"	l
s2_tl_error	src/main/scala/rocket/ICache.scala	/^  val s2_tl_error = RegEnable(s1_tl_error.asUInt.orR, s1_clk_en)$/;"	l
s2_tlb_req_valid	src/main/scala/rocket/DCache.scala	/^  val s2_tlb_req_valid = RegNext(s1_tlb_req_valid, false.B)$/;"	l
s2_tlb_resp	src/main/scala/rocket/Frontend.scala	/^  val s2_tlb_resp = Reg(tlb.io.resp)$/;"	l
s2_tlb_xcpt	src/main/scala/rocket/DCache.scala	/^  val s2_tlb_xcpt = Reg(tlb.io.resp.cloneType)$/;"	l
s2_uncached	src/main/scala/rocket/DCache.scala	/^  val s2_uncached = !s2_pma.cacheable || s2_req.no_alloc && !s2_pma.must_alloc && !s2_hit_valid$/;"	l
s2_uncached	src/main/scala/rocket/HellaCache.scala	/^  val s2_uncached = Bool(INPUT) \/\/ advisory signal that the access is MMIO$/;"	l
s2_uncached_data_word	src/main/scala/rocket/DCache.scala	/^  val s2_uncached_data_word = RegEnable(s1_uncached_data_word, io.cpu.replay_next)$/;"	l
s2_uncached_hits	src/main/scala/rocket/DCache.scala	/^    val s2_uncached_hits = RegEnable(s1_uncached_hits.asUInt, s1_valid_not_nacked)$/;"	l
s2_uncached_resp_addr	src/main/scala/rocket/DCache.scala	/^  val s2_uncached_resp_addr = Reg(s2_req.addr.cloneType) \/\/ should be DCE'd in synthesis$/;"	l
s2_update_meta	src/main/scala/rocket/DCache.scala	/^  val s2_update_meta = s2_hit_state =\/= s2_new_hit_state$/;"	l
s2_vaddr	src/main/scala/rocket/DCache.scala	/^  val s2_vaddr = Cat(RegEnable(s1_vaddr, s1_valid_not_nacked || s1_flush_valid) >> tagLSB, s2_req.addr(tagLSB-1, 0))$/;"	l
s2_vaddr	src/main/scala/rocket/ICache.scala	/^  val s2_vaddr = UInt(INPUT, vaddrBits) \/\/ delayed two cycles w.r.t. req$/;"	l
s2_valid	src/main/scala/groundtest/DummyPTW.scala	/^  val s2_valid = Reg(next = req_arb.io.out.valid && req_arb.io.out.bits.valid)$/;"	l
s2_valid	src/main/scala/rocket/DCache.scala	/^  val s2_valid = Reg(next=s1_valid_masked && !s1_sfence, init=Bool(false))$/;"	l
s2_valid	src/main/scala/rocket/Frontend.scala	/^  val s2_valid = RegInit(false.B)$/;"	l
s2_valid	src/main/scala/rocket/ICache.scala	/^  val s2_valid = RegNext(s1_valid && !io.s1_kill, Bool(false))$/;"	l
s2_valid	src/main/scala/rocket/NBDcache.scala	/^  val s2_valid = Reg(next=s1_valid_masked && !s1_sfence, init=Bool(false)) && !io.cpu.s2_xcpt.asUInt.orR$/;"	l
s2_valid	src/main/scala/rocket/PTW.scala	/^    val s2_valid = RegNext(s1_valid)$/;"	l
s2_valid_cached_miss	src/main/scala/rocket/DCache.scala	/^  val s2_valid_cached_miss = s2_valid_miss && !s2_uncached && !uncachedInFlight.asUInt.orR$/;"	l
s2_valid_correct	src/main/scala/rocket/DCache.scala	/^  val s2_valid_correct = s2_valid_hit_pre_data_ecc_and_waw && s2_correct && !io.cpu.s2_kill$/;"	l
s2_valid_data_error	src/main/scala/rocket/DCache.scala	/^  val s2_valid_data_error = s2_valid_hit_pre_data_ecc_and_waw && s2_data_error$/;"	l
s2_valid_flush_line	src/main/scala/rocket/DCache.scala	/^  val s2_valid_flush_line = s2_valid_hit_maybe_flush_pre_data_ecc_and_waw && s2_cmd_flush_line$/;"	l
s2_valid_hit	src/main/scala/rocket/DCache.scala	/^  val s2_valid_hit = s2_valid_hit_pre_data_ecc && !s2_data_error$/;"	l
s2_valid_hit_maybe_flush_pre_data_ecc_and_waw	src/main/scala/rocket/DCache.scala	/^  val s2_valid_hit_maybe_flush_pre_data_ecc_and_waw = s2_valid_masked && !s2_meta_error && s2_hit$/;"	l
s2_valid_hit_pre_data_ecc	src/main/scala/rocket/DCache.scala	/^  val s2_valid_hit_pre_data_ecc = s2_valid_hit_pre_data_ecc_and_waw && (!s2_waw_hazard || s2_store_merge)$/;"	l
s2_valid_hit_pre_data_ecc_and_waw	src/main/scala/rocket/DCache.scala	/^  val s2_valid_hit_pre_data_ecc_and_waw = s2_valid_hit_maybe_flush_pre_data_ecc_and_waw && s2_readwrite && !s2_no_alloc_hazard$/;"	l
s2_valid_masked	src/main/scala/rocket/DCache.scala	/^  val s2_valid_masked = s2_valid_no_xcpt && s2_not_nacked_in_s1$/;"	l
s2_valid_masked	src/main/scala/rocket/NBDcache.scala	/^  val s2_valid_masked = Wire(Bool())$/;"	l
s2_valid_miss	src/main/scala/rocket/DCache.scala	/^  val s2_valid_miss = s2_valid_masked && s2_readwrite && !s2_meta_error && !s2_hit$/;"	l
s2_valid_no_xcpt	src/main/scala/rocket/DCache.scala	/^  val s2_valid_no_xcpt = s2_valid && !io.cpu.s2_xcpt.asUInt.orR$/;"	l
s2_valid_not_killed	src/main/scala/rocket/DCache.scala	/^  val s2_valid_not_killed = s2_valid_masked && !io.cpu.s2_kill$/;"	l
s2_valid_not_nacked_in_s1	src/main/scala/rocket/DCache.scala	/^  val s2_valid_not_nacked_in_s1 = s2_valid && s2_not_nacked_in_s1$/;"	l
s2_valid_uncached_pending	src/main/scala/rocket/DCache.scala	/^  val s2_valid_uncached_pending = s2_valid_miss && s2_uncached && !uncachedInFlight.asUInt.andR$/;"	l
s2_valid_vec	src/main/scala/rocket/PTW.scala	/^    val s2_valid_vec = RegEnable(r_valid_vec, s1_valid)$/;"	l
s2_victim_or_hit_way	src/main/scala/rocket/DCache.scala	/^  val s2_victim_or_hit_way = Mux(s2_hit_valid, s2_hit_way, s2_victim_way)$/;"	l
s2_victim_state	src/main/scala/rocket/DCache.scala	/^  val s2_victim_state = Mux(s2_hit_valid, s2_hit_state, Mux1H(s2_victim_way, s2_meta_corrected).coh)$/;"	l
s2_victim_tag	src/main/scala/rocket/DCache.scala	/^  val s2_victim_tag = Mux(s2_valid_data_error || s2_valid_flush_line, s2_req.addr(paddrBits-1, tagLSB), Mux1H(s2_victim_way, s2_meta_corrected).tag)$/;"	l
s2_victim_way	src/main/scala/rocket/DCache.scala	/^  val s2_victim_way = UIntToOH(RegEnable(s1_victim_way, s1_valid_not_nacked || s1_flush_valid))$/;"	l
s2_victimize	src/main/scala/rocket/DCache.scala	/^  val s2_victimize = s2_want_victimize && !s2_cannot_victimize$/;"	l
s2_want_victimize	src/main/scala/rocket/DCache.scala	/^  val s2_want_victimize = Bool(!usingDataScratchpad) && (s2_valid_cached_miss || s2_valid_flush_line || s2_valid_data_error || s2_flush_valid)$/;"	l
s2_waw_hazard	src/main/scala/rocket/DCache.scala	/^  val s2_waw_hazard = RegEnable(s1_waw_hazard, s1_valid_not_nacked)$/;"	l
s2_way_en	src/main/scala/rocket/DCache.scala	/^        val s2_way_en = RegEnable(Mux(s1_word_en(i), s1_data_way, 0.U), en)$/;"	l
s2_way_mux	src/main/scala/rocket/ICache.scala	/^  val s2_way_mux = Mux1H(s2_tag_hit, s2_dout)$/;"	l
s2_way_words	src/main/scala/rocket/DCache.scala	/^        val s2_way_words = (0 until nWays).map(j => RegEnable(s1_way_words(j)(i), en && word_en(i)))$/;"	l
s2_word_idx	src/main/scala/rocket/DCache.scala	/^  val s2_word_idx = s2_req.addr.extract(log2Up(rowBits\/8)-1, log2Up(wordBytes))$/;"	l
s2_word_idx	src/main/scala/rocket/NBDcache.scala	/^  val s2_word_idx = if(doNarrowRead) UInt(0) else s2_req.addr(log2Up(rowWords*coreDataBytes)-1,log2Up(wordBytes))$/;"	l
s2_write	src/main/scala/rocket/DCache.scala	/^  val s2_write = isWrite(s2_req.cmd)$/;"	l
s2_xcpt	src/main/scala/rocket/Frontend.scala	/^  val s2_xcpt = s2_tlb_resp.ae.inst || s2_tlb_resp.pf.inst || s2_tlb_resp.gf.inst$/;"	l
s2_xcpt	src/main/scala/rocket/HellaCache.scala	/^  val s2_xcpt = (new HellaCacheExceptions).asInput$/;"	l
s3_req	src/main/scala/rocket/NBDcache.scala	/^  val s3_req = Reg(io.cpu.req.bits)$/;"	l
s3_slaveValid	src/main/scala/rocket/ICache.scala	/^  val s3_slaveValid = RegNext(false.B)$/;"	l
s3_valid	src/main/scala/rocket/NBDcache.scala	/^  val s3_valid = Reg(init=Bool(false))$/;"	l
s3_way	src/main/scala/rocket/NBDcache.scala	/^  val s3_way = Reg(Bits())$/;"	l
s4_req	src/main/scala/rocket/NBDcache.scala	/^  val s4_req = RegEnable(s3_req, s3_valid && metaReadArb.io.out.valid)$/;"	l
s4_valid	src/main/scala/rocket/NBDcache.scala	/^  val s4_valid = Reg(next=s3_valid, init=Bool(false))$/;"	l
sLen	src/main/scala/tile/Core.scala	/^  def sLen = coreParams.sLen$/;"	m
sLen	src/main/scala/tile/Core.scala	/^  def sLen: Int = 0$/;"	m
s_idle	src/main/scala/rocket/NBDcache.scala	/^  val s_idle :: s_mem_access :: s_mem_ack :: s_resp :: Nil = Enum(Bits(), 4)$/;"	l
s_idle	src/main/scala/tile/LazyRoCC.scala	/^  val s_idle :: s_acq :: s_gnt :: s_check :: s_resp :: Nil = Enum(5)$/;"	l
s_idle	src/main/scala/tile/LazyRoCC.scala	/^  val s_idle :: s_ptw_req :: s_ptw_resp :: s_resp :: Nil = Enum(4)$/;"	l
s_idle	src/main/scala/unittest/UnitTest.scala	/^  val s_idle :: s_start :: s_busy :: s_done :: Nil = Enum(Bits(), 4)$/;"	l
s_interrupts	src/main/scala/rocket/CSR.scala	/^  val s_interrupts = Mux(nmie && (reg_mstatus.v || reg_mstatus.prv < PRV.S || (reg_mstatus.prv === PRV.S && reg_mstatus.sie)), pending_interrupts & read_mideleg & ~read_hideleg, UInt(0))$/;"	l
s_invalid	src/main/scala/rocket/NBDcache.scala	/^  val s_invalid :: s_wb_req :: s_wb_resp :: s_meta_clear :: s_refill_req :: s_refill_resp :: s_meta_write_req :: s_meta_write_resp :: s_drain_rpq :: Nil = Enum(UInt(), 9)$/;"	l
s_ready	src/main/scala/rocket/DCache.scala	/^  val s_ready :: s_voluntary_writeback :: s_probe_rep_dirty :: s_probe_rep_clean :: s_probe_retry :: s_probe_rep_miss :: s_voluntary_write_meta :: s_probe_write_meta :: s_dummy :: s_voluntary_release :: Nil = Enum(UInt(), 10)$/;"	l
s_ready	src/main/scala/rocket/Multiplier.scala	/^  val s_ready :: s_neg_inputs :: s_mul :: s_div :: s_dummy :: s_neg_output :: s_done_mul :: s_done_div :: Nil = Enum(8)$/;"	l
s_ready	src/main/scala/rocket/PTW.scala	/^  val s_ready :: s_req :: s_wait1 :: s_dummy1 :: s_wait2 :: s_wait3 :: s_dummy2 :: s_fragment_superpage :: Nil = Enum(UInt(), 8)$/;"	l
s_ready	src/main/scala/rocket/ScratchpadSlavePort.scala	/^    val s_ready :: s_wait1 :: s_wait2 :: s_replay :: s_init :: s_grant :: Nil = Enum(UInt(), 6)$/;"	l
s_ready	src/main/scala/rocket/TLB.scala	/^  val s_ready :: s_request :: s_wait :: s_wait_invalidate :: Nil = Enum(UInt(), 4)$/;"	l
sack	src/main/scala/tilelink/Broadcast.scala	/^      val sack = filter.io.response.fire() && leaveB && others =\/= 0.U$/;"	l
safe	src/main/scala/util/AsyncQueue.scala	/^  val safe = params.safe.option(new AsyncBundleSafety)$/;"	l
safeRegNext	src/main/scala/diplomacy/BundleBridge.scala	/^  def safeRegNext[T <: Data](x: T): T = {$/;"	m
sameClock	src/main/scala/diplomacy/ClockDomain.scala	/^  def sameClock = this match {$/;"	m
samePage	src/main/scala/rocket/BTB.scala	/^  val samePage = page(r_btb_update.bits.pc) === page(update_target)$/;"	l
sameSupport	src/main/scala/tilelink/AddressAdjuster.scala	/^  def sameSupport(local: Seq[TLSlaveParameters], remote: Seq[TLSlaveParameters]): (Boolean, Seq[AddressSet]) = {$/;"	m
same_cycle_resp	src/main/scala/tilelink/Monitor.scala	/^      val same_cycle_resp = bundle.a.valid && a_first && edge.isRequest(bundle.a.bits) && (bundle.a.bits.source === bundle.d.bits.source)$/;"	l
same_cycle_resp	src/main/scala/tilelink/Monitor.scala	/^      val same_cycle_resp = bundle.c.valid && c_first && edge.isRequest(bundle.c.bits) && (bundle.c.bits.source === bundle.d.bits.source)$/;"	l
sanitizeNaN	src/main/scala/tile/FPU.scala	/^  def sanitizeNaN(x: UInt, t: FType): UInt = {$/;"	m
satp	src/main/scala/rocket/Instructions.scala	/^  val satp = 0x180$/;"	l
satp	src/main/scala/rocket/PTW.scala	/^  val satp = Mux(arb.io.out.bits.bits.vstage1, io.dpath.vsatp, io.dpath.ptbr)$/;"	l
satp	src/main/scala/rocket/TLB.scala	/^  val satp = Mux(priv_v, io.ptw.vsatp, io.ptw.ptbr)$/;"	l
satp_initial_count	src/main/scala/rocket/PTW.scala	/^        val satp_initial_count = pgLevels - minPgLevels - satp.additionalPgLevels$/;"	l
satp_valid_modes	src/main/scala/rocket/CSR.scala	/^    val satp_valid_modes = 0 +: (minPgLevels to pgLevels).map(new PTBR().pgLevelsToMode(_))$/;"	l
saturated	src/main/scala/tile/Interrupts.scala	/^      val saturated = count >= quiescenceCycles.U$/;"	l
save	src/main/scala/util/Broadcaster.scala	/^    val save = Reg(typ)$/;"	l
saved	src/main/scala/diplomacy/LazyModule.scala	/^    val saved = LazyModule.scope$/;"	l
saved	src/main/scala/util/Repeater.scala	/^  val saved = Reg(gen.cloneType)$/;"	l
sb2tlOpt	src/main/scala/devices/debug/Debug.scala	/^  val sb2tlOpt = cfg.hasBusMaster.option(LazyModule(new SBToTL()))$/;"	l
sbAccessError	src/main/scala/devices/debug/SBA.scala	/^    val sbAccessError = (SBCSFieldsReg.sbaccess === 0.U) && (SBCSFieldsReg.sbaccess8   =\/= 1.U) ||$/;"	l
sbAddrWidth	src/main/scala/devices/debug/Debug.scala	/^  def sbAddrWidth = 12$/;"	m
sbAlignmentError	src/main/scala/devices/debug/SBA.scala	/^    val sbAlignmentError = (SBCSFieldsReg.sbaccess === 1.U) && (compareAddr(0)   =\/= 0.U) ||$/;"	l
sbBusy	src/main/scala/devices/debug/SBA.scala	/^    val sbBusy = (sb2tl.module.io.sbStateOut =\/= SystemBusAccessState.Idle.id.U)$/;"	l
sbErrorReg	src/main/scala/devices/debug/SBA.scala	/^    val sbErrorReg = Reg(Vec(4, UInt(1.W)))$/;"	l
sbIdWidth	src/main/scala/devices/debug/Debug.scala	/^  def sbIdWidth   = 10 $/;"	m
sbState	src/main/scala/devices/debug/SBA.scala	/^    val sbState = RegInit(0.U)$/;"	l
sbStateOut	src/main/scala/devices/debug/SBA.scala	/^      val sbStateOut   = Output(UInt(log2Ceil(SystemBusAccessState.maxId).W))$/;"	l
sbaccess	src/main/scala/devices/debug/dm_registers.scala	/^  val sbaccess = UInt(3.W)$/;"	l
sbaccess128	src/main/scala/devices/debug/dm_registers.scala	/^  val sbaccess128 = Bool()$/;"	l
sbaccess16	src/main/scala/devices/debug/dm_registers.scala	/^  val sbaccess16 = Bool()$/;"	l
sbaccess32	src/main/scala/devices/debug/dm_registers.scala	/^  val sbaccess32 = Bool()$/;"	l
sbaccess64	src/main/scala/devices/debug/dm_registers.scala	/^  val sbaccess64 = Bool()$/;"	l
sbaccess8	src/main/scala/devices/debug/dm_registers.scala	/^  val sbaccess8 = Bool()$/;"	l
sbaccessWrEn	src/main/scala/devices/debug/SBA.scala	/^    val sbaccessWrEn       = WireInit(false.B)$/;"	l
sbaddrfields	src/main/scala/devices/debug/SBA.scala	/^    val sbaddrfields: Seq[Seq[RegField]] = SBADDRESSFieldsReg.zipWithIndex.map { case(a,i) =>$/;"	l
sbasize	src/main/scala/devices/debug/dm_registers.scala	/^  val sbasize = UInt(7.W)$/;"	l
sbautoincrement	src/main/scala/devices/debug/dm_registers.scala	/^  val sbautoincrement = Bool()$/;"	l
sbautoincrementWrEn	src/main/scala/devices/debug/SBA.scala	/^    val sbautoincrementWrEn= WireInit(false.B)$/;"	l
sbbusy	src/main/scala/devices/debug/dm_registers.scala	/^  val sbbusy = Bool()$/;"	l
sbbusyerror	src/main/scala/devices/debug/dm_registers.scala	/^  val sbbusyerror = Bool()$/;"	l
sbbusyerrorWrEn	src/main/scala/devices/debug/SBA.scala	/^    val sbbusyerrorWrEn    = WireInit(false.B)$/;"	l
sbcsfields	src/main/scala/devices/debug/SBA.scala	/^    val sbcsfields = RegFieldGroup("sbcs", Some("system bus access control and status"), Seq($/;"	l
sbdatafields	src/main/scala/devices/debug/SBA.scala	/^    val sbdatafields: Seq[Seq[RegField]] = SBDATAFieldsReg.zipWithIndex.map { case(d,i) =>$/;"	l
sbe	src/main/scala/rocket/CSR.scala	/^  val sbe = Bool()$/;"	l
sberror	src/main/scala/devices/debug/dm_registers.scala	/^  val sberror = UInt(3.W)$/;"	l
sberrorWrEn	src/main/scala/devices/debug/SBA.scala	/^    val sberrorWrEn        = WireInit(false.B)$/;"	l
sboard	src/main/scala/rocket/RocketCore.scala	/^  val sboard = new Scoreboard(32, true)$/;"	l
sboard_clr	src/main/scala/tile/FPU.scala	/^  val sboard_clr = Bool(OUTPUT)$/;"	l
sboard_clra	src/main/scala/tile/FPU.scala	/^  val sboard_clra = UInt(OUTPUT, 5)$/;"	l
sboard_set	src/main/scala/tile/FPU.scala	/^  val sboard_set = Bool(OUTPUT)$/;"	l
sbreadonaddr	src/main/scala/devices/debug/dm_registers.scala	/^  val sbreadonaddr = Bool()$/;"	l
sbreadonaddrWrEn	src/main/scala/devices/debug/SBA.scala	/^    val sbreadonaddrWrEn   = WireInit(false.B)$/;"	l
sbreadondata	src/main/scala/devices/debug/dm_registers.scala	/^  val sbreadondata = Bool()$/;"	l
sbreadondataWrEn	src/main/scala/devices/debug/SBA.scala	/^    val sbreadondataWrEn   = WireInit(false.B)$/;"	l
sbus	src/main/scala/subsystem/BaseSubsystem.scala	/^  val sbus = tlBusWrapperLocationMap(SBUS)$/;"	l
sbus	src/main/scala/subsystem/SystemBus.scala	/^    val sbus = LazyModule(new SystemBus(this, loc.name))$/;"	l
sbversion	src/main/scala/devices/debug/dm_registers.scala	/^  val sbversion = UInt(3.W)$/;"	l
sc_time_stamp	src/main/resources/csrc/emulator.cc	/^double sc_time_stamp()$/;"	f
scala	src/main/scala/linting/LintAnnotation.scala	/^    val scala = "(.*\\\\.scala).*".r$/;"	l
scalaAPI	src/main/scala/linting/rule/LintRule.scala	/^  def scalaAPI(files: Seq[String]): String = {$/;"	m
scalaFiles	src/main/scala/linting/LintException.scala	/^        val scalaFiles          = lintErrors.flatMap(_.getScalaFiles).distinct$/;"	l
scanInsns	src/main/scala/rocket/Frontend.scala	/^    def scanInsns(idx: Int, prevValid: Bool, prevBits: UInt, prevTaken: Bool): Bool = {$/;"	m
scatter	src/main/scala/util/MultiPortQueue.scala	/^  def scatter[T <: Data](sparse: Seq[DecoupledIO[T]], dense: LanePositionedDecoupledIO[T], offset: UInt = 0.U): Unit = {$/;"	m
scause	src/main/scala/rocket/Instructions.scala	/^  val scause = 0x142$/;"	l
scause_mask	src/main/scala/rocket/CSR.scala	/^    val scause_mask = ((BigInt(1) << (xLen-1)) + 31).U \/* only implement 5 LSBs and MSB *\/$/;"	l
scie	src/main/scala/rocket/IDecode.scala	/^  val scie = Bool()$/;"	l
scontext	src/main/scala/rocket/Breakpoint.scala	/^    val scontext = Input(UInt(coreParams.scontextWidth.W))$/;"	l
scontext	src/main/scala/rocket/CSR.scala	/^  val scontext = Output(UInt(coreParams.scontextWidth.W))$/;"	l
scontext	src/main/scala/rocket/Instructions.scala	/^  val scontext = 0x5a8$/;"	l
scontextWidth	src/main/scala/tile/Core.scala	/^  val scontextWidth: Int$/;"	l
scope	src/main/scala/diplomacy/LazyModule.scala	/^    val scope = LazyModule(new SimpleLazyModule with LazyScope {$/;"	l
scope	src/main/scala/diplomacy/LazyModule.scala	/^    val scope = LazyModule.scope.get$/;"	l
scope	src/main/scala/diplomacy/Nodes.scala	/^  val scope: Option[LazyModule] = LazyModule.scope$/;"	l
scope	src/main/scala/diplomacy/Resources.scala	/^    val scope = BindingScope.active.get$/;"	l
scope	src/main/scala/diplomacy/Resources.scala	/^    val scope = BindingScope.find()$/;"	l
score	src/main/scala/diplomacy/AddressDecoder.scala	/^        val score = bitScore(result)$/;"	l
scounteren	src/main/scala/rocket/Instructions.scala	/^  val scounteren = 0x106$/;"	l
scratchpadBase	src/main/scala/rocket/ICache.scala	/^  val scratchpadBase = outer.icacheParams.itimAddr.map { dummy =>$/;"	l
scratchpadHit	src/main/scala/rocket/ICache.scala	/^    val scratchpadHit = scratchpadWayValid(i) &&$/;"	l
scratchpadLine	src/main/scala/rocket/ICache.scala	/^  def scratchpadLine(addr: UInt) = addr(untagBits+log2Ceil(nWays)-1, blockOffBits)$/;"	m
scratchpadMax	src/main/scala/rocket/ICache.scala	/^  val scratchpadMax = tl_in.map(tl => Reg(UInt(width = log2Ceil(nSets * (nWays - 1)))))$/;"	l
scratchpadOn	src/main/scala/rocket/ICache.scala	/^  val scratchpadOn = RegInit(false.B)$/;"	l
scratchpadWay	src/main/scala/rocket/ICache.scala	/^  def scratchpadWay(addr: UInt) = addr.extract(untagBits+log2Ceil(nWays)-1, untagBits)$/;"	m
scratchpadWayValid	src/main/scala/rocket/ICache.scala	/^  def scratchpadWayValid(way: UInt) = way < nWays - 1$/;"	m
sd	src/main/scala/rocket/CSR.scala	/^  val sd = Bool()$/;"	l
sd	src/main/scala/rocket/RVC.scala	/^    def sd = inst(Cat(ldImm >> 5, rs2p, rs1p, 3.U(3.W), ldImm(4,0), 0x23.U(7.W)), rs2p, rs1p, rs2p)$/;"	m
sd_rv32	src/main/scala/rocket/CSR.scala	/^  val sd_rv32 = Bool()$/;"	l
sdq	src/main/scala/rocket/NBDcache.scala	/^  val sdq = Mem(cfg.nSDQ, io.req.bits.data)$/;"	l
sdq_alloc_id	src/main/scala/rocket/NBDcache.scala	/^  val sdq_alloc_id = PriorityEncoder(~sdq_val(cfg.nSDQ-1,0))$/;"	l
sdq_enq	src/main/scala/rocket/NBDcache.scala	/^  val sdq_enq = io.req.valid && io.req.ready && cacheable && isWrite(io.req.bits.cmd)$/;"	l
sdq_id	src/main/scala/rocket/NBDcache.scala	/^  val sdq_id = UInt(width = log2Up(cfg.nSDQ))$/;"	l
sdq_rdy	src/main/scala/rocket/NBDcache.scala	/^  val sdq_rdy = !sdq_val.andR$/;"	l
sdq_val	src/main/scala/rocket/NBDcache.scala	/^  val sdq_val = Reg(init=Bits(0, cfg.nSDQ))$/;"	l
sdsp	src/main/scala/rocket/RVC.scala	/^    def sdsp = inst(Cat(sdspImm >> 5, rs2, sp, 3.U(3.W), sdspImm(4,0), 0x23.U(7.W)), rd, sp, rs2)$/;"	m
sdspImm	src/main/scala/rocket/RVC.scala	/^  def sdspImm = Cat(x(9,7), x(12,10), 0.U(3.W))$/;"	m
sec_rdy	src/main/scala/rocket/NBDcache.scala	/^  val sec_rdy = idx_match &&$/;"	l
sec_rdy	src/main/scala/rocket/NBDcache.scala	/^  var sec_rdy = Bool(false)$/;"	l
secdec	src/main/scala/util/ECC.scala	/^    val secdec = sec.decode(x(x.getWidth-2,0))$/;"	l
secondary	src/main/scala/diplomacy/AddressRange.scala	/^    val secondary = (x.size - this.size).signum$/;"	l
secondary	src/main/scala/diplomacy/Parameters.scala	/^    val secondary = (x.end - this.end).signum$/;"	l
secondary	src/main/scala/diplomacy/Parameters.scala	/^    val secondary = (x.mask - this.mask).signum \/\/ largest mask first$/;"	l
secondary_miss	src/main/scala/rocket/NBDcache.scala	/^    val secondary_miss = Bool(OUTPUT)$/;"	l
sectorHit	src/main/scala/rocket/TLB.scala	/^  def sectorHit(vpn: UInt) = valid.orR && sectorTagMatch(vpn)$/;"	m
sectorTagMatch	src/main/scala/rocket/TLB.scala	/^  def sectorTagMatch(vpn: UInt) = ((tag ^ vpn) >> nSectors.log2) === 0$/;"	m
sector_hits	src/main/scala/rocket/TLB.scala	/^  val sector_hits = sectored_entries(memIdx).map(_.sectorHit(vpn))$/;"	l
sectored_entries	src/main/scala/rocket/TLB.scala	/^  val sectored_entries = Reg(Vec(cfg.nSets, Vec(cfg.nWays \/ cfg.nSectors, new TLBEntry(cfg.nSectors, false, false))))$/;"	l
sectored_plru	src/main/scala/rocket/TLB.scala	/^  val sectored_plru = new SetAssocLRU(cfg.nSets, sectored_entries.head.size, "plru")$/;"	l
secure	src/main/scala/amba/package.scala	/^    val secure     = Bool() \/\/ secure_master=true,  normal=false$/;"	l
seen	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^    var seen = Set[String]()$/;"	l
seip	src/main/scala/rocket/CSR.scala	/^  val seip = Bool()$/;"	l
seip	src/main/scala/subsystem/HasTiles.scala	/^  val seip = if(outer.seipNode.isDefined) Some(IO(Vec(outer.seipNode.get.out.size, Bool()).asInput)) else None$/;"	l
seip	src/main/scala/tile/Interrupts.scala	/^    val seip = if (core.seip.isDefined) Seq(core.seip.get) else Nil$/;"	l
seip	src/main/scala/tile/Interrupts.scala	/^    val seip = if (usingSupervisor) Seq(9) else Nil$/;"	l
seip	src/main/scala/tile/Interrupts.scala	/^  val seip = usingSupervisor.option(Bool())$/;"	l
seipNode	src/main/scala/subsystem/HasTiles.scala	/^  val seipNode = p(PLICKey) match {$/;"	l
sel	src/main/scala/amba/apb/Xbar.scala	/^      val sel = Vec(route_addrs.map(seq => seq.map(_.contains(in.paddr)).reduce(_ || _)))$/;"	l
sel	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^      val sel = (pmps.map(_.a) zip (lt.init zip lt.tail)) map { case (a, (l, r)) => a(0) && !l && r }$/;"	l
sel	src/main/scala/tilelink/SRAM.scala	/^    val sel    = Mux(d_wb, d_lanes,   Mux(r_replay, r_lanes,   a_lanes))$/;"	l
sel	src/main/scala/tilelink/WidthWidget.scala	/^          val sel = sourceMap(d.source)$/;"	l
sel	src/main/scala/tilelink/WidthWidget.scala	/^      val sel = in.bits match {$/;"	l
sel	src/main/scala/util/ReduceOthers.scala	/^          val sel = out.head$/;"	l
sel_alu1	src/main/scala/rocket/IDecode.scala	/^  val sel_alu1 = Bits(width = A1_X.getWidth)$/;"	l
sel_alu2	src/main/scala/rocket/IDecode.scala	/^  val sel_alu2 = Bits(width = A2_X.getWidth)$/;"	l
sel_imm	src/main/scala/rocket/IDecode.scala	/^  val sel_imm = Bits(width = IMM_X.getWidth)$/;"	l
sel_vec	src/main/scala/formal/FormalUtils.scala	/^    val sel_vec = sel_ret.map( (sel_ret_idv: Tuple2[T,R]) => {$/;"	l
select	src/main/scala/tilelink/Atomics.scala	/^  val select = Mux(io.write, UInt(1), Vec(Seq($/;"	l
select	src/main/scala/tilelink/Fuzzer.scala	/^  val select = ~(leftOR(bitmap) << 1) & bitmap$/;"	l
select	src/main/scala/util/Frequency.scala	/^    var select = when (randVal < UInt(firstFreq)) { result := firstVal }$/;"	l
select	src/main/scala/util/IDPool.scala	/^  val select = RegInit(0.U(idWidth.W))$/;"	l
select1	src/main/scala/util/IDPool.scala	/^  val select1 = PriorityEncoder(bitmap1)$/;"	l
selectDcd	src/main/scala/util/ReadyValidCancel.scala	/^  val selectDcd          = Wire(Vec(n, Bool()))$/;"	l
selectDynamic	src/main/scala/util/Location.scala	/^  def selectDynamic[A](portname: String): Location[A] = new Location[A](s"${name}_${portname}")$/;"	m
selectEnc_q	src/main/scala/util/ReadyValidCancel.scala	/^  val selectEnc_q = RegEnable(selectEnc_in, 0.U, selectEnc_en)$/;"	l
selectTracker	src/main/scala/tilelink/Broadcast.scala	/^      val selectTracker = Mux(matchTracker, matchTrackers, allocTracker)$/;"	l
selected	src/main/scala/diplomacy/AddressDecoder.scala	/^      val selected = recurse(givenPartitions, bitsToTry.reverse.toSeq)$/;"	l
selectedHaltedStatus	src/main/scala/devices/debug/Debug.scala	/^    val selectedHaltedStatus = Mux((selectedHartReg >> 5) > numHaltedStatus.U, 0.U, haltedStatus(selectedHartReg >> 5))$/;"	l
selectedHartReg	src/main/scala/devices/debug/Debug.scala	/^    val selectedHartReg = Reg(UInt(p(MaxHartIdBits).W))$/;"	l
selectedRegFieldName	src/main/scala/util/Annotations.scala	/^    val selectedRegFieldName = regField.desc.map(_.name).getOrElse(anonRegFieldName)$/;"	l
selects	src/main/scala/tilelink/Atomics.scala	/^  val selects = io.a.mask.asBools.map(b => Mux(b, select, UInt(0)))$/;"	l
selfAddress	src/main/scala/diplomacy/DeviceTree.scala	/^    val selfAddress = x.value.getOrElse("#address-cells", Nil).headOption.flatMap(getInt)$/;"	l
selfSize	src/main/scala/diplomacy/DeviceTree.scala	/^    val selfSize    = x.value.getOrElse("#size-cells",    Nil).headOption.flatMap(getInt)$/;"	l
send	src/main/scala/tilelink/ToAHB.scala	/^      val send = Wire(init = reg)$/;"	l
send	src/main/scala/tilelink/ToAHB.scala	/^  val send   = Bool() \/\/ => full+data$/;"	l
sendFreshReq	src/main/scala/groundtest/TraceGen.scala	/^  val sendFreshReq = Wire(Bool())$/;"	l
send_hint	src/main/scala/rocket/ICache.scala	/^  val send_hint = RegInit(false.B)$/;"	l
sent_d	src/main/scala/tilelink/Broadcast.scala	/^  val sent_d  = RegInit(true.B)$/;"	l
sepc	src/main/scala/rocket/Instructions.scala	/^  val sepc = 0x141$/;"	l
seqIn_ACancel	src/main/scala/tilelink/Xbar.scala	/^    val seqIn_ACancel = seqIn.map(sIn => (TLBundle_ACancel(sIn._1), sIn._2))$/;"	l
seqOut_ACancel	src/main/scala/tilelink/Xbar.scala	/^    val seqOut_ACancel = seqOut.map(sOut => (Wire(new TLBundle_ACancel(sOut._1.params)), sOut._2))$/;"	l
serial	src/main/scala/diplomacy/Nodes.scala	/^  val serial: Int = BaseNode.serial$/;"	l
serialize	src/main/scala/util/Annotations.scala	/^  def serialize(base: BigInt, name: String, mapping: RegField.Map*): String = {$/;"	m
serialize_cHeader	src/main/scala/util/PlusArg.scala	/^  def serialize_cHeader(): String =$/;"	m
server_timeout_sec	scripts/RocketSim.py	/^    server_timeout_sec = 60*60$/;"	v	class:RocketSim
server_timeout_sec	scripts/RocketSim32.py	/^    server_timeout_sec = 60*60$/;"	v	class:RocketSim
server_timeout_sec	scripts/RocketSim64.py	/^    server_timeout_sec = 60*60$/;"	v	class:RocketSim
set	src/main/scala/rocket/RocketCore.scala	/^    def set(en: Bool, addr: UInt): Unit = update(en, _next | mask(en, addr))$/;"	m
set	src/main/scala/tilelink/Fuzzer.scala	/^  val set = Wire(init = UInt(0, width = numIds))$/;"	l
set	src/main/scala/util/LanePositionedQueue.scala	/^      val set = Mux(deq_lmask(i),$/;"	l
setArg	src/main/scala/linting/rule/LintRule.scala	/^    val setArg = files.map(f => s""""$f"""").mkString(",")$/;"	l
setDataDefault	src/main/scala/util/BundleMap.scala	/^  def setDataDefault(x: Data): Unit = default(x.asInstanceOf[T])$/;"	m
setDataDefault	src/main/scala/util/BundleMap.scala	/^  def setDataDefault(x: Data): Unit$/;"	m
setImm	src/main/scala/devices/debug/Debug.scala	/^      def setImm(imm: Int) : Unit = {$/;"	m
setMask	src/main/scala/rocket/Events.scala	/^    val setMask = (BigInt(1) << eventSetIdBits) - 1$/;"	l
setPropLib	src/main/scala/util/Property.scala	/^  def setPropLib(lib: BasePropertyLibrary): Unit = this.synchronized {$/;"	m
set_fs_dirty	src/main/scala/rocket/CSR.scala	/^  val set_fs_dirty = Wire(init = io.set_fs_dirty.getOrElse(false.B))$/;"	l
set_fs_dirty	src/main/scala/rocket/CSR.scala	/^  val set_fs_dirty = coreParams.haveFSDirty.option(Bool(INPUT))$/;"	l
set_left_older	src/main/scala/util/Replacement.scala	/^      val set_left_older      = !touch_way(log2Ceil(tree_nways)-1)$/;"	l
set_pins	src/main/resources/csrc/remote_bitbang.cc	/^void remote_bitbang_t::set_pins(char _tck, char _tms, char _tdi){$/;"	f	class:remote_bitbang_t
set_touch_ways	src/main/scala/util/Replacement.scala	/^      val set_touch_ways = (sets zip touch_ways).map { case (touch_set, touch_way) =>$/;"	l
set_vconfig	src/main/scala/rocket/CSR.scala	/^    val set_vconfig = Valid(new VConfig).flip$/;"	l
set_vs_dirty	src/main/scala/rocket/CSR.scala	/^    val set_vs_dirty = Input(Bool())$/;"	l
set_vs_dirty	src/main/scala/rocket/CSR.scala	/^  val set_vs_dirty = Wire(init = io.vector.map(_.set_vs_dirty).getOrElse(false.B))$/;"	l
set_vstart	src/main/scala/rocket/CSR.scala	/^    val set_vstart = Valid(vstart).flip$/;"	l
set_vxsat	src/main/scala/rocket/CSR.scala	/^    val set_vxsat = Bool().asInput$/;"	l
setresethaltreq	src/main/scala/devices/debug/dm_registers.scala	/^  val setresethaltreq = Bool()$/;"	l
setresethaltreqWrEn	src/main/scala/devices/debug/Debug.scala	/^    val setresethaltreqWrEn = WireInit(false.B)$/;"	l
sets	src/main/scala/rocket/Events.scala	/^    val sets = for ((sets, reducer) <- eventSets) yield {$/;"	l
sets	src/main/scala/rocket/Events.scala	/^    val sets = for (e <- eventSets) yield {$/;"	l
sext	src/main/scala/rocket/Multiplier.scala	/^  def sext(x: Bits, halfW: Bool, signed: Bool) = {$/;"	m
sextTo	src/main/scala/util/package.scala	/^    def sextTo(n: Int): UInt = {$/;"	m
sfence	src/main/scala/rocket/Frontend.scala	/^  val sfence = Valid(new SFenceReq)$/;"	l
sfence	src/main/scala/rocket/PTW.scala	/^  val sfence = Valid(new SFenceReq).flip$/;"	l
sfence	src/main/scala/rocket/TLB.scala	/^    val sfence = Valid(new SFenceReq).asInput$/;"	l
sfence	src/main/scala/rocket/TLB.scala	/^    val sfence = io.sfence.valid$/;"	l
sfma	src/main/scala/tile/FPU.scala	/^  val sfma = Module(new FPUFMAPipe(cfg.sfmaLatency, FType.S))$/;"	l
sgeip	src/main/scala/rocket/CSR.scala	/^  val sgeip = Bool()$/;"	l
sgeip_mask	src/main/scala/rocket/CSR.scala	/^    val sgeip_mask = WireInit(0.U.asTypeOf(new MIP))$/;"	l
shadow	src/main/scala/tilelink/RAMModel.scala	/^            val shadow = Wire(init = d_shadow(i))$/;"	l
shadow	src/main/scala/tilelink/RAMModel.scala	/^      val shadow = Seq.fill(beatBytes) { Mem(endAddressHi, new TLRAMModel.ByteMonitor(params)) }$/;"	l
shadow_wen	src/main/scala/tilelink/RAMModel.scala	/^      val shadow_wen = Wire(init = Fill(beatBytes, wipe))$/;"	l
shamt	src/main/scala/rocket/ALU.scala	/^      val shamt = Cat(io.in2(5) & (io.dw === DW_64), io.in2(4,0))$/;"	l
shamt	src/main/scala/rocket/IBuf.scala	/^        val shamt = pcWordBits + nICReady$/;"	l
shamt	src/main/scala/rocket/RVC.scala	/^  def shamt = Cat(x(12), x(6,2))$/;"	m
shared	src/main/scala/tilelink/Broadcast.scala	/^  val shared  = Reg(Bool())$/;"	l
shift	src/main/scala/diplomacy/Parameters.scala	/^  def shift(x: Int) = IdRange(start+x, end+x)$/;"	m
shift	src/main/scala/diplomacy/Resources.scala	/^    def shift(x: Seq[AddressSet]) = x.map(a => a.copy(base = a.base + offset))$/;"	m
shift	src/main/scala/jtag/JtagShifter.scala	/^  val shift = Bool()  \/\/ advance the scan chain on clock high$/;"	l
shift	src/main/scala/rocket/NBDcache.scala	/^    val shift = Cat(beatOffset(addr), UInt(0, wordOffBits + log2Up(wordBytes)))$/;"	l
shift	src/main/scala/tilelink/RAMModel.scala	/^      val shift        = log2Ceil(beatBytes)$/;"	l
shiftInsnLeft	src/main/scala/rocket/IBuf.scala	/^  def shiftInsnLeft(in: UInt, dist: UInt) = {$/;"	m
shiftInsnRight	src/main/scala/rocket/IBuf.scala	/^  def shiftInsnRight(in: UInt, dist: UInt) = {$/;"	m
shift_logic	src/main/scala/rocket/ALU.scala	/^  val shift_logic = (isCmp(io.fn) && slt) | logic | shout$/;"	l
shifted	src/main/scala/rocket/AMOALU.scala	/^      val shifted = Mux(addr(i), res(2*pos-1,pos), res(pos-1,0))$/;"	l
shifted	src/main/scala/util/package.scala	/^      val shifted = x << (1 << w) >> n(w-1, 0)$/;"	l
shifted	src/main/scala/util/package.scala	/^      val shifted = x << n(w-1, 0)$/;"	l
shiftedBuf	src/main/scala/rocket/IBuf.scala	/^        val shiftedBuf = shiftInsnRight(buf.data(n*coreInstBits-1, coreInstBits), (nReady-1)(log2Ceil(n-1)-1,0))$/;"	l
shin	src/main/scala/rocket/ALU.scala	/^  val shin = Mux(io.fn === FN_SR  || io.fn === FN_SRA, shin_r, Reverse(shin_r))$/;"	l
shin_hi	src/main/scala/rocket/ALU.scala	/^      val shin_hi = Mux(io.dw === DW_64, io.in1(63,32), shin_hi_32)$/;"	l
shin_hi_32	src/main/scala/rocket/ALU.scala	/^      val shin_hi_32 = Fill(32, isSub(io.fn) && io.in1(31))$/;"	l
shouldBeInlined	src/main/scala/diplomacy/LazyModule.scala	/^  def shouldBeInlined: Boolean = nodes.forall(_.circuitIdentity) && children.forall(_.shouldBeInlined)$/;"	m
should_pstore_drain	src/main/scala/rocket/DCache.scala	/^  def should_pstore_drain(truly: Bool) = {$/;"	m
shout	src/main/scala/rocket/ALU.scala	/^  val shout = Mux(io.fn === FN_SR || io.fn === FN_SRA, shout_r, UInt(0)) |$/;"	l
shout_l	src/main/scala/rocket/ALU.scala	/^  val shout_l = Reverse(shout_r)$/;"	l
shout_r	src/main/scala/rocket/ALU.scala	/^  val shout_r = (Cat(isSub(io.fn) & shin(xLen-1), shin).asSInt >> shamt)(xLen-1,0)$/;"	l
shrinker	src/main/scala/tilelink/SourceShrinker.scala	/^    val shrinker = LazyModule(new TLSourceShrinker(maxInFlight))$/;"	l
sie	src/main/scala/rocket/CSR.scala	/^  val sie = Bool()$/;"	l
sie	src/main/scala/rocket/Instructions.scala	/^  val sie = 0x104$/;"	l
sie_mask	src/main/scala/rocket/CSR.scala	/^  val sie_mask = {$/;"	l
sig	src/main/scala/tile/FPU.scala	/^      val sig = UInt((ieeeWidth-expWidth-1).W)$/;"	l
sign	src/main/scala/rocket/Multiplier.scala	/^    val sign = signed && Mux(halfW, x(w\/2-1), x(w-1))$/;"	l
sign	src/main/scala/rocket/RocketCore.scala	/^    val sign = Mux(sel === IMM_Z, SInt(0), inst(31).asSInt)$/;"	l
sign	src/main/scala/tile/FPU.scala	/^      val sign = Bool()$/;"	l
sign	src/main/scala/tile/FPU.scala	/^    val sign = x(sig + exp)$/;"	l
sign	src/main/scala/tilelink/Atomics.scala	/^  def sign(x: UInt): Bool = (Cat(x.asBools.grouped(8).map(_.last).toList.reverse) & signBit).orR()$/;"	m
signBit	src/main/scala/tilelink/Atomics.scala	/^  val signBit = io.a.mask & Cat(UInt(1), ~io.a.mask >> 1)$/;"	l
signNum	src/main/scala/tile/FPU.scala	/^  val signNum = Mux(in.bits.rm(1), in.bits.in1 ^ in.bits.in2, Mux(in.bits.rm(0), ~in.bits.in2, in.bits.in2))$/;"	l
signSel	src/main/scala/tilelink/AtomicAutomata.scala	/^        val signSel = ~(~mask | (mask >> 1))$/;"	l
sign_a	src/main/scala/tilelink/Atomics.scala	/^  val sign_a = sign(io.a.data)$/;"	l
sign_d	src/main/scala/tilelink/Atomics.scala	/^  val sign_d = sign(io.data_in)$/;"	l
sign_s	src/main/scala/tilelink/Atomics.scala	/^  val sign_s = sign(sum)$/;"	l
signalNamePrefix	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  def signalNamePrefix: String$/;"	m
signbit_a	src/main/scala/tilelink/AtomicAutomata.scala	/^        val signbit_a = ((signbits_a & signSel) << 1)(beatBytes-1, 0)$/;"	l
signbit_d	src/main/scala/tilelink/AtomicAutomata.scala	/^        val signbit_d = ((signbits_d & signSel) << 1)(beatBytes-1, 0)$/;"	l
signbits_a	src/main/scala/tilelink/AtomicAutomata.scala	/^        val signbits_a = Cat(Seq.tabulate(beatBytes) { i => a_a(8*i+7,8*i+7) } .reverse)$/;"	l
signbits_d	src/main/scala/tilelink/AtomicAutomata.scala	/^        val signbits_d = Cat(Seq.tabulate(beatBytes) { i => a_d(8*i+7,8*i+7) } .reverse)$/;"	l
signed	src/main/scala/rocket/AMOALU.scala	/^      val signed = {$/;"	l
signed	src/main/scala/rocket/HellaCache.scala	/^  val signed = Bool()$/;"	l
signed	src/main/scala/rocket/TLB.scala	/^    val signed = !guestPA$/;"	l
signext_a	src/main/scala/tilelink/AtomicAutomata.scala	/^        val signext_a = FillInterleaved(8, leftOR(signbit_a))$/;"	l
signext_d	src/main/scala/tilelink/AtomicAutomata.scala	/^        val signext_d = FillInterleaved(8, leftOR(signbit_d))$/;"	l
sigs	src/main/scala/rocket/IDecode.scala	/^    val sigs = Seq(legal, fp, rocc, branch, jal, jalr, rxs2, rxs1, scie, sel_alu2,$/;"	l
sigs	src/main/scala/tile/FPU.scala	/^    val sigs = new FPUCtrlSigs().asOutput$/;"	l
sigs	src/main/scala/tile/FPU.scala	/^  val sigs = Seq(s.ldst, s.wen, s.ren1, s.ren2, s.ren3, s.swap12,$/;"	l
silentDrop	src/main/scala/rocket/HellaCache.scala	/^  def silentDrop: Boolean = !acquireBeforeRelease$/;"	m
sim_dir	emulator/Makefile	/^sim_dir = .$/;"	m
sim_dir	vsim/Makefile	/^sim_dir = .$/;"	m
similar	src/main/scala/rocket/Decode.scala	/^  def similar(x: Term) = {$/;"	m
simple	src/main/scala/diplomacy/Resources.scala	/^    val simple = parents.size == 1 && !alwaysExtended$/;"	l
simple	src/main/scala/util/MuxLiteral.scala	/^    val simple = cases.filter { case (k, v) => !default.isLit || !v.isLit || v.litValue != default.litValue }$/;"	l
simplified	src/main/scala/tilelink/Parameters.scala	/^    val simplified = supportCases.map { case (k, seq) => k -> AddressSet.unify(seq.map(_.widen(~mask)).distinct) }$/;"	l
simplify	src/main/scala/rocket/TLBPermissions.scala	/^      def simplify(x: Seq[AddressSet]) = AddressSet.unify(x.map(_.widen(~decisionMask)).distinct)$/;"	m
singleRegression	src/main/scala/system/RocketTestSuite.scala	/^  val singleRegression = new RegressionTestSuite(LinkedHashSet("rv64ui-p-simple"))$/;"	l
singleStep	src/main/scala/rocket/CSR.scala	/^  val singleStep = Bool(OUTPUT)$/;"	l
singleton	src/main/scala/util/AsyncQueue.scala	/^  def singleton(sync: Int = 3, safe: Boolean = true) = AsyncQueueParams(1, sync, safe, false)$/;"	m
sink	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val sink = LazyModule(new AXI4AsyncCrossingSink(params))$/;"	l
sink	src/main/scala/amba/axi4/Credited.scala	/^    val sink = LazyModule(new AXI4CreditedSink(delay))$/;"	l
sink	src/main/scala/diplomacy/BundleBridge.scala	/^    val sink = BundleBridgeSink[T]()$/;"	l
sink	src/main/scala/tilelink/Arbiter.scala	/^  val sink = Wire(DecoupledIO(UInt(log2Ceil(numSources).W)))$/;"	l
sink	src/main/scala/tilelink/AsyncCrossing.scala	/^  val sink = LazyModule(new TLAsyncCrossingSink(params))$/;"	l
sink	src/main/scala/tilelink/Bundles.scala	/^  val sink    = UInt(width = params.sinkBits)   \/\/ from$/;"	l
sink	src/main/scala/tilelink/Bundles.scala	/^  val sink = UInt(width = params.sinkBits) \/\/ to$/;"	l
sink	src/main/scala/tilelink/Credited.scala	/^    val sink = LazyModule(new TLCreditedSink(delay))$/;"	l
sink	src/main/scala/tilelink/Monitor.scala	/^    val sink    = Reg(UInt())$/;"	l
sink	src/main/scala/tilelink/RationalCrossing.scala	/^  val sink = LazyModule(new TLRationalCrossingSink(direction))$/;"	l
sink	src/main/scala/util/AsyncQueue.scala	/^    val sink = Module(new AsyncQueueSink(chiselTypeOf(x.mem(0)), x.params.copy(sync = sync)))$/;"	l
sink	src/main/scala/util/AsyncQueue.scala	/^  val sink   = Module(new AsyncQueueSink  (gen, params))$/;"	l
sink	src/main/scala/util/RationalCrossing.scala	/^    val sink = Module(new RationalCrossingSink(chiselTypeOf(x.bits0), direction))$/;"	l
sink	src/main/scala/util/RationalCrossing.scala	/^  val sink   = Input(UInt(2.W))$/;"	l
sink	src/main/scala/util/RationalCrossing.scala	/^  val sink   = Module(new RationalCrossingSink(gen, direction))$/;"	l
sinkBits	src/main/scala/tilelink/Monitor.scala	/^      val sinkBits = log2Ceil(edge.manager.endSinkId)$/;"	l
sinkIds	src/main/scala/tilelink/CacheCork.scala	/^  val sinkIds = params.sinkIds$/;"	l
sinkOpt	src/main/scala/diplomacy/BundleBridge.scala	/^    val sinkOpt = e.sink.genOpt.map(_())$/;"	l
sink_ACancel	src/main/scala/tilelink/Arbiter.scala	/^    val sink_ACancel = Wire(new ReadyValidCancel(chiselTypeOf(sink.bits)))$/;"	l
sink_extend	src/main/scala/util/AsyncQueue.scala	/^    val sink_extend  = Module(new AsyncValidSync(params.sync, "sink_extend"))$/;"	l
sink_ok	src/main/scala/tilelink/Monitor.scala	/^    val sink_ok = bundle.sink < edge.manager.endSinkId.U$/;"	l
sink_ready	src/main/scala/util/AsyncQueue.scala	/^  val sink_ready = WireInit(true.B)$/;"	l
sink_reset_n	src/main/scala/util/AsyncQueue.scala	/^  val sink_reset_n   = Input (Bool())$/;"	l
sink_threshold	src/main/scala/tilelink/AddressAdjuster.scala	/^      val sink_threshold = localEdge.manager.endSinkId.U \/\/ more likely to be 0 than remote.endSinkId$/;"	l
sink_valid	src/main/scala/util/AsyncQueue.scala	/^    val sink_valid   = Module(new AsyncValidSync(params.sync, "sink_valid"))$/;"	l
sink_valid_0	src/main/scala/util/AsyncQueue.scala	/^    val sink_valid_0    = Module(new AsyncValidSync(params.sync, "sink_valid_0"))$/;"	l
sink_valid_1	src/main/scala/util/AsyncQueue.scala	/^    val sink_valid_1    = Module(new AsyncValidSync(params.sync, "sink_valid_1"))$/;"	l
sinks	src/main/scala/tilelink/FIFOFixer.scala	/^      val sinks = if (compacted.exists(_.supportsAcquireB)) edgeOut.manager.endSinkId else 0$/;"	l
sintstatus	src/main/scala/rocket/Instructions.scala	/^  val sintstatus = 0x146$/;"	l
sip	src/main/scala/rocket/Instructions.scala	/^  val sip = 0x144$/;"	l
size	src/main/scala/amba/axi4/Bundles.scala	/^  val size   = UInt(width = params.sizeBits) \/\/ bytes in beat = 2^size$/;"	l
size	src/main/scala/devices/debug/DMI.scala	/^    val size = (log2Ceil(DMIConsts.dmiDataSize \/ 8)).U$/;"	l
size	src/main/scala/devices/debug/abstract_commands.scala	/^  val size = UInt(3.W)$/;"	l
size	src/main/scala/devices/tilelink/CLINT.scala	/^  def size = 0x10000$/;"	m
size	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val size = (((pmpRegisters.size * 8) + page - 1) \/ page) * page$/;"	l
size	src/main/scala/devices/tilelink/Plic.scala	/^  def size(maxHarts: Int): Int = {$/;"	m
size	src/main/scala/diplomacy/Parameters.scala	/^    val size = alignment$/;"	l
size	src/main/scala/diplomacy/Parameters.scala	/^  def size = end - start$/;"	m
size	src/main/scala/diplomaticobjectmodel/model/OMAddressing.scala	/^  def size: BigInt$/;"	m
size	src/main/scala/interrupts/Parameters.scala	/^  def size = end - start$/;"	m
size	src/main/scala/rocket/AMOALU.scala	/^  val size = typ(log2Up(log2Up(maxSize)+1)-1,0)$/;"	l
size	src/main/scala/rocket/Events.scala	/^  def size = events.size$/;"	m
size	src/main/scala/rocket/HellaCache.scala	/^  val size = Bits(width = log2Ceil(coreDataBytes.log2 + 1))$/;"	l
size	src/main/scala/rocket/ICache.scala	/^  val size = icacheParams.nSets * icacheParams.nWays * icacheParams.blockBytes$/;"	l
size	src/main/scala/rocket/PMP.scala	/^    val size = Input(UInt(log2Ceil(lgMaxSize + 1).W))$/;"	l
size	src/main/scala/rocket/PTW.scala	/^    val size = if (usingHypervisor) vaddrBits else paddrBits$/;"	l
size	src/main/scala/rocket/RocketCore.scala	/^      val size = Mux(ex_ctrl.rocc, log2Ceil(xLen\/8).U, ex_reg_mem_size)$/;"	l
size	src/main/scala/rocket/TLB.scala	/^  val size = UInt(width = log2Ceil(lgMaxSize + 1))$/;"	l
size	src/main/scala/tilelink/Broadcast.scala	/^  val size    = Reg(io.in_a.bits.size)$/;"	l
size	src/main/scala/tilelink/Bundles.scala	/^  val size    = UInt(width = params.sizeBits)$/;"	l
size	src/main/scala/tilelink/Edges.scala	/^        val size = this.size(bundle)$/;"	l
size	src/main/scala/tilelink/Edges.scala	/^  def size(x: TLDataChannel): UInt = {$/;"	m
size	src/main/scala/tilelink/Fuzzer.scala	/^    val size      = noiseMaker(sizeBits, inc, 0)$/;"	l
size	src/main/scala/tilelink/Monitor.scala	/^    val size    = Reg(UInt())$/;"	l
size	src/main/scala/tilelink/PatternPusher.scala	/^  def size: Int$/;"	m
size	src/main/scala/tilelink/RAMModel.scala	/^    val size    = UInt(width = params.sizeBits)$/;"	l
size	src/main/scala/tilelink/RegisterRouter.scala	/^     val size:        BigInt  = 4096,$/;"	l
size	src/main/scala/tilelink/RegisterRouter.scala	/^  val size   = UInt(width = sizeBits max 1)$/;"	l
size	src/main/scala/tilelink/RegisterRouter.scala	/^  val size = 1 << log2Ceil(1 + address.map(_.max).max - address.map(_.base).min)$/;"	l
size	src/main/scala/tilelink/ToAHB.scala	/^  val size   = UInt(width = params.bundle.sizeBits)$/;"	l
size	src/main/scala/tilelink/ToAXI4.scala	/^  val size   = UInt(width = 4)$/;"	l
size	src/main/scala/tilelink/WidthWidget.scala	/^      val size    = edgeIn.size(in.bits)$/;"	l
size	src/main/scala/util/Misc.scala	/^        val size = sizeOH(lgBytes - i)$/;"	l
size	src/main/scala/util/MultiWidthFifo.scala	/^    val size = Reg(init = UInt(0, log2Up(n * nBeats + 1)))$/;"	l
size	src/main/scala/util/MultiWidthFifo.scala	/^    val size = Reg(init = UInt(0, log2Up(n + 1)))$/;"	l
size	src/main/scala/util/RecordMap.scala	/^  def size = elements.size$/;"	m
sizeBits	src/main/scala/amba/ahb/Parameters.scala	/^  val sizeBits  = AHBParameters.sizeBits$/;"	l
sizeBits	src/main/scala/amba/ahb/Protocol.scala	/^  val sizeBits  = 3  \/\/ 8*2^s$/;"	l
sizeBits	src/main/scala/amba/axi4/Parameters.scala	/^  val sizeBits  = AXI4Parameters.sizeBits$/;"	l
sizeBits	src/main/scala/amba/axi4/Protocol.scala	/^  val sizeBits  = 3$/;"	l
sizeBits	src/main/scala/tilelink/Fuzzer.scala	/^    val sizeBits     = edge.bundle.sizeBits$/;"	l
sizeBits	src/main/scala/tilelink/RAMModel.scala	/^      val sizeBits     = edge.bundle.sizeBits$/;"	l
sizeIn	src/main/scala/devices/debug/SBA.scala	/^      val sizeIn       = Input(UInt(3.W))$/;"	l
sizeOH	src/main/scala/util/Misc.scala	/^    val sizeOH = UIntToOH(lgSize | 0.U(log2Up(beatBytes).W), log2Up(beatBytes)) | UInt(groupBy*2 - 1)$/;"	l
size_to_numfullbits	src/main/scala/tilelink/Monitor.scala	/^    def size_to_numfullbits(x: UInt): UInt = (1.U << x) - 1.U \/\/convert a number to that many full bits$/;"	m
sizes1	src/main/scala/amba/axi4/Fragmenter.scala	/^        val sizes1 = (supportedSizes1 zip slave.slaves.map(_.address)).filter(_._1 >= 0).groupBy(_._1).mapValues(_.flatMap(_._2))$/;"	l
skip	src/main/scala/tilelink/ToAHB.scala	/^      val skip = Bool(supportHints) && send.hint && (!d_valid || d_hint)$/;"	l
skipIndexes	src/main/scala/diplomacy/Resources.scala	/^  def skipIndexes(x: Int): Unit = { index += x }$/;"	m
slave	src/main/scala/amba/ahb/Test.scala	/^  val slave  = LazyModule(new AHBFuzzSlave)$/;"	l
slave	src/main/scala/amba/axi4/Fragmenter.scala	/^      val slave     = edgeOut.slave$/;"	l
slave	src/main/scala/amba/axi4/Test.scala	/^  val slave  = LazyModule(new AXI4FuzzSlave)$/;"	l
slave	src/main/scala/amba/axis/Parameters.scala	/^  val slave:      AXISSlavePortParameters,$/;"	l
slave	src/main/scala/subsystem/HasTiles.scala	/^  def slave: TilePortParamsLike$/;"	m
slaveNode	src/main/scala/groundtest/Tile.scala	/^  val slaveNode: TLInwardNode = TLIdentityNode()$/;"	l
slaveNode	src/main/scala/rocket/Frontend.scala	/^  val slaveNode = icache.slaveNode$/;"	l
slaveNode	src/main/scala/rocket/ICache.scala	/^  val slaveNode =$/;"	l
slaveNode	src/main/scala/tile/BaseTile.scala	/^  def slaveNode: TLInwardNode$/;"	m
slaveNode	src/main/scala/tile/RocketTile.scala	/^  val slaveNode = TLIdentityNode()$/;"	l
slaveSize	src/main/scala/amba/axi4/Xbar.scala	/^  val slaveSize = 0x1000$/;"	l
slaveTLBus	src/main/scala/tilelink/BusWrapper.scala	/^    val slaveTLBus  = context.locateTLBusWrapper(slave)$/;"	l
slave_clock	src/main/scala/regmapper/RegisterCrossing.scala	/^  val slave_clock    = Clock(INPUT)$/;"	l
slave_register	src/main/scala/regmapper/RegisterCrossing.scala	/^  val slave_register = gen.asInput$/;"	l
slave_register	src/main/scala/regmapper/RegisterCrossing.scala	/^  val slave_register = gen.asOutput$/;"	l
slave_reset	src/main/scala/regmapper/RegisterCrossing.scala	/^    val slave_reset = Bool(INPUT)$/;"	l
slave_reset	src/main/scala/regmapper/RegisterCrossing.scala	/^  val slave_reset    = Bool(INPUT)$/;"	l
slave_valid	src/main/scala/regmapper/RegisterCrossing.scala	/^  val slave_valid    = Bool(OUTPUT) \/\/ is high on 1st cycle slave_register has a new value$/;"	l
slaves	src/main/scala/amba/axi4/Fragmenter.scala	/^      val slaves    = slave.slaves$/;"	l
slaves	src/main/scala/amba/axi4/Xbar.scala	/^  val slaves = Seq.tabulate(nSlaves) { i => LazyModule(new AXI4RAM(AddressSet(slaveSize * i, slaveSize-1))) }$/;"	l
slaves	src/main/scala/amba/axis/Parameters.scala	/^  val slaves:        Seq[AXISSlaveParameters],$/;"	l
slaves	src/main/scala/tilelink/Parameters.scala	/^  val slaves:         Seq[TLSlaveParameters],$/;"	l
slaves	src/main/scala/tilelink/ToAXI4.scala	/^      val slaves  = edgeOut.slave.slaves$/;"	l
sliceMask	src/main/scala/devices/debug/Debug.scala	/^        val sliceMask = if (nComponents > ((ii*haWindowSize) + haWindowSize-1)) (BigInt(1) << haWindowSize) - 1  \/\/ All harts in this slice exist$/;"	l
slli	src/main/scala/rocket/RVC.scala	/^    def slli = inst(Cat(shamt, rd, 1.U(3.W), rd, 0x13.U(7.W)), rd, rd, rs2)$/;"	m
slow	src/main/scala/tilelink/RationalCrossing.scala	/^    val slow = Module(new Pow2ClockDivider(2))$/;"	l
slowBits	src/main/scala/prci/ResetWrangler.scala	/^    val slowBits = log2Ceil(slowTicks+1)$/;"	l
slowPeriodNs	src/main/scala/prci/ResetWrangler.scala	/^    val slowPeriodNs = 1000 \/ slowEdge.clock.get.freqMHz$/;"	l
slowTicks	src/main/scala/prci/ResetWrangler.scala	/^    val slowTicks = math.ceil(debounceNs\/slowPeriodNs).toInt max 7$/;"	l
slt	src/main/scala/rocket/ALU.scala	/^  val slt =$/;"	l
small	src/main/scala/subsystem/Configs.scala	/^    val small = RocketTileParams($/;"	l
small	src/main/scala/tilelink/Edges.scala	/^        val small = if (manager.maxTransfer <= manager.beatBytes) Bool(true) else size <= UInt(cutoff)$/;"	l
smallInt	src/main/scala/tile/FPU.scala	/^      val smallInt = in.bits.in1((minXLen << i) - 1, 0)$/;"	l
smallestCommonBit	src/main/scala/diplomacy/Parameters.scala	/^      val smallestCommonBit = largestDeltaBit + 1 \/\/ may not exist in x$/;"	l
snxti	src/main/scala/rocket/Instructions.scala	/^  val snxti = 0x145$/;"	l
soc	src/main/scala/diplomacy/Resources.scala	/^  val soc = new Device {$/;"	l
socCompat	src/main/scala/subsystem/BaseSubsystem.scala	/^    val socCompat = (model +: compat).map(s => ResourceString(s + "-soc"))$/;"	l
socket_fd	src/main/resources/csrc/remote_bitbang.h	/^  int socket_fd;$/;"	m	class:remote_bitbang_t
sortByType	src/main/scala/tilelink/ToAXI4.scala	/^  def sortByType(a: TLMasterParameters, b: TLMasterParameters): Boolean = {$/;"	m
sorted	src/main/scala/tilelink/AddressAdjuster.scala	/^    val sorted = m.address.sorted$/;"	l
source	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val source = LazyModule(new AXI4AsyncCrossingSource())$/;"	l
source	src/main/scala/amba/axi4/Credited.scala	/^    val source = LazyModule(new AXI4CreditedSource(delay))$/;"	l
source	src/main/scala/prci/TestClockSource.scala	/^      val source = edge.source.give.map(f =>$/;"	l
source	src/main/scala/rocket/NBDcache.scala	/^  val source = UInt(width = params.sourceBits)$/;"	l
source	src/main/scala/tilelink/AsyncCrossing.scala	/^  val source = LazyModule(new TLAsyncCrossingSource())$/;"	l
source	src/main/scala/tilelink/Broadcast.scala	/^    val source = Output(UInt()) \/\/ the source awaiting D response$/;"	l
source	src/main/scala/tilelink/Broadcast.scala	/^  val source  = Reg(io.in_a.bits.source)$/;"	l
source	src/main/scala/tilelink/Bundles.scala	/^  val source  = UInt(width = params.sourceBits) \/\/ from$/;"	l
source	src/main/scala/tilelink/Bundles.scala	/^  val source  = UInt(width = params.sourceBits) \/\/ to$/;"	l
source	src/main/scala/tilelink/Credited.scala	/^    val source = LazyModule(new TLCreditedSource(delay))$/;"	l
source	src/main/scala/tilelink/Edges.scala	/^  def source(x: TLDataChannel): UInt = {$/;"	m
source	src/main/scala/tilelink/Monitor.scala	/^    val source  = Reg(UInt())$/;"	l
source	src/main/scala/tilelink/RationalCrossing.scala	/^  val source = LazyModule(new TLRationalCrossingSource)$/;"	l
source	src/main/scala/tilelink/RegisterRouter.scala	/^  val source = UInt(width = sourceBits max 1)$/;"	l
source	src/main/scala/tilelink/ToAHB.scala	/^  val source = UInt(width = params.bundle.sourceBits)$/;"	l
source	src/main/scala/tilelink/ToAXI4.scala	/^  val source = UInt(width = sourceBits max 1)$/;"	l
source	src/main/scala/util/AsyncQueue.scala	/^    val source = Module(new AsyncQueueSource(chiselTypeOf(x.bits), params))$/;"	l
source	src/main/scala/util/AsyncQueue.scala	/^  val source = Module(new AsyncQueueSource(gen, params))$/;"	l
source	src/main/scala/util/RationalCrossing.scala	/^    val source = Module(new RationalCrossingSource(chiselTypeOf(x.bits), direction))$/;"	l
source	src/main/scala/util/RationalCrossing.scala	/^  val source = Module(new RationalCrossingSource(gen, direction))$/;"	l
source	src/main/scala/util/RationalCrossing.scala	/^  val source = Output(UInt(2.W))$/;"	l
sourceBits	src/main/scala/tilelink/Monitor.scala	/^    val sourceBits = log2Ceil(edge.client.endSourceId)$/;"	l
sourceId	src/main/scala/amba/axis/Parameters.scala	/^  val sourceId:   IdRange,$/;"	l
sourceId	src/main/scala/tilelink/Parameters.scala	/^  val sourceId:          IdRange) extends SimpleProduct$/;"	l
sourceIdMap	src/main/scala/tilelink/SourceShrinker.scala	/^        val sourceIdMap = Mem(maxInFlight, in.a.bits.source)$/;"	l
sourceInfo	src/main/scala/amba/axis/Parameters.scala	/^  val sourceInfo: SourceInfo)$/;"	l
sourceInfo	src/main/scala/diplomacy/LazyModule.scala	/^      implicit val sourceInfo: SourceInfo = c.info$/;"	l
sourceLine	src/main/scala/diplomacy/package.scala	/^  def sourceLine(sourceInfo: SourceInfo, prefix: String = " (", suffix: String = ")") = sourceInfo match {$/;"	m
sourceMap	src/main/scala/tilelink/WidthWidget.scala	/^      def sourceMap(source: UInt) = {$/;"	m
sourceOpt	src/main/scala/diplomacy/BundleBridge.scala	/^    val sourceOpt = e.source.genOpt.map(_())$/;"	l
sourceParameters	src/main/scala/prci/ClockParameters.scala	/^  val sourceParameters = ClockSourceParameters()$/;"	l
sourceStall	src/main/scala/tilelink/ToAXI4.scala	/^      val sourceStall = Wire(Vec(edgeIn.client.endSourceId, Bool()))$/;"	l
sourceTable	src/main/scala/tilelink/ToAXI4.scala	/^      val sourceTable = Wire(Vec(edgeIn.client.endSourceId, out.aw.bits.id))$/;"	l
source_c	src/main/scala/tilelink/AtomicAutomata.scala	/^        val source_c = Wire(in.a)$/;"	l
source_extend	src/main/scala/util/AsyncQueue.scala	/^    val source_extend = Module(new AsyncValidSync(params.sync, "source_extend"))$/;"	l
source_i	src/main/scala/tilelink/AtomicAutomata.scala	/^        val source_i = Wire(in.a)$/;"	l
source_ok	src/main/scala/tilelink/Monitor.scala	/^    val source_ok = edge.client.contains(bundle.source)$/;"	l
source_ready	src/main/scala/util/AsyncQueue.scala	/^  val source_ready = WireInit(true.B)$/;"	l
source_reset_n	src/main/scala/util/AsyncQueue.scala	/^  val source_reset_n = Output(Bool())$/;"	l
source_valid	src/main/scala/util/AsyncQueue.scala	/^    val source_valid  = Module(new AsyncValidSync(params.sync, "source_valid"))$/;"	l
source_valid_0	src/main/scala/util/AsyncQueue.scala	/^    val source_valid_0 = Module(new AsyncValidSync(params.sync, "source_valid_0"))$/;"	l
source_valid_1	src/main/scala/util/AsyncQueue.scala	/^    val source_valid_1 = Module(new AsyncValidSync(params.sync, "source_valid_1"))$/;"	l
sources	src/main/scala/devices/tilelink/Plic.scala	/^  lazy val sources = intnode.edges.in.map(_.source)$/;"	l
sources	src/main/scala/tile/BusErrorUnit.scala	/^    val sources = sources_and_desc.map(_.map(_._1))$/;"	l
sources	src/main/scala/tilelink/Arbiter.scala	/^  val sources = Wire(Vec(numSources, DecoupledIO(UInt(log2Ceil(numSources).W))))$/;"	l
sources	src/main/scala/tilelink/WidthWidget.scala	/^        val sources  = Reg(Vec(edgeIn.client.endSourceId, UInt((keepBits-dropBits).W)))$/;"	l
sourcesIn	src/main/scala/tilelink/Arbiter.scala	/^      val sourcesIn = pairs.map(_._2)$/;"	l
sources_ACancel	src/main/scala/tilelink/Arbiter.scala	/^    val sources_ACancel = sources.map(s => (s._1, ReadyValidCancel(s._2)))$/;"	l
sources_and_desc	src/main/scala/tile/BusErrorUnit.scala	/^    val sources_and_desc = io.errors.toErrorList$/;"	l
sources_enums	src/main/scala/tile/BusErrorUnit.scala	/^    val sources_enums = sources_and_desc.zipWithIndex.flatMap{case (s, i) => s.map {e => (BigInt(i) -> (e._2, e._3))}}$/;"	l
sp	src/main/scala/rocket/RVC.scala	/^  def sp = 2.U(5.W)$/;"	m
space	src/main/scala/util/Misc.scala	/^        val space = Mux(needSign, Str('-'), Str(' '))$/;"	l
sparse	src/main/scala/util/PrefixSum.scala	/^    val sparse = SparsePrefixSum(input)(_ ++ _, layers)$/;"	l
sparseL	src/main/scala/util/PrefixSum.scala	/^    val sparseL = SparsePrefixSum.layers(input.size)$/;"	l
specVersion	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^  def specVersion(extension: OMBaseInstructionSet, version: String): OMSpecification = OMSpecification(specifications(extension), version)$/;"	m
specVersion	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^  def specVersion(extension: OMExtensionType, version: String): OMSpecification = OMSpecification(specifications(extension), version)$/;"	m
specVersion	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^  def specVersion(extension: PrivilegedArchitectureExtension, version: String): OMSpecification = OMSpecification(specifications(extension), version)$/;"	m
specVersion	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  def specVersion(protocol: ProtocolType, subProtocol: SubProtocolType, version: String): Option[OMSpecification] = Some(OMSpecification(protocolSpecifications(protocol, subProtocol), version))$/;"	m
special_entry	src/main/scala/rocket/TLB.scala	/^  val special_entry = (!pageGranularityPMPs).option(Reg(new TLBEntry(1, true, false)))$/;"	l
specification	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  def specification: Option[OMSpecification]$/;"	m
specifications	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^  val specifications = Map[OMBaseInstructionSet, String]($/;"	l
specifications	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^  val specifications = Map[OMExtensionType, String]($/;"	l
specifications	src/main/scala/diplomaticobjectmodel/model/ISASpecifications.scala	/^  val specifications = Map[PrivilegedArchitectureExtension, String]($/;"	l
speculative	src/main/scala/rocket/Frontend.scala	/^  val speculative = Bool()$/;"	l
spie	src/main/scala/rocket/CSR.scala	/^  val spie = Bool()$/;"	l
splatMap	src/main/scala/tilelink/FIFOFixer.scala	/^    val splatMap = seq.map { m => m.fifoId match {$/;"	l
splice	src/main/scala/tilelink/WidthWidget.scala	/^    def splice[T <: TLDataChannel](edgeIn: TLEdge, in: DecoupledIO[T], edgeOut: TLEdge, out: DecoupledIO[T], sourceMap: UInt => UInt) = {$/;"	m
split	src/main/scala/tilelink/WidthWidget.scala	/^    def split[T <: TLDataChannel](edgeIn: TLEdge, in: DecoupledIO[T], edgeOut: TLEdge, out: DecoupledIO[T], sourceMap: UInt => UInt) = {$/;"	m
split	src/main/scala/util/Broadcaster.scala	/^    val split = Module(new Broadcaster(in.bits, n))$/;"	l
spp	src/main/scala/rocket/CSR.scala	/^  val spp = UInt(width = 1)$/;"	l
spv	src/main/scala/rocket/CSR.scala	/^  val spv = Bool()$/;"	l
spvp	src/main/scala/rocket/CSR.scala	/^  val spvp = Bool()$/;"	l
sq	src/main/scala/diplomacy/Parameters.scala	/^      val sq = Module(new ShiftQueue(x.bits, depth, flow=flow, pipe=pipe))$/;"	l
sq	src/main/scala/diplomacy/Parameters.scala	/^  def sq[T <: Data](x: DecoupledIO[T]) =$/;"	m
sqrt	src/main/scala/tile/FPU.scala	/^  val sqrt = Bool()$/;"	l
sr	src/main/scala/rocket/PTW.scala	/^  def sr(dummy: Int = 0) = leaf() && r$/;"	m
sr	src/main/scala/rocket/TLB.scala	/^  val sr = Bool()$/;"	l
srai	src/main/scala/rocket/RVC.scala	/^      def srai = srli | (1 << 30).U$/;"	m
sramLogicalTreeNode	src/main/scala/amba/ahb/SRAM.scala	/^        def sramLogicalTreeNode = new BusMemoryLogicalTreeNode($/;"	m
sramLogicalTreeNode	src/main/scala/amba/apb/SRAM.scala	/^        def sramLogicalTreeNode = new BusMemoryLogicalTreeNode($/;"	m
sramLogicalTreeNode	src/main/scala/amba/axi4/SRAM.scala	/^        def sramLogicalTreeNode = new BusMemoryLogicalTreeNode($/;"	m
sramLogicalTreeNode	src/main/scala/tilelink/SRAM.scala	/^        def sramLogicalTreeNode = new BusMemoryLogicalTreeNode($/;"	m
srams	src/main/scala/system/SimAXIMem.scala	/^  val srams = AddressSet.misaligned(base, size).map { aSet =>$/;"	l
srams	src/main/scala/util/Annotations.scala	/^  def srams($/;"	m
src	src/main/scala/devices/debug/DMI.scala	/^    val src  = WireInit(0.U)$/;"	l
src	src/main/scala/tilelink/Fuzzer.scala	/^    val src = idMap.io.alloc.bits holdUnless a_first$/;"	l
src_wrap	src/main/scala/formal/FormalUtils.scala	/^    val src_wrap = s"@[${proposed_src}]"$/;"	l
srli	src/main/scala/rocket/RVC.scala	/^      def srli = Cat(shamt, rs1p, 5.U(3.W), rs1p, 0x13.U(7.W))$/;"	m
sscratch	src/main/scala/rocket/Instructions.scala	/^  val sscratch = 0x140$/;"	l
sscratchcsw	src/main/scala/rocket/Instructions.scala	/^  val sscratchcsw = 0x148$/;"	l
sscratchcswl	src/main/scala/rocket/Instructions.scala	/^  val sscratchcswl = 0x149$/;"	l
sselect	src/main/scala/rocket/Breakpoint.scala	/^  val sselect = Bool()$/;"	l
sselectPos	src/main/scala/rocket/Breakpoint.scala	/^  def sselectPos: Int = 0$/;"	m
ssip	src/main/scala/rocket/CSR.scala	/^  val ssip = Bool()$/;"	l
sstatus	src/main/scala/rocket/Instructions.scala	/^  val sstatus = 0x100$/;"	l
st	src/main/scala/rocket/HellaCache.scala	/^  val st = Bool()$/;"	l
st	src/main/scala/rocket/TLB.scala	/^  val st = Bool()$/;"	l
stage1_bypass	src/main/scala/rocket/TLB.scala	/^  val stage1_bypass = Fill(entries.size, usingHypervisor && !stage1_en)$/;"	l
stage1_en	src/main/scala/rocket/TLB.scala	/^  val stage1_en = Bool(usingVM) && satp.mode(satp.mode.getWidth-1)$/;"	l
stage1_ppn	src/main/scala/rocket/PTW.scala	/^    val stage1_ppn = stage1_ppns(count)$/;"	l
stage1_ppns	src/main/scala/rocket/PTW.scala	/^    val stage1_ppns = (0 until pgLevels-1).map(i => Cat(pte.ppn(pte.ppn.getWidth-1, (pgLevels-i-1)*pgLevelBits), aux_pte.ppn((pgLevels-i-1)*pgLevelBits-1,0))) :+ pte.ppn$/;"	l
stage2	src/main/scala/rocket/PTW.scala	/^  val stage2 = Bool()$/;"	l
stage2	src/main/scala/rocket/PTW.scala	/^  val stage2 = Reg(Bool())$/;"	l
stage2_bypass	src/main/scala/rocket/TLB.scala	/^  val stage2_bypass = Fill(entries.size, !stage2_en)$/;"	l
stage2_en	src/main/scala/rocket/TLB.scala	/^  val stage2_en  = Bool(usingHypervisor) && priv_v && io.ptw.hgatp.mode(io.ptw.hgatp.mode.getWidth-1)$/;"	l
stage2_final	src/main/scala/rocket/PTW.scala	/^  val stage2_final = Reg(Bool())$/;"	l
stage2_pte_cache_addr	src/main/scala/rocket/PTW.scala	/^  val stage2_pte_cache_addr = if (!usingHypervisor) 0.U else {$/;"	l
stageOpts	src/main/scala/stage/phases/PreElaboration.scala	/^    val stageOpts = view[StageOptions](annotations)$/;"	l
stall	src/main/scala/devices/tilelink/BusBypass.scala	/^    val stall = (bypass =\/= io.bypass) && edgeIn.first(in.a)$/;"	l
stall	src/main/scala/devices/tilelink/MasterMux.scala	/^    val stall = (bypass =\/= io.bypass) && edgeOut.first(out.a)$/;"	l
stall	src/main/scala/rocket/CSR.scala	/^  val stall = Bool()$/;"	l
stall	src/main/scala/tilelink/FIFOFixer.scala	/^      val stall = stalls.foldLeft(Bool(false))(_||_)$/;"	l
stall	src/main/scala/tilelink/ToAXI4.scala	/^      val stall = sourceStall(in.a.bits.source) && a_first$/;"	l
stallLoad	src/main/scala/tile/LazyRoCC.scala	/^  val stallLoad = doLoad && !io.mem.req.ready$/;"	l
stallReg	src/main/scala/tile/LazyRoCC.scala	/^  val stallReg = busy(addr)$/;"	l
stallResp	src/main/scala/tile/LazyRoCC.scala	/^  val stallResp = doResp && !io.resp.ready$/;"	l
stalls	src/main/scala/tilelink/AddressAdjuster.scala	/^        val stalls = parentEdge.client.clients.filter(c => c.requestFifo && c.sourceId.size > 1).map { c =>$/;"	l
stalls	src/main/scala/tilelink/FIFOFixer.scala	/^      val stalls = edgeIn.client.clients.filter(c => c.requestFifo && c.sourceId.size > 1).map { c =>$/;"	l
standard	src/main/scala/rocket/CSR.scala	/^    val standard = Seq(11, 3, 7, 9, 1, 5, 10, 2, 6, 8, 0, 4)$/;"	l
standardKeys	src/main/scala/amba/axis/Bundles.scala	/^  def standardKeys(params: AXISBundleParameters) = {$/;"	m
standin	src/main/scala/diplomacy/CloneModule.scala	/^    val standin = new DefInstance(victim.sourceInfo, model, victim.ports) {$/;"	l
start	src/main/scala/unittest/UnitTest.scala	/^  val start = Bool(INPUT)$/;"	l
start	src/main/scala/util/Timer.scala	/^    val start   = Bool(INPUT)$/;"	l
start	src/main/scala/util/Timer.scala	/^    val start = Bool(INPUT)$/;"	l
start	src/main/scala/util/Timer.scala	/^    val start = Valid(UInt(width = log2Up(maxInflight))).flip$/;"	l
starts	src/main/scala/tilelink/Xbar.scala	/^    val starts = tuples.scanRight(0)(_._1 + _).tail \/\/ suffix-sum of the sizes = the start positions$/;"	l
state	src/main/scala/amba/axi4/Xbar.scala	/^    val state = RegInit(Vec.fill(sources.size)(Bool(false)))$/;"	l
state	src/main/scala/amba/axis/Xbar.scala	/^      val state = RegInit(VecInit.tabulate(sources.size)(_ => false.B))$/;"	l
state	src/main/scala/examples/ExampleDevice.scala	/^    val state = RegInit(0.U(params.num.W))$/;"	l
state	src/main/scala/jtag/JtagTap.scala	/^  val state = Output(JtagState.State.chiselType())  \/\/ state, transitions on TCK rising edge$/;"	l
state	src/main/scala/rocket/Multiplier.scala	/^  val state = RegInit(s_ready)$/;"	l
state	src/main/scala/rocket/NBDcache.scala	/^  val state = Reg(init = s_idle)$/;"	l
state	src/main/scala/rocket/NBDcache.scala	/^  val state = Reg(init=s_invalid)$/;"	l
state	src/main/scala/rocket/PTW.scala	/^  val state = Reg(init=s_ready)$/;"	l
state	src/main/scala/rocket/ScratchpadSlavePort.scala	/^    val state = Reg(init = s_init)$/;"	l
state	src/main/scala/rocket/TLB.scala	/^  val state = Reg(init=s_ready)$/;"	l
state	src/main/scala/tile/LazyRoCC.scala	/^  val state = RegInit(s_idle)$/;"	l
state	src/main/scala/tilelink/Arbiter.scala	/^      val state = RegInit(VecInit(Seq.fill(sources.size)(false.B)))$/;"	l
state	src/main/scala/tilelink/AtomicAutomata.scala	/^    val state = UInt(width = 2)$/;"	l
state	src/main/scala/tilelink/Metadata.scala	/^  val state = UInt(width = ClientStates.width)$/;"	l
state	src/main/scala/unittest/UnitTest.scala	/^  val state = Reg(init = s_idle)$/;"	l
state	src/main/scala/util/LCG.scala	/^  val state = Reg(UInt(width = 32))$/;"	l
state	src/main/scala/util/Replacement.scala	/^  val state = SyncReadMem(n_sets, UInt(logic.nBits.W))$/;"	l
state	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^    val state = CircuitState(Parser.parse(input), UnknownForm, annos)$/;"	l
state	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^        val state = renameNames(testCase)$/;"	l
stateMachine	src/main/scala/jtag/JtagTap.scala	/^    val stateMachine = Module(new JtagStateMachine)$/;"	l
state_read	src/main/scala/util/Replacement.scala	/^  def state_read = WireDefault(lfsr)$/;"	m
state_read	src/main/scala/util/Replacement.scala	/^  def state_read = WireDefault(state_reg)$/;"	m
state_read	src/main/scala/util/Replacement.scala	/^  def state_read: UInt$/;"	m
state_vec	src/main/scala/util/Replacement.scala	/^  val state_vec =$/;"	l
states_before_refill	src/main/scala/rocket/NBDcache.scala	/^  val states_before_refill = Seq(s_wb_req, s_wb_resp, s_meta_clear)$/;"	l
staticHasData	src/main/scala/tilelink/Edges.scala	/^  def staticHasData(bundle: TLChannel): Option[Boolean] = {$/;"	m
staticIdForMetadataUseOnly	src/main/scala/tile/BaseTile.scala	/^  def staticIdForMetadataUseOnly: Int = tileParams.hartId$/;"	m
staticLocal	src/main/scala/tilelink/AddressAdjuster.scala	/^      val staticLocal = AddressSet.unify(fixedLocalManagers.flatMap(_.address))$/;"	l
status	src/main/scala/groundtest/GroundTestSubsystem.scala	/^  val status = dontTouch(DebugCombiner(outer.tileStatusNodes.map(_.bundle)))$/;"	l
status	src/main/scala/groundtest/Tile.scala	/^  val status = outer.statusNode.bundle$/;"	l
status	src/main/scala/prci/ResetWrangler.scala	/^    val status = IO(Output(UInt(in.size.W)))$/;"	l
status	src/main/scala/rocket/Breakpoint.scala	/^    val status = Input(new MStatus())$/;"	l
status	src/main/scala/rocket/CSR.scala	/^  val status = new MStatus().asOutput$/;"	l
status	src/main/scala/rocket/PTW.scala	/^  val status = new MStatus().asInput$/;"	l
status	src/main/scala/tile/LazyRoCC.scala	/^  val status = new MStatus$/;"	l
statusNode	src/main/scala/groundtest/Tile.scala	/^  val statusNode = BundleBridgeSource(() => new GroundTestStatus)$/;"	l
stderr	src/main/resources/vsrc/TestDriver.v	/^  integer stderr = 32'h80000002;$/;"	r
step	src/main/scala/diplomacy/Parameters.scala	/^      val step =$/;"	l
step	src/main/scala/rocket/CSR.scala	/^  val step = Bool()$/;"	l
step	src/main/scala/tilelink/PatternPusher.scala	/^    val step   = RegInit(UInt(0, width = log2Ceil(pattern.size+1)))$/;"	l
step	src/main/scala/tilelink/ToAHB.scala	/^      val step = Wire(init = send)$/;"	l
stickyBusyReg	src/main/scala/devices/debug/DebugTransport.scala	/^  val stickyBusyReg = RegInit(false.B)$/;"	l
stickyNonzeroRespReg	src/main/scala/devices/debug/DebugTransport.scala	/^  val stickyNonzeroRespReg = RegInit(false.B)$/;"	l
stip	src/main/scala/rocket/CSR.scala	/^  val stip = Bool()$/;"	l
stop	src/main/scala/util/Timer.scala	/^    val stop    = Bool(INPUT)$/;"	l
stop	src/main/scala/util/Timer.scala	/^    val stop = Bool(INPUT)$/;"	l
stop	src/main/scala/util/Timer.scala	/^    val stop = Valid(UInt(width = log2Up(maxInflight))).flip$/;"	l
stop	src/main/scala/util/package.scala	/^    val stop = min(width, cap)$/;"	l
stopcycle	src/main/scala/rocket/CSR.scala	/^  val stopcycle = Bool()$/;"	l
stoptime	src/main/scala/rocket/CSR.scala	/^  val stoptime = Bool()$/;"	l
store	src/main/scala/tile/FPU.scala	/^    val store = Bits(width = fLen)$/;"	l
store	src/main/scala/tile/FPU.scala	/^  val store = (floatTypes.map(t => if (t == FType.H) Fill(maxType.ieeeWidth \/ minXLen,   ieee(in.in1)(15, 0).sextTo(minXLen))$/;"	l
storeBufferEmptyAfterLoad	src/main/scala/rocket/HellaCache.scala	/^  val storeBufferEmptyAfterLoad = Bool()$/;"	l
storeBufferEmptyAfterStore	src/main/scala/rocket/HellaCache.scala	/^  val storeBufferEmptyAfterStore = Bool()$/;"	l
store_access	src/main/scala/rocket/Instructions.scala	/^  val store_access = 0x7$/;"	l
store_data	src/main/scala/rocket/HellaCache.scala	/^  val store_data = Bits(width = coreDataBits)$/;"	l
store_data	src/main/scala/tile/FPU.scala	/^  val store_data = Bits(OUTPUT, fLen)$/;"	l
store_guest_page_fault	src/main/scala/rocket/Instructions.scala	/^  val store_guest_page_fault = 0x17$/;"	l
store_page_fault	src/main/scala/rocket/Instructions.scala	/^  val store_page_fault = 0xf$/;"	l
str	src/main/resources/csrc/comlog.cc	/^   std::string str;                 \/\/ the commit string to print out$/;"	m	struct:RobEntry	file:
str	src/main/scala/tilelink/Parameters.scala	/^    def str(x: TransferSizes, flag: String) = if (x.none) "" else flag$/;"	m
straddlesLowerBound	src/main/scala/rocket/PMP.scala	/^    val straddlesLowerBound = ((x >> lgMaxSize) ^ (prev.comparand >> lgMaxSize)) === 0 && (prev.comparand(lgMaxSize-1, 0) & ~x(lgMaxSize-1, 0)) =\/= 0$/;"	l
straddlesUpperBound	src/main/scala/rocket/PMP.scala	/^    val straddlesUpperBound = ((x >> lgMaxSize) ^ (comparand >> lgMaxSize)) === 0 && (comparand(lgMaxSize-1, 0) & (x(lgMaxSize-1, 0) | lsbMask)) =\/= 0$/;"	l
strb	src/main/scala/amba/axi4/Bundles.scala	/^  val strb = UInt(width = params.dataBits\/8)$/;"	l
strb	src/main/scala/amba/axis/Bundles.scala	/^  def strb = if (params.hasStrb) apply(AXISStrb) else ~0.U(params.strbBits.W)$/;"	m
strbBits	src/main/scala/amba/axis/Parameters.scala	/^  val strbBits = dataBits\/8$/;"	l
stringBuf	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^      val stringBuf = new StringBuilder(strings.next())$/;"	l
stringToDoctype	src/main/scala/util/PlusArg.scala	/^  implicit val stringToDoctype = new Doctypeable[String] { def toDoctype(a: Option[String]) = "STRING" }$/;"	l
stringTokenizer	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  implicit def stringTokenizer: Tokenizer[String] = tokenizer(StringToken(_: String))$/;"	m
stringify	src/main/scala/rocket/Decode.scala	/^  def stringify(s: Seq[Term], bits: Int) = s.map(t => (0 until bits).map(i => if ((t.mask & (1 << i)) != 0) "x" else ((t.value >> i) & 1).toString).reduceLeft(_+_).reverse).reduceLeft(_+" + "+_)$/;"	m
strings	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^      val strings = sc.parts.map(StringContext.treatEscapes).iterator$/;"	l
strongly_taken	src/main/scala/rocket/BTB.scala	/^  def strongly_taken = value === 1$/;"	m
stval	src/main/scala/rocket/Instructions.scala	/^  val stval = 0x143$/;"	l
stvec	src/main/scala/rocket/Instructions.scala	/^  val stvec = 0x105$/;"	l
stvt	src/main/scala/rocket/Instructions.scala	/^  val stvt = 0x107$/;"	l
sub	src/main/scala/rocket/RVC.scala	/^        val sub = Mux(x(6,5) === 0.U, (1 << 30).U, 0.U)$/;"	l
sub	src/main/scala/util/Misc.scala	/^        val sub = helper(i-1)$/;"	l
subWordBits	src/main/scala/rocket/HellaCache.scala	/^  def subWordBits = cacheParams.subWordBits.getOrElse(wordBits)$/;"	m
subWordBytes	src/main/scala/rocket/HellaCache.scala	/^  def subWordBytes = subWordBits \/ 8$/;"	m
subWrap	src/main/scala/util/package.scala	/^    def subWrap(y: UInt, n: Int): UInt = {$/;"	m
submodule_names	regression/Makefile	/^submodule_names = torture hardfloat api-config-chipsalliance $(ROCKETCHIP_ADDONS)$/;"	m
subset	src/main/scala/util/BundleMap.scala	/^  def subset(fn: BundleKeyBase => Boolean): BundleMap = {$/;"	m
subset_a	src/main/scala/diplomacy/AddressDecoder.scala	/^    val subset_a = port.filter(_.overlaps(addr_a))$/;"	l
subset_b	src/main/scala/diplomacy/AddressDecoder.scala	/^    val subset_b = port.filter(_.overlaps(addr_b))$/;"	l
subtract	src/main/scala/diplomacy/AddressRange.scala	/^  def subtract(from: Seq[AddressRange], take: Seq[AddressRange]): Seq[AddressRange] =$/;"	m
subtract	src/main/scala/diplomacy/AddressRange.scala	/^  def subtract(x: AddressRange) =$/;"	m
subtract	src/main/scala/diplomacy/Parameters.scala	/^  def subtract(x: AddressSet): Seq[AddressSet] = {$/;"	m
subtraction	src/main/scala/tilelink/AddressAdjuster.scala	/^        val subtraction = m.address.flatMap(a => a.subtract(params.region))$/;"	l
subtractor	src/main/scala/rocket/Multiplier.scala	/^  val subtractor = remainder(2*w,w) - divisor$/;"	l
success	src/main/resources/vsrc/TestDriver.v	/^  wire success;$/;"	n
success	src/main/scala/groundtest/GroundTestSubsystem.scala	/^  val success = IO(Bool(OUTPUT))$/;"	l
success	src/main/scala/rocket/PTW.scala	/^      val success = pte.v && !ae && !gf$/;"	l
success	src/main/scala/system/TestHarness.scala	/^    val success = Output(Bool())$/;"	l
suffix	src/main/scala/tilelink/RegisterRouter.scala	/^    var suffix = 0$/;"	l
suggestName	src/main/scala/diplomacy/LazyModule.scala	/^  def suggestName(x: Option[String]): this.type = {$/;"	m
suggestName	src/main/scala/diplomacy/LazyModule.scala	/^  def suggestName(x: String): this.type = suggestName(Some(x))$/;"	m
suggestedName	src/main/scala/diplomacy/LazyModule.scala	/^  lazy val suggestedName: String = suggestedNameVar.getOrElse(className)$/;"	l
suites	src/main/scala/system/RocketTestSuite.scala	/^                                       val suites = envsuites.map(t => s"$$(${t.makeTargetName})").mkString(" ")$/;"	l
sum	src/main/scala/rocket/CSR.scala	/^  val sum = Bool()$/;"	l
sum	src/main/scala/rocket/TLB.scala	/^  val sum = Mux(priv_v, io.ptw.gstatus.sum, io.ptw.status.sum)$/;"	l
sum	src/main/scala/tilelink/Atomics.scala	/^  val sum = (FillInterleaved(8, io.a.mask) & io.a.data) + inv_d$/;"	l
sum	src/main/scala/util/ScatterGather.scala	/^  val sum = RipplePrefixSum(0.U(bits.W) +: mask.asBools.map { x => WireInit(UInt(bits.W), x) })(_+_)$/;"	l
sumSquarePortsPerPartition	src/main/scala/diplomacy/AddressDecoder.scala	/^    val sumSquarePortsPerPartition = partitions.map(p => p.size * p.size).sum$/;"	l
sumSquareSetsPerPartition	src/main/scala/diplomacy/AddressDecoder.scala	/^    val sumSquareSetsPerPartition = partitions.map(_.map(p => p.size * p.size).sum).max$/;"	l
sup	src/main/scala/rocket/CSR.scala	/^    val sup = Wire(new MIP)$/;"	l
superKlass	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^      val superKlass = klass.getSuperclass$/;"	l
superpage_entries	src/main/scala/rocket/TLB.scala	/^  val superpage_entries = Reg(Vec(cfg.nSuperpageEntries, new TLBEntry(1, true, true)))$/;"	l
superpage_hits	src/main/scala/rocket/TLB.scala	/^  val superpage_hits = superpage_entries.map(_.hit(vpn, priv_v))$/;"	l
superpage_mask	src/main/scala/rocket/PTW.scala	/^    val superpage_mask = superpage_masks(Mux(stage2_final, max_count, (pgLevels-1).U))$/;"	l
superpage_masks	src/main/scala/rocket/PTW.scala	/^    val superpage_masks = (0 until pgLevels).map(i => ((BigInt(1) << pte.ppn.getWidth) - (BigInt(1) << (pgLevels-1-i)*pgLevelBits)).U)$/;"	l
superpage_plru	src/main/scala/rocket/TLB.scala	/^  val superpage_plru = new PseudoLRU(superpage_entries.size)$/;"	l
supervisorVPNBits	src/main/scala/rocket/TLB.scala	/^    val supervisorVPNBits = pgLevels * pgLevelBits$/;"	l
supervisor_ecall	src/main/scala/rocket/Instructions.scala	/^  val supervisor_ecall = 0x9$/;"	l
support1	src/main/scala/amba/axi4/Fragmenter.scala	/^        val support1 = Mux1H(sizes1.toList.map { case (v, a) => \/\/ maximum supported size-1 based on target address$/;"	l
supportCases	src/main/scala/tilelink/Parameters.scala	/^    val supportCases = groupByIntoSeq(slaves)(m => trim(member(m))).map { case (k: TransferSizes, vs: Seq[TLSlaveParameters]) =>$/;"	l
supportHartArray	src/main/scala/devices/debug/Debug.scala	/^    val supportHartArray = cfg.supportHartArray & (nComponents > 1)$/;"	l
supportHartArray	src/main/scala/devices/debug/Debug.scala	/^    val supportHartArray = cfg.supportHartArray && (nComponents > 1)    \/\/ no hart array if only one hart$/;"	l
supported_exceptions	src/main/scala/rocket/CSR.scala	/^    val supported_exceptions: BigInt = 0x8fe |$/;"	l
supported_high_interrupts	src/main/scala/rocket/CSR.scala	/^    val supported_high_interrupts = if (io.interrupts.buserror.nonEmpty && !usingNMI) UInt(BigInt(1) << CSR.busErrorIntCause) else 0.U$/;"	l
supports	src/main/scala/tilelink/Parameters.scala	/^  val supports:           TLMasterToSlaveTransferSizes,$/;"	l
supports	src/main/scala/tilelink/Parameters.scala	/^  val supports:          TLSlaveToMasterTransferSizes,$/;"	l
supportsAcquireB	src/main/scala/tilelink/Parameters.scala	/^  def supportsAcquireB:   TransferSizes = supports.acquireB$/;"	m
supportsAcquireBFast	src/main/scala/tilelink/Parameters.scala	/^  def supportsAcquireBFast   (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(false, _.supports.acquireB,   address, lgSize, range)$/;"	m
supportsAcquireBSafe	src/main/scala/tilelink/Parameters.scala	/^  def supportsAcquireBSafe   (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.supports.acquireB,   address, lgSize, range)$/;"	m
supportsAcquireT	src/main/scala/tilelink/Parameters.scala	/^  def supportsAcquireT:   TransferSizes = supports.acquireT$/;"	m
supportsAcquireTFast	src/main/scala/tilelink/Parameters.scala	/^  def supportsAcquireTFast   (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(false, _.supports.acquireT,   address, lgSize, range)$/;"	m
supportsAcquireTSafe	src/main/scala/tilelink/Parameters.scala	/^  def supportsAcquireTSafe   (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.supports.acquireT,   address, lgSize, range)$/;"	m
supportsArithmetic	src/main/scala/tilelink/Parameters.scala	/^  def supportsArithmetic: TransferSizes = supports.arithmetic$/;"	m
supportsArithmetic	src/main/scala/tilelink/Parameters.scala	/^  val supportsArithmetic = sourceIdHelper(_.supports.arithmetic) _$/;"	l
supportsArithmeticFast	src/main/scala/tilelink/Parameters.scala	/^  def supportsArithmeticFast (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(false, _.supports.arithmetic, address, lgSize, range)$/;"	m
supportsArithmeticSafe	src/main/scala/tilelink/Parameters.scala	/^  def supportsArithmeticSafe (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.supports.arithmetic, address, lgSize, range)$/;"	m
supportsGet	src/main/scala/tilelink/Parameters.scala	/^  def supportsGet:        TransferSizes = supports.get$/;"	m
supportsGet	src/main/scala/tilelink/Parameters.scala	/^  val supportsGet        = sourceIdHelper(_.supports.get)        _$/;"	l
supportsGetFast	src/main/scala/tilelink/Parameters.scala	/^  def supportsGetFast        (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(false, _.supports.get,        address, lgSize, range)$/;"	m
supportsGetSafe	src/main/scala/tilelink/Parameters.scala	/^  def supportsGetSafe        (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.supports.get,        address, lgSize, range)$/;"	m
supportsHint	src/main/scala/tilelink/Parameters.scala	/^  def supportsHint:       TransferSizes = supports.hint$/;"	m
supportsHint	src/main/scala/tilelink/Parameters.scala	/^  val supportsHint       = sourceIdHelper(_.supports.hint)       _$/;"	l
supportsHintFast	src/main/scala/tilelink/Parameters.scala	/^  def supportsHintFast       (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(false, _.supports.hint,       address, lgSize, range)$/;"	m
supportsHintSafe	src/main/scala/tilelink/Parameters.scala	/^  def supportsHintSafe       (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.supports.hint,       address, lgSize, range)$/;"	m
supportsLogical	src/main/scala/tilelink/Parameters.scala	/^  def supportsLogical:    TransferSizes = supports.logical$/;"	m
supportsLogical	src/main/scala/tilelink/Parameters.scala	/^  val supportsLogical    = sourceIdHelper(_.supports.logical)    _$/;"	l
supportsLogicalFast	src/main/scala/tilelink/Parameters.scala	/^  def supportsLogicalFast    (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(false, _.supports.logical,    address, lgSize, range)$/;"	m
supportsLogicalSafe	src/main/scala/tilelink/Parameters.scala	/^  def supportsLogicalSafe    (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.supports.logical,    address, lgSize, range)$/;"	m
supportsMinCover	src/main/scala/amba/axis/Parameters.scala	/^  val supportsMinCover = TransferSizes.mincover(slaves.map(_.supportsSizes))$/;"	l
supportsProbe	src/main/scala/tilelink/Parameters.scala	/^  val supportsProbe      = sourceIdHelper(_.supports.probe)      _$/;"	l
supportsPutFull	src/main/scala/tilelink/Parameters.scala	/^  def supportsPutFull:    TransferSizes = supports.putFull$/;"	m
supportsPutFull	src/main/scala/tilelink/Parameters.scala	/^  val supportsPutFull    = sourceIdHelper(_.supports.putFull)    _$/;"	l
supportsPutFullFast	src/main/scala/tilelink/Parameters.scala	/^  def supportsPutFullFast    (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(false, _.supports.putFull,    address, lgSize, range)$/;"	m
supportsPutFullSafe	src/main/scala/tilelink/Parameters.scala	/^  def supportsPutFullSafe    (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.supports.putFull,    address, lgSize, range)$/;"	m
supportsPutPartial	src/main/scala/tilelink/Parameters.scala	/^  def supportsPutPartial: TransferSizes = supports.putPartial$/;"	m
supportsPutPartial	src/main/scala/tilelink/Parameters.scala	/^  val supportsPutPartial = sourceIdHelper(_.supports.putPartial) _$/;"	l
supportsPutPartialFast	src/main/scala/tilelink/Parameters.scala	/^  def supportsPutPartialFast (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(false, _.supports.putPartial, address, lgSize, range)$/;"	m
supportsPutPartialSafe	src/main/scala/tilelink/Parameters.scala	/^  def supportsPutPartialSafe (address: UInt, lgSize: UInt, range: Option[TransferSizes] = None) = addressHelper(true, _.supports.putPartial, address, lgSize, range)$/;"	m
supportsSizes	src/main/scala/amba/axis/Parameters.scala	/^  val supportsSizes: TransferSizes,$/;"	l
supports_flush	src/main/scala/rocket/DCache.scala	/^  val supports_flush = outer.flushOnFenceI || coreParams.haveCFlush$/;"	l
suppressCorruptOnGrantData	src/main/scala/tile/CustomCSRs.scala	/^  def suppressCorruptOnGrantData = getOrElse(chickenCSR, _.value(9), false.B)$/;"	m
svalue	src/main/scala/rocket/Breakpoint.scala	/^  val svalue  = UInt(svalueBits.W)$/;"	l
svalueBits	src/main/scala/rocket/Breakpoint.scala	/^  def svalueBits: Int = if (xLen == 32) coreParams.scontextWidth min 16 else coreParams.scontextWidth min 34$/;"	m
svaluePos	src/main/scala/rocket/Breakpoint.scala	/^  def svaluePos : Int = 2$/;"	m
sw	src/main/scala/rocket/PTW.scala	/^  def sw(dummy: Int = 0) = leaf() && w && d$/;"	m
sw	src/main/scala/rocket/RVC.scala	/^    def sw = inst(Cat(lwImm >> 5, rs2p, rs1p, 2.U(3.W), lwImm(4,0), 0x23.U(7.W)), rs2p, rs1p, rs2p)$/;"	m
sw	src/main/scala/rocket/TLB.scala	/^  val sw = Bool()$/;"	l
swap12	src/main/scala/tile/FPU.scala	/^  val swap12 = Bool()$/;"	l
swap23	src/main/scala/tile/FPU.scala	/^  val swap23 = Bool()$/;"	l
swizzle	src/main/scala/util/ECC.scala	/^  def swizzle(x: UInt) = Cat(false.B, x)$/;"	m
swizzle	src/main/scala/util/ECC.scala	/^  def swizzle(x: UInt) = par.swizzle(sec.swizzle(x))$/;"	m
swizzle	src/main/scala/util/ECC.scala	/^  def swizzle(x: UInt) = x$/;"	m
swizzle	src/main/scala/util/ECC.scala	/^  def swizzle(x: UInt) = {$/;"	m
swizzle	src/main/scala/util/ECC.scala	/^  def swizzle(x: UInt): UInt$/;"	m
swizzledNaN	src/main/scala/tile/FPU.scala	/^    val swizzledNaN = Cat($/;"	l
swsp	src/main/scala/rocket/RVC.scala	/^    def swsp = inst(Cat(swspImm >> 5, rs2, sp, 2.U(3.W), swspImm(4,0), 0x23.U(7.W)), rd, sp, rs2)$/;"	m
swspImm	src/main/scala/rocket/RVC.scala	/^  def swspImm = Cat(x(8,7), x(12,9), 0.U(2.W))$/;"	m
sx	src/main/scala/rocket/PTW.scala	/^  def sx(dummy: Int = 0) = leaf() && x$/;"	m
sx	src/main/scala/rocket/TLB.scala	/^  val sx = Bool()$/;"	l
sxl	src/main/scala/rocket/CSR.scala	/^  val sxl = UInt(width = 2)$/;"	l
sym_fast_sink	src/main/scala/tilelink/RationalCrossing.scala	/^  val sym_fast_sink   = LazyModule(new TLRAMRationalCrossingSink(Symmetric))$/;"	l
sym_fast_source	src/main/scala/tilelink/RationalCrossing.scala	/^  val sym_fast_source = LazyModule(new TLRAMRationalCrossingSource("RationalCrossing sym_fast", txns))$/;"	l
sym_slow_sink	src/main/scala/tilelink/RationalCrossing.scala	/^  val sym_slow_sink   = LazyModule(new TLRAMRationalCrossingSink(Symmetric))$/;"	l
sym_slow_source	src/main/scala/tilelink/RationalCrossing.scala	/^  val sym_slow_source = LazyModule(new TLRAMRationalCrossingSource("RationalCrossing sym_slow", txns))$/;"	l
sym_source	src/main/scala/tilelink/Monitor.scala	/^    val sym_source = Wire(UInt(edge.client.endSourceId.W))$/;"	l
sym_source_d	src/main/scala/tilelink/Monitor.scala	/^    val sym_source_d = Reg(UInt(edge.client.endSourceId.W))$/;"	l
sync	src/main/scala/interrupts/Bundles.scala	/^  val sync = Vec(params.source.num, Bool())$/;"	l
sync_reset	src/main/scala/util/ResetCatchAndSync.scala	/^    val sync_reset = Bool(OUTPUT)$/;"	l
syndrome	src/main/scala/util/ECC.scala	/^    def syndrome(j: Int) = {$/;"	m
syndromeUInt	src/main/scala/util/ECC.scala	/^    val syndromeUInt = Vec.tabulate(n-k) { j => (syndrome(j) & y).xorR }.asUInt$/;"	l
syndromeUInt	src/main/scala/util/ECC.scala	/^    val syndromeUInt = Vec.tabulate(n-k) { j => (syndrome(j)(k-1, 0) & x).xorR ^ poison }.asUInt$/;"	l
sys2hamm	src/main/scala/util/ECC.scala	/^    val sys2hamm = hamm2sys.zipWithIndex.sortBy(_._1).map(_._2).toIndexedSeq$/;"	l
sysBadBitOH	src/main/scala/util/ECC.scala	/^    val sysBadBitOH = Vec.tabulate(k) { i => hammBadBitOH(sys2hamm(i)) }.asUInt$/;"	l
system_illegal	src/main/scala/rocket/CSR.scala	/^  val system_illegal = Bool(OUTPUT)$/;"	l
system_insn	src/main/scala/rocket/CSR.scala	/^  val system_insn = io.rw.cmd === CSR.I$/;"	l
systemjtag	src/main/scala/devices/debug/Periphery.scala	/^  val systemjtag = p(ExportDebug).jtag.option(new SystemJTAGIO)$/;"	l
t	src/main/scala/rocket/Decode.scala	/^        val t = if (defbit == 0) mint else maxt$/;"	l
t	src/main/scala/rocket/Decode.scala	/^      var t: Term = null$/;"	l
t	src/main/scala/rocket/RocketCore.scala	/^    val t = csr.io.trace(0)$/;"	l
t	src/main/scala/tile/FPU.scala	/^      val t = exactType.get$/;"	l
tECC	src/main/scala/rocket/DCache.scala	/^  val tECC = cacheParams.tagCode$/;"	l
tECC	src/main/scala/rocket/ICache.scala	/^  val tECC = cacheParams.tagCode$/;"	l
tType	src/main/scala/rocket/Breakpoint.scala	/^  def tType = 2$/;"	m
table	src/main/scala/rocket/Decode.scala	/^    val table = cols.map(c => (0 to bits).map(b => collection.mutable.Set(c.filter(b == _.value.bitCount):_*)))$/;"	l
table	src/main/scala/rocket/IDecode.scala	/^  val table: Array[(BitPat, List[BitPat])] = Array($/;"	l
table	src/main/scala/rocket/IDecode.scala	/^  val table: Array[(BitPat, List[BitPat])]$/;"	l
table	src/main/scala/rocket/PTW.scala	/^  def table(dummy: Int = 0) = v && !r && !w && !x && !d && !a && !u$/;"	m
table	src/main/scala/util/MuxLiteral.scala	/^      val table = Array.fill(endIndex.toInt) { default }$/;"	l
tag	src/main/scala/rocket/HellaCache.scala	/^  val tag    = UInt(width = tagBits)$/;"	l
tag	src/main/scala/rocket/HellaCache.scala	/^  val tag  = Bits(width = coreParams.dcacheReqTagBits + log2Ceil(dcacheArbPorts))$/;"	l
tag	src/main/scala/rocket/HellaCache.scala	/^  val tag = UInt(width = tagBits)$/;"	l
tag	src/main/scala/rocket/Multiplier.scala	/^  val tag = UInt(tagBits.W)$/;"	l
tag	src/main/scala/rocket/NBDcache.scala	/^    val tag             = Bits(OUTPUT, tagBits)$/;"	l
tag	src/main/scala/rocket/NBDcache.scala	/^  val tag = Bits(width = tagBits)$/;"	l
tag	src/main/scala/rocket/PTW.scala	/^    val tag =$/;"	l
tag	src/main/scala/rocket/PTW.scala	/^  val tag = UInt(width = tagBits)$/;"	l
tag	src/main/scala/rocket/TLB.scala	/^  val tag = UInt(width = vpnBits)$/;"	l
tag	src/main/scala/tile/FPU.scala	/^      val tag = mem_ctrl.typeTagOut$/;"	l
tag	src/main/scala/tile/FPU.scala	/^    val tag = ex_ctrl.typeTagIn$/;"	l
tag	src/main/scala/tile/FPU.scala	/^  val tag = in.bits.typeTagIn$/;"	l
tag	src/main/scala/tile/FPU.scala	/^  val tag = in.typeTagOut$/;"	l
tag	src/main/scala/util/ReorderQueue.scala	/^  val tag = UInt(INPUT, tagWidth)$/;"	l
tag	src/main/scala/util/ReorderQueue.scala	/^  val tag = UInt(width = tagWidth)$/;"	l
tagBits	src/main/scala/rocket/PTW.scala	/^  val tagBits = maxSVAddrBits - pgIdxBits - idxBits + (if (usingHypervisor) 1 else 0)$/;"	l
tagBits	src/main/scala/tile/L1Cache.scala	/^  def tagBits = tlBundleParams.addressBits - pgUntagBits$/;"	m
tagCode	src/main/scala/rocket/HellaCache.scala	/^  def tagCode: Code = Code.fromString(tagECC)$/;"	m
tagCode	src/main/scala/rocket/ICache.scala	/^  def tagCode: Code = Code.fromString(tagECC)$/;"	m
tagECC	src/main/scala/diplomaticobjectmodel/model/OMCaches.scala	/^  def tagECC: Option[OMECC]$/;"	m
tagIn	src/main/scala/groundtest/TraceGen.scala	/^    val tagIn     = UInt(INPUT, logNumTags)$/;"	l
tagLSB	src/main/scala/rocket/DCache.scala	/^  def tagLSB: Int = untagBits$/;"	m
tagList	src/main/scala/rocket/NBDcache.scala	/^  val tagList = Wire(Vec(cfg.nMSHRs, Bits(width = tagBits)))$/;"	l
tagMan	src/main/scala/groundtest/TraceGen.scala	/^  val tagMan = Module(new TagMan(log2Ceil(maxTags)))$/;"	l
tagMatch	src/main/scala/rocket/DCache.scala	/^    val tagMatch = (s2_hit_way & pstore2_way).orR$/;"	l
tagMatch	src/main/scala/rocket/ICache.scala	/^    val tagMatch = s1_vb && tag === s1_tag$/;"	l
tagMatch	src/main/scala/rocket/TLB.scala	/^      var tagMatch = valid.head && entry_data.head.v === virtual$/;"	l
tagOut	src/main/scala/groundtest/TraceGen.scala	/^    val tagOut    = UInt(OUTPUT, logNumTags)$/;"	l
tagSpaceSize	src/main/scala/util/ReorderQueue.scala	/^  val tagSpaceSize = 1 << tagWidth$/;"	l
tag_array	src/main/scala/rocket/HellaCache.scala	/^  val tag_array = SeqMem(nSets, Vec(nWays, UInt(width = metabits)))$/;"	l
tag_error	src/main/scala/rocket/ICache.scala	/^  val tag_error = Seq($/;"	l
tag_error_cover	src/main/scala/rocket/DCache.scala	/^    val tag_error_cover = Seq($/;"	l
tag_hit	src/main/scala/rocket/HellaCacheArbiter.scala	/^      val tag_hit = io.mem.resp.bits.tag(log2Up(n)-1,0) === UInt(i)$/;"	l
tag_match	src/main/scala/rocket/NBDcache.scala	/^  val tag_match = Bool()$/;"	l
tag_match	src/main/scala/rocket/NBDcache.scala	/^  val tag_match = Mux1H(idxMatch, tagList) === io.req.bits.addr >> untagBits$/;"	l
tag_matches	src/main/scala/rocket/NBDcache.scala	/^  val tag_matches = way_en.orR$/;"	l
tag_rdata	src/main/scala/rocket/ICache.scala	/^  val tag_rdata = tag_array.read(s0_vaddr(untagBits-1,blockOffBits), !refill_done && s0_valid)$/;"	l
tags	src/main/scala/rocket/PTW.scala	/^    val tags = Reg(Vec(coreParams.nPTECacheEntries, UInt((if (usingHypervisor) 1 + vaddrBits else paddrBits).W)))$/;"	l
tail	src/main/scala/amba/axi4/Bundles.scala	/^    val tail = UInt((BigInt(1) << maxShift) - 1)$/;"	l
tail	src/main/scala/util/MultiWidthFifo.scala	/^    val tail = Reg(init = UInt(0, log2Up(n)))$/;"	l
tailEnable	src/main/scala/devices/tilelink/Plic.scala	/^    val tailEnable  = nDevices - firstEnable - 8*fullEnables$/;"	l
tails	src/main/scala/tilelink/Edges.scala	/^    val tails = todo.map(_.tail)$/;"	l
take	src/main/scala/groundtest/TraceGen.scala	/^    val take      = Bool(INPUT)$/;"	l
take_max	src/main/scala/tilelink/AtomicAutomata.scala	/^        val take_max = a_cam_a.bits.param(0)$/;"	l
take_max	src/main/scala/tilelink/Atomics.scala	/^  val take_max = io.a.param(0)$/;"	l
take_pc	src/main/scala/rocket/RocketCore.scala	/^  val take_pc = take_pc_mem_wb$/;"	l
take_pc_mem	src/main/scala/rocket/RocketCore.scala	/^  val take_pc_mem = Wire(Bool())$/;"	l
take_pc_mem_wb	src/main/scala/rocket/RocketCore.scala	/^  val take_pc_mem_wb = take_pc_wb || take_pc_mem$/;"	l
take_pc_wb	src/main/scala/rocket/RocketCore.scala	/^  val take_pc_wb = Wire(Bool())$/;"	l
taken	src/main/scala/amba/apb/RegisterRouter.scala	/^    val taken = RegInit(Bool(false))$/;"	l
taken	src/main/scala/rocket/BTB.scala	/^  def taken = value(0)$/;"	m
taken	src/main/scala/rocket/BTB.scala	/^  val taken = Bool()$/;"	l
taken	src/main/scala/rocket/Frontend.scala	/^      val taken =$/;"	l
taken	src/main/scala/rocket/Frontend.scala	/^    val taken = scanInsns(0, s2_partial_insn_valid, s2_partial_insn, false.B)$/;"	l
taken	src/main/scala/util/IDPool.scala	/^  val taken  = Mux(io.alloc.ready, UIntToOH(io.alloc.bits, numIds), 0.U)$/;"	l
taken_idx	src/main/scala/rocket/Frontend.scala	/^    val taken_idx = Wire(UInt())$/;"	l
tapClockNode	src/main/scala/tile/TilePRCIDomain.scala	/^  val tapClockNode = ClockIdentityNode()$/;"	l
tapIO	src/main/scala/devices/debug/DebugTransport.scala	/^  val tapIO = JtagTapGenerator(irLength = 5,$/;"	l
tapIsInTestLogicReset	src/main/scala/jtag/JtagTap.scala	/^  val tapIsInTestLogicReset = Output(Bool())  \/\/ synchronously asserted in Test-Logic-Reset state, should NOT hold the FSM in reset$/;"	l
tapIsInTestLogicReset	src/main/scala/jtag/JtagTap.scala	/^  val tapIsInTestLogicReset = Wire(Bool())$/;"	l
target	src/main/scala/rocket/BTB.scala	/^  val target = UInt(width = vaddrBits)$/;"	l
targetDir	src/main/scala/stage/phases/Checks.scala	/^    val targetDir, topModule, configNames, outputBaseName = mutable.ListBuffer[Annotation]()$/;"	l
targetDir	src/main/scala/stage/phases/GenerateArtefacts.scala	/^    val targetDir = view[StageOptions](annotations).targetDir$/;"	l
targetDir	src/main/scala/stage/phases/GenerateFirrtlAnnos.scala	/^    val targetDir = view[StageOptions](annotations).targetDir$/;"	l
targetDir	src/main/scala/stage/phases/GenerateROMs.scala	/^    val targetDir = view[StageOptions](annotations).targetDir$/;"	l
targetDir	src/main/scala/stage/phases/GenerateTestSuiteMakefrags.scala	/^    val targetDir = view[StageOptions](annotations).targetDir$/;"	l
targets	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTrees.scala	/^    val targets = getInterruptTargets(resourceBindings)$/;"	l
targets	src/main/scala/system/RocketChipStageGenerator.scala	/^  val targets: Seq[PhaseDependency] = Seq($/;"	l
targets	src/main/scala/system/RocketTestSuite.scala	/^      val targets = s.map(t => s"$$(${t.makeTargetName})").mkString(" ")$/;"	l
tck	src/main/resources/csrc/remote_bitbang.h	/^  unsigned char tck;$/;"	m	class:remote_bitbang_t
tdata1	src/main/scala/rocket/Instructions.scala	/^  val tdata1 = 0x7a1$/;"	l
tdata2	src/main/scala/rocket/Instructions.scala	/^  val tdata2 = 0x7a2$/;"	l
tdata3	src/main/scala/rocket/Instructions.scala	/^  val tdata3 = 0x7a3$/;"	l
tdi	src/main/resources/csrc/remote_bitbang.h	/^  unsigned char tdi;$/;"	m	class:remote_bitbang_t
tdo	src/main/resources/csrc/remote_bitbang.h	/^  unsigned char tdo;$/;"	m	class:remote_bitbang_t
tdo	src/main/scala/jtag/JtagTap.scala	/^  val tdo = Wire(Bool())  \/\/ 4.4.1c TDI should appear here uninverted after shifting$/;"	l
tdo_driven	src/main/scala/jtag/JtagTap.scala	/^  val tdo_driven = Wire(Bool())$/;"	l
tempMaskReg	src/main/scala/devices/debug/Debug.scala	/^            val tempMaskReg = HAMASKReg.asUInt.asBools$/;"	l
tempWrData	src/main/scala/devices/debug/Debug.scala	/^            val tempWrData = HAWINDOWWrData.maskdata.asBools$/;"	l
term	src/main/scala/rocket/Decode.scala	/^  def term(lit: BitPat) =$/;"	m
terms	macros/src/main/scala/ValName.scala	/^    val terms = allOwners(c.internal.enclosingOwner).filter(_.isTerm).map(_.asTerm)$/;"	l
terms	src/main/scala/rocket/Decode.scala	/^    val terms = keys.toList.map(k => term(k))$/;"	l
termvalues	src/main/scala/rocket/Decode.scala	/^    val termvalues = terms zip values.toList.map(term(_))$/;"	l
test	src/main/scala/tilelink/AtomicAutomata.scala	/^  val test = new RequestPattern({a: TLBundleA =>$/;"	l
test	src/main/scala/util/ECC.scala	/^  val test = RegInit(UInt(0, width=n+1))$/;"	l
test	src/main/scala/util/PrefixSum.scala	/^  def test: Unit = { Seq.tabulate(519){i=>i}.foreach(testSize) }$/;"	m
test	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^  def test(testCases: TestCase *): Unit = {$/;"	m
testCase	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^    val testCase = TestCase($/;"	l
testName	src/main/scala/unittest/UnitTest.scala	/^  val testName = this.getClass.getSimpleName$/;"	l
testRamAddr	src/main/scala/groundtest/Package.scala	/^  val testRamAddr = 0x10000$/;"	l
testSize	src/main/scala/util/PrefixSum.scala	/^  def testSize(size: Int): Unit = {$/;"	m
test_en	src/main/resources/vsrc/EICG_wrapper.v	/^  input test_en,$/;"	p
test_en	src/main/scala/util/ClockGate.scala	/^    val test_en = Input(Bool())$/;"	l
test_mode	src/main/scala/util/PSDTestMode.scala	/^  val test_mode       = Bool()$/;"	l
test_mode_reset	src/main/scala/util/PSDTestMode.scala	/^  val test_mode_reset = Bool()$/;"	l
testram	src/main/scala/groundtest/GroundTestSubsystem.scala	/^  val testram = LazyModule(new TLRAM(AddressSet(0x52000000, 0xfff), beatBytes=pbus.beatBytes))$/;"	l
tests	src/main/scala/stage/phases/AddDefaultTests.scala	/^    val tests = ropts.topPackage.get match {$/;"	l
tests	src/main/scala/stage/phases/AddDefaultTests.scala	/^    val tests = scala.collection.mutable.Buffer[RocketTestSuite]()$/;"	l
tests	src/main/scala/unittest/UnitTest.scala	/^  val tests = p(UnitTests)(p)$/;"	l
tests_finished	src/main/scala/unittest/UnitTest.scala	/^  val tests_finished = Vec(tests.map(_.io.finished)).reduce(_&&_)$/;"	l
textra	src/main/scala/rocket/Breakpoint.scala	/^  val textra  = new TExtra$/;"	l
tgtPageRepl	src/main/scala/rocket/BTB.scala	/^  val tgtPageRepl = Mux(samePage, idxPageUpdateOH, Cat(idxPageUpdateOH(nPages-2,0), idxPageUpdateOH(nPages-1)))$/;"	l
tgtPageReplEn	src/main/scala/rocket/BTB.scala	/^  val tgtPageReplEn = Mux(doTgtPageRepl, tgtPageRepl, UInt(0))$/;"	l
tgtPageUpdate	src/main/scala/rocket/BTB.scala	/^  val tgtPageUpdate = OHToUInt(pageHit | Mux(usePageHit, UInt(0), tgtPageRepl))$/;"	l
tgtPages	src/main/scala/rocket/BTB.scala	/^  val tgtPages = Reg(Vec(entries, UInt(width=log2Up(nPages))))$/;"	l
tgts	src/main/scala/rocket/BTB.scala	/^  val tgts = Reg(Vec(entries, UInt(width=matchBits - log2Up(coreInstBytes))))$/;"	l
this	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  def this()(implicit p: Parameters) = this(None)$/;"	m
this	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  def this(x: Int)(implicit p: Parameters) = this(Some(x))$/;"	m
this	src/main/scala/amba/axi4/Buffer.scala	/^  def this()(implicit p: Parameters) = this(BufferParams.default)$/;"	m
this	src/main/scala/amba/axi4/Buffer.scala	/^  def this(aw: BufferParams, br: BufferParams)(implicit p: Parameters) = this(aw, aw, br, aw, br)$/;"	m
this	src/main/scala/amba/axi4/Buffer.scala	/^  def this(x: BufferParams)(implicit p: Parameters) = this(x, x)$/;"	m
this	src/main/scala/diplomacy/Parameters.scala	/^  def this(x: Int) = this(x, x)$/;"	m
this	src/main/scala/diplomacy/Resources.scala	/^  def this(x: Double) = this(BigDecimal(x).setScale(0, BigDecimal.RoundingMode.HALF_UP).toBigInt)$/;"	m
this	src/main/scala/diplomacy/Resources.scala	/^  def this(x: Int) = this(Seq(AddressSet(x, 0)), ResourcePermissions(false, false, false, false, false))$/;"	m
this	src/main/scala/groundtest/TraceGen.scala	/^  def this(params: TraceGenParams, crossing: TileCrossingParamsLike, lookup: LookupByHartIdImpl)(implicit p: Parameters) =$/;"	m
this	src/main/scala/prci/ClockDomain.scala	/^  def this(give: Option[ClockParameters] = None, name: Option[String] = None)(implicit p: Parameters) = this(ClockSourceParameters(give = give, name = name))$/;"	m
this	src/main/scala/prci/ClockDomain.scala	/^  def this(take: Option[ClockParameters] = None, name: Option[String] = None)(implicit p: Parameters) = this(ClockSinkParameters(take = take, name = name))$/;"	m
this	src/main/scala/rocket/ScratchpadSlavePort.scala	/^  def this(address: AddressSet, coreDataBytes: Int, usingAtomics: Boolean)(implicit p: Parameters) {$/;"	m
this	src/main/scala/tile/BaseTile.scala	/^  def this(tileParams: TileParams, crossing: ClockCrossingType, lookup: LookupByHartIdImpl, p: Parameters) = {$/;"	m
this	src/main/scala/tile/RocketTile.scala	/^  def this(params: RocketTileParams, crossing: TileCrossingParamsLike, lookup: LookupByHartIdImpl)(implicit p: Parameters) =$/;"	m
this	src/main/scala/tilelink/AsyncCrossing.scala	/^  def this()(implicit p: Parameters) = this(None)$/;"	m
this	src/main/scala/tilelink/AsyncCrossing.scala	/^  def this(x: Int)(implicit p: Parameters) = this(Some(x))$/;"	m
this	src/main/scala/tilelink/Broadcast.scala	/^  def this(lineBytes: Int, numTrackers: Int = 4, bufferless: Boolean = false, filterFactory: TLBroadcast.ProbeFilterFactory = BroadcastFilter.factory)(implicit p: Parameters) =$/;"	m
this	src/main/scala/tilelink/Buffer.scala	/^  def this()(implicit p: Parameters) = this(BufferParams.default)$/;"	m
this	src/main/scala/tilelink/Buffer.scala	/^  def this(abcde: BufferParams)(implicit p: Parameters) = this(abcde, abcde)$/;"	m
this	src/main/scala/tilelink/Buffer.scala	/^  def this(ace: BufferParams, bd: BufferParams)(implicit p: Parameters) = this(ace, bd, ace, bd, ace)$/;"	m
threshold	src/main/scala/devices/tilelink/Plic.scala	/^    val threshold =$/;"	l
thresholdRegDesc	src/main/scala/devices/tilelink/Plic.scala	/^    def thresholdRegDesc(i: Int) =$/;"	m
thresholdRegField	src/main/scala/devices/tilelink/Plic.scala	/^    def thresholdRegField(x: UInt, i: Int) =$/;"	m
tick	src/main/resources/csrc/remote_bitbang.cc	/^void remote_bitbang_t::tick($/;"	f	class:remote_bitbang_t
tickCounterNxt	src/main/resources/vsrc/SimJTAG.v	/^   wire [31:0]                   tickCounterNxt;$/;"	n
tickCounterReg	src/main/resources/vsrc/SimJTAG.v	/^   reg [31:0]                    tickCounterReg;$/;"	r
tid	src/main/scala/groundtest/TraceGen.scala	/^  val tid = io.hartid$/;"	l
tieOffInterrupts	src/main/scala/subsystem/InterruptBus.scala	/^  def tieOffInterrupts(dummy: Int = 1): Unit = {$/;"	m
tieRegFields	src/main/scala/tilelink/Broadcast.scala	/^  def tieRegFields(bankIndex: Int): Unit = Unit$/;"	m
tieoff	src/main/scala/amba/ahb/Bundles.scala	/^  def tieoff(): Unit = {$/;"	m
tieoff	src/main/scala/amba/apb/Bundles.scala	/^  def tieoff(): Unit = {$/;"	m
tieoff	src/main/scala/amba/axi4/Bundles.scala	/^  def tieoff(): Unit = {$/;"	m
tieoff	src/main/scala/tilelink/Bundles.scala	/^  def tieoff(): Unit = {$/;"	m
tieoffDebug	src/main/scala/devices/debug/Periphery.scala	/^  def tieoffDebug(debugOpt: Option[DebugIO], resetctrlOpt: Option[ResetCtrlIO] = None, psdio: Option[PSDIO] = None)(implicit p: Parameters): Bool = {$/;"	m
tile	src/main/scala/subsystem/HasTiles.scala	/^      val tile = self.tile_reset_domain { LazyModule(tileParams.instantiate(crossingParams, lookup)) }$/;"	l
tile	src/main/scala/tile/TilePRCIDomain.scala	/^  val tile: T$/;"	l
tileAttachParams	src/main/scala/subsystem/HasTiles.scala	/^  val tileAttachParams: Seq[CanAttachTile] = p(TilesLocated(location)).sortBy(_.tileParams.hartId)$/;"	l
tileCeaseSinkNode	src/main/scala/subsystem/HasTiles.scala	/^  val tileCeaseSinkNode = IntSinkNode(IntSinkPortSimple())$/;"	l
tileCeaseXbarNode	src/main/scala/subsystem/HasTiles.scala	/^  val tileCeaseXbarNode = IntXbar(p)$/;"	l
tileClockGroup	src/main/scala/subsystem/HasTiles.scala	/^        val tileClockGroup = ClockGroup()$/;"	l
tileCrossingTypes	src/main/scala/subsystem/HasTiles.scala	/^  val tileCrossingTypes: Seq[ClockCrossingType] = tileAttachParams.map(_.crossingParams.crossingType)$/;"	l
tileHaltSinkNode	src/main/scala/subsystem/HasTiles.scala	/^  val tileHaltSinkNode = IntSinkNode(IntSinkPortSimple())$/;"	l
tileHaltXbarNode	src/main/scala/subsystem/HasTiles.scala	/^  val tileHaltXbarNode = IntXbar(p)$/;"	l
tileHartIdIONodes	src/main/scala/subsystem/HasTiles.scala	/^  val tileHartIdIONodes: Seq[BundleBridgeSource[UInt]] = p(SubsystemExternalHartIdWidthKey) match {$/;"	l
tileHartIdNexusNode	src/main/scala/subsystem/HasTiles.scala	/^  val tileHartIdNexusNode = LazyModule(new BundleBridgeNexus[UInt]($/;"	l
tileHartIdNode	src/main/scala/subsystem/HasTiles.scala	/^  val tileHartIdNode = BundleBridgeEphemeralNode[UInt]()$/;"	l
tileNMIIONodes	src/main/scala/subsystem/HasTiles.scala	/^  val tileNMIIONodes: Seq[BundleBridgeSource[NMI]] = {$/;"	l
tileNMINode	src/main/scala/subsystem/HasTiles.scala	/^  val tileNMINode = BundleBridgeEphemeralNode[NMI]()$/;"	l
tileParams	src/main/scala/subsystem/HasTiles.scala	/^  def tileParams: InstantiableTileParams[TileType]$/;"	m
tileParams	src/main/scala/subsystem/HasTiles.scala	/^  val tileParams: Seq[TileParams] = tileAttachParams.map(_.tileParams)$/;"	l
tileParams	src/main/scala/tile/BaseTile.scala	/^  def tileParams: TileParams = p(TileKey)$/;"	m
tileProperties	src/main/scala/tile/BaseTile.scala	/^  def tileProperties: PropertyMap = {$/;"	m
tileResetVectorIONodes	src/main/scala/subsystem/HasTiles.scala	/^  val tileResetVectorIONodes: Seq[BundleBridgeSource[UInt]] = p(SubsystemExternalResetVectorKey) match {$/;"	l
tileResetVectorNexusNode	src/main/scala/subsystem/HasTiles.scala	/^  val tileResetVectorNexusNode = BundleBroadcast[UInt]($/;"	l
tileResetVectorNode	src/main/scala/subsystem/HasTiles.scala	/^  val tileResetVectorNode = BundleBridgeEphemeralNode[UInt]()$/;"	l
tileStatusNodes	src/main/scala/groundtest/GroundTestSubsystem.scala	/^  val tileStatusNodes = tiles.collect { case t: GroundTestTile => t.statusNode.makeSink() }$/;"	l
tileWFISinkNode	src/main/scala/subsystem/HasTiles.scala	/^  val tileWFISinkNode = IntSinkNode(IntSinkPortSimple())$/;"	l
tileWFIXbarNode	src/main/scala/subsystem/HasTiles.scala	/^  val tileWFIXbarNode = IntXbar(p)$/;"	l
tile_hartids	src/main/scala/subsystem/HasTiles.scala	/^  val tile_hartids = outer.tileHartIdIONodes.zipWithIndex.map { case (n, i) => n.makeIO(s"tile_hartids_$i") }$/;"	l
tile_master_blocker	src/main/scala/tile/RocketTile.scala	/^  val tile_master_blocker =$/;"	l
tile_prci_domain	src/main/scala/subsystem/HasTiles.scala	/^    val tile_prci_domain = LazyModule(new TilePRCIDomain[TileType](clockSinkParams, crossingParams) { self =>$/;"	l
tile_prci_domains	src/main/scala/subsystem/HasTiles.scala	/^  val tile_prci_domains: Seq[TilePRCIDomain[_]] = tileAttachParams.map(_.instantiate(p))$/;"	l
tile_reset_domain	src/main/scala/tile/TilePRCIDomain.scala	/^  val tile_reset_domain = LazyModule(new TileResetDomain(clockSinkParams, crossingParams.resetCrossingType))$/;"	l
tiles	src/main/scala/subsystem/HasTiles.scala	/^  val tiles: Seq[BaseTile] = tile_prci_domains.map(_.tile.asInstanceOf[BaseTile])$/;"	l
time	src/main/scala/devices/tilelink/CLINT.scala	/^    val time = RegInit(UInt(0, width = timeWidth))$/;"	l
time	src/main/scala/rocket/CSR.scala	/^  val time = UInt(OUTPUT, xLen)$/;"	l
time	src/main/scala/rocket/Instructions.scala	/^  val time = 0xc01$/;"	l
time	src/main/scala/tile/FPU.scala	/^  val time = Input(UInt(xLen.W))$/;"	l
timeOffset	src/main/scala/devices/tilelink/CLINT.scala	/^  def timeOffset = 0xbff8$/;"	m
timeWidth	src/main/scala/devices/tilelink/CLINT.scala	/^  def timeWidth = 64$/;"	m
timecmp	src/main/scala/devices/tilelink/CLINT.scala	/^    val timecmp = Seq.fill(nTiles) { Reg(UInt(width = timeWidth)) }$/;"	l
timecmpBytes	src/main/scala/devices/tilelink/CLINT.scala	/^  def timecmpBytes = 8$/;"	m
timecmpOffset	src/main/scala/devices/tilelink/CLINT.scala	/^  def timecmpOffset(hart: Int) = 0x4000 + hart * timecmpBytes$/;"	m
timed_out	src/main/scala/unittest/UnitTest.scala	/^  val timed_out = SimpleTimer(timeout, io.start, io.finished)$/;"	l
timeh	src/main/scala/rocket/Instructions.scala	/^  val timeh = 0xc81$/;"	l
timeout	src/main/scala/groundtest/Status.scala	/^  val timeout = Valid(UInt(width = 4))$/;"	l
timeout	src/main/scala/groundtest/TraceGen.scala	/^    val timeout = Bool(OUTPUT)$/;"	l
timeout	src/main/scala/unittest/Configs.scala	/^    val timeout = 50000 * site(TestDurationMultiplier)$/;"	l
timeout	src/main/scala/util/PlusArg.scala	/^  def timeout(name: String, default: BigInt = 0, docstring: String = "", width: Int = 32)(count: UInt): Unit = {$/;"	m
timeout	src/main/scala/util/Timer.scala	/^    val timeout = Bool(OUTPUT)$/;"	l
timeout	src/main/scala/util/Timer.scala	/^    val timeout = Valid(UInt(width = log2Up(maxInflight)))$/;"	l
timeoutCodeBits	src/main/scala/groundtest/Package.scala	/^  val timeoutCodeBits = 4$/;"	l
timeout_sec	scripts/RocketSim.py	/^    timeout_sec = 6000$/;"	v	class:RocketSim
timeout_sec	scripts/RocketSim32.py	/^    timeout_sec = 6000$/;"	v	class:RocketSim
timeout_sec	scripts/RocketSim64.py	/^    timeout_sec = 6000$/;"	v	class:RocketSim
timer	src/main/scala/util/CoreMonitor.scala	/^  val timer = UInt(width = 32.W)$/;"	l
timer	src/main/scala/util/Timer.scala	/^    val timer = Module(new SimpleTimer(initCount))$/;"	l
tl2ahb	src/main/scala/tilelink/ToAHB.scala	/^    val tl2ahb = LazyModule(new TLToAHB(aFlow, supportHints, supportsRETRY))$/;"	l
tl2apb	src/main/scala/tilelink/ToAPB.scala	/^    val tl2apb = LazyModule(new TLToAPB(aFlow))$/;"	l
tl2axi4	src/main/scala/tilelink/ToAXI4.scala	/^    val tl2axi4 = LazyModule(new TLToAXI4(combinational, adapterName, stripBits, wcorrupt))$/;"	l
tlBusToGetClockDriverFrom	src/main/scala/subsystem/HasTiles.scala	/^    val tlBusToGetClockDriverFrom = context.locateTLBusWrapper(crossingParams.master.where)$/;"	l
tlBusToGetPrefixFrom	src/main/scala/subsystem/HasTiles.scala	/^    val tlBusToGetPrefixFrom = context.locateTLBusWrapper(crossingParams.mmioBaseAddressPrefixWhere)$/;"	l
tlBusWrapperLocationMap	src/main/scala/subsystem/Attachable.scala	/^  val tlBusWrapperLocationMap = LocationMap.empty[TLBusWrapper]$/;"	l
tlError	src/main/scala/devices/debug/Debug.scala	/^    val tlError  = LazyModule(new TLError(tlErrorParams, buffer=false))$/;"	l
tlErrorParams	src/main/scala/devices/debug/Debug.scala	/^    val tlErrorParams = DevNullParams(AddressSet.misaligned(dmTopAddr, APBDebugConsts.apbDebugRegBase-dmTopAddr), maxAtomic=0, maxTransfer=4)$/;"	l
tlInXing	src/main/scala/subsystem/CrossingWrapper.scala	/^    val tlInXing = this.crossIn(n)$/;"	l
tlMasterClockXing	src/main/scala/tile/TilePRCIDomain.scala	/^    val tlMasterClockXing = this.crossOut(tlMasterResetXing)$/;"	l
tlMasterResetXing	src/main/scala/tile/TilePRCIDomain.scala	/^    val tlMasterResetXing = this { DisableMonitors { implicit p =>$/;"	l
tlMasters	src/main/scala/tilelink/ToAXI4.scala	/^  val tlMasters = tlPort.masters.sortBy(_.sourceId).sortWith(TLToAXI4.sortByType)$/;"	l
tlNode	src/main/scala/devices/debug/Debug.scala	/^  val tlNode = TLRegisterNode($/;"	l
tlNode	src/main/scala/devices/debug/Debug.scala	/^  val tlNode = dmInner.tlNode$/;"	l
tlNode	src/main/scala/tile/LazyRoCC.scala	/^  val tlNode: TLNode = TLIdentityNode()$/;"	l
tlOutXing	src/main/scala/subsystem/CrossingWrapper.scala	/^    val tlOutXing = this.crossOut(n)$/;"	l
tlSlaveClockXing	src/main/scala/tile/TilePRCIDomain.scala	/^    val tlSlaveClockXing = this.crossIn(tlSlaveResetXing)$/;"	l
tlSlaveResetXing	src/main/scala/tile/TilePRCIDomain.scala	/^    val tlSlaveResetXing = this {$/;"	l
tl_clock	src/main/scala/devices/debug/Debug.scala	/^      val tl_clock = Input(Clock())$/;"	l
tl_d_data_encoded	src/main/scala/rocket/DCache.scala	/^  val tl_d_data_encoded = Wire(encodeData(tl_out.d.bits.data, false.B).cloneType)$/;"	l
tl_out_a	src/main/scala/rocket/DCache.scala	/^  val tl_out_a = Wire(tl_out.a)$/;"	l
tl_reset	src/main/scala/devices/debug/Debug.scala	/^      val tl_reset = Input(Reset())$/;"	l
tl_xing	src/main/scala/devices/tilelink/DevNull.scala	/^  val tl_xing = this.crossIn(node)$/;"	l
tlb	src/main/scala/rocket/DCache.scala	/^  val tlb = Module(new TLB(false, log2Ceil(coreDataBytes), TLBConfig(nTLBSets, nTLBWays, cacheParams.nTLBBasePageSectors, cacheParams.nTLBSuperpages)))$/;"	l
tlb	src/main/scala/rocket/Frontend.scala	/^  val tlb = Module(new TLB(true, log2Ceil(fetchBytes), TLBConfig(nTLBSets, nTLBWays, outer.icacheParams.nTLBBasePageSectors, outer.icacheParams.nTLBSuperpages)))$/;"	l
tlbMiss	src/main/scala/rocket/Frontend.scala	/^  val tlbMiss = Bool()$/;"	l
tlbMiss	src/main/scala/rocket/HellaCache.scala	/^  val tlbMiss = Bool()$/;"	l
tlb_hit	src/main/scala/rocket/TLB.scala	/^  val tlb_hit = (real_hits & gpa_hits).orR$/;"	l
tlb_hit_if_not_gpa_miss	src/main/scala/rocket/TLB.scala	/^  val tlb_hit_if_not_gpa_miss = real_hits.orR$/;"	l
tlb_miss	src/main/scala/rocket/TLB.scala	/^  val tlb_miss = vm_enabled && !vsatp_mode_mismatch && !bad_va && !tlb_hit$/;"	l
tlb_port	src/main/scala/rocket/DCache.scala	/^  val tlb_port = IO(new DCacheTLBPort)$/;"	l
tlbus	src/main/scala/devices/tilelink/BootROM.scala	/^    val tlbus = subsystem.locateTLBusWrapper(where)$/;"	l
tlbus	src/main/scala/devices/tilelink/CLINT.scala	/^    val tlbus = locateTLBusWrapper(p(CLINTAttachKey).slaveWhere)$/;"	l
tlbus	src/main/scala/devices/tilelink/Plic.scala	/^    val tlbus = locateTLBusWrapper(p(PLICAttachKey).slaveWhere)$/;"	l
tld	src/main/scala/amba/axi4/Credited.scala	/^      val tld = edgeIn.delay$/;"	l
tld	src/main/scala/amba/axi4/Credited.scala	/^      val tld = edgeOut.delay$/;"	l
tld	src/main/scala/tilelink/Credited.scala	/^      val tld = edgeIn.delay$/;"	l
tld	src/main/scala/tilelink/Credited.scala	/^      val tld = edgeOut.delay$/;"	l
tmatch	src/main/scala/rocket/Breakpoint.scala	/^  val tmatch = UInt(2.W)$/;"	l
tmp	src/main/scala/devices/debug/Debug.scala	/^    val tmp = DATA - (cfg.nProgramBufferWords * 4)$/;"	l
tmp	src/main/scala/rocket/PTW.scala	/^    val tmp = new PTE().fromBits(mem_resp_data)$/;"	l
tms	src/main/resources/csrc/remote_bitbang.h	/^  unsigned char tms;$/;"	m	class:remote_bitbang_t
tms	src/main/scala/jtag/JtagStateMachine.scala	/^    val tms = Input(Bool())$/;"	l
to	src/main/scala/amba/axi4/Parameters.scala	/^  val to = axi4Id$/;"	l
to	src/main/scala/amba/axi4/ToTL.scala	/^  val to = tlId$/;"	l
to	src/main/scala/diplomacy/Parameters.scala	/^  def to: IdRange$/;"	m
to	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^                   val to: OMIDRange,$/;"	l
to	src/main/scala/subsystem/InterruptBus.scala	/^  def to(name: Option[String])(xing: ClockCrossingType) = IntNameNode(name) :*= int_out_xing(xing)$/;"	m
to	src/main/scala/tilelink/BusWrapper.scala	/^  def to[T](name: String)(body: => T): T = {$/;"	m
to	src/main/scala/tilelink/Parameters.scala	/^  val to = tlId$/;"	l
to	src/main/scala/tilelink/ToAXI4.scala	/^  val to = axi4Id$/;"	l
toAnnotation	src/main/scala/aspects/RenameModulesAspect.scala	/^  final def toAnnotation(top: RawModule): AnnotationSeq = {$/;"	m
toAnnotation	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^  def toAnnotation(top: RawModule): AnnotationSeq = {$/;"	m
toB	src/main/scala/tilelink/Bundles.scala	/^  def toB = UInt(1, bdWidth)$/;"	m
toBigInt	src/main/scala/jtag/JtagStateMachine.scala	/^    implicit def toBigInt(x: State):BigInt = x.id$/;"	m
toBits	src/main/scala/regmapper/RegMapper.scala	/^    def toBits(x: Int, tail: List[Boolean] = List.empty): List[Boolean] =$/;"	m
toD	src/main/scala/tilelink/CacheCork.scala	/^        val toD = (in.a.bits.opcode === AcquireBlock && in.a.bits.param === TLPermissions.BtoT) ||$/;"	l
toDRAMController	src/main/scala/tilelink/BusWrapper.scala	/^  def toDRAMController[D,U,E,B <: Data]$/;"	m
toDoctype	src/main/scala/util/PlusArg.scala	/^  def toDoctype(a: Option[A]): String$/;"	m
toErrorList	src/main/scala/tile/BusErrorUnit.scala	/^  def toErrorList = List(None,$/;"	m
toErrorList	src/main/scala/tile/BusErrorUnit.scala	/^  def toErrorList: List[Option[(Valid[UInt], String, String)]]$/;"	m
toFirrtl	src/main/scala/diplomacy/LazyModule.scala	/^        def toFirrtl = InlineAnnotation(toNamed)$/;"	m
toFirrtl	src/main/scala/rocket/DCache.scala	/^      def toFirrtl: firrtl.annotations.Annotation = firrtl.passes.InlineAnnotation(self.toNamed) } )$/;"	m
toFirrtl	src/main/scala/util/Annotations.scala	/^  def toFirrtl = AddressMapAnnotation($/;"	m
toFirrtl	src/main/scala/util/Annotations.scala	/^  def toFirrtl = GlobalConstantsAnnotation(target.toNamed, xLen)$/;"	m
toFirrtl	src/main/scala/util/Annotations.scala	/^  def toFirrtl = ParamsAnnotation(target.toNamed, params.getClass.getName, paramMap)$/;"	m
toFirrtl	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^      def toFirrtl = ElaborationArtefactAnnotation(filename, tokens.toList)$/;"	m
toFixedWidthPort	src/main/scala/tilelink/BusWrapper.scala	/^  def toFixedWidthPort[D,U,E,B <: Data]$/;"	m
toFixedWidthSingleBeatSlave	src/main/scala/tilelink/BusWrapper.scala	/^  def toFixedWidthSingleBeatSlave[D,U,E,B <: Data]$/;"	m
toFixedWidthSingleBeatSlaveNode	src/main/scala/tilelink/BusWrapper.scala	/^  def toFixedWidthSingleBeatSlaveNode$/;"	m
toFixedWidthSlave	src/main/scala/tilelink/BusWrapper.scala	/^  def toFixedWidthSlave[D,U,E,B <: Data]$/;"	m
toFixedWidthSlaveNode	src/main/scala/tilelink/BusWrapper.scala	/^  def toFixedWidthSlaveNode(name: Option[String] = None, buffer: BufferParams = BufferParams.none)(gen: TLInwardNode): Unit = {$/;"	m
toInt	src/main/scala/jtag/JtagStateMachine.scala	/^    implicit def toInt(x: State) = x.id$/;"	m
toInt	src/main/scala/util/package.scala	/^    def toInt: Int = if (x) 1 else 0$/;"	m
toJSON	src/main/scala/diplomacy/AddressRange.scala	/^  def toJSON = s"""{"base":[${range.base}],"size":[${range.size}],""" +$/;"	m
toJSON	src/main/scala/diplomacy/AddressRange.scala	/^  def toJSON: String = s"""{"base": ${base}, "max": ${end}}"""$/;"	m
toJSON	src/main/scala/util/Annotations.scala	/^  def toJSON: String =$/;"	m
toJson	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def toJson(json: Any): String = {$/;"	m
toJson	src/main/scala/regmapper/RegField.scala	/^  def toJson(byteOffset: Int, bitOffset: Int): JValue = {$/;"	m
toLargeBurstSlave	src/main/scala/tilelink/BusWrapper.scala	/^  def toLargeBurstSlave[D,U,E,B <: Data]$/;"	m
toN	src/main/scala/tilelink/Bundles.scala	/^  def toN = UInt(2, bdWidth)$/;"	m
toPLIC	src/main/scala/subsystem/InterruptBus.scala	/^  def toPLIC: IntOutwardNode = int_bus.intnode$/;"	m
toRanges	src/main/scala/diplomacy/Parameters.scala	/^  def toRanges = {$/;"	m
toReceiver	src/main/scala/util/CreditedIO.scala	/^  def toReceiver(depth: Int, flow: Boolean = true): IrrevocableIO[T] = {$/;"	m
toResource	src/main/scala/amba/ahb/Parameters.scala	/^  def toResource: ResourceAddress = {$/;"	m
toResource	src/main/scala/amba/apb/Parameters.scala	/^  def toResource: ResourceAddress = {$/;"	m
toResource	src/main/scala/amba/axi4/Parameters.scala	/^  def toResource: ResourceAddress = {$/;"	m
toResource	src/main/scala/tilelink/Parameters.scala	/^  def toResource: ResourceAddress = {$/;"	m
toScalarEventSets	src/main/scala/rocket/Events.scala	/^  def toScalarEventSets: EventSets = new EventSets(eventSets.map(_._1.head))$/;"	m
toSender	src/main/scala/util/CreditedIO.scala	/^  def toSender(depth: Int, pipe: Boolean = true): DecoupledIO[T] = {$/;"	m
toSlave	src/main/scala/tilelink/BusWrapper.scala	/^  def toSlave[D,U,E,B <: Data]$/;"	m
toString	src/main/scala/diplomacy/AddressRange.scala	/^  def toString(aw: Int) = s"\\t%${aw}x - %${aw}x %c%c%c%c%c %s".format($/;"	m
toT	src/main/scala/tilelink/Bundles.scala	/^  def toT = UInt(0, bdWidth)$/;"	m
toTile	src/main/scala/tilelink/BusWrapper.scala	/^  def toTile$/;"	m
toToken	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^    def toToken(t: T) = fn(t)$/;"	m
toToken	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  def toToken(t: T): Token$/;"	m
toUVM	src/main/scala/diplomacy/AddressRange.scala	/^  def toUVM: String = f"    set_addr_range(1, 32'h${base}%08x, 32'h${end}%08x);"$/;"	m
toUVM	src/main/scala/util/Annotations.scala	/^  def toUVM: String =$/;"	m
toVariableWidthSlave	src/main/scala/tilelink/BusWrapper.scala	/^  def toVariableWidthSlave[D,U,E,B <: Data]$/;"	m
toVariableWidthSlaveNode	src/main/scala/tilelink/BusWrapper.scala	/^  def toVariableWidthSlaveNode(name: Option[String] = None, buffer: BufferParams = BufferParams.none)(node: TLInwardNode): Unit = {$/;"	m
toVariableWidthSlaveNodeOption	src/main/scala/tilelink/BusWrapper.scala	/^  def toVariableWidthSlaveNodeOption(name: Option[String] = None, buffer: BufferParams = BufferParams.none)(node: Option[TLInwardNode]): Unit = {$/;"	m
toaxi	src/main/scala/amba/axi4/AsyncCrossing.scala	/^  val toaxi = LazyModule(new TLToAXI4)$/;"	l
toaxi	src/main/scala/amba/axi4/Credited.scala	/^  val toaxi = LazyModule(new TLToAXI4)$/;"	l
todo	src/main/scala/tilelink/Broadcast.scala	/^      val todo = Mux(leaveB, 0.U, others)$/;"	l
todo	src/main/scala/tilelink/Edges.scala	/^    val todo = x.filter(!_.isEmpty)$/;"	l
toggleBits	src/main/scala/tilelink/Fragmenter.scala	/^  val toggleBits = 1$/;"	l
toggle_hi	src/main/scala/util/ECC.scala	/^    val toggle_hi = toggle_lo << (sec.width(x.getWidth)-1)$/;"	l
toggle_lo	src/main/scala/util/ECC.scala	/^    val toggle_lo = Cat(poison.asUInt, poison.asUInt)$/;"	l
toint	src/main/scala/tile/FPU.scala	/^    val toint = Bits(width = xLen)$/;"	l
toint	src/main/scala/tile/FPU.scala	/^  val toint = Bool()$/;"	l
toint	src/main/scala/tile/FPU.scala	/^  val toint = Wire(init = store)$/;"	l
toint_data	src/main/scala/tile/FPU.scala	/^  val toint_data = Bits(OUTPUT, xLen)$/;"	l
tokenBuf	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^      var tokenBuf = new mutable.ArrayBuffer[Token]()$/;"	l
tokens	src/main/scala/diplomacy/Resources.scala	/^      val tokens = name.split("\/").toList$/;"	l
tokens	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^    def tokens(args: Any*): Seq[Token] = {$/;"	m
tooBig	src/main/scala/tilelink/Monitor.scala	/^    val tooBig = 14 \/\/ >16kB worth of flight information gets to be too much$/;"	l
top	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^    val top = CircuitTarget("Foo")$/;"	l
top	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^    val top = CircuitTarget("Foo")$/;"	l
topManagers	src/main/scala/subsystem/BaseSubsystem.scala	/^  lazy val topManagers = tlBusWrapperLocationMap(p(TLManagerViewpointLocated(location))).unifyManagers$/;"	l
topMod	src/main/scala/stage/phases/PreElaboration.scala	/^    val topMod = rOpts.topModule.get$/;"	l
topModule	src/main/scala/stage/RocketChipOptions.scala	/^                                         val topModule:         Option[Class[_ <: Any]] = None,$/;"	l
topPackage	src/main/scala/stage/RocketChipOptions.scala	/^  lazy val topPackage: Option[String] = topModule match {$/;"	l
topology	src/main/scala/subsystem/BaseSubsystem.scala	/^  val topology = p(TLNetworkTopologyLocated(location))$/;"	l
tor	src/main/scala/rocket/PMP.scala	/^  def tor = !napot && torNotNAPOT$/;"	m
torNotNAPOT	src/main/scala/rocket/PMP.scala	/^  def torNotNAPOT = cfg.a(0)$/;"	m
total	src/main/scala/util/CreditedIO.scala	/^  val total = debit + credit$/;"	l
total	src/main/scala/util/Frequency.scala	/^    val total = freqs.sum$/;"	l
total	src/main/scala/util/ScatterGather.scala	/^  val total = PopCount(mask)$/;"	l
totalContainment	src/main/scala/tilelink/AddressAdjuster.scala	/^      val totalContainment = parentEdge.slave.slaves.forall(_.address.forall(params.region contains _))$/;"	l
totalContainment	src/main/scala/tilelink/RegionReplication.scala	/^      val totalContainment = edgeIn.slave.slaves.forall(_.address.forall(params.region contains _))$/;"	l
totalErrorLimit	src/main/scala/linting/LintException.scala	/^        val totalErrorLimit     = lintDisplayOptions.totalLimit.map(t => t - totalErrors).getOrElse(perErrorLimit)$/;"	l
totalNumAddrs	src/main/scala/groundtest/TraceGen.scala	/^  val totalNumAddrs = addressBag.size + numExtraAddrs$/;"	l
touch_way_sized	src/main/scala/util/Replacement.scala	/^    val touch_way_sized = if (touch_way.getWidth < log2Ceil(n_ways)) touch_way.padTo  (log2Ceil(n_ways))$/;"	l
trace	src/main/scala/rocket/CSR.scala	/^  val trace = Vec(retireWidth, new TracedInstruction).asOutput$/;"	l
trace	src/main/scala/tile/Core.scala	/^    val trace = Vec(coreParams.retireWidth, new TracedInstruction).asOutput$/;"	l
traceAuxNexusNode	src/main/scala/tile/BaseTile.scala	/^  val traceAuxNexusNode = BundleBridgeNexus[TraceAux](default = Some(() => {$/;"	l
traceAuxNode	src/main/scala/tile/BaseTile.scala	/^  val traceAuxNode: BundleBridgeInwardNode[TraceAux] =$/;"	l
traceAuxSinkNode	src/main/scala/tile/BaseTile.scala	/^  val traceAuxSinkNode = BundleBridgeSink[TraceAux]()$/;"	l
traceCoreNexusNode	src/main/scala/tile/TilePRCIDomain.scala	/^    val traceCoreNexusNode = BundleBridgeBlockDuringReset[TraceCoreInterface]($/;"	l
traceCoreNode	src/main/scala/tile/BaseTile.scala	/^  val traceCoreNode: BundleBridgeOutwardNode[TraceCoreInterface] = traceCoreSourceNode$/;"	l
traceCoreNode	src/main/scala/tile/TilePRCIDomain.scala	/^  val traceCoreNode: BundleBridgeIdentityNode[TraceCoreInterface] = BundleBridgeNameNode(traceCoreSignalName)$/;"	l
traceCoreSourceNode	src/main/scala/tile/BaseTile.scala	/^  val traceCoreSourceNode = BundleBridgeSource(() => new TraceCoreInterface(traceCoreParams))$/;"	l
traceNexusNode	src/main/scala/tile/TilePRCIDomain.scala	/^    val traceNexusNode = BundleBridgeBlockDuringReset[Vec[TracedInstruction]]($/;"	l
traceNode	src/main/scala/tile/BaseTile.scala	/^  val traceNode: BundleBridgeOutwardNode[Vec[TracedInstruction]] = traceNexus := traceSourceNode$/;"	l
traceNode	src/main/scala/tile/TilePRCIDomain.scala	/^  val traceNode: BundleBridgeIdentityNode[Vec[TracedInstruction]] = BundleBridgeNameNode(traceSignalName)$/;"	l
traceSourceNode	src/main/scala/tile/BaseTile.scala	/^  val traceSourceNode = BundleBridgeSource(() => Vec(traceRetireWidth, new TracedInstruction()))$/;"	l
traceStall	src/main/scala/tile/Core.scala	/^    val traceStall = Bool().asInput$/;"	l
trace_count	src/main/resources/csrc/emulator.cc	/^static uint64_t trace_count = 0;$/;"	v	file:
trace_count	src/main/resources/vsrc/TestDriver.v	/^  reg [63:0] trace_count = 0;$/;"	r
tracegen	src/main/scala/groundtest/TraceGen.scala	/^  val tracegen = Module(new TraceGenerator(outer.params))$/;"	l
track	src/main/scala/tilelink/AddressAdjuster.scala	/^          val track = flight.slice(c.sourceId.start, c.sourceId.end)$/;"	l
track	src/main/scala/tilelink/FIFOFixer.scala	/^        val track = flight.slice(c.sourceId.start, c.sourceId.end)$/;"	l
trackerReady	src/main/scala/tilelink/Broadcast.scala	/^      val trackerReady = (selectTracker & trackerReadys).orR()$/;"	l
trackerReadys	src/main/scala/tilelink/Broadcast.scala	/^      val trackerReadys = VecInit(trackers.map(_.in_a.ready)).asUInt$/;"	l
trackers	src/main/scala/tilelink/Broadcast.scala	/^      val trackers = Seq.tabulate(params.numTrackers) { id =>$/;"	l
trailingZeros	src/main/scala/util/package.scala	/^  def trailingZeros(x: Int): Option[Int] = if (x > 0) Some(log2Ceil(x & -x)) else None$/;"	m
transBits	src/main/scala/amba/ahb/Parameters.scala	/^  val transBits = AHBParameters.transBits$/;"	l
transBits	src/main/scala/amba/ahb/Protocol.scala	/^  val transBits = 2$/;"	l
transfer	src/main/scala/devices/debug/abstract_commands.scala	/^  val transfer = Bool()$/;"	l
transferSizes	src/main/scala/amba/axis/Parameters.scala	/^  val transferSizes = master.emitsMinCover intersect slave.supportsMinCover$/;"	l
transform	src/main/scala/tilelink/Broadcast.scala	/^  val transform = Mux(shared, TRANSFORM_B, TRANSFORM_T)$/;"	l
transform	src/main/scala/tilelink/HintHandler.scala	/^      val transform = out.d.bits.source(0)$/;"	l
transform	src/test/scala/linting/rule/LintConflictingModuleNamesSpec.scala	/^  val transform = new LintConflictingModuleNames$/;"	l
transform	src/test/scala/transforms/naming/RenameDesiredNamesSpec.scala	/^  val transform = new RenameDesiredNames$/;"	l
translator	src/main/scala/subsystem/Configs.scala	/^        val translator = LazyModule(new TranslatorExample(OpcodeSet.custom1)(p))$/;"	l
transpose	src/main/scala/amba/axi4/Xbar.scala	/^    def transpose[T](x: Seq[Seq[T]]) = Seq.tabulate(x(0).size) { i => Seq.tabulate(x.size) { j => x(j)(i) } }$/;"	m
transpose	src/main/scala/tilelink/Xbar.scala	/^    def transpose[T](x: Seq[Seq[T]]) = if (x.isEmpty) Nil else Vector.tabulate(x(0).size) { i => Vector.tabulate(x.size) { j => x(j)(i) } }$/;"	m
trapToDebug	src/main/scala/rocket/CSR.scala	/^  val trapToDebug = Bool(usingDebug) && (reg_singleStepped || causeIsDebugInt || causeIsDebugTrigger || causeIsDebugBreak || reg_debug)$/;"	l
trapToNmi	src/main/scala/rocket/CSR.scala	/^  val trapToNmi = trapToNmiInt || trapToNmiXcpt$/;"	l
trapToNmiInt	src/main/scala/rocket/CSR.scala	/^  val trapToNmiInt = usingNMI.B && causeIsNmi$/;"	l
trapToNmiXcpt	src/main/scala/rocket/CSR.scala	/^  val trapToNmiXcpt = usingNMI.B && !nmie$/;"	l
traverse	src/main/scala/rocket/PTW.scala	/^  val traverse = pte.table() && !invalid_paddr && count < pgLevels-1$/;"	l
travis_jigger	regression/travis_jigger.bash	/^travis_jigger() {$/;"	f
travis_setup_env	regression/travis_setup_env.bash	/^travis_setup_env() {$/;"	f
travis_wait	regression/run-test-bucket	/^  travis_wait() {$/;"	f
travis_wait	regression/travis_wait.bash	/^travis_wait() {$/;"	f
travis_whereami	regression/travis_whereami.bash	/^travis_whereami() {$/;"	f
tree	src/main/scala/diplomacy/Resources.scala	/^    val tree = makeTree(descs.toList.flatMap { case (d, Description(name, mapping)) =>$/;"	l
treeIsEmpty	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^  def treeIsEmpty() = tree.size == 0$/;"	m
treeNode	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^    val treeNode = treeOpt.map{$/;"	l
treeOpt	src/main/scala/diplomaticobjectmodel/logicaltree/LogicalTreeNode.scala	/^    val treeOpt = tree.get(parent)$/;"	l
trigBits	src/main/scala/devices/debug/Debug.scala	/^          val trigBits = log2Up(nExtTriggers-1)$/;"	l
trigInReq	src/main/scala/devices/debug/Debug.scala	/^        val trigInReq  = ResetSynchronizerShiftReg(in=extTriggerInReq,  sync=3, name=Some("dm_extTriggerInReqSync"))$/;"	l
trigOutAck	src/main/scala/devices/debug/Debug.scala	/^        val trigOutAck = ResetSynchronizerShiftReg(in=extTriggerOutAck, sync=3, name=Some("dm_extTriggerOutAckSync"))$/;"	l
trim	macros/src/main/scala/ValName.scala	/^      val trim = s.replaceAll("\\\\s", "")$/;"	l
trim	src/main/scala/amba/axi4/Xbar.scala	/^      def trim(id: UInt, size: Int) = if (size <= 1) UInt(0) else id(log2Ceil(size)-1, 0)$/;"	m
trim	src/main/scala/amba/axis/Xbar.scala	/^    def trim(id: UInt, size: Int) = if (size <= 1) 0.U else id(log2Ceil(size)-1, 0)$/;"	m
trim	src/main/scala/tilelink/Parameters.scala	/^    def trim(x: TransferSizes) = range.map(_.intersect(x)).getOrElse(x)$/;"	m
trim	src/main/scala/tilelink/Xbar.scala	/^    def trim(id: UInt, size: Int): UInt = if (size <= 1) 0.U else id(log2Ceil(size)-1, 0)$/;"	m
trimPrivilege	src/main/scala/rocket/CSR.scala	/^  def trimPrivilege(priv: UInt): UInt =$/;"	m
trstn	src/main/resources/csrc/remote_bitbang.h	/^  unsigned char trstn;$/;"	m	class:remote_bitbang_t
truncIdx	src/main/scala/util/package.scala	/^        val truncIdx =$/;"	l
tryRdEn	src/main/scala/devices/debug/SBA.scala	/^    val tryRdEn = (SBADDRESSWrEn(0) && SBCSFieldsReg.sbreadonaddr) || (SBDATARdEn(0) && SBCSFieldsReg.sbreadondata)$/;"	l
tryWrEn	src/main/scala/devices/debug/SBA.scala	/^    val tryWrEn = SBDATAWrEn(0)$/;"	l
try_cast_int	scripts/vlsi_rom_gen	/^def try_cast_int(x):$/;"	f
tselect	src/main/scala/rocket/Instructions.scala	/^  val tselect = 0x7a0$/;"	l
tsr	src/main/scala/rocket/CSR.scala	/^  val tsr = Bool()$/;"	l
ttype	src/main/scala/rocket/Breakpoint.scala	/^  val ttype = UInt(4.W)$/;"	l
tuples	src/main/scala/tilelink/Xbar.scala	/^    val tuples = pow2Sizes.zipWithIndex.sortBy(_._1) \/\/ record old index, then sort by increasing size$/;"	l
tval	src/main/scala/rocket/CSR.scala	/^  val tval = UInt(INPUT, vaddrBitsExtended)$/;"	l
tval	src/main/scala/rocket/CSR.scala	/^  val tval = UInt(width = coreMaxAddrBits max iLen)$/;"	l
tval	src/main/scala/util/TraceCoreInterface.scala	/^  val tval = UInt(params.xlen.W)$/;"	l
tval_any_addr	src/main/scala/rocket/RocketCore.scala	/^  val tval_any_addr = tval_dmem_addr ||$/;"	l
tval_dmem_addr	src/main/scala/rocket/RocketCore.scala	/^  val tval_dmem_addr = !wb_reg_xcpt$/;"	l
tval_inst	src/main/scala/rocket/RocketCore.scala	/^  val tval_inst = wb_reg_cause === Causes.illegal_instruction$/;"	l
tval_valid	src/main/scala/rocket/RocketCore.scala	/^  val tval_valid = wb_xcpt && (tval_any_addr || tval_inst)$/;"	l
tvec	src/main/scala/rocket/CSR.scala	/^  val tvec = Mux(trapToDebug, debugTVec, Mux(trapToNmi, nmiTVec, notDebugTVec))$/;"	l
tvm	src/main/scala/rocket/CSR.scala	/^  val tvm = Bool()$/;"	l
tw	src/main/scala/rocket/CSR.scala	/^  val tw = Bool()$/;"	l
txLast	src/main/scala/devices/debug/SBA.scala	/^    val txLast    = counter === ((1.U << io.sizeIn) - 1.U)$/;"	l
txnCountBits	src/main/scala/amba/axi4/ToTL.scala	/^      val txnCountBits = log2Ceil(maxFlight+1) \/\/ wrap-around must not block b_allow$/;"	l
txns	src/main/scala/unittest/Configs.scala	/^    val txns = 100 * site(TestDurationMultiplier)$/;"	l
typ	src/main/scala/tile/FPU.scala	/^  val typ = Bits(width = 2)$/;"	l
typeHints	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  def typeHints: Seq[Class[_]] = Seq($/;"	m
typeTag	src/main/scala/tile/FPU.scala	/^    val typeTag = UInt(width = log2Up(floatTypes.size))$/;"	l
typeTag	src/main/scala/tile/FPU.scala	/^  def typeTag(t: FType) = floatTypes.indexOf(t)$/;"	m
typeTagGroup	src/main/scala/tile/FPU.scala	/^  def typeTagGroup(t: FType) = UInt(if (floatTypes.contains(t)) typeTag(t) else typeTag(maxType))$/;"	m
typeTagIn	src/main/scala/tile/FPU.scala	/^  val typeTagIn = UInt(2.W)$/;"	l
typeTagOut	src/main/scala/tile/FPU.scala	/^  val typeTagOut = UInt(2.W)$/;"	l
typeTagWbOffset	src/main/scala/tile/FPU.scala	/^  def typeTagWbOffset = UInt(FType.all.indexOf(minType) + 1)$/;"	m
u	src/main/scala/rocket/Breakpoint.scala	/^  val u = Bool()$/;"	l
u	src/main/scala/rocket/PTW.scala	/^  val u = Bool()$/;"	l
u	src/main/scala/rocket/RocketCore.scala	/^    val u = Module(new SCIEPipelined(xLen))$/;"	l
u	src/main/scala/rocket/RocketCore.scala	/^    val u = Module(new SCIEUnpipelined(xLen))$/;"	l
u	src/main/scala/rocket/TLB.scala	/^  val u = Bool()$/;"	l
uRatio	src/main/scala/diplomacy/Nodes.scala	/^  def uRatio: Int = iPorts.size \/ multiplicity$/;"	m
ube	src/main/scala/rocket/CSR.scala	/^  val ube = Bool()$/;"	l
ucause	src/main/scala/rocket/Instructions.scala	/^  val ucause = 0x42$/;"	l
ueip	src/main/scala/rocket/CSR.scala	/^  val ueip = Bool()$/;"	l
uepc	src/main/scala/rocket/Instructions.scala	/^  val uepc = 0x41$/;"	l
uid	src/main/scala/util/DescribedSRAM.scala	/^    val uid = 0$/;"	l
uie	src/main/scala/rocket/CSR.scala	/^  val uie = Bool()$/;"	l
uie	src/main/scala/rocket/Instructions.scala	/^  val uie = 0x4$/;"	l
uint	src/main/scala/regmapper/RegMapper.scala	/^        val uint = UInt(word & ~mask, width = inBits)$/;"	l
uintToBitPat	src/main/scala/util/package.scala	/^  implicit def uintToBitPat(x: UInt): BitPat = BitPat(x)$/;"	m
uintstatus	src/main/scala/rocket/Instructions.scala	/^  val uintstatus = 0x46$/;"	l
uip	src/main/scala/rocket/Instructions.scala	/^  val uip = 0x44$/;"	l
unary_	src/main/scala/util/package.scala	/^    def unary_~(): Seq[Bool] = x.map(!_)$/;"	m
unbox	src/main/scala/tile/FPU.scala	/^  def unbox(x: UInt, tag: UInt, exactType: Option[FType]): UInt = {$/;"	m
uncache_resp	src/main/scala/rocket/NBDcache.scala	/^  val uncache_resp = Wire(Valid(new HellaCacheResp))$/;"	l
uncachedGrantOpcodes	src/main/scala/rocket/DCache.scala	/^    val uncachedGrantOpcodes = uncachedGrantOpcodesWithData ++ uncachedGrantOpcodesSansData$/;"	l
uncachedGrantOpcodesSansData	src/main/scala/rocket/DCache.scala	/^    val uncachedGrantOpcodesSansData = Seq(AccessAck, HintAck)$/;"	l
uncachedGrantOpcodesWithData	src/main/scala/rocket/DCache.scala	/^    val uncachedGrantOpcodesWithData = Seq(AccessAckData)$/;"	l
uncachedInFlight	src/main/scala/rocket/DCache.scala	/^  val uncachedInFlight = RegInit(Vec.fill(maxUncachedInFlight)(false.B))$/;"	l
uncachedReqs	src/main/scala/rocket/DCache.scala	/^  val uncachedReqs = Reg(Vec(maxUncachedInFlight, new HellaCacheReq))$/;"	l
uncachedResp	src/main/scala/rocket/DCache.scala	/^  val uncachedResp = WireInit(new HellaCacheReq, DontCare)$/;"	l
uncachedRespIdxOH	src/main/scala/rocket/DCache.scala	/^  val uncachedRespIdxOH = UIntToOH(tl_out.d.bits.source, maxUncachedInFlight+mmioOffset) >> mmioOffset$/;"	l
uncached_resp	src/main/scala/rocket/HellaCache.scala	/^  val uncached_resp = tileParams.dcache.get.separateUncachedResp.option(Decoupled(new HellaCacheResp).flip)$/;"	l
uncached_tag_hit	src/main/scala/rocket/HellaCacheArbiter.scala	/^        val uncached_tag_hit = io.mem.uncached_resp.get.bits.tag(log2Up(n)-1,0) === UInt(i)$/;"	l
uncommonBits	src/main/scala/diplomacy/Parameters.scala	/^      val uncommonBits = (x | UInt(0, width=smallestCommonBit))(largestDeltaBit, 0)$/;"	l
uncommonMask	src/main/scala/diplomacy/Parameters.scala	/^      val uncommonMask = (1 << smallestCommonBit) - 1$/;"	l
uncorrectable	src/main/scala/rocket/DCache.scala	/^  val uncorrectable = (cacheParams.tagCode.canDetect || cacheParams.dataCode.canDetect).option(Valid(UInt(width = paddrBits)))$/;"	l
uncorrectable	src/main/scala/rocket/ICache.scala	/^  val uncorrectable = (cacheParams.itimAddr.nonEmpty && cacheParams.dataCode.canDetect).option(Valid(UInt(width = paddrBits)))$/;"	l
uncorrectable	src/main/scala/tilelink/SRAM.scala	/^  val uncorrectable = (params.code.canDetect  && params.notifyErrors).option(Valid(UInt(addrBits.W)))$/;"	l
uncorrectable	src/main/scala/util/ECC.scala	/^    def uncorrectable = Bool(false)$/;"	m
uncorrectable	src/main/scala/util/ECC.scala	/^    val uncorrectable = !pardec.uncorrectable && secdec.correctable$/;"	l
uncorrectable	src/main/scala/util/ECC.scala	/^    val uncorrectable = if (poisonous(n)) { syndromeUInt > UInt(n) } else { Bool(false) }$/;"	l
uncorrectable	src/main/scala/util/ECC.scala	/^    val uncorrectable = y.xorR$/;"	l
uncorrectable	src/main/scala/util/ECC.scala	/^  def uncorrectable: Bool \/\/ If true, correctable should be ignored$/;"	m
uncorrectable	src/main/scala/util/ECC.scala	/^  val uncorrectable = RegInit(UInt(0, width=n))$/;"	l
uncorrectable	src/main/scala/util/ECC.scala	/^  val uncorrectable: Option[ValidIO[UInt]]$/;"	l
uncorrected	src/main/scala/util/ECC.scala	/^    def uncorrected = y$/;"	m
uncorrected	src/main/scala/util/ECC.scala	/^    val uncorrected = secdec.uncorrected$/;"	l
uncorrected	src/main/scala/util/ECC.scala	/^    val uncorrected = y(k-1, 0)$/;"	l
uncorrected	src/main/scala/util/ECC.scala	/^    val uncorrected = y(y.getWidth-2,0)$/;"	l
uncorrected	src/main/scala/util/ECC.scala	/^  def uncorrected: UInt$/;"	m
uncovered	src/main/scala/rocket/Decode.scala	/^    val uncovered = minterms.filterNot(t => essential.exists(_ covers t))$/;"	l
undefZero	src/main/scala/regmapper/RegisterRouter.scala	/^  val undefZero = devParams.undefZero$/;"	l
undefZero	src/main/scala/tilelink/RegisterRouter.scala	/^     val undefZero:   Boolean = true,$/;"	l
underscore	src/main/scala/util/package.scala	/^    def underscore: String = x.tail.foldLeft(x.headOption.map(_.toLower + "") getOrElse "") {$/;"	m
ungated_clock	src/main/scala/rocket/CSR.scala	/^  val ungated_clock = Clock().asInput$/;"	l
unify	src/main/scala/diplomacy/AddressRange.scala	/^  def unify(seq: Seq[AddressRange]): Seq[AddressRange] = {$/;"	m
unify	src/main/scala/diplomacy/Parameters.scala	/^  def unify(seq: Seq[AddressSet]): Seq[AddressSet] = {$/;"	m
unify	src/main/scala/diplomacy/Parameters.scala	/^  def unify(seq: Seq[AddressSet], bit: BigInt): Seq[AddressSet] = {$/;"	m
unify	src/main/scala/util/BundleMap.scala	/^  def unify(that: BundleFieldBase): BundleFieldBase = {$/;"	m
unifyManagers	src/main/scala/tile/BaseTile.scala	/^  def unifyManagers: List[TLManagerParameters] = ManagerUnification(visibleManagers)$/;"	m
unifyManagers	src/main/scala/tilelink/BusWrapper.scala	/^  def unifyManagers: List[TLManagerParameters] = ManagerUnification(busView.manager.managers)$/;"	m
unimp	src/main/scala/rocket/RVC.scala	/^    def unimp = inst(Cat(lwImm >> 5, rs2p, rs1p, 2.U(3.W), lwImm(4,0), 0x3F.U(7.W)), rs2p, rs1p, rs2p)$/;"	m
union	src/main/scala/amba/ahb/Parameters.scala	/^  def union(x: AHBBundleParameters) = {$/;"	m
union	src/main/scala/amba/ahb/Parameters.scala	/^  def union(x: Seq[AHBBundleParameters]) =$/;"	m
union	src/main/scala/amba/apb/Parameters.scala	/^  def union(x: APBBundleParameters) =$/;"	m
union	src/main/scala/amba/apb/Parameters.scala	/^  def union(x: Seq[APBBundleParameters]) = x.foldLeft(emptyBundleParams)((x,y) => x.union(y))$/;"	m
union	src/main/scala/amba/axi4/Parameters.scala	/^  def union(x: AXI4BundleParameters) =$/;"	m
union	src/main/scala/amba/axi4/Parameters.scala	/^  def union(x: Seq[AXI4BundleParameters]) = x.foldLeft(emptyBundleParams)((x,y) => x.union(y))$/;"	m
union	src/main/scala/amba/axis/Parameters.scala	/^  def union(x: AXISBundleParameters) = new AXISBundleParameters($/;"	m
union	src/main/scala/amba/axis/Parameters.scala	/^  def union(x: Seq[AXISBundleParameters]) = x.foldLeft(emptyBundleParams)((x,y) => x.union(y))$/;"	m
union	src/main/scala/diplomacy/AddressRange.scala	/^  def union(x: AddressRange): Option[AddressRange] = {$/;"	m
union	src/main/scala/tilelink/Parameters.scala	/^  def union(x: Seq[TLBundleParameters]) = x.foldLeft(emptyBundleParams)((x,y) => x.union(y))$/;"	m
union	src/main/scala/tilelink/Parameters.scala	/^  def union(x: TLBundleParameters) =$/;"	m
union	src/main/scala/util/BundleMap.scala	/^  def union(fields: Seq[BundleFieldBase]): Seq[BundleFieldBase] =$/;"	m
unique	src/main/scala/tilelink/Xbar.scala	/^    def unique(x: Vector[Boolean]): Bool = (x.filter(x=>x).size <= 1).B$/;"	m
unknownEmits	src/main/scala/tilelink/Parameters.scala	/^  def unknownEmits = TLMasterToSlaveTransferSizes($/;"	m
unknownEmits	src/main/scala/tilelink/Parameters.scala	/^  def unknownEmits = TLSlaveToMasterTransferSizes($/;"	m
unknownSupports	src/main/scala/tilelink/Parameters.scala	/^  def unknownSupports = TLMasterToSlaveTransferSizes()$/;"	m
unknownSupports	src/main/scala/tilelink/Parameters.scala	/^  def unknownSupports = TLSlaveToMasterTransferSizes()$/;"	m
unpackIEEE	src/main/scala/tile/FPU.scala	/^  def unpackIEEE(x: UInt) = x.asTypeOf(ieeeBundle)$/;"	m
unpause	src/main/scala/rocket/RocketCore.scala	/^  val unpause = csr.io.time(rocketParams.lgPauseCycles-1, 0) === 0 || csr.io.inhibit_cycle || io.dmem.perf.release || take_pc$/;"	l
unpipelined	src/main/scala/scie/SCIE.scala	/^  val unpipelined = Output(Bool())$/;"	l
unready	src/main/scala/tilelink/Arbiter.scala	/^    val unready = (rightOR(filter, width*2, width) >> 1) | (mask << width)$/;"	l
unrecoded	src/main/scala/tile/FPU.scala	/^      val unrecoded = t.ieee(x)$/;"	l
unrolls	src/main/scala/rocket/Multiplier.scala	/^    val unrolls = ((0 until cfg.divUnroll) scanLeft remainder) { case (rem, i) =>$/;"	l
unsafe	src/main/scala/tilelink/CacheCork.scala	/^  val unsafe = params.unsafe$/;"	l
unsafeConvert	src/main/scala/tile/FPU.scala	/^  def unsafeConvert(x: UInt, to: FType) = if (this == to) x else {$/;"	m
unset	src/main/scala/diplomacy/Parameters.scala	/^  def unset = TriStateValue(false, false)$/;"	m
unsigned	src/main/scala/tilelink/AtomicAutomata.scala	/^        val unsigned = a_cam_a.bits.param(1)$/;"	l
unsigned	src/main/scala/tilelink/Atomics.scala	/^  val unsigned = io.a.param(1)$/;"	l
unswizzled	src/main/scala/tile/FPU.scala	/^          val unswizzled = Cat($/;"	l
unswizzled	src/main/scala/tile/FPU.scala	/^      val unswizzled = Cat($/;"	l
untagBits	src/main/scala/tile/L1Cache.scala	/^  def untagBits = blockOffBits + idxBits$/;"	m
unusedChainOut	src/main/scala/jtag/JtagTap.scala	/^    val unusedChainOut = Wire(new ShifterIO)  \/\/ De-selected chain output$/;"	l
unusedRegionTypes	src/main/scala/tilelink/Parameters.scala	/^  val unusedRegionTypes: Set[RegionType.T],$/;"	l
unusedSources	src/main/scala/tilelink/Parameters.scala	/^  def unusedSources: Seq[Int] = {$/;"	m
unvirtualized_mapping	src/main/scala/rocket/CSR.scala	/^    val unvirtualized_mapping = for (((k, _), v) <- read_mapping zip decoded) yield k -> v.asBool$/;"	l
unxti	src/main/scala/rocket/Instructions.scala	/^  val unxti = 0x45$/;"	l
unzip	src/main/scala/util/package.scala	/^    def unzip = (x.map(_._1), x.map(_._2))$/;"	m
up	src/main/scala/regmapper/RegisterCrossing.scala	/^  val up = RegInit(Bool(false))$/;"	l
upd	src/main/scala/tilelink/SRAM.scala	/^        val upd = d_mask(i) && !d_read$/;"	l
upd	src/main/scala/tilelink/SRAM.scala	/^      val upd = d_mask(eccBytes*(i+1)-1, eccBytes*i)$/;"	l
update	src/main/scala/diplomacy/Parameters.scala	/^  def update(orig: Boolean) = if (set) value else orig$/;"	m
update	src/main/scala/jtag/JtagShifter.scala	/^    val update = Valid(genUpdate)  \/\/ valid high when in update state (single cycle), contents may change any time after$/;"	l
update	src/main/scala/jtag/JtagShifter.scala	/^  val update = Bool()  \/\/ high in the UpdateIR\/DR state when this chain is selected$/;"	l
update	src/main/scala/tilelink/Broadcast.scala	/^  val update  = Flipped(Decoupled(new ProbeFilterUpdate(params)))$/;"	l
update	src/main/scala/util/CreditedIO.scala	/^  def update(c: CreditedIO[_]): Unit = { update(c.credit, c.debit) }$/;"	m
update	src/main/scala/util/CreditedIO.scala	/^  def update(credit: Bool, debit: Bool): Unit = {$/;"	m
update	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  def update(renames: RenameMap) = Seq(this)$/;"	m
update	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  def update(renames: RenameMap) = {$/;"	m
update	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  def update(renames: RenameMap): Seq[Annotation] = {$/;"	m
update	src/main/scala/util/ElaborationArtefactAnnotation.scala	/^  def update(renames: RenameMap): Seq[Token]$/;"	m
update	src/main/scala/util/Replacement.scala	/^  def update(valid: Bool, hit: Bool, set: UInt, way: UInt) = {$/;"	m
update	src/main/scala/util/Replacement.scala	/^  def update(valid: Bool, hit: Bool, set: UInt, way: UInt): Unit$/;"	m
updateBTB	src/main/scala/rocket/Frontend.scala	/^    val updateBTB = Wire(init=false.B)$/;"	l
updateBits	src/main/scala/jtag/JtagShifter.scala	/^  val updateBits = Cat(regs.reverse)(updateWidth-1, 0)$/;"	l
updateHistory	src/main/scala/rocket/BTB.scala	/^  def updateHistory(addr: UInt, d: BHTResp, taken: Bool): Unit = {$/;"	m
updateHits	src/main/scala/rocket/BTB.scala	/^      val updateHits = (pageHit << 1)(Mux1H(idxMatch(r_btb_update.bits.pc), idxPages))$/;"	l
updatePageHit	src/main/scala/rocket/BTB.scala	/^  val updatePageHit = pageMatch(r_btb_update.bits.pc)$/;"	l
updatePlic	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^  def updatePlic(plic: OMPLIC): OMPLIC = {$/;"	m
updateTable	src/main/scala/rocket/BTB.scala	/^  def updateTable(addr: UInt, d: BHTResp, taken: Bool): Unit = {$/;"	m
updateWidth	src/main/scala/jtag/JtagShifter.scala	/^  val updateWidth = DataMirror.widthOf(genUpdate) match {$/;"	l
update_target	src/main/scala/rocket/BTB.scala	/^  val update_target = io.req.bits.addr$/;"	l
update_way	src/main/scala/util/Replacement.scala	/^    val update_way = Mux(hit, way, plru_way)$/;"	l
updatedPlic	src/main/scala/diplomaticobjectmodel/logicaltree/RocketLogicalTreeNode.scala	/^        val updatedPlic = updatePlic(omplic)$/;"	l
updatesOutOfOrder	src/main/scala/rocket/BTB.scala	/^  val updatesOutOfOrder = btbParams.updatesOutOfOrder$/;"	l
upie	src/main/scala/rocket/CSR.scala	/^  val upie = Bool()$/;"	l
upper	src/main/scala/rocket/AMOALU.scala	/^      val upper = Mux(addr(i), res, UInt(0)) | Mux(size >= UInt(i+1), UInt((BigInt(1) << (1 << i))-1), UInt(0))$/;"	l
upper	src/main/scala/rocket/DCache.scala	/^      val upper = Mux(io.cpu.req.bits.addr(i), in, 0.U) | upper_mask$/;"	l
upperMoreRecent	src/main/scala/util/Replacement.scala	/^      val upperMoreRecent = (if (i == n_ways-1) true.B else moreRecentVec(i).apply(n_ways-1,i+1).andR)$/;"	l
upper_mask	src/main/scala/rocket/DCache.scala	/^      val upper_mask = Mux(i >= wordBytes.log2 || io.cpu.req.bits.size <= i.U, 0.U,$/;"	l
ur	src/main/scala/rocket/PTW.scala	/^  def ur(dummy: Int = 0) = sr() && u$/;"	m
usage	src/main/resources/csrc/emulator.cc	/^static void usage(const char * program_name)$/;"	f	file:
uscratch	src/main/scala/rocket/Instructions.scala	/^  val uscratch = 0x40$/;"	l
uscratchcsw	src/main/scala/rocket/Instructions.scala	/^  val uscratchcsw = 0x48$/;"	l
uscratchcswl	src/main/scala/rocket/Instructions.scala	/^  val uscratchcswl = 0x49$/;"	l
useAtomics	src/main/scala/tile/Core.scala	/^  val useAtomics: Boolean$/;"	l
useAtomicsOnlyForIO	src/main/scala/tile/Core.scala	/^  val useAtomicsOnlyForIO: Boolean$/;"	l
useBPWatch	src/main/scala/tile/Core.scala	/^  val useBPWatch: Boolean$/;"	l
useBitManip	src/main/scala/tile/Core.scala	/^  val useBitManip: Boolean = false$/;"	l
useClockGating	src/main/scala/tile/FPU.scala	/^  val useClockGating = coreParams match {$/;"	l
useCompressed	src/main/scala/tile/Core.scala	/^  val useCompressed: Boolean$/;"	l
useDebug	src/main/scala/tile/Core.scala	/^  val useDebug: Boolean$/;"	l
useGet	src/main/scala/tilelink/HintHandler.scala	/^      def useGet(m: TLSlaveParameters) = !(passthrough && m.supportsHint) && !m.supportsPutPartial$/;"	m
useHypervisor	src/main/scala/tile/Core.scala	/^  val useHypervisor: Boolean$/;"	l
useNMI	src/main/scala/tile/Core.scala	/^  val useNMI: Boolean$/;"	l
usePP	src/main/scala/tilelink/HintHandler.scala	/^      def usePP (m: TLSlaveParameters) = !(passthrough && m.supportsHint) && m.supportsPutPartial$/;"	m
usePageHit	src/main/scala/rocket/BTB.scala	/^  val usePageHit = pageHit.orR$/;"	l
useRAS	src/main/scala/rocket/Frontend.scala	/^    val useRAS = Wire(init=false.B)$/;"	l
useRVE	src/main/scala/tile/Core.scala	/^  val useRVE: Boolean$/;"	l
useRegFields	src/main/scala/tilelink/Broadcast.scala	/^  def useRegFields(bankIndex: Int): Seq[RegField.Map] = Nil$/;"	m
useSCIE	src/main/scala/tile/Core.scala	/^  val useSCIE: Boolean$/;"	l
useScoreboard	src/main/scala/tile/FPU.scala	/^  def useScoreboard(f: ((Pipe, Int)) => Bool) = pipes.zipWithIndex.filter(_._1.lat > 3).map(x => f(x)).fold(Bool(false))(_||_)$/;"	m
useSupervisor	src/main/scala/tile/Core.scala	/^  val useSupervisor: Boolean$/;"	l
useUpdatePageHit	src/main/scala/rocket/BTB.scala	/^  val useUpdatePageHit = updatePageHit.orR$/;"	l
useUser	src/main/scala/tile/Core.scala	/^  val useUser: Boolean$/;"	l
useVM	src/main/scala/rocket/ICache.scala	/^  val useVM = p(TileKey).core.useVM$/;"	l
useVM	src/main/scala/tile/Core.scala	/^  val useVM: Boolean$/;"	l
useVector	src/main/scala/tile/Core.scala	/^  val useVector: Boolean = false$/;"	l
use_latches	scripts/vlsi_mem_gen	/^use_latches = 0$/;"	v
usedSources	src/main/scala/tilelink/Parameters.scala	/^    val usedSources = masters.map(_.sourceId).sortBy(_.start)$/;"	l
useful	src/main/scala/rocket/TLBPermissions.scala	/^    val useful = r || w || x || c || a || l$/;"	l
user	src/main/scala/amba/axi4/Bundles.scala	/^  val user   = BundleMap(params.requestFields.filter(_.key.isControl))$/;"	l
user	src/main/scala/amba/axi4/Bundles.scala	/^  val user = BundleMap(params.requestFields.filter(_.key.isData))$/;"	l
user	src/main/scala/amba/axi4/Bundles.scala	/^  val user = BundleMap(params.responseFields) \/\/ control and data$/;"	l
user	src/main/scala/amba/axi4/Bundles.scala	/^  val user = BundleMap(params.responseFields.filter(_.key.isControl))$/;"	l
user	src/main/scala/tilelink/Broadcast.scala	/^  val user    = Reg(io.in_a.bits.user)$/;"	l
user	src/main/scala/tilelink/Bundles.scala	/^  val user    = BundleMap(params.requestFields)$/;"	l
user	src/main/scala/tilelink/Bundles.scala	/^  val user    = BundleMap(params.responseFields)$/;"	l
userBits	src/main/scala/amba/ahb/Protocol.scala	/^  val userBits  = 3$/;"	l
userFields	src/main/scala/amba/axis/Parameters.scala	/^  val userFields:   Seq[BundleFieldBase],$/;"	l
userFields	src/main/scala/amba/axis/Parameters.scala	/^  val userFields:  Seq[BundleFieldBase],$/;"	l
user_bit_cacheable	src/main/scala/rocket/DCache.scala	/^    val user_bit_cacheable = s2_pma.cacheable$/;"	l
user_bit_cacheable	src/main/scala/rocket/ICache.scala	/^    val user_bit_cacheable = true.B$/;"	l
user_ecall	src/main/scala/rocket/Instructions.scala	/^  val user_ecall = 0x8$/;"	l
usesFPU	src/main/scala/tile/LazyRoCC.scala	/^      val usesFPU: Boolean = false$/;"	l
usingAtomics	src/main/scala/tile/Core.scala	/^  val usingAtomics = coreParams.useAtomics$/;"	l
usingAtomicsInCache	src/main/scala/tile/Core.scala	/^  val usingAtomicsInCache = usingAtomics && !usingAtomicsOnlyForIO$/;"	l
usingAtomicsOnlyForIO	src/main/scala/tile/Core.scala	/^  val usingAtomicsOnlyForIO = coreParams.useAtomicsOnlyForIO$/;"	l
usingBTB	src/main/scala/tile/BaseTile.scala	/^  def usingBTB: Boolean = tileParams.btb.isDefined && tileParams.btb.get.nEntries > 0$/;"	m
usingBitManip	src/main/scala/tile/Core.scala	/^  val usingBitManip = coreParams.useBitManip$/;"	l
usingCompressed	src/main/scala/tile/Core.scala	/^  val usingCompressed = coreParams.useCompressed$/;"	l
usingDataScratchpad	src/main/scala/tile/BaseTile.scala	/^  def usingDataScratchpad: Boolean = tileParams.dcache.flatMap(_.scratch).isDefined$/;"	m
usingDebug	src/main/scala/tile/BaseTile.scala	/^  def usingDebug: Boolean = tileParams.core.useDebug$/;"	m
usingFPU	src/main/scala/tile/Core.scala	/^  val usingFPU = coreParams.fpu.nonEmpty$/;"	l
usingHypervisor	src/main/scala/tile/BaseTile.scala	/^  def usingHypervisor: Boolean = usingVM && tileParams.core.useHypervisor$/;"	m
usingMulDiv	src/main/scala/tile/Core.scala	/^  val usingMulDiv = coreParams.mulDiv.nonEmpty$/;"	l
usingNMI	src/main/scala/tile/Core.scala	/^  val usingNMI = coreParams.useNMI$/;"	l
usingPTW	src/main/scala/tile/BaseTile.scala	/^  def usingPTW: Boolean = usingVM$/;"	m
usingRMW	src/main/scala/rocket/DCache.scala	/^  val usingRMW = eccBytes > 1 || usingAtomicsInCache$/;"	l
usingRoCC	src/main/scala/tile/BaseTile.scala	/^  def usingRoCC: Boolean = !p(BuildRoCC).isEmpty$/;"	m
usingSCIE	src/main/scala/tile/Core.scala	/^  val usingSCIE = coreParams.useSCIE$/;"	l
usingSupervisor	src/main/scala/tile/BaseTile.scala	/^  def usingSupervisor: Boolean = tileParams.core.hasSupervisorMode$/;"	m
usingUser	src/main/scala/tile/BaseTile.scala	/^  def usingUser: Boolean = tileParams.core.useUser || usingSupervisor$/;"	m
usingVM	src/main/scala/tile/BaseTile.scala	/^  def usingVM: Boolean = tileParams.core.useVM$/;"	m
usingVector	src/main/scala/tile/Core.scala	/^  val usingVector = coreParams.useVector$/;"	l
usip	src/main/scala/rocket/CSR.scala	/^  val usip = Bool()$/;"	l
ustatus	src/main/scala/rocket/Instructions.scala	/^  val ustatus = 0x0$/;"	l
utip	src/main/scala/rocket/CSR.scala	/^  val utip = Bool()$/;"	l
utlbLogicalTreeNode	src/main/scala/tile/RocketTile.scala	/^    val utlbLogicalTreeNode = new UTLBLogicalTreeNode(rocketParams.core, utlbOMSRAMs)$/;"	l
utlbOMSRAMs	src/main/scala/rocket/PTW.scala	/^  val utlbOMSRAMs = collection.mutable.ListBuffer[OMSRAM]()$/;"	l
utval	src/main/scala/rocket/Instructions.scala	/^  val utval = 0x43$/;"	l
utvec	src/main/scala/rocket/Instructions.scala	/^  val utvec = 0x5$/;"	l
utvt	src/main/scala/rocket/Instructions.scala	/^  val utvt = 0x7$/;"	l
uw	src/main/scala/rocket/PTW.scala	/^  def uw(dummy: Int = 0) = sw() && u$/;"	m
ux	src/main/scala/rocket/PTW.scala	/^  def ux(dummy: Int = 0) = sx() && u$/;"	m
uxl	src/main/scala/rocket/CSR.scala	/^  val uxl = UInt(width = 2)$/;"	l
v	src/main/scala/rocket/CSR.scala	/^  val v = Bool()$/;"	l
v	src/main/scala/rocket/ICache.scala	/^    var v = v0$/;"	l
v	src/main/scala/rocket/PTW.scala	/^  val v = Bool()$/;"	l
v	src/main/scala/rocket/TLB.scala	/^  val v = Bool()$/;"	l
v	src/main/scala/tile/BaseTile.scala	/^      val v = maxHVAddrBits$/;"	l
v	src/main/scala/tile/BaseTile.scala	/^    val v = if (tileParams.core.useVector) "v" else ""$/;"	l
v0	src/main/scala/rocket/ICache.scala	/^    val v0 = LFSR(16, refill_fire)(log2Up(nWays)-1,0)$/;"	l
v1	src/main/scala/amba/axis/Parameters.scala	/^  def v1($/;"	m
v1	src/main/scala/tilelink/Parameters.scala	/^  def v1($/;"	m
v1copy	src/main/scala/amba/axis/Parameters.scala	/^  def v1copy($/;"	m
v1copy	src/main/scala/tilelink/Parameters.scala	/^  def v1copy($/;"	m
v2	src/main/scala/tilelink/Parameters.scala	/^  def v2($/;"	m
v2copy	src/main/scala/tilelink/Parameters.scala	/^    def v2copy($/;"	m
v2copy	src/main/scala/tilelink/Parameters.scala	/^  def v2copy($/;"	m
vLen	src/main/scala/tile/Core.scala	/^  def vLen = coreParams.vLen$/;"	m
vLen	src/main/scala/tile/Core.scala	/^  def vLen: Int = 0$/;"	m
vMemDataBits	src/main/scala/tile/Core.scala	/^  def vMemDataBits = if (usingVector) coreParams.vMemDataBits else 0$/;"	m
vMemDataBits	src/main/scala/tile/Core.scala	/^  def vMemDataBits: Int = 0$/;"	m
v_entries_use_stage1	src/main/scala/rocket/TLB.scala	/^  val v_entries_use_stage1 = RegInit(false.B)$/;"	l
vaddr	src/main/scala/rocket/TLB.scala	/^  val vaddr = UInt(width = vaddrBitsExtended)$/;"	l
vaddrBits	src/main/scala/tile/BaseTile.scala	/^  def vaddrBits: Int =$/;"	m
vaddrBitsExtended	src/main/scala/tile/BaseTile.scala	/^  def vaddrBitsExtended: Int = vpnBitsExtended + pgIdxBits$/;"	m
valid	src/main/scala/devices/debug/Custom.scala	/^  val valid = Input(Bool())$/;"	l
valid	src/main/scala/devices/tilelink/Plic.scala	/^  val valid = Bool(OUTPUT)$/;"	l
valid	src/main/scala/regmapper/Test.scala	/^    val valid = reg === UInt(0)$/;"	l
valid	src/main/scala/rocket/Breakpoint.scala	/^  val valid = Vec(n, Bool())$/;"	l
valid	src/main/scala/rocket/CSR.scala	/^  val valid = Bool()$/;"	l
valid	src/main/scala/rocket/DCache.scala	/^    val valid = io.req.valid && (Bool(data_arrays.size == 1) || io.req.bits.wordMask(i))$/;"	l
valid	src/main/scala/rocket/Frontend.scala	/^      val valid = fq.io.enq.bits.mask(idx) && !prevRVI$/;"	l
valid	src/main/scala/rocket/IBuf.scala	/^  val valid = (UIntToOH(nValid) - 1)(fetchWidth-1, 0)$/;"	l
valid	src/main/scala/rocket/PTW.scala	/^    val valid = RegInit(0.U(coreParams.nPTECacheEntries.W))$/;"	l
valid	src/main/scala/rocket/PTW.scala	/^    val valid = RegInit(Vec(Seq.fill(coreParams.nL2TLBWays)(0.U(nL2TLBSets.W))))$/;"	l
valid	src/main/scala/rocket/TLB.scala	/^  val valid = Vec(nSectors, Bool())$/;"	l
valid	src/main/scala/scie/SCIE.scala	/^  val valid = Input(Bool())$/;"	l
valid	src/main/scala/tile/FPU.scala	/^  val valid = Bool(INPUT)$/;"	l
valid	src/main/scala/tile/FPU.scala	/^  val valid = Reg(next=io.in.valid)$/;"	l
valid	src/main/scala/tilelink/Arbiter.scala	/^    val valid = valids(width-1, 0)$/;"	l
valid	src/main/scala/tilelink/Arbiter.scala	/^  val valid = lfsr(0)$/;"	l
valid	src/main/scala/tilelink/RAMModel.scala	/^      val valid = Reg(Vec(endSourceId, Bool()))$/;"	l
valid	src/main/scala/tilelink/RAMModel.scala	/^    val valid = Bool()$/;"	l
valid	src/main/scala/util/AsyncQueue.scala	/^  val valid = source_ready && ridx =\/= widx$/;"	l
valid	src/main/scala/util/CoreMonitor.scala	/^  val valid = Bool()$/;"	l
valid	src/main/scala/util/IDPool.scala	/^  val valid  = RegInit(true.B)$/;"	l
valid	src/main/scala/util/LanePositionedQueue.scala	/^  val valid = Output(UInt(validBits1.W))$/;"	l
valid	src/main/scala/util/MultiPortQueue.scala	/^    val valid = if (dense.lanes >= sparse.size) dense.valid else cap_valid$/;"	l
valid	src/main/scala/util/MultiPortQueue.scala	/^  val valid = LFSR64()(lanes-1, 0)$/;"	l
valid	src/main/scala/util/RationalCrossing.scala	/^  val valid  = Output(Bool())$/;"	l
valid	src/main/scala/util/ReorderQueue.scala	/^  val valid = Bool(INPUT)$/;"	l
valid1	src/main/scala/util/IDPool.scala	/^  val valid1  = (  (bitmap.orR && !((PopCount(bitmap) === 1.U) && io.alloc.ready))  \/\/ bitmap not zero, and not allocating last bit$/;"	l
validBits1	src/main/scala/util/LanePositionedQueue.scala	/^  val validBits1 = log2Ceil(maxValid+1) \/\/ [0, maxValid]$/;"	l
validQual	src/main/scala/util/ReadyValidCancel.scala	/^  def validQual(): Bool = earlyValid && !lateCancel$/;"	m
validQuals	src/main/scala/tilelink/Arbiter.scala	/^      val validQuals  = sourcesIn.map(_.validQual)$/;"	l
valid_modes	src/main/scala/rocket/CSR.scala	/^        val valid_modes = 0 +: (minPgLevels to pgLevels).map(new_hgatp.pgLevelsToMode(_))$/;"	l
valid_reg	src/main/scala/util/AsyncQueue.scala	/^  val valid_reg = withReset(reset.asAsyncReset)(RegNext(next=valid, init=false.B).suggestName("valid_reg"))$/;"	l
valid_stage0	src/main/scala/tile/FPU.scala	/^    val valid_stage0 = Wire(Bool())$/;"	l
validin	src/main/scala/tile/FPU.scala	/^        val validin = Bool(INPUT)$/;"	l
validout	src/main/scala/tile/FPU.scala	/^        val validout = Bool(OUTPUT)$/;"	l
valids	src/main/scala/amba/axi4/Xbar.scala	/^    val valids = sources.map(_.valid)$/;"	l
valids	src/main/scala/amba/axis/Xbar.scala	/^      val valids = sources.map(_.valid)$/;"	l
valids	src/main/scala/regmapper/RegField.scala	/^    val valids = Wire(init = Vec.fill(numBytes) { Bool(false) })$/;"	l
valids	src/main/scala/rocket/TLB.scala	/^    val valids = set.map(_.valid.orR).asUInt$/;"	l
value	src/main/scala/rocket/BTB.scala	/^  val value = UInt(width = btbParams.bhtParams.map(_.counterLength).getOrElse(1))$/;"	l
value	src/main/scala/subsystem/BaseSubsystem.scala	/^      val value = manager.toResource$/;"	l
value	src/main/scala/tile/CustomCSRs.scala	/^  val value = UInt(xLen.W)$/;"	l
value	src/main/scala/tilelink/RAMModel.scala	/^    val value = UInt(width = 8)$/;"	l
value	src/main/scala/util/Counters.scala	/^  val value = Reg(init=UInt(0, log2Ceil(n)))$/;"	l
value	src/main/scala/util/Counters.scala	/^  val value = if (isWide) Cat(large, small) else small$/;"	l
value	src/main/scala/util/CreditedIO.scala	/^  val value = v + 0.U$/;"	l
value	src/main/scala/util/PrefixSum.scala	/^    var value: Vector[Seq[Int]] = Vector.empty$/;"	l
values	src/main/scala/diplomacy/Resources.scala	/^    val values = values_p.flatMap(_.value)$/;"	l
vb_array	src/main/scala/rocket/ICache.scala	/^  val vb_array = Reg(init=Bits(0, nSets*nWays))$/;"	l
vcdfile	src/main/resources/vsrc/TestDriver.v	/^  reg [2047:0] vcdfile = 0;$/;"	r
vcdplusfile	src/main/resources/vsrc/TestDriver.v	/^  reg [2047:0] vcdplusfile = 0;$/;"	r
vconfig	src/main/scala/rocket/CSR.scala	/^    val vconfig = new VConfig().asOutput$/;"	l
vcsr	src/main/scala/rocket/Instructions.scala	/^  val vcsr = 0xf$/;"	l
vecData	src/main/scala/devices/debug/SBA.scala	/^    val vecData   = Wire(Vec(cfg.maxSupportedSBAccess\/8, UInt(8.W)))$/;"	l
vector	src/main/scala/rocket/CSR.scala	/^  val vector = usingVector.option(new Bundle {$/;"	l
vector_csrs	src/main/scala/rocket/CSR.scala	/^  val vector_csrs = if (!usingVector) LinkedHashMap() else LinkedHashMap[Int,Bits]($/;"	l
vector_illegal	src/main/scala/rocket/CSR.scala	/^  val vector_illegal = Bool(OUTPUT)$/;"	l
verbose	src/main/resources/csrc/emulator.cc	/^bool verbose;$/;"	v
verbose	src/main/resources/vsrc/TestDriver.v	/^  reg verbose = 1'b0;$/;"	r
verify	src/main/scala/rocket/Decode.scala	/^  def verify(cover: Seq[Term], minterms: Seq[Term], maxterms: Seq[Term]) = {$/;"	m
version	src/main/scala/devices/debug/DebugTransport.scala	/^  val version = Input(UInt(4.W))$/;"	l
version	src/main/scala/devices/debug/dm_registers.scala	/^  val version = UInt(4.W)$/;"	l
version	src/main/scala/diplomaticobjectmodel/model/CustomISAExtensions.scala	/^  def version: String$/;"	m
version	src/main/scala/jtag/JtagUtils.scala	/^  val version = UInt(4.W)$/;"	l
vgein	src/main/scala/rocket/CSR.scala	/^  val vgein = UInt(width = 6)$/;"	l
victim	src/main/scala/diplomacy/CloneModule.scala	/^    val victim = commands(victimIdx).asInstanceOf[DefInstance]$/;"	l
victimIdx	src/main/scala/diplomacy/CloneModule.scala	/^    val victimIdx = commands.lastIndexWhere {$/;"	l
view	src/main/scala/stage/package.scala	/^    def view(annotations: AnnotationSeq): RocketChipOptions = annotations$/;"	m
vill	src/main/scala/rocket/CSR.scala	/^    val vill = (in.max_vsew < in.vsew) || !in.lmul_ok || in.reserved =\/= 0 || in.vill$/;"	l
vill	src/main/scala/rocket/CSR.scala	/^  val vill = Bool()$/;"	l
violations	src/main/scala/linting/LintReporter.scala	/^    val violations = grouped.getOrElse("v", Nil).asInstanceOf[Seq[Violation]]$/;"	l
violations	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^    val violations = new Violations()$/;"	l
violations	src/main/scala/linting/rule/LintRule.scala	/^    val violations = new Violations()$/;"	l
violations	src/main/scala/tilelink/AtomicAutomata.scala	/^      val violations = managersNeedingHelp.flatMap(_.findTreeViolation).map { node => (node.name, node.inputs.map(_._1.name)) }$/;"	l
virtualMatch	src/main/scala/rocket/TLB.scala	/^      val virtualMatch = entry_data.map(_.v === virtual)$/;"	l
virtual_access_illegal	src/main/scala/rocket/CSR.scala	/^  val virtual_access_illegal = Bool(OUTPUT)$/;"	l
virtual_instruction	src/main/scala/rocket/Instructions.scala	/^  val virtual_instruction = 0x16$/;"	l
virtual_supervisor_ecall	src/main/scala/rocket/Instructions.scala	/^  val virtual_supervisor_ecall = 0xa$/;"	l
virtual_system_illegal	src/main/scala/rocket/CSR.scala	/^  val virtual_system_illegal = Bool(OUTPUT)$/;"	l
visibility	src/main/scala/tilelink/Parameters.scala	/^  val visibility:        Seq[AddressSet],$/;"	l
visibilityNode	src/main/scala/tile/BaseTile.scala	/^  val visibilityNode = p(TileVisibilityNodeKey)$/;"	l
visible	src/main/scala/tilelink/Monitor.scala	/^  def visible(address: UInt, source: UInt, edge: TLEdge) =$/;"	m
vl	src/main/scala/rocket/CSR.scala	/^  def vl(avl: UInt, currentVL: UInt, useCurrentVL: Bool, useMax: Bool, useZero: Bool): UInt = {$/;"	m
vl	src/main/scala/rocket/CSR.scala	/^  val vl = UInt((maxVLMax.log2 + 1).W)$/;"	l
vl	src/main/scala/rocket/Instructions.scala	/^  val vl = 0xc20$/;"	l
vlMax	src/main/scala/rocket/CSR.scala	/^  def vlMax: UInt = (maxVLMax >> (this.vsew +& Cat(this.vlmul_sign, ~this.vlmul_mag))).andNot(minVLMax-1)$/;"	m
vlenb	src/main/scala/rocket/Instructions.scala	/^  val vlenb = 0xc22$/;"	l
vlmul	src/main/scala/rocket/CSR.scala	/^  def vlmul: UInt = vlmul_mag$/;"	m
vlmul_mag	src/main/scala/rocket/CSR.scala	/^  val vlmul_mag = UInt(2.W)$/;"	l
vlmul_sign	src/main/scala/rocket/CSR.scala	/^  val vlmul_sign = Bool()$/;"	l
vlmul_signed	src/main/scala/rocket/CSR.scala	/^  def vlmul_signed: SInt = Cat(vlmul_sign, vlmul_mag).asSInt$/;"	m
vm	src/main/scala/stage/phases/AddDefaultTests.scala	/^      val vm = coreParams.useVM$/;"	l
vmIdBits	src/main/scala/tile/BaseTile.scala	/^  def vmIdBits: Int = p(VMIdBits)$/;"	m
vm_enabled	src/main/scala/rocket/TLB.scala	/^  val vm_enabled = (stage1_en || stage2_en) && priv_uses_vm && !io.req.bits.passthrough$/;"	l
vma	src/main/scala/rocket/CSR.scala	/^  val vma = Bool()$/;"	l
voluntary	src/main/scala/rocket/NBDcache.scala	/^  val voluntary = Bool()$/;"	l
voluntaryRelease	src/main/scala/rocket/NBDcache.scala	/^  val voluntaryRelease = edge.Release($/;"	l
vpi_get_vlog_info	src/main/resources/csrc/emulator.cc	/^extern "C" int vpi_get_vlog_info(void* arg)$/;"	f
vpn	src/main/scala/rocket/PTW.scala	/^  val vpn = Mux(r_req.vstage1 && stage2, aux_pte.ppn, r_req.addr)$/;"	l
vpn	src/main/scala/rocket/TLB.scala	/^  val vpn = io.req.bits.vaddr(vaddrBits-1, pgIdxBits)$/;"	l
vpnBits	src/main/scala/tile/BaseTile.scala	/^  def vpnBits: Int = vaddrBits - pgIdxBits$/;"	m
vpnBitsExtended	src/main/scala/tile/BaseTile.scala	/^  def vpnBitsExtended: Int = vpnBits + (vaddrBits < xLen).toInt$/;"	m
vpn_idx	src/main/scala/rocket/PTW.scala	/^    val vpn_idx  = vpn_idxs(aux_count)$/;"	l
vpn_idx	src/main/scala/rocket/PTW.scala	/^    val vpn_idx  = vpn_idxs(count) & mask$/;"	l
vpn_idx	src/main/scala/rocket/PTW.scala	/^    val vpn_idx = vpn_idxs(count)$/;"	l
vpn_idxs	src/main/scala/rocket/PTW.scala	/^    val vpn_idxs = (0 until pgLevels - 1).map(i => (r_req.addr >> (pgLevels - i - 1) * pgLevelBits)(pgLevelBits - 1, 0))$/;"	l
vpn_idxs	src/main/scala/rocket/PTW.scala	/^    val vpn_idxs = (0 until pgLevels).map { i =>$/;"	l
vpn_idxs	src/main/scala/rocket/PTW.scala	/^    val vpn_idxs = (0 until pgLevels-1).map(i => (aux_pte.ppn >> (pgLevels-i-1)*pgLevelBits)(pgLevelBits-1,0))$/;"	l
vpn_to_ppn	src/main/scala/groundtest/DummyPTW.scala	/^  def vpn_to_ppn(vpn: UInt): UInt = vpn(ppnBits - 1, 0)$/;"	m
vs	src/main/scala/rocket/CSR.scala	/^  val vs = UInt(width = 2)$/;"	l
vs_interrupts	src/main/scala/rocket/CSR.scala	/^  val vs_interrupts = Mux(nmie && (reg_mstatus.v && (reg_mstatus.prv < PRV.S || reg_mstatus.prv === PRV.S && reg_vsstatus.sie)), pending_interrupts & read_hideleg, UInt(0))$/;"	l
vsatp	src/main/scala/rocket/CSR.scala	/^  val vsatp = new PTBR().asOutput$/;"	l
vsatp	src/main/scala/rocket/Instructions.scala	/^  val vsatp = 0x280$/;"	l
vsatp	src/main/scala/rocket/PTW.scala	/^  val vsatp = new PTBR().asInput$/;"	l
vsatp_initial_count	src/main/scala/rocket/PTW.scala	/^        val vsatp_initial_count = pgLevels - minPgLevels - io.dpath.vsatp.additionalPgLevels$/;"	l
vsatp_mode_mismatch	src/main/scala/rocket/TLB.scala	/^  val vsatp_mode_mismatch  = priv_v && (vstage1_en =\/= v_entries_use_stage1) && !io.req.bits.passthrough$/;"	l
vsbe	src/main/scala/rocket/CSR.scala	/^  val vsbe = Bool()$/;"	l
vscause	src/main/scala/rocket/Instructions.scala	/^  val vscause = 0x242$/;"	l
vseip	src/main/scala/rocket/CSR.scala	/^  val vseip = Bool()$/;"	l
vsepc	src/main/scala/rocket/Instructions.scala	/^  val vsepc = 0x241$/;"	l
vsew	src/main/scala/rocket/CSR.scala	/^  val vsew = UInt(3.W)$/;"	l
vsie	src/main/scala/rocket/Instructions.scala	/^  val vsie = 0x204$/;"	l
vsip	src/main/scala/rocket/Instructions.scala	/^  val vsip = 0x244$/;"	l
vsscratch	src/main/scala/rocket/Instructions.scala	/^  val vsscratch = 0x240$/;"	l
vssip	src/main/scala/rocket/CSR.scala	/^  val vssip = Bool()$/;"	l
vsstatus	src/main/scala/rocket/Instructions.scala	/^  val vsstatus = 0x200$/;"	l
vstage1	src/main/scala/rocket/PTW.scala	/^  val vstage1 = Bool()$/;"	l
vstage1_en	src/main/scala/rocket/TLB.scala	/^  val vstage1_en = Bool(usingHypervisor) && priv_v && io.ptw.vsatp.mode(io.ptw.vsatp.mode.getWidth-1)$/;"	l
vstart	src/main/scala/rocket/CSR.scala	/^    val vstart = UInt(maxVLMax.log2.W).asOutput$/;"	l
vstart	src/main/scala/rocket/Instructions.scala	/^  val vstart = 0x8$/;"	l
vstip	src/main/scala/rocket/CSR.scala	/^  val vstip = Bool()$/;"	l
vstval	src/main/scala/rocket/Instructions.scala	/^  val vstval = 0x243$/;"	l
vstvec	src/main/scala/rocket/Instructions.scala	/^  val vstvec = 0x205$/;"	l
vsxl	src/main/scala/rocket/CSR.scala	/^  val vsxl = UInt(width = 2)$/;"	l
vta	src/main/scala/rocket/CSR.scala	/^  val vta = Bool()$/;"	l
vtsr	src/main/scala/rocket/CSR.scala	/^  val vtsr = Bool()$/;"	l
vtvm	src/main/scala/rocket/CSR.scala	/^  val vtvm = Bool()$/;"	l
vtw	src/main/scala/rocket/CSR.scala	/^  val vtw = Bool()$/;"	l
vtype	src/main/scala/rocket/CSR.scala	/^  val vtype = new VType$/;"	l
vtype	src/main/scala/rocket/Instructions.scala	/^  val vtype = 0xc21$/;"	l
vxrm	src/main/scala/rocket/CSR.scala	/^    val vxrm = UInt(2.W).asOutput$/;"	l
vxrm	src/main/scala/rocket/Instructions.scala	/^  val vxrm = 0xa$/;"	l
vxsat	src/main/scala/rocket/Instructions.scala	/^  val vxsat = 0x9$/;"	l
w	src/main/scala/amba/axi4/Bundles.scala	/^  val w  = CreditedIO(new AXI4BundleW (params))$/;"	l
w	src/main/scala/amba/axi4/Bundles.scala	/^  val w  = Irrevocable(new AXI4BundleW (params))$/;"	l
w	src/main/scala/amba/axi4/Bundles.scala	/^  val w  = new AsyncBundle(new AXI4BundleW (params.base), params.async)$/;"	l
w	src/main/scala/amba/axi4/RegisterRouter.scala	/^    val w  = io.w$/;"	l
w	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^  val w = UInt(width = 1)$/;"	l
w	src/main/scala/regmapper/RegField.scala	/^  def w(n: Int, w: RegWriteFn)                                                  : RegField = apply(n, (), w,  None)$/;"	m
w	src/main/scala/regmapper/RegField.scala	/^  def w(n: Int, w: RegWriteFn, desc: RegFieldDesc)                              : RegField = apply(n, (), w,  Some(desc.copy(access = RegFieldAccessType.W)))$/;"	m
w	src/main/scala/rocket/Breakpoint.scala	/^    val w = en && bp.control.w && bp.addressMatch(io.ea) && cx$/;"	l
w	src/main/scala/rocket/Breakpoint.scala	/^  val w = Bool()$/;"	l
w	src/main/scala/rocket/Multiplier.scala	/^  val w = io.req.bits.in1.getWidth$/;"	l
w	src/main/scala/rocket/PMP.scala	/^    val w = Output(Bool())$/;"	l
w	src/main/scala/rocket/PMP.scala	/^  val w = Bool()$/;"	l
w	src/main/scala/rocket/PTW.scala	/^  val w = Bool()$/;"	l
w	src/main/scala/tile/FPU.scala	/^        val w = minXLen << i$/;"	l
w	src/main/scala/tilelink/Fuzzer.scala	/^  val w = log2Up(numIds)$/;"	l
w	src/main/scala/util/AsyncResetReg.scala	/^    val w = updateData.getWidth max resetData.bitLength$/;"	l
w	src/main/scala/util/Misc.scala	/^      val w = abs.getWidth$/;"	l
w	src/main/scala/util/Misc.scala	/^    val w = x.getWidth$/;"	l
w	src/main/scala/util/package.scala	/^      val w = n.getWidth - 1$/;"	l
w1ToClear	src/main/scala/regmapper/RegField.scala	/^  def w1ToClear(n: Int, reg: UInt, set: UInt, desc: Option[RegFieldDesc] = None): RegField =$/;"	m
wData	src/main/scala/rocket/DCache.scala	/^      val wData = wWords(i).grouped(encBits)$/;"	l
wDesc	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^    val wDesc = RegFieldDesc("w", "Write bit. When set grants write access to the matching address range. Cannot be modified if lock bit is set.",$/;"	l
wMask	src/main/scala/rocket/DCache.scala	/^  val wMask = if (nWays == 1) eccMask else (0 until nWays).flatMap(i => eccMask.map(_ && io.req.bits.way_en(i)))$/;"	l
wMaskSlice	src/main/scala/rocket/DCache.scala	/^      val wMaskSlice = (0 until wMask.size).filter(j => i % (wordBits\/subWordBits) == (j % (wordBytes\/eccBytes)) \/ (subWordBytes\/eccBytes)).map(wMask(_))$/;"	l
wSourceVec	src/main/scala/devices/tilelink/PhysicalFilter.scala	/^        val wSourceVec = Reg(Vec(edgeIn.client.endSourceId, Bool()))$/;"	l
wSourceVec	src/main/scala/tilelink/CacheCork.scala	/^        val wSourceVec = Reg(Vec(edgeIn.client.endSourceId, Bool()))$/;"	l
wWords	src/main/scala/rocket/DCache.scala	/^  val wWords = io.req.bits.wdata.grouped(encBits * (subWordBits \/ eccBits))$/;"	l
w_addr	src/main/scala/amba/axi4/SRAM.scala	/^    val w_addr = Cat((mask zip (in.aw.bits.addr >> log2Ceil(beatBytes)).asBools).filter(_._1).map(_._2).reverse)$/;"	l
w_addr	src/main/scala/amba/axi4/ToTL.scala	/^      val w_addr = Mux(w_ok, in.aw.bits.addr, UInt(error) | in.aw.bits.addr(log2Up(beatBytes)-1, 0))$/;"	l
w_array	src/main/scala/rocket/TLB.scala	/^  val w_array = Cat(true.B, (priv_rw_ok & entries.map(_.sw).asUInt) | stage1_bypass)$/;"	l
w_count	src/main/scala/amba/axi4/ToTL.scala	/^      val w_count = RegInit(Vec.fill(numIds) { UInt(0, width = txnCountBits) })$/;"	l
w_counter	src/main/scala/amba/axi4/Fragmenter.scala	/^      val w_counter = RegInit(UInt(0, width = AXI4Parameters.lenBits+1))$/;"	l
w_echo	src/main/scala/amba/axi4/SRAM.scala	/^    val w_echo = Reg(BundleMap(in.params.echoFields))$/;"	l
w_full	src/main/scala/amba/axi4/SRAM.scala	/^    val w_full = RegInit(Bool(false))$/;"	l
w_id	src/main/scala/amba/axi4/SRAM.scala	/^    val w_id   = Reg(UInt())$/;"	l
w_id	src/main/scala/amba/axi4/ToTL.scala	/^      val w_id = if (maxFlight == 1) {$/;"	l
w_idle	src/main/scala/amba/axi4/Fragmenter.scala	/^      val w_idle = w_counter === UInt(0)$/;"	l
w_last	src/main/scala/amba/axi4/Fragmenter.scala	/^      val w_last = w_todo === UInt(1)$/;"	l
w_ok	src/main/scala/amba/axi4/ToTL.scala	/^      val w_ok = edgeOut.manager.supportsPutPartialSafe(in.aw.bits.addr, w_size)$/;"	l
w_out	src/main/scala/amba/axi4/ToTL.scala	/^      val w_out = Wire(out.a)$/;"	l
w_sel	src/main/scala/amba/axi4/ToTL.scala	/^      val w_sel = UIntToOH(in.aw.bits.id, numIds)$/;"	l
w_sel0	src/main/scala/amba/axi4/SRAM.scala	/^    val w_sel0 = address.contains(in.aw.bits.addr)$/;"	l
w_sel1	src/main/scala/amba/axi4/SRAM.scala	/^    val w_sel1 = Reg(w_sel0)$/;"	l
w_size	src/main/scala/amba/axi4/ToTL.scala	/^      val w_size = OH1ToUInt(w_size1)$/;"	l
w_size1	src/main/scala/amba/axi4/ToTL.scala	/^      val w_size1 = in.aw.bits.bytes1()$/;"	l
w_todo	src/main/scala/amba/axi4/Fragmenter.scala	/^      val w_todo = Mux(w_idle, Mux(wbeats_valid, w_beats, UInt(0)), w_counter)$/;"	l
waddr	src/main/scala/rocket/BTB.scala	/^  val waddr = Mux(updateHit, updateHitAddr, repl.way)$/;"	l
waddr	src/main/scala/rocket/DCache.scala	/^    val waddr = Mux(resetting, flushCounter(idxBits-1, 0), s2_repl_idx)$/;"	l
waddr	src/main/scala/rocket/HellaCache.scala	/^  val waddr = Mux(rst, rst_cnt, io.write.bits.idx)$/;"	l
waddr	src/main/scala/rocket/NBDcache.scala	/^  val waddr = io.write.bits.addr >> rowOffBits$/;"	l
waddr	src/main/scala/rocket/TLB.scala	/^      val waddr = Mux(r_sectored_hit.valid, r_sectored_hit.bits, r_sectored_repl_addr)$/;"	l
waddr	src/main/scala/rocket/TLB.scala	/^      val waddr = Mux(r_superpage_hit.valid && usingHypervisor, r_superpage_hit.bits, r_superpage_repl_addr)$/;"	l
waddr	src/main/scala/tile/FPU.scala	/^  val waddr = Mux(divSqrt_wen, divSqrt_waddr, wbInfo(0).rd)$/;"	l
waitForQuiescence	src/main/scala/tile/Interrupts.scala	/^    def waitForQuiescence(cease: Bool): Bool = {$/;"	m
watchdog	src/main/scala/tilelink/Monitor.scala	/^    val watchdog = RegInit(0.U(32.W))$/;"	l
way	src/main/scala/rocket/ICache.scala	/^      val way = Mux(s3_slaveValid, scratchpadWay(s1s3_slaveAddr), repl_way)$/;"	l
way	src/main/scala/util/Replacement.scala	/^  def way = Random(n_ways, lfsr)$/;"	m
way	src/main/scala/util/Replacement.scala	/^  def way = get_replace_way(state_reg)$/;"	m
way	src/main/scala/util/Replacement.scala	/^  def way = logic.way$/;"	m
way	src/main/scala/util/Replacement.scala	/^  def way = plru_way$/;"	m
way	src/main/scala/util/Replacement.scala	/^  def way(set: UInt) = logic.get_replace_way(state_vec(set))$/;"	m
way	src/main/scala/util/Replacement.scala	/^  def way(set: UInt): UInt$/;"	m
way	src/main/scala/util/Replacement.scala	/^  def way: UInt$/;"	m
wayBits	src/main/scala/tile/L1Cache.scala	/^  def wayBits = log2Up(nWays)$/;"	m
wayDec	src/main/scala/util/Replacement.scala	/^    val wayDec        = UIntToOH(touch_way, n_ways)$/;"	l
wayMap	src/main/scala/rocket/NBDcache.scala	/^  def wayMap[T <: Data](f: Int => T) = Vec((0 until nWays).map(f))$/;"	m
way_en	src/main/scala/rocket/DCache.scala	/^  val way_en = Bits(width = nWays)$/;"	l
way_en	src/main/scala/rocket/DCache.scala	/^  val way_en = UInt(width = nWays)$/;"	l
way_en	src/main/scala/rocket/HellaCache.scala	/^  val way_en = UInt(width = nWays)$/;"	l
way_en	src/main/scala/rocket/NBDcache.scala	/^    val way_en = Bits(INPUT, nWays)$/;"	l
way_en	src/main/scala/rocket/NBDcache.scala	/^  val way_en = Bits(width = nWays)$/;"	l
way_en	src/main/scala/rocket/NBDcache.scala	/^  val way_en = Reg(Bits())$/;"	l
wb	src/main/scala/rocket/NBDcache.scala	/^  val wb = Module(new WritebackUnit)$/;"	l
wbArb	src/main/scala/rocket/NBDcache.scala	/^  val wbArb = Module(new Arbiter(new WritebackReq(edge.bundle), 2))$/;"	l
wbCoverCauses	src/main/scala/rocket/RocketCore.scala	/^  val wbCoverCauses = List($/;"	l
wbInfo	src/main/scala/tile/FPU.scala	/^  val wbInfo = Reg(Vec(maxLatency-1, new WBInfo))$/;"	l
wbTagList	src/main/scala/rocket/NBDcache.scala	/^  val wbTagList = Wire(Vec(cfg.nMSHRs, Bits()))$/;"	l
wb_cp_valid	src/main/scala/tile/FPU.scala	/^  val wb_cp_valid = Reg(next=mem_cp_valid, init=Bool(false))$/;"	l
wb_ctrl	src/main/scala/rocket/RocketCore.scala	/^  val wb_ctrl = Reg(new IntCtrlSigs)$/;"	l
wb_ctrl	src/main/scala/tile/FPU.scala	/^  val wb_ctrl = RegEnable(mem_ctrl, mem_reg_valid)$/;"	l
wb_dcache_miss	src/main/scala/rocket/RocketCore.scala	/^  val wb_dcache_miss = wb_ctrl.mem && !io.dmem.resp.valid$/;"	l
wb_pc_valid	src/main/scala/rocket/RocketCore.scala	/^  val wb_pc_valid = wb_reg_valid || wb_reg_replay || wb_reg_xcpt$/;"	l
wb_reg_cause	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_cause           = Reg(UInt())$/;"	l
wb_reg_flush_pipe	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_flush_pipe      = Reg(Bool())$/;"	l
wb_reg_hfence_g	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_hfence_g = Reg(Bool())$/;"	l
wb_reg_hfence_v	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_hfence_v = Reg(Bool())$/;"	l
wb_reg_hls_or_dv	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_hls_or_dv = Reg(Bool())$/;"	l
wb_reg_inst	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_inst = Reg(Bits())$/;"	l
wb_reg_mem_size	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_mem_size = Reg(UInt())$/;"	l
wb_reg_pc	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_pc = Reg(UInt())$/;"	l
wb_reg_raw_inst	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_raw_inst = Reg(UInt())$/;"	l
wb_reg_replay	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_replay          = Reg(Bool())$/;"	l
wb_reg_rs2	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_rs2 = Reg(Bits())$/;"	l
wb_reg_sfence	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_sfence = Reg(Bool())$/;"	l
wb_reg_valid	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_valid           = Reg(Bool())$/;"	l
wb_reg_valid	src/main/scala/tile/FPU.scala	/^  val wb_reg_valid = Reg(next=mem_reg_valid && (!killm || mem_cp_valid), init=Bool(false))$/;"	l
wb_reg_wdata	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_wdata = Reg(Bits())$/;"	l
wb_reg_wphit	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_wphit           = Reg(Vec(nBreakpoints, Bool()))$/;"	l
wb_reg_xcpt	src/main/scala/rocket/RocketCore.scala	/^  val wb_reg_xcpt            = Reg(Bool())$/;"	l
wb_req	src/main/scala/rocket/NBDcache.scala	/^    val wb_req = Decoupled(new WritebackReq(edge.bundle))$/;"	l
wb_req_arb	src/main/scala/rocket/NBDcache.scala	/^  val wb_req_arb = Module(new Arbiter(new WritebackReq(edge.bundle), cfg.nMSHRs))$/;"	l
wb_set_sboard	src/main/scala/rocket/RocketCore.scala	/^  val wb_set_sboard = wb_ctrl.div || wb_dcache_miss || wb_ctrl.rocc$/;"	l
wb_toint_exc	src/main/scala/tile/FPU.scala	/^  val wb_toint_exc = RegEnable(fpiu.io.out.bits.exc, mem_ctrl.toint)$/;"	l
wb_toint_valid	src/main/scala/tile/FPU.scala	/^  val wb_toint_valid = wb_reg_valid && wb_ctrl.toint$/;"	l
wb_valid	src/main/scala/rocket/RocketCore.scala	/^  val wb_valid = wb_reg_valid && !replay_wb && !wb_xcpt$/;"	l
wb_waddr	src/main/scala/rocket/RocketCore.scala	/^  val wb_waddr = wb_reg_inst(11,7) & regAddrMask$/;"	l
wb_wen	src/main/scala/rocket/RocketCore.scala	/^  val wb_wen = wb_valid && wb_ctrl.wxd$/;"	l
wb_wxd	src/main/scala/rocket/RocketCore.scala	/^  val wb_wxd = wb_reg_valid && wb_ctrl.wxd$/;"	l
wbeats_latched	src/main/scala/amba/axi4/Fragmenter.scala	/^      val wbeats_latched = RegInit(Bool(false))$/;"	l
wbeats_ready	src/main/scala/amba/axi4/Fragmenter.scala	/^      val wbeats_ready = Wire(Bool())$/;"	l
wbeats_valid	src/main/scala/amba/axi4/Fragmenter.scala	/^      val wbeats_valid = Wire(Bool())$/;"	l
wcToUInt	src/main/scala/util/package.scala	/^  implicit def wcToUInt(c: WideCounter): UInt = c.value$/;"	m
wdata	src/main/scala/amba/axi4/SRAM.scala	/^    val wdata = Vec.tabulate(beatBytes) { i => in.w.bits.data(8*(i+1)-1, 8*i) }$/;"	l
wdata	src/main/scala/devices/tilelink/TestRAM.scala	/^    val wdata = Vec.tabulate(beatBytes) { i => in.a.bits.data(8*(i+1)-1, 8*i) }$/;"	l
wdata	src/main/scala/regmapper/Test.scala	/^    val wdata  = UInt(INPUT, width = bits)$/;"	l
wdata	src/main/scala/rocket/CSR.scala	/^    val wdata = Bits(INPUT, xLen)$/;"	l
wdata	src/main/scala/rocket/CSR.scala	/^  val wdata = readModifyWriteCSR(io.rw.cmd, io.rw.rdata, io.rw.wdata)$/;"	l
wdata	src/main/scala/rocket/DCache.scala	/^    val wdata = Mux(resetting, 0.U, s2_new_repl_state)$/;"	l
wdata	src/main/scala/rocket/DCache.scala	/^  val wdata = UInt(width = encBits * rowBytes \/ eccBytes)$/;"	l
wdata	src/main/scala/rocket/HellaCache.scala	/^  val wdata = Mux(rst, rstVal, io.write.bits.data).asUInt$/;"	l
wdata	src/main/scala/tile/CustomCSRs.scala	/^  val wdata = UInt(xLen.W)$/;"	l
wdata	src/main/scala/tile/FPU.scala	/^    val wdata = recode(load_wb_data, load_wb_typeTag)$/;"	l
wdata	src/main/scala/tile/FPU.scala	/^  val wdata = box(Mux(divSqrt_wen, divSqrt_wdata, (pipes.map(_.res.data): Seq[UInt])(wbInfo(0).pipeid)), wtypeTag)$/;"	l
wdata	src/main/scala/tile/LazyRoCC.scala	/^  val wdata = Mux(doWrite, addend, accum + addend)$/;"	l
wdata	src/main/scala/util/MultiWidthFifo.scala	/^    val wdata = Reg(Vec(n * nBeats, Bits(width = inW)))$/;"	l
wdata	src/main/scala/util/MultiWidthFifo.scala	/^    val wdata = Reg(Vec(n \/ nBeats, Bits(width = inW)))$/;"	l
wdata	src/main/scala/util/ShiftQueue.scala	/^    val wdata = if (i == entries-1) io.enq.bits else Mux(valid(i+1), elts(i+1), io.enq.bits)$/;"	l
wdata_encoded	src/main/scala/rocket/NBDcache.scala	/^  val wdata_encoded = (0 until rowWords).map(i => dECC.encode(writeArb.io.out.bits.data(coreDataBits*(i+1)-1,coreDataBits*i)))$/;"	l
wen	src/main/scala/amba/axi4/Bundles.scala	/^  val wen = Bool()$/;"	l
wen	src/main/scala/rocket/DCache.scala	/^    val wen = resetting || s2_repl_wen$/;"	l
wen	src/main/scala/rocket/HellaCache.scala	/^  val wen = rst || io.write.valid$/;"	l
wen	src/main/scala/rocket/ICache.scala	/^    val wen = (refill_one_beat && !invalidated) || (s3_slaveValid && wordMatch(s1s3_slaveAddr))$/;"	l
wen	src/main/scala/tile/CustomCSRs.scala	/^  val wen = Bool()$/;"	l
wen	src/main/scala/tile/FPU.scala	/^  val wen = Bool()$/;"	l
wen	src/main/scala/tile/FPU.scala	/^  val wen = Reg(init=Bits(0, maxLatency-1))$/;"	l
wen	src/main/scala/tilelink/SRAM.scala	/^    val wen = d_wb || Mux(r_replay, !r_ren, a_fire && !a_ren)$/;"	l
wen	src/main/scala/util/LanePositionedQueue.scala	/^  val wen = RegInit(false.B)$/;"	l
wen	src/main/scala/util/ShiftQueue.scala	/^    val wen =$/;"	l
wexc	src/main/scala/tile/FPU.scala	/^  val wexc = (pipes.map(_.res.exc): Seq[UInt])(wbInfo(0).pipeid)$/;"	l
wfd	src/main/scala/rocket/IDecode.scala	/^  val wfd = Bool()$/;"	l
wfd	src/main/scala/rocket/RocketCore.scala	/^    val wfd = wb_ctrl.wfd$/;"	l
wfi	src/main/scala/rocket/CSR.scala	/^  val wfi = Bool()$/;"	l
wfi	src/main/scala/tile/Core.scala	/^    val wfi = Bool().asOutput$/;"	l
wfiNode	src/main/scala/tile/BaseTile.scala	/^  def wfiNode: IntOutwardNode         \/\/ Tile is waiting for an interrupt$/;"	m
wfiNode	src/main/scala/tile/Interrupts.scala	/^  val wfiNode = IntSourceNode(IntSourcePortSimple())$/;"	l
wflags	src/main/scala/tile/FPU.scala	/^  val wflags = Bool()$/;"	l
wfn	src/main/scala/rocket/TLBPermissions.scala	/^    val wfn = lowCostProperty(_.w)$/;"	l
where	src/main/scala/subsystem/HasTiles.scala	/^  def where: TLBusWrapperLocation$/;"	m
whereto	scripts/debug_rom/debug_rom.S	/^whereto:$/;"	l
whereto	scripts/debug_rom/debug_rom_nonzero.S	/^whereto:$/;"	l
which	src/main/scala/rocket/CSR.scala	/^    val which = PriorityMux(masks.flatMap(m => priority.filter(_ < m.getWidth).map(i => (m(i), i.U))))$/;"	l
whitelist	src/main/scala/linting/Linter.scala	/^  def whitelist(lintRuleName: String, filenames: String*) = {$/;"	m
whitelist	src/main/scala/linting/rule/LintConflictingModuleNames.scala	/^    val whitelist = collectWhitelist(state.annotations)$/;"	l
whitelist	src/main/scala/linting/rule/LintRule.scala	/^    val whitelist = collectWhitelist(state.annotations)$/;"	l
whitelistAPI	src/main/scala/linting/rule/LintRule.scala	/^  def whitelistAPI(files: Seq[String]): String = {$/;"	m
whoC	src/main/scala/tilelink/Broadcast.scala	/^      val whoC = if (caches.size == 0) 0.U else Cat(caches.map(_.contains(in.c.bits.source)).reverse)$/;"	l
whole_opc	src/main/scala/rocket/DCache.scala	/^    val whole_opc = tl_out.d.bits.opcode$/;"	l
wi	src/main/scala/tilelink/Metadata.scala	/^  def wi = Cat(Bool(false), Bool(true))  \/\/ Future op will write$/;"	m
wide	src/main/scala/tilelink/Fuzzer.scala	/^    val wide = 64$/;"	l
widePorts	src/main/scala/diplomacy/AddressDecoder.scala	/^      val widePorts = nonEmptyPorts.map { _.map { _.widen(~output) } }$/;"	l
wide_bundle	src/main/scala/amba/axi4/Xbar.scala	/^    val wide_bundle = AXI4BundleParameters.union(io_in.map(_.params) ++ io_out.map(_.params))$/;"	l
wide_bundle	src/main/scala/amba/axis/Xbar.scala	/^    val wide_bundle = AXISBundleParameters.union(io_in.map(_.params) ++ io_out.map(_.params))$/;"	l
wide_bundle	src/main/scala/tilelink/Xbar.scala	/^    val wide_bundle = TLBundleParameters.union(io_in.map(_.params) ++ io_out.map(_.params))$/;"	l
wide_mask	src/main/scala/tilelink/AtomicAutomata.scala	/^        val wide_mask = FillInterleaved(8, mask)$/;"	l
widen	src/main/scala/diplomacy/Parameters.scala	/^  def widen(imask: BigInt) = AddressSet(base & ~imask, mask | imask)$/;"	m
widen	src/main/scala/tilelink/AtomicAutomata.scala	/^      def widen(x: TransferSizes) = if (passthrough && x.min <= 2*mp.beatBytes) TransferSizes(1, max(mp.beatBytes, x.max)) else ourSupport$/;"	m
widened	src/main/scala/tile/FPU.scala	/^      val widened = Mux(maxType.isNaN(in.bits.in1), maxType.qNaN, in.bits.in1)$/;"	l
widget	src/main/scala/tilelink/WidthWidget.scala	/^    val widget = LazyModule(new TLWidthWidget(innerBeatBytes))$/;"	l
width	src/main/scala/diplomacy/Resources.scala	/^      val width = resources("width").map(_.value)$/;"	l
width	src/main/scala/diplomaticobjectmodel/model/OMPorts.scala	/^  def width: Int$/;"	m
width	src/main/scala/jtag/JtagStateMachine.scala	/^    val width = log2Ceil(all.size)$/;"	l
width	src/main/scala/jtag/Utils.scala	/^  val width = log2Ceil(counts)$/;"	l
width	src/main/scala/regmapper/RegField.scala	/^    val width = reg.getWidth$/;"	l
width	src/main/scala/regmapper/Test.scala	/^    val width = 16$/;"	l
width	src/main/scala/rocket/PTW.scala	/^      val width = pgLevelBits + (if (i <= pgLevels - minPgLevels) hypervisorExtraAddrBits else 0)$/;"	l
width	src/main/scala/subsystem/BaseSubsystem.scala	/^    val width = ResourceInt((log2Ceil(max)+31) \/ 32)$/;"	l
width	src/main/scala/tilelink/Bundles.scala	/^  val width = 1$/;"	l
width	src/main/scala/tilelink/Bundles.scala	/^  val width = 3$/;"	l
width	src/main/scala/tilelink/Metadata.scala	/^  val width = 2$/;"	l
width	src/main/scala/tilelink/SRAM.scala	/^    val width = code.width(eccBytes*8)$/;"	l
width	src/main/scala/util/ECC.scala	/^  def width(k: Int) = sec.width(k)+1$/;"	m
width	src/main/scala/util/ECC.scala	/^  def width(k: Int) = {$/;"	m
width	src/main/scala/util/ECC.scala	/^  def width(w0: Int) = w0$/;"	m
width	src/main/scala/util/ECC.scala	/^  def width(w0: Int) = w0+1$/;"	m
width	src/main/scala/util/ECC.scala	/^  def width(w0: Int): Int$/;"	m
widths	src/main/scala/rocket/AMOALU.scala	/^  val widths = (0 to log2Ceil(operandBits \/ minXLen)).map(minXLen << _)$/;"	l
widx	src/main/scala/util/AsyncQueue.scala	/^  val widx  = Output(UInt((params.bits+1).W))$/;"	l
widx	src/main/scala/util/AsyncQueue.scala	/^  val widx = AsyncResetSynchronizerShiftReg(io.async.widx, params.sync, Some("widx_gray"))$/;"	l
widx	src/main/scala/util/AsyncQueue.scala	/^  val widx = withReset(reset.asAsyncReset)(GrayCounter(bits+1, io.enq.fire(), !sink_ready, "widx_bin"))$/;"	l
widx_reg	src/main/scala/util/AsyncQueue.scala	/^  val widx_reg = withReset(reset.asAsyncReset)(RegNext(next=widx, init=0.U).suggestName("widx_gray"))$/;"	l
widx_valid	src/main/scala/util/AsyncQueue.scala	/^  val widx_valid     = Output(Bool())$/;"	l
wifire	src/main/scala/regmapper/RegMapper.scala	/^    val wifire = Array.fill(regSize) { Nil:List[(Bool, Bool)] }$/;"	l
wifireMux	src/main/scala/regmapper/RegMapper.scala	/^    val wifireMux = mux(iindex, in.valid && front.ready && !front.bits.read, frontSel, iRightReg, wifire)$/;"	l
wimask	src/main/scala/regmapper/RegMapper.scala	/^      val wimask = frontMask(high, low).andR()$/;"	l
winner	src/main/scala/amba/axi4/Deinterleaver.scala	/^        val winner  = pending & ~(leftOR(pending) << 1)$/;"	l
winner	src/main/scala/amba/axi4/Xbar.scala	/^    val winner = Vec((readys zip valids) map { case (r,v) => r&&v })$/;"	l
winner	src/main/scala/amba/axis/Xbar.scala	/^      val winner = VecInit((readys zip valids) map { case (r,v) => r&&v })$/;"	l
winnerQual	src/main/scala/tilelink/Arbiter.scala	/^      val winnerQual  = VecInit((readys zip validQuals)  map { case (r,v) => r&&v })$/;"	l
wipe	src/main/scala/tilelink/RAMModel.scala	/^      val wipe = !wipeIndex(log2Ceil(endAddressHi))$/;"	l
wipeHigh	src/main/scala/amba/axi4/Fragmenter.scala	/^        val wipeHigh = ~leftOR(~len)       \/\/ clear all bits in position  >= a cleared bit$/;"	l
wipeIndex	src/main/scala/tilelink/RAMModel.scala	/^      val wipeIndex = RegInit(UInt(0, width = log2Ceil(endAddressHi) + 1))$/;"	l
wire	src/main/resources/vsrc/AsyncResetReg.v	/^input  wire clk;$/;"	p
wire	src/main/resources/vsrc/AsyncResetReg.v	/^input  wire d;$/;"	p
wire	src/main/resources/vsrc/AsyncResetReg.v	/^input  wire en;$/;"	p
wire	src/main/resources/vsrc/AsyncResetReg.v	/^input  wire rst;$/;"	p
wirePrefix	src/main/scala/diplomacy/Nodes.scala	/^  def wirePrefix: String = {$/;"	m
wiready	src/main/scala/regmapper/Test.scala	/^    val wiready = Bool(OUTPUT)$/;"	l
wires	src/main/scala/util/AsyncQueue.scala	/^  val wires = if (narrow) 1 else depth$/;"	l
withCovers	src/main/scala/rocket/Events.scala	/^  def withCovers: Unit = {$/;"	m
wivalid	src/main/scala/regmapper/RegMapper.scala	/^    val wivalid = Wire(Vec(flat.size, Bool()))$/;"	l
wivalid	src/main/scala/regmapper/Test.scala	/^    val wivalid = Bool(INPUT)$/;"	l
wmask	src/main/scala/rocket/AMOALU.scala	/^  val wmask = FillInterleaved(8, io.mask)$/;"	l
wmask	src/main/scala/rocket/DCache.scala	/^        val wmask = if (nWays == 1) Seq(true.B) else metaReq.bits.way_en.asBools$/;"	l
wmask	src/main/scala/rocket/HellaCache.scala	/^  val wmask = Mux(rst || Bool(nWays == 1), SInt(-1), io.write.bits.way_en.asSInt).asBools$/;"	l
wmask	src/main/scala/rocket/NBDcache.scala	/^  val wmask  = Bits(width = rowWords)$/;"	l
wmask	src/main/scala/rocket/PTW.scala	/^      val wmask = if (coreParams.nL2TLBWays > 1) Mux(r_valid_vec_q.andR, UIntToOH(r_l2_plru_way, coreParams.nL2TLBWays), PriorityEncoderOH(~r_valid_vec_q)) else 1.U(1.W)$/;"	l
wnoise	src/main/scala/amba/axi4/Delayer.scala	/^      val wnoise  = Wire(in.w .bits)$/;"	l
wofire	src/main/scala/regmapper/RegMapper.scala	/^    val wofire = Array.fill(regSize) { Nil:List[(Bool, Bool)] }$/;"	l
wofire	src/main/scala/regmapper/Test.scala	/^  val wofire = io.woready && wovalid$/;"	l
wofireMux	src/main/scala/regmapper/RegMapper.scala	/^    val wofireMux = mux(oindex, back.valid && out.ready && !back .bits.read, backSel,  oRightReg, wofire)$/;"	l
womask	src/main/scala/regmapper/RegMapper.scala	/^      val womask = backMask(high, low).andR()$/;"	l
wordBits	src/main/scala/rocket/HellaCache.scala	/^  def wordBits = coreDataBits$/;"	m
wordBits	src/main/scala/rocket/ICache.scala	/^  val wordBits = outer.icacheParams.fetchBytes*8$/;"	l
wordBytes	src/main/scala/rocket/HellaCache.scala	/^  def wordBytes = coreDataBytes$/;"	m
wordData	src/main/scala/rocket/AMOALU.scala	/^  def wordData = genData(2)$/;"	m
wordFromBeat	src/main/scala/rocket/NBDcache.scala	/^  def wordFromBeat(addr: UInt, dat: UInt) = {$/;"	m
wordMask	src/main/scala/rocket/DCache.scala	/^    val wordMask = UIntToOH(Mux(pstore2_valid, pstore2_addr, pstore1_addr).extract(rowOffBits-1, wordBytes.log2))$/;"	l
wordMask	src/main/scala/rocket/DCache.scala	/^  val wordMask = UInt(width = rowBytes \/ subWordBytes)$/;"	l
wordMatch	src/main/scala/rocket/DCache.scala	/^    val wordMatch = (eccMask(pstore2_storegen_mask) | ~eccMask(pstore1_mask)).andR$/;"	l
wordMatch	src/main/scala/rocket/ICache.scala	/^    def wordMatch(addr: UInt) = addr.extract(log2Ceil(tl_out.d.bits.data.getWidth\/8)-1, log2Ceil(wordBits\/8)) === i$/;"	m
wordOffBits	src/main/scala/rocket/HellaCache.scala	/^  def wordOffBits = log2Up(wordBytes)$/;"	m
word_en	src/main/scala/rocket/DCache.scala	/^    val word_en = Mux(inWriteback, Fill(wordsPerRow, 1.U), Mux(s1_did_read, s1_read_mask, 0.U))$/;"	l
word_idx	src/main/scala/rocket/DCache.scala	/^    val word_idx = uncachedResp.addr.extract(log2Up(rowBits\/8)-1, log2Up(wordBytes))$/;"	l
wordmap	src/main/scala/regmapper/RegMapper.scala	/^    val wordmap = bitmap.groupBy(_._1 \/ (8*bytes))$/;"	l
words	src/main/scala/devices/tilelink/BootROM.scala	/^    val words = (contents ++ Seq.fill(wrapSize-contents.size)(0.toByte)).grouped(beatBytes).toSeq$/;"	l
words	src/main/scala/rocket/DCache.scala	/^    val words = tl_out.d.bits.data.grouped(wordBits)$/;"	l
wordsPerRow	src/main/scala/rocket/DCache.scala	/^    val wordsPerRow = rowBits \/ subWordBits$/;"	l
woready	src/main/scala/regmapper/RegMapper.scala	/^    val woready = Wire(Vec(flat.size, Bool()))$/;"	l
woready	src/main/scala/regmapper/Test.scala	/^    val woready = Bool(INPUT)$/;"	l
wovalid	src/main/scala/regmapper/Test.scala	/^    val wovalid = Bool(OUTPUT)$/;"	l
wqueues	src/main/scala/amba/axi4/UserYanker.scala	/^      val wqueues = Seq.tabulate(edgeIn.master.endId) { i => queue(i) }$/;"	l
wr	src/main/scala/tilelink/Metadata.scala	/^  def wr = Cat(Bool(true), Bool(true))   \/\/ Op actually writes$/;"	m
wrAccessRegisterCommand	src/main/scala/devices/debug/Debug.scala	/^    val wrAccessRegisterCommand  = COMMANDWrEn && commandWrIsAccessRegister  && (ABSTRACTCSReg.cmderr === 0.U)$/;"	l
wrDone	src/main/scala/devices/debug/SBA.scala	/^      val wrDone       = Output(Bool())$/;"	l
wrEn	src/main/scala/devices/debug/SBA.scala	/^      val wrEn         = Input(Bool())$/;"	l
wrFn	src/main/scala/regmapper/RegField.scala	/^    def wrFn(i: Int): RegWriteFn = RegWriteFn((valid, data) => {$/;"	m
wrLegal	src/main/scala/devices/debug/SBA.scala	/^      val wrLegal      = Output(Bool())$/;"	l
wrLegal_addr	src/main/scala/devices/debug/SBA.scala	/^    val wrLegal_addr = edge.manager.supportsPutFullSafe(io.addrIn, io.sizeIn, Some(TransferSizes(1,cfg.maxSupportedSBAccess\/8)))$/;"	l
wrTxValid	src/main/scala/devices/debug/SBA.scala	/^    val wrTxValid = sbState === SBWriteRequest.id.U && requestValid && requestReady$/;"	l
wr_crossing	src/main/scala/regmapper/RegisterCrossing.scala	/^    val wr_crossing = Module (new RegisterWriteCrossing(UInt(width = width)))$/;"	l
wrap	src/main/scala/util/Counters.scala	/^      val wrap = value === UInt(n-1)$/;"	l
wrap	src/main/scala/util/Counters.scala	/^    var wrap: Bool = null$/;"	l
wrap	src/main/scala/util/LanePositionedQueue.scala	/^        val wrap = s.asSInt >= 0.S$/;"	l
wrapMask	src/main/scala/amba/axi4/Fragmenter.scala	/^        val wrapMask = a.bits.bytes1() \/\/ only these bits may change, if wrapping$/;"	l
wrapSize	src/main/scala/devices/tilelink/BootROM.scala	/^    val wrapSize = 1 << log2Ceil(contents.size)$/;"	l
wrapper	src/main/scala/diplomacy/LazyModule.scala	/^  val wrapper: LazyModule$/;"	l
wrdata	src/main/scala/util/CoreMonitor.scala	/^  val wrdata = UInt(width = (xLen max fLen).W)$/;"	l
wrdst	src/main/scala/util/CoreMonitor.scala	/^  val wrdst = UInt(width = 5.W)$/;"	l
wready	src/main/scala/regmapper/Test.scala	/^    val wready = Bool(OUTPUT)$/;"	l
wready_s	src/main/scala/regmapper/Test.scala	/^  val wready_s = wready(io.wvalid)$/;"	l
wren	src/main/scala/util/CoreMonitor.scala	/^  def wren: Bool = wrenx || wrenf$/;"	m
wrenf	src/main/scala/util/CoreMonitor.scala	/^  val wrenf = Bool()$/;"	l
wrenx	src/main/scala/util/CoreMonitor.scala	/^  val wrenx = Bool()$/;"	l
write	src/main/scala/devices/debug/abstract_commands.scala	/^  val write = Bool()$/;"	l
write	src/main/scala/rocket/DCache.scala	/^  val write = Bool()$/;"	l
write	src/main/scala/rocket/HellaCache.scala	/^    val write = Decoupled(new L1MetaWriteReq).flip$/;"	l
write	src/main/scala/rocket/NBDcache.scala	/^    val write = Decoupled(new L1DataWriteReq).flip$/;"	l
write	src/main/scala/rocket/RocketCore.scala	/^  def write(addr: UInt, data: UInt) = {$/;"	m
write	src/main/scala/tilelink/Atomics.scala	/^    val write    = Bool().flip \/\/ ignore opcode$/;"	l
write	src/main/scala/tilelink/ToAHB.scala	/^  val write  = Bool()$/;"	l
write	src/main/scala/tilelink/ToAXI4.scala	/^        val write = Reg(Bool())$/;"	l
writeArb	src/main/scala/rocket/NBDcache.scala	/^  val writeArb = Module(new Arbiter(new L1DataWriteReq, 2))$/;"	l
writeBank	src/main/scala/rocket/BTB.scala	/^    def writeBank(i: Int, mod: Int, en: UInt, data: UInt) =$/;"	m
writeCounter	src/main/scala/rocket/CSR.scala	/^  def writeCounter(lo: Int, ctr: WideCounter, wdata: UInt) = {$/;"	m
writeCross	src/main/scala/regmapper/Test.scala	/^      val writeCross = Module(new RegisterWriteCrossing(field))$/;"	l
writeJsonFile	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^  def writeJsonFile(filename: String, json: Map[String, Any]): Unit = {$/;"	m
writeOutputFile	src/main/scala/util/GeneratorUtils.scala	/^  def writeOutputFile(targetDir: String, fname: String, contents: String): File = {$/;"	m
writeSizes1	src/main/scala/amba/axi4/Fragmenter.scala	/^      val writeSizes1 = slaves.map(s => s.supportsWrite.max\/beatBytes-1)$/;"	l
write_flush	src/main/scala/rocket/CSR.scala	/^  val write_flush = Bool(OUTPUT)$/;"	l
write_illegal	src/main/scala/rocket/CSR.scala	/^  val write_illegal = Bool(OUTPUT)$/;"	l
write_port_busy	src/main/scala/tile/FPU.scala	/^  val write_port_busy = RegEnable(mem_wen && (memLatencyMask & latencyMask(ex_ctrl, 1)).orR || (wen & latencyMask(ex_ctrl, 0)).orR, req_valid)$/;"	l
write_row	src/main/scala/util/LanePositionedQueue.scala	/^  val write_row = RegEnable(enq_row_half, enq_push)$/;"	l
writealloc	src/main/scala/amba/package.scala	/^    val writealloc = Bool()$/;"	l
writeback	src/main/resources/csrc/comlog.cc	/^void writeback (std::string& line)$/;"	f
writer	src/main/scala/diplomaticobjectmodel/DiplomaticObjectModelUtils.scala	/^    val writer = new FileWriter(new File(filename))$/;"	l
wrong_path	src/main/scala/rocket/Frontend.scala	/^  val wrong_path = RegInit(false.B)$/;"	l
wtypeTag	src/main/scala/tile/FPU.scala	/^  val wtypeTag = Mux(divSqrt_wen, divSqrt_typeTag, wbInfo(0).typeTag)$/;"	l
wvalid	src/main/scala/regmapper/Test.scala	/^    val wvalid = Bool(INPUT)$/;"	l
wvalid	src/main/scala/rocket/Breakpoint.scala	/^  val wvalid = Vec(n, Bool())$/;"	l
wway_en	src/main/scala/rocket/NBDcache.scala	/^      val wway_en = io.write.bits.way_en(w+rowWords-1,w)$/;"	l
wxd	src/main/scala/rocket/IDecode.scala	/^  val wxd = Bool()$/;"	l
wxd	src/main/scala/rocket/RocketCore.scala	/^    val wxd = wb_ctrl.wxd$/;"	l
x	src/main/scala/diplomacy/BundleBridge.scala	/^    val x = seq.reduce((a,b) => (a.asUInt | b.asUInt).asTypeOf(seq.head))$/;"	l
x	src/main/scala/diplomacy/Nodes.scala	/^    val x = this \/\/ x := y$/;"	l
x	src/main/scala/diplomacy/package.scala	/^    def x(args: Any*): BigInt = {$/;"	m
x	src/main/scala/regmapper/Test.scala	/^    def x(bits: Int) = {$/;"	m
x	src/main/scala/rocket/Breakpoint.scala	/^    val x = en && bp.control.x && bp.addressMatch(io.pc) && cx$/;"	l
x	src/main/scala/rocket/Breakpoint.scala	/^  val x = Bool()$/;"	l
x	src/main/scala/rocket/PMP.scala	/^    val x = Output(Bool())$/;"	l
x	src/main/scala/rocket/PMP.scala	/^  val x = Bool()$/;"	l
x	src/main/scala/rocket/PTW.scala	/^  val x = Bool()$/;"	l
x	src/main/scala/util/package.scala	/^        val x = Input(in)$/;"	l
x0	src/main/scala/rocket/RVC.scala	/^  def x0 = 0.U(5.W)$/;"	m
xBytes	src/main/scala/tile/BaseTile.scala	/^  def xBytes: Int = xLen \/ 8$/;"	m
xLen	src/main/scala/tile/BaseTile.scala	/^  def xLen: Int = p(XLen)$/;"	m
xLen	src/main/scala/tile/FPU.scala	/^  def xLen: Int$/;"	m
xType	src/main/scala/tilelink/BusWrapper.scala	/^  val xType: ClockCrossingType$/;"	l
x_array	src/main/scala/rocket/TLB.scala	/^  val x_array = Cat(true.B, (priv_x_ok & entries.map(_.sx).asUInt) | stage1_bypass)$/;"	l
xbar	src/main/scala/amba/ahb/Test.scala	/^  val xbar  = LazyModule(new AHBFanout)$/;"	l
xbar	src/main/scala/amba/apb/Test.scala	/^  val xbar  = LazyModule(new APBFanout)$/;"	l
xbar	src/main/scala/amba/axi4/Test.scala	/^  val xbar  = LazyModule(new TLXbar)$/;"	l
xbar	src/main/scala/amba/axi4/Test.scala	/^  val xbar = LazyModule(new TLXbar)$/;"	l
xbar	src/main/scala/amba/axi4/Xbar.scala	/^  val xbar = AXI4Xbar()$/;"	l
xbar	src/main/scala/amba/axis/Xbar.scala	/^    val xbar = LazyModule(new AXISXbar(beatBytes, policy))$/;"	l
xbar	src/main/scala/interrupts/Xbar.scala	/^    val xbar = LazyModule(new IntXbar)$/;"	l
xbar	src/main/scala/system/SimAXIMem.scala	/^  val xbar = AXI4Xbar()$/;"	l
xbar	src/main/scala/tilelink/Fuzzer.scala	/^  val xbar = LazyModule(new TLXbar)$/;"	l
xbar	src/main/scala/tilelink/HintHandler.scala	/^  val xbar  = LazyModule(new TLXbar)$/;"	l
xbar	src/main/scala/tilelink/Xbar.scala	/^    val xbar = LazyModule(new TLXbar(policy))$/;"	l
xbar	src/main/scala/tilelink/Xbar.scala	/^    val xbar = LazyModule(new TLXbar_ACancel(policy))$/;"	l
xbar	src/main/scala/tilelink/Xbar.scala	/^  val xbar = LazyModule(new TLXbar)$/;"	l
xbar2	src/main/scala/tilelink/Fuzzer.scala	/^  val xbar2= LazyModule(new TLXbar)$/;"	l
xcpt	src/main/scala/rocket/Frontend.scala	/^  val xcpt = new FrontendExceptions$/;"	l
xcpt	src/main/scala/rocket/IBuf.scala	/^  val xcpt = (0 until bufMask.getWidth).map(i => Mux(bufMask(i), buf.xcpt, io.imem.bits.xcpt))$/;"	l
xcpt0	src/main/scala/rocket/IBuf.scala	/^  val xcpt0 = new FrontendExceptions \/\/ exceptions on first half of instruction$/;"	l
xcpt1	src/main/scala/rocket/IBuf.scala	/^  val xcpt1 = new FrontendExceptions \/\/ exceptions on second half of instruction$/;"	l
xcpt_if	src/main/scala/rocket/Breakpoint.scala	/^    val xcpt_if  = Output(Bool())$/;"	l
xcpt_ld	src/main/scala/rocket/Breakpoint.scala	/^    val xcpt_ld  = Output(Bool())$/;"	l
xcpt_st	src/main/scala/rocket/Breakpoint.scala	/^    val xcpt_st  = Output(Bool())$/;"	l
xd	src/main/scala/tile/LazyRoCC.scala	/^  val xd = Bool()$/;"	l
xdebugver	src/main/scala/rocket/CSR.scala	/^  val xdebugver = UInt(width = 2)$/;"	l
xfer	src/main/scala/devices/tilelink/DevNull.scala	/^  val xfer = if (params.maxTransfer > 0) TransferSizes(1, params.maxTransfer) else TransferSizes.none$/;"	l
xferSizes	src/main/scala/rocket/TLBPermissions.scala	/^    val xferSizes = TransferSizes(cacheBlockBytes, cacheBlockBytes)$/;"	l
xfn	src/main/scala/rocket/TLBPermissions.scala	/^    val xfn = lowCostProperty(_.x)$/;"	l
xhi	src/main/scala/util/LanePositionedQueue.scala	/^    val xhi = x >= lanes.U$/;"	l
xlen	scripts/RocketSim32.py	/^    xlen = 32$/;"	v	class:RocketSimHart
xlen	scripts/RocketSim64.py	/^    xlen = 64$/;"	v	class:RocketSimHart
xlen	src/main/scala/stage/phases/AddDefaultTests.scala	/^    val xlen = params(XLen)$/;"	l
xlen	src/main/scala/util/TraceCoreInterface.scala	/^  val xlen: Int = 32,$/;"	l
xlo	src/main/scala/util/LanePositionedQueue.scala	/^    val xlo = if (lanes==1) 0.U else x(log2Ceil(lanes)-1, 0)$/;"	l
xly	src/main/scala/util/LanePositionedQueue.scala	/^    val xly = xlo <= ylo$/;"	l
xor	src/main/scala/tilelink/Fuzzer.scala	/^    val xor = lfsr(0) ^ lfsr(1) ^ lfsr(3) ^ lfsr(4)$/;"	l
xorR	src/main/scala/util/package.scala	/^    def xorR: Bool = if (x.isEmpty) false.B else x.reduce(_^_)$/;"	m
xrfWriteBundle	src/main/scala/rocket/RocketCore.scala	/^  val xrfWriteBundle = Wire(new CoreMonitorBundle(xLen, fLen))$/;"	l
xs	src/main/scala/rocket/CSR.scala	/^  val xs = UInt(width = 2)$/;"	l
xs1	src/main/scala/tile/LazyRoCC.scala	/^  val xs1 = Bool()$/;"	l
xs2	src/main/scala/tile/LazyRoCC.scala	/^  val xs2 = Bool()$/;"	l
y	src/main/scala/diplomacy/Nodes.scala	/^    val y = h$/;"	l
y	src/main/scala/subsystem/HasTiles.scala	/^      val y = dontTouch(prefix | hartIdList(i).U(p(MaxHartIdBits).W)) \/\/ dontTouch to keep constant prop from breaking tile dedup$/;"	l
y	src/main/scala/util/package.scala	/^        val y = Output(in)$/;"	l
yhi	src/main/scala/util/LanePositionedQueue.scala	/^    val yhi = y >= lanes.U$/;"	l
ylo	src/main/scala/util/LanePositionedQueue.scala	/^    val ylo = if (lanes==1) 0.U else y(log2Ceil(lanes)-1, 0)$/;"	l
z	src/main/scala/util/LanePositionedQueue.scala	/^      val z = out +& add$/;"	l
z	src/main/scala/util/package.scala	/^      val z = x +& y$/;"	l
z	src/main/scala/util/package.scala	/^      val z = x -& y$/;"	l
zero	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^      val zero = LazyModule(new TLZero($/;"	l
zero	src/main/scala/rocket/Breakpoint.scala	/^  val zero = UInt(2.W)$/;"	l
zero	src/main/scala/tile/FPU.scala	/^    val zero = (io.in.bits.in1 ^ io.in.bits.in2) & (UInt(1) << (t.sig + t.exp))$/;"	l
zero1	src/main/scala/rocket/CSR.scala	/^  val zero1 = Bool()$/;"	l
zero1	src/main/scala/rocket/CSR.scala	/^  val zero1 = UInt(3.W)$/;"	l
zero1	src/main/scala/rocket/CSR.scala	/^  val zero1 = UInt(width = 2)$/;"	l
zero1	src/main/scala/rocket/CSR.scala	/^  val zero1 = UInt(width = 5)$/;"	l
zero1	src/main/scala/rocket/CSR.scala	/^  val zero1 = UInt(width = 8)$/;"	l
zero2	src/main/scala/rocket/CSR.scala	/^  val zero2 = Bool()$/;"	l
zero2	src/main/scala/rocket/CSR.scala	/^  val zero2 = UInt(3.W)$/;"	l
zero2	src/main/scala/rocket/CSR.scala	/^  val zero2 = UInt(width = 2)$/;"	l
zero2	src/main/scala/rocket/CSR.scala	/^  val zero2 = UInt(width = 23)$/;"	l
zero3	src/main/scala/rocket/CSR.scala	/^  val zero3 = UInt(3.W)$/;"	l
zero3	src/main/scala/rocket/CSR.scala	/^  val zero3 = UInt(width = 12)$/;"	l
zero3	src/main/scala/rocket/CSR.scala	/^  val zero3 = UInt(width = 2)$/;"	l
zero4	src/main/scala/rocket/CSR.scala	/^  val zero4 = UInt(width=2)$/;"	l
zero5	src/main/scala/rocket/CSR.scala	/^  val zero5 = UInt(width = 9)$/;"	l
zero6	src/main/scala/rocket/CSR.scala	/^  val zero6 = UInt(width = 30)$/;"	l
zeroDevice	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^  val zeroDevice: Option[BuiltInZeroDeviceParams]$/;"	l
zeroOpt	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^    val zeroOpt = None$/;"	l
zeroOpt	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^    val zeroOpt = params.zeroDevice.map { zeroParams => LazyScope("wrapped_zero_device", "ZeroDeviceWrapper") {$/;"	l
zeroOpt	src/main/scala/devices/tilelink/CanHaveBuiltInDevices.scala	/^  def zeroOpt: Option[TLZero]$/;"	m
zeroPadded	src/main/scala/rocket/Events.scala	/^    val zeroPadded = sets.padTo(1 << eventSetIdBits, 0.U)$/;"	l
zero_found	src/main/scala/tile/LazyRoCC.scala	/^  val zero_found = zero_match.reduce(_ || _)$/;"	l
zero_match	src/main/scala/tile/LazyRoCC.scala	/^  val zero_match = data_bytes.map(_ === 0.U)$/;"	l
zeroed	src/main/scala/rocket/AMOALU.scala	/^      val zeroed = Mux(doZero, UInt(0), shifted)$/;"	l
~VerilatedVcdFILE	src/main/resources/csrc/verilator.h	/^  ~VerilatedVcdFILE() {}$/;"	f	class:VerilatedVcdFILE
